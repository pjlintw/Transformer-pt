PHP Manual
Prev
Appendix K.
About the manual
Next
This manual is written in XML using the DocBook XML DTD, using DSSSL (Document Style and Semantics Specification Language) for formatting, and experimentally the XSLT (Extensible Stylesheet Language Transformations) for maintenance and formatting.
Using XML as a source format gives us the ability to generate many output formats from the source files, while only maintaining one source document for all formats.
The tools used for formatting HTML and TeX versions are Jade, written by James Clark and The Modular DocBook Stylesheets written by Norman Walsh.
We use Microsoft HTML Help Workshop to generate the Windows HTML Help format of the manual, and of course PHP itself to do some additional conversions and formatting.
You can download the manual in various languages and formats, including plain text, plain HTML, PDF, PalmPilot DOC, PalmPilot iSilo and Windows HTML Help, from http: / /www.php.net / docs.php.
The manuals are updated automatically as the text is updated.
You can find more information about downloading the XML source code of this documentation at http: / /cvs.php.net /.
The documentation is stored in the phpdoc module.
Prev
Home
Next
How to help improve the documentation
Up
Translations
PHP Manual
Prev
Appendix K.
About the manual
Next
There are three ways you can help to improve this documentation.
If you find errors in this manual, in any language, please report them using the bug system at http: / /bugs.php.net /.
Classify the bug as "Documentation Problem".
You can also submit problems related to specific manual formats here.
Note:
Please don 't abuse the bug system by submitting requests for help.
Use the mailing lists or community sites mentioned earlier, instead.
By contributing notes, you can provide additional examples, caveats, and clarifications for other readers.
But do not submit bug reports using the annotation system please.
You can read more about annotations in the 'About user notes' section of this appendix.
If you know English and some foreign language, you may also help out in the translations.
If you would like to start a new translation, or help in a translation project, please read http: / /cvs.php.net / co.php / phpdoc / howto / howto.html.tar.gz.
Prev
Home
Next
How to find more information about PHP
Up
How we generate the formats
PHP Manual
Prev
Next
The PHP manual is provided in several formats.
These formats can be divided into two groups: online readable formats, and downloadable packages.
Note:
Some publishers have made available printed versions of this manual.
We cannot recommend any of those, as they tend to become out-of-date very quickly.
You can read the manual online at http: / /www.php.net / You can read the manual online at http: / /www.php.net / and on the numerous mirror sites.
For best performance, you should choose the mirror site closest to you.
You can view the manual in either its plain (print-friendly) HTML format or an HTML format that integrates the manual into the look and feel of the PHP website itself.
An advantage of the online manual over most of the offline formats is the integration of user-contributed notes.
An obvious disadvantage is that you have to be online to view the manual in the online formats.
There are several offline formats of the manual, and the most appropriate format for you depends on what operating system you use and your personal reading style.
For information on how the manual is generated in so many formats, read the 'How we generate the formats' section of this appendix.
The most cross-platform formats of the manual are the HTML and plain-text versions.
The HTML format is provided both as a single HTML file and as a package of individual files for each section (which results in a collection of several thousand files).
The HTML and plaintext formats are provided as tar files compressed using the bzip2 archiver.
Another popular cross-platform format, and the format most suited to printing, is PDF (also known as Adobe Acrobat).
But before you rush to download this format and hit the Print button, be warned that the manual is nearly 2000 pages long, and constantly being revised.
Note:
If you do not already have a program capable of viewing PDF format files, you may need to download Adobe Acrobat Reader.
For owners of Palm-compatible handhelds, the Palm document and iSilo formats are ideal for this platform.
You can bring your handheld with you on your daily commute and use a DOC or iSilo reader to brush up on your PHP knowledge, or just use it as a quick reference.
For Windows platforms, the Windows HTML Help version of the manual soups up the HTML format for use with the Windows HTML Help application.
This version provides full-text search, a full index, and bookmarking.
Many popular Windows PHP development environments also integrate with this version of the documentation to provide easy access.
Prev
Home
Next
Up
About user notes
PHP Manual
Prev
Appendix K.
About the manual
Next
This manual does not attempt to provide instruction about general programming practices.
If you are a first-time, or even just a beginning, programmer, you may find it difficult to learn how to program in PHP using just this manual.
You may want to seek out a text more oriented towards beginners.
You can find a list of PHP-related books at http: / /www.php.net / books.php.
There are a number of active mailing lists for discussion of all aspects of programming with PHP.
If you find yourself stuck on a problem for which you can 't find your own solution, you may be able to get help from someone on these lists.
You can find a list of the mailing lists at http: / /www.php.net / support.php, as well as links to the mailing list archives and other online support resources.
Furthermore, at http: / /www.php.net / links.php there is a list of websites devoted to PHP articles, forums, and code galleries.
Prev
Home
Next
PHP versions documented in this manual
Up
How to help improve the documentation
PHP Manual
Prev
Appendix K.
About the manual
Next
The user-contributed notes play an important role in the development of this manual.
And until the notes have been incorporated, they can be viewed in their submitted form online and in some of the offline formats.
The user-contributed notes are not moderated before they appear online, so the quality of the writing or code examples, and even the veracity of the contribution, cannot be guaranteed. (Not that there is any guarantee of the quality or accuracy of the manual text itself.)
Note:
For more details see the Manual 's Copyright page.
Prev
Home
Next
About the manual
Up
How to read a function definition (prototype)
PHP Manual
Prev
Appendix K.
About the manual
Next
The PHP manual is not only available in various formats, it is also available in various languages.
The text of the manual is first written in english, then teams of people across the world take care of translating it to their native language.
If a translation for a specified function or chapter has not yet been made, the build system of the manual falls back to the english version of it.
Peoples involved in the translations start from the XML source code available from http: / /cvs.php.net / and from it they translate to thier mother language.
They do not use the HTML, the plain text, or the PDF version.
It is the build system which takes care of the conversions from XML to human readable formats.
Note:
If you would like to help translating the documentation to your native language, please get in touch with the translation / documentation team subscribing to the phpdoc mailinglist: send an empty mail to phpdoc-subscribe@lists.php.net.
The mailing list address is phpdoc@lists.php.net.
State in the message that you are interested in translating the manual to a language and someone will get back to you, helping you start a new language translation or reach the already active documentation team for your language.
At the moment the manual is available, partly or not, in the following languages:
Brazilian Portuguese, Chinese, Czech, Dutch, French, German, Hungarian, Italian, Japanese, Korean, Polish and Spanish.
They all can be downloaded here: http: / /www.php.net / docs.php.
Prev
Home
Next
How we generate the formats
Up
Missing Stuff
PHP Manual
Prev
Next
Here is the aliases list.
All aliases are listed here.
It is usually a bad idea to use aliases, as they may be bound to obsolescence or renaming, which will lead to unportable script.
This list is provided to help those who want to upgrade their old scripts to newer syntax.
However, some functions simply have two names, and there is no real preference. (For example, is_int() and is_integer() are equally good)
This list is consistent with PHP 4.0.6.
For an alias list that updates daily, have a look here.
Table F-1.
Aliases
Master function
Extension used
Prev
Home
Next
Up
List of Reserved Words
PHP Manual
Prev
Next
Prev
Home
Next
Miscellaneous Questions
History of PHP and related projects
PHP Manual
Prev
Appendix E.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The COM class provides a framework to integrate (D )COM components into your php scripts.
COM class constructor.
Parameters:
name or class-id of the requested component.
name of the DCOM server from which the component should be fetched.
If NULL, localhost is assumed.
To allow DCOM com.allow_dcom has to be set to TRUE in php.ini.
specifies the codepage that is used to convert php-strings to unicode-strings and vice versa.
Possible values are CP_ACP, CP_MACCP, CP_OEMCP, CP_SYMBOL, CP_THREAD_ACP, CP_UTF7 and CP_UTF8.
Example 1.
COM example (1)
/ / starting word $word = new COM( "word.application") or die("Unable to instanciate Word"); print "Loaded Word, version {$word - Version}\n"; / /bring it to front $word - Visible = 1; / /open an empty document $word - Documents - Add(); / /do some weird stuff $word - Selection - TypeText("This is a test.. ."); $word - Documents[1] - SaveAs("Useless test.doc"); / /closing word $word - Quit(); / /free the object $word - Release(); $word = null;
Example 2.
Prev
Home
Next
COM support functions for Windows
Up
PHP Manual
Prev
Next
A pseudo-object oriented mechanism for reading a directory.
Two properties are available once the directory has been opened.
The handle property can be used with other directory functions such as readdir(), rewinddir() and closedir().
Three methods are available: read, rewind and close.
We are explicitly testing whether the return value is identical to (equal to and of the same type as--see Comparison Operators for more information) FALSE since otherwise, any directory entry whose name evaluates to FALSE will stop the loop.
$d = dir( "/ etc"); echo "Handle: ".$d - handle." br \n"; echo "Path: ".$d - path. "br \n"; while (false !== ($entry = $d - read())) {echo $entry." br \n";} $d - close();
The order in which directory entries are returned by the read method is system-dependent.
Note:
For a full list of predefined classes in PHP, please see Predefined Classes.
Prev
Home
Next
Up
PHP Manual
Prev
Next
A simple container to wrap variables into VARIANT structures.
VARIANT class constructor.
Parameters:
initial value. if omitted an VT_EMPTY object is created.
specifies the content type of the VARIANT object.
Possible values are VT_UI1, VT_UI2, VT_UI4, VT_I1, VT_I2, VT_I4, VT_R4, VT_R8, VT_INT, VT_UINT, VT_BOOL, VT_ERROR, VT_CY, VT_DATE, VT_BSTR, VT_DECIMAL, VT_UNKNOWN, VT_DISPATCH and VT_VARIANT.
These values are mutual exclusive, but they can be combined with VT_BYREF to specify being a value.
If omitted, the type of value is used.
Consult the msdn library for additional information.
specifies the codepage that is used to convert php-strings to unicode-strings and vice versa.
Possible values are CP_ACP, CP_MACCP, CP_OEMCP, CP_SYMBOL, CP_THREAD_ACP, CP_UTF7 and CP_UTF8.
Prev
Home
Next
COM
Up
PHP Manual
Prev
Next
The configuration file (called php3.ini in PHP 3.0, and simply php.ini as of PHP 4.0) is read when PHP starts up.
For the server module versions of PHP, this happens only once when the web server is started.
For the CGI and CLI version, it happens on every invocation.
The default location of php.ini is a compile time option (see the FAQ entry), but can be changed for the CGI and CLI version with the -c command line switch, see the chapter about using PHP from the command line.
You can also use the environment variable PHPRC for an additional path to search for a php.ini file.
Not every PHP directive is documented below.
For a list of all directives, please read your well commented php.ini file.
You may want to view the latest php.ini here from CVS.
Note:
The default value for the PHP directive register_globals changed from on to off in PHP 4.2.0.
Example 4-1. php.ini example
; any text on a line after an unquoted semicolon (;) is ignored [php]; section markers (text within square brackets) are also ignored; Boolean values can be set to either:; true, on, yes; or false, off, no, none register_globals = off magic_quotes_gpc = yes; you can enclose strings in double-quotes include_path = ".: / usr / local / lib / php "; backslashes are treated the same as any other character include_path = ".;c:\php\lib"
Prev
Home
Next
Complete list of configure options
Up
How to change configuration settings
PHP Manual
Prev
Chapter 12.
Control Structures
Next
PHP offers an alternative syntax for some of its control structures; namely, if, while, for, foreach, and switch.
In each case, the basic form of the alternate syntax is to change the opening brace to a colon (:) and the closing brace to endif;, endwhile;, endfor;, endforeach;, or endswitch;, respectively.
A is equal to 5 ?php endif;?
In the above example, the HTML block "A is equal to 5" is nested within an if statement written in the alternative syntax.
The HTML block would be displayed only if $a is equal to 5.
The alternative syntax applies to else and elseif as well.
The following is an if structure with elseif and else in the alternative format:
if ($a == 5): print "a equals 5"; print ".. ."; elseif ($a == 6): print "a equals 6"; print "!! !"; else: print "a is neither 5 nor 6"; endif;
See also while, for, and if for further examples.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
break ends execution of the current for, foreach while, do..while or switch structure.
break accepts an optional numeric argument which tells it how many nested enclosing structures are to be broken out of.
$arr = array ('one', 'two', 'three', 'four', 'stop', 'five'); while (list (, $val) = each ($arr)) {if ($val == 'stop') {break; / * You could also write'break 1; 'here. * /} echo "$val br \n";} / * Using the optional argument. * / $i = 0; while (++$i) {switch ($i) {case 5: echo "At 5 br \n"; break 1; / * Exit only the switch. * / case 10: echo "At 10; quitting br \n"; break 2; / * Exit the switch and the while. * / default: break;}}
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
continue is used within looping structures to skip the rest of the current loop iteration and continue execution at the beginning of the next iteration.
continue accepts an optional numeric argument which tells it how many levels of enclosing loops it should skip to the end of.
while (list ($key, $value) = each ($arr)) {if (!($key% 2)) {/ / skip odd members continue;} do_something_odd ($value);} $i = 0; while ($i+ + 5) {echo "Outer br \n"; while (1) {echo "nbsp; nbsp;Middle br \n"; while (1) {echo" nbsp; nbsp;Inner br \n"; continue 3;} echo "This never gets output. br \n";} echo "Neither does this. br \n";}
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The declare construct is used to set execution directives for a block of code.
The syntax of declare is similar to the syntax of other flow control constructs:
declare (directive) statement
The directive section allows the behavior of the declare block to be set.
Currently only one directive is recognized: the ticks directive. (See below for more information on the ticks directive)
The statement part of the declare block will be executed - - how it is executed and what side effects occur during execution may depend on the directive set in the directive block.
A tick is an event that occurs for every N low-level statements executed by the parser within the declare A tick is an event that occurs for every N low-level statements executed by the parser within the declare block.
The value for N is specified using ticks= N within the declare blocks' s directive section.
The event( s) that occur on each tick are specified using the register_tick_function().
See the example below for more details.
Note that more than one event can occur for each tick.
Example 12-1.
Profile a section of PHP code
?php / / A function that records the time when it is called function profile ($dump = FALSE) {static $profile; / / Return the times stored in profile, then erase it if ($dump) {$temp = $profile; unset ($profile); return ($temp);} $profile[] = microtime ();} / / Set up a tick handler register_tick_function("profile"); / / Initialize the function before the declare block profile (); / / Run a block of code, throw a tick every 2nd statement declare (ticks=2) {for ($x = 1; $x 50; ++$x) {echo similar_text (md5($x), md5($x*$x)), "br / ;";}} / / Display the data stored in the profiler print_r (profile (TRUE));?
Ticks are well suited for debugging, implementing simple multitasking, backgrounded I / O and many other tasks.
See also register_tick_function() and unregister_tick_function().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
do..while loops are very similar to while loops, except the truth expression is checked at the end of each iteration instead of in the beginning.
The main difference from regular while loops is that the first iteration of a do..while loop is guaranteed to run (the truth expression is only checked at the end of the iteration), whereas it's may not necessarily run with a regular while loop (the truth expression is checked at the beginning of each iteration, if it evaluates to FALSE right from the beginning, the loop execution would end immediately).
There is just one syntax for do..while loops:
The above loop would run one time exactly, since after the first iteration, when truth expression is checked, it evaluates to FALSE ($i is not bigger than 0) and the loop execution ends.
Advanced C users may be familiar with a different usage of the do..while loop, to allow stopping execution in the middle of code blocks, by encapsulating them with do..while (0), and using the break statement.
The following code fragment demonstrates this:
do {if ($i 5) {print "i is not big enough"; break;} $i *= $factor; if ($i $minimum_limit) {break;} print "i is ok"; ...process i...} while(0);
Don' t worry if you don't understand this right away or at all.
You can code scripts and even powerful scripts without using this' feature '.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
Often you 'd want to execute a statement if a certain condition is met, and a different statement if the condition is not met.
This is what else is for. else extends an if statement to execute a statement in case the expression in the if statement evaluates to FALSE.
For example, the following code would display a is bigger than b if $a is bigger than $b, and a is NOT bigger than b otherwise:
if ($a $b) {print "a is bigger than b";} else {print "a is NOT bigger than b";}
Prev
Home
Next
Control Structures
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
elseif, as its name suggests, is a combination of if and else.
Like else, it extends an if statement to execute a different statement in case the original if expression evaluates to FALSE.
However, unlike else, it will execute that alternative expression only if the elseif conditional expression evaluates to TRUE.
For example, the following code would display a is bigger than b, a equal to b or a is smaller than b:
if ($a $b) {print "a is bigger than b";} elseif ($a == $b) {print "a is equal to b";} else {print "a is smaller than b";}
There may be several elseif s within the same if statement.
The first elseif expression (if any) that evaluates to TRUE would be executed.
In PHP, you can also write 'else if' (in two words) and the behavior would be identical to the one of'elseif '(in a single word).
The syntactic meaning is slightly different (if you're familiar with C, this is the same behavior) but the bottom line is that both would result in exactly the same behavior.
The elseif statement is only executed if the preceding if expression and any preceding elseif expressions evaluated to FALSE, and the current elseif expression evaluated to TRUE.
Prev
Home
Next
Up
Alternative syntax for control structures
PHP Manual
Prev
Chapter 12.
Control Structures
Next
PHP 4 (not PHP 3) includes a foreach construct, much like Perl and some other languages.
This simply gives an easy way to iterate over arrays. foreach works only on arrays, and will issue an error when you try to use it on a variable with a different data type or an uninitialized variables.
There are two syntaxes; the second is a minor but useful extension of the first:
foreach( array_expression as $value) statement foreach(array_expression as $key = $value) statement
The first form loops over the array given by array_expression.
On each loop, the value of the current element is assigned to $value and the internal array pointer is advanced by one (so on the next loop, you'll be looking at the next element).
The second form does the same thing, except that the current element 's key will be assigned to the variable $key on each loop.
Note:
When foreach first starts executing, the internal array pointer is automatically reset to the first element of the array.
This means that you do not need to call reset() before a foreach loop.
Note:
Also note that foreach operates on a copy of the specified array, not the array itself, therefore the array pointer is not modified as with the each() construct and changes to the array element returned are not reflected in the original array.
However, the internal pointer of the original array is advanced with the processing of the array.
Assuming the foreach loop runs to completion, the array 's internal pointer will be at the end of the array.
You may have noticed that the following are functionally identical:
reset ($arr); while (list(, $value) = each ($arr)) {echo "Value: $value br \n";} foreach ($arr as $value) {echo "Value: $value br \n";}
reset ($arr); while (list($key, $value) = each ($arr)) {echo "Key: $key; Value: $value br \n";} foreach ($arr as $key = $value) {echo "Key: $key; Value: $value br \n";}
Some more examples to demonstrate usages:
/* foreach example 1: value only * / $a = array (1, 2, 3, 17); foreach ($a as $v) {print "Current value of \$a: $v.\n";} / * foreach example 2: value (with key printed for illustration) * / $a = array (1, 2, 3, 17); $i = 0; / * for illustrative purposes only * / foreach($a as $v) {print "\$a[$i] = $v.\n"; $i++;} / * foreach example 3: key and value * / $a = array ("one "= 1, "two" = 2, "three "= 3, "seventeen" = 17); foreach($a as $k = $v) {print "\$a[$k] = $v.\n";} / * foreach example 4: multi-dimensional arrays * / $a[0][0] = "a"; $a[0][1] = "b"; $a[1][0] = "y"; $a[1][1] = "z"; foreach($a as $v1) {foreach ($v1 as $v2) {print "$v2\n";}} / * foreach example 5: dynamic arrays * / foreach(array(1, 2, 3, 4, 5) as $v) {print "$v\n";}
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
for loops are the most complex loops in PHP.
They behave like their C counterparts.
The syntax of a for loop is:
for (expr1; expr2; expr3) statement
The first expression (expr1) is evaluated (executed) once unconditionally at the beginning of the loop.
In the beginning of each iteration, expr2 is evaluated.
If it evaluates to TRUE, the loop continues and the nested statement( s) are executed.
If it evaluates to FALSE, the execution of the loop ends.
At the end of each iteration, expr3 is evaluated (executed).
Each of the expressions can be empty. expr2 being empty means the loop should be run indefinitely (PHP implicitly considers it as TRUE, like C).
This may not be as useless as you might think, since often you 'd want to end the loop using a conditional break statement instead of using the for truth expression.
Consider the following examples.
All of them display numbers from 1 to 10:
/* example 1 * / for ($i = 1; $i = 10; $i++) {print $i;} / * example 2 * / for ($i = 1;;$i++) {if ($i 10) {break;} print $i;} / * example 3 * / $i = 1; for (;;) {if ($i 10) {break;} print $i; $i++;} / * example 4 * / for ($i = 1; $i = 10; print $i, $i++);
Of course, the first example appears to be the nicest one (or perhaps the fourth), but you may find that being able to use empty expressions in for loops comes in handy in many occasions.
PHP also supports the alternate "colon syntax" for for loops.
for (expr1; expr2; expr3): statement;...; endfor;
Other languages have a foreach Other languages have a foreach statement to traverse an array or hash.
PHP 3 has no such construct; PHP 4 does (see foreach).
In PHP 3, you can combine while with the list() and each() functions to achieve the same effect.
See the documentation for these functions for an example.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Any PHP script is built out of a series of statements.
A statement can be an assignment, a function call, a loop, a conditional statement of even a statement that does nothing (an empty statement).
Statements usually end with a semicolon.
In addition, statements can be grouped into a statement-group by encapsulating a group of statements with curly braces.
A statement-group is a statement by itself as well.
The various statement types are described in this chapter.
The if construct is one of the most important features of many languages, PHP included.
It allows for conditional execution of code fragments.
PHP features an if structure that is similar to that of C:
if (expr) statement
As described in the section about expressions, expr is evaluated to its Boolean value.
If expr evaluates to TRUE, PHP will execute statement, and if it evaluates to FALSE - it 'll ignore it.
More information about what values evaluate to FALSE can be found in the 'Converting to boolean' section.
The following example would display a is bigger than b if $a is bigger than $b:
if ($a $b) print "a is bigger than b";
Often you 'd want to have more than one statement to be executed conditionally.
Of course, there 's no need to wrap each statement with an if clause.
Instead, you can group several statements into a statement group.
For example, this code would display a is bigger than b if $a is bigger than $b, and would then assign the value of $a into $b:
if ($a $b) {print "a is bigger than b"; $b = $a;}
If statements can be nested indefinitely within other if statements, which provides you with complete flexibility for conditional execution of the various parts of your program.
Prev
Home
Next
Array Operators
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The switch statement is similar to a series of IF statements on the same expression.
In many occasions, you may want to compare the same variable (or expression) with many different values, and execute a different piece of code depending on which value it equals to.
This is exactly what the switch statement is for.
The following two examples are two different ways to write the same thing, one using a series of if statements, and the other using the switch statement:
if ($i == 0) {print "i equals 0";} if ($i == 1) {print "i equals 1";} if ($i == 2) {print "i equals 2";} switch ($i) {case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break;}
It is important to understand how the switch statement is executed in order to avoid mistakes.
The switch statement executes line by line (actually, statement by statement).
In the beginning, no code is executed.
Only when a case statement is found with a value that matches the value of the switch Only when a case statement is found with a value that matches the value of the switch expression does PHP begin to execute the statements.
PHP continues to execute the statements until the end of the switch block, or the first time it sees a break statement.
If you don' t write a break statement at the end of a case's statement list, PHP will go on executing the statements of the following case.
For example:
switch ($i) {case 0: print "i equals 0"; case 1: print "i equals 1"; case 2: print "i equals 2";}
Here, if $i is equal to 0, PHP would execute all of the print statements!
You would get the expected behavior ('i equals 2 'would be displayed) only if $i is equal to 2.
Thus, it is important not to forget break statements (even though you may want to avoid supplying them on purpose under certain circumstances).
In a switch statement, the condition is evaluated only once and the result is compared to each case statement.
In an elseif statement, the condition is evaluated again.
If your condition is more complicated than a simple compare and / or is in a tight loop, a switch may be faster.
The statement list for a case can also be empty, which simply passes control into the statement list for the next case.
switch ($i) {case 0: case 1: case 2: print "i is less than 3 but not negative"; break; case 3: print "i is 3";}
A special case is the default case.
This case matches anything that wasn 't matched by the other cases, and should be the last case statement.
For example:
switch ($i) {case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break; default: print "i is not equal to 0, 1 or 2";}
The case expression may be any expression that evaluates to a simple type, that is, integer or floating-point numbers and strings.
Arrays or objects cannot be used here unless they are dereferenced to a simple type.
The alternative syntax for control structures is supported with switches.
For more information, see Alternative syntax for control structures.
switch ($i): case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break; default: print "i is not equal to 0, 1 or 2"; endswitch;
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
while loops are the simplest type of loop in PHP.
They behave just like their C counterparts.
The basic form of a while statement is:
while (expr) statement
The meaning of a while The meaning of a while statement is simple.
It tells PHP to execute the nested statement( s) repeatedly, as long as the while expression evaluates to TRUE.
The value of the expression is checked each time at the beginning of the loop, so even if this value changes during the execution of the nested statement( s), execution will not stop until the end of the iteration (each time PHP runs the statements in the loop is one iteration).
Sometimes, if the while expression evaluates to FALSE from the very beginning, the nested statement( s) won't even be run once.
Like with the if statement, you can group multiple statements within the same while loop by surrounding a group of statements with curly braces, or by using the alternate syntax:
while (expr): statement... endwhile;
The following examples are identical, and both print numbers from 1 to 10:
/* example 1 * / $i = 1; while ($i = 10) {print $i++; / * the printed value would be $i before the increment (post-increment) * /} / * example 2 * / $i = 1; while ($i = 10): print $i; $i++; endwhile;
Prev
Home
Next
Alternative syntax for control structures
Up
PHP Manual
This manual is © Copyright 1997 - 2003 by the PHP Documentation Group.
The members of this group are listed on the front page of this manual.
This manual can be redistributed under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
The 'Extending PHP 4.0' section of this manual is copyright © 2000 by Zend Technologies, Ltd.
This material may be distributed only subject to the terms and conditions set forth in the Open Publication License, v1.0 or later (the latest version is presently available at http: / /www.opencontent.org / openpub /).
Home
PHP Manual
Prev
Next
PHP 3 includes support for a network-based debugger.
PHP 4 does not have an internal debugging facility.
You can use one of the external debuggers though.
The Zend IDE includes a debugger, and there are also some free debugger extensions like DBG at http: / /dd.cron.ru / dbg /, the Advanced PHP Debugger (APD) or Xdebug which even has a compatible debugger interface as PHP 3's debugging functionality as is described in this section.
Prev
Home
Next
Other incompatibilities
Up
Using the Debugger
PHP Manual
Prev
Appendix D.
Debugging PHP
Next
The PHP 3 debugger protocol is line-based.
Each line has a type, and several lines compose a message.
Each message starts with a line of the type start and terminates with a line of the type end.
PHP 3 may send lines for different messages simultaneously.
A line has this format:
Date in ISO 8601 format (yyyy - mm - dd)
Time including microseconds: hh: mm: uuuuuu
DNS name or IP address of the host where the script error was generated.
PID (process id) on host of the process with the PHP 3 script that generated this error.
Type of line.
Tells the receiving program about what it should treat the following data as:
Table D-1.
Debugger Line Types
Meaning
Tells the receiving program that a debugger message starts here.
The contents of data will be the type of error message, listed below.
The PHP 3 error message.
File name and line number where the error occurred.
The first location line will always contain the top-level location. data will contain file: line.
There will always be a location line after message and after every function.
Number of frames in the following stack dump.
If there are four frames, expect information about four levels of called functions.
If no "frames" line is given, the depth should be assumed to be 0 (the error occurred at top-level).
Name of function where the error occurred.
Will be repeated once for every level in the function call stack.
Tells the receiving program that a debugger message ends here.
Line data.
Table D-2.
Debugger Error Types
PHP 3 Internal
Example D-1.
Example Debugger Message
Prev
Home
Next
Using the Debugger
Up
PHP Manual
Prev
Next
This section gathers most common errors that occur at build time.
I got the latest version of PHP using the anonymous CVS service, but there 's no configure script!
You have to have the GNU autoconf package installed so you can generate the configure script from configure.in.
One symptom of this is finding things like @VARIABLE@ in your Makefile after configure or config.status is run.)
I 'm having problems configuring PHP to work with Apache.
You need to tell the configure / setup script the location of the top-level of your Apache source tree.
3.
While configuring PHP (. / configure), you come across an error similar to the following:
checking lex output file root.... / configure: lex: command not found configure: error: cannot find output from lex; giving up
Be sure to read the installation instructions carefully and note that you need both flex and bison installed to compile PHP.
Depending on your setup you will install bison and flex from either source or a package, such as a RPM.
Try to reconfigure apache, making sure to use at least the following flags:
You can make the configure script looks for header files and libraries in non-standard locations by specifying additional flags to pass to the C preprocessor and linker, such as:
CPPFLAGS=-I / path / to / include LDFLAGS=-L / path / to / library. / configure
env CPPFLAGS=-I / path / to / include LDFLAGS=-L / path / to / library. / configure
You need to update your version of Bison.
7.
Some old versions of make that don 't correctly put the compiled versions of the files in the functions directory into that same directory.
If it does, you should really upgrade to a recent version of GNU make.
When linking PHP, it complains about a number of undefined references.
Take a look at the link line and make sure that all of the appropriate libraries are being included at the end.
If you' re linking with Apache 1.2.x, did you remember to add the appropriate information to the EXTRA_LIBS line of the Configuration file and re-rerun Apache's Configure script?
See the INSTALL file that comes with the distribution for more information.
Some people have also reported that they had to add '-ldl' immediately following libphp4.a when linking with Apache.
I can 't figure out how to build PHP with Apache 1.3.
This is actually quite easy.
Grab the latest Apache 1.3 distribution from http: / /www.apache.org / dist /.
Ungzip and untar it somewhere, for example / usr / local / src / apache-1.3.
Compile PHP by first running. / configure --with-apache= / path / apache-1.3 (substitute path for the actual path to your apache-1.3 directory.
Type make followed by make install to build PHP and copy the necessary files to the Apache distribution tree.
Change directories into to your / path / apache-1.3 / src directory and edit the Configuration file.
AddModule modules / php4 / libphp4.a.
Type:. / Configure followed by make.
You should now have a PHP-enabled httpd binary!
Note:
You can also use the new Apache. / configure script.
See the instructions in the README.configure file which is part of your Apache distribution.
Also have a look at the INSTALL file in the PHP distribution.
I have followed all the steps to install the Apache module version on UNIX, and my PHP scripts show up in my browser or I am being asked to save the file.
This means that the PHP module is not getting invoked for some reason.
Three things to check before asking for further help:
Make sure that the httpd binary you are running is the actual new httpd binary you just built.
To do this, try running: / path / to / binary / httpd -l
If you don 't see mod_php4.c listed then you are not running the right binary.
Find and install the correct binary.
It should be:
AddType application / x-httpd-php3 .php3 (for PHP 3)
or AddType application / x-httpd-php .php (for PHP 4)
Also make sure that this AddType line is not hidden away inside a Virtualhost or Directory block which would prevent it from applying to the location of your test script.
Finally, the default location of the Apache configuration files changed between Apache 1.2 and Apache 1.3.
You should check to make sure that the configuration file you are adding the AddType line to is actually being read.
You can put an obvious syntax error into your httpd.conf file or some other obvious change that will tell you if the file is being read correctly.
It says to use: --activate-module=src / modules / php4 / libphp4.a, but that file doesn' t exist, so I changed it to --activate-module=src / modules / php4 / libmodphp4.a It says to use: --activate-module=src / modules / php4 / libphp4.a, but that file doesn't exist, so I changed it to --activate-module=src / modules / php4 / libmodphp4.a and it doesn't work!?
Note that the libphp4.a Note that the libphp4.a file is not supposed to exist.
When I try to build Apache with PHP as a static module using --activate-module=src / modules / php4 / libphp4.a it tells me that my compiler is not ANSI compliant.
This is a misleading error message from Apache that has been fixed in more recent versions.
When I try to build PHP using --with-apxs I get strange error messages.
There are three things to check here.
First, for some reason when Apache builds the apxs Perl script, it sometimes ends up getting built without the proper compiler and flags variables.
Find your apxs script (try the command which apxs, it's sometimes found in / usr / local / apache / bin / apxs or / usr / sbin / apxs.
During make, I get errors in microtime, and a lot of RUSAGE_ stuff.
During the make portion of installation, if you encounter problems that look similar to this:
Your system is broken.
You need to fix your / usr / include files by installing a glibc-devel package that matches your glibc.
This has absolutely nothing to do with PHP.
To prove this to yourself, try this simple test:
I want to upgrade my PHP.
Where can I find the. / configure line that was used to build my current PHP installation?
Either you look at config.nice file, in the source tree of your current PHP installation or, if this is not available, you simply run a
When building PHP with the GD library it either gives strange compile errors or segfaults on execution.
Make sure your GD library and PHP are linked against the same depending libraries (e.g. libpng).
Prev
Home
Next
Up
Using PHP
PHP Manual
Prev
Next
Example 52-1.
Prev
Home
Next
PHP and HTML
Up
PHP and other languages
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This section holds the most general questions about PHP: what it is and what it does.
What is PHP?
From the preface of the manual:
PHP is an HTML-embedded scripting language.
Much of its syntax is borrowed from C, Java and Perl with a couple of unique PHP-specific features thrown in.
The goal of the language is to allow web developers to write dynamically generated pages quickly.
A nice introduction to PHP by Stig Sæther Bakken can be found here on the Zend website.
Also, much of the PHP Conference Material is freely available.
What does PHP stand for?
PHP stands for PHP: Hypertext Preprocessor
This confuses many people because the first word of the acronym is the acronym.
This type of acronym is called a recursive acronym.
3.
PHP / FI 2.0 is an early and no longer supported version of PHP.
PHP 3 is the successor to PHP / FI 2.0 and is a lot nicer.
PHP 4 is the current generation of PHP, which uses the Zend engine under the hood.
PHP 5 uses Zend engine 2 which, among other things, offers many additional OOP features.
Can I run several versions of PHP at the same time?
Yes.
See the INSTALL file that is included in the PHP 4 source distribution.
Also, read the related appendix.
What are the differences between PHP 3 and PHP 4?
There are a couple of articles written on this by the authors of PHP 4.
Here 's a list of some of the more important new features:
Extended API module
Generalized build process under UNIX
Generic web server interface that also supports multi-threaded web servers
Improved syntax highlighter
Native HTTP session support
Output buffering support
More powerful configuration system
I think I found a bug!
You should go to the PHP Bug Database and make sure the bug isn 't a known bug.
If you don 't see it in the database, use the reporting form to report the bug.
It is important to use the bug database instead of just sending an email to one of the mailing lists because the bug will have a tracking number assigned and it will then be possible for you to go back later and check on the status of the bug.
The bug database can be found at http: / /bugs.php.net /.
Prev
Home
Next
Up
Mailing lists
PHP Manual
Prev
Next
Prev
Home
Next
General Information
PHP Manual
Prev
Next
PHP can generate HTML, and HTML can pass information to PHP.
The manual page on this topic includes many examples as well.
What encoding / decoding do I need when I pass a value through a form / URL?
There are several stages for which encoding is important.
Assuming that you have a string $data, which contains the string you want to pass on in a non-encoded way, these are the relevant stages:
HTML interpretation.
In order to specify a random string, you must include it in double quotes, and htmlspecialchars() the whole value.
A URL consists of several parts.
If you want your data to be interpreted as one item, you must encode it with urlencode().
Example 51-1.
A hidden HTML form element
Note:
It is wrong to urlencode() $data, because it's the browsers responsibility to urlencode() the data.
All popular browsers do that correctly.
Note that this will happen regardless of the method (i.e., GET or POST).
You 'll only notice this in case of GET request though, because POST requests are usually hidden.
Example 51-2.
Data to be edited by the user
Note:
The data is shown in the browser as intended, because the browser will interpret the HTML escaped symbols.
Upon submitting, either via GET or POST, the data will be urlencoded by the browser for transferring, and directly urldecoded by PHP.
So in the end, you don 't need to do any urlencoding / urldecoding yourself, everything is handled automagically.
Example 51-3.
In an URL
Note:
In fact you are faking a HTML GET request, therefore it' s necessary to manually urlencode() the data.
Note:
You need to htmlspecialchars() the whole URL, because the URL occurs as value of an HTML-attribute.
In this case, the browser will first un - htmlspecialchars() the value, and then pass the URL on.
PHP will understand the URL correctly, because you urlencoded() the data.
You' ll notice that the in the URL is replaced by amp;.
Although most browsers will recover if you forget this, this isn 't always possible.
So even if your URL is not dynamic, you need to htmlspecialchars() the URL.
I' m trying to use an input type="image "tag, but the $foo.x and $foo.y variables aren't available. $_GET['foo.x'] isn't existing either.
Where are they?
When submitting a form, it is possible to use an image instead of the standard submit button with a tag like:
That is, the periods are replaced with underscores.
For example, $_GET[ 'foo_x'].
How do I create arrays in a HTML form?
To get your form result sent as an array to your PHP script you name the input, select or textarea elements like this:
input name=" MyArray[] "input name="MyArray[]" input name="MyArray[] "input name="MyArray[]"
input name=" MyArray[] "input name="MyArray[]" input name="MyOtherArray[] "input name="MyOtherArray[]"
input name=" AnotherArray[] "input name="AnotherArray[]" input name="AnotherArray[email] "input name="AnotherArray[phone]"
Note:
Specifying an arrays key is optional in HTML.
If you do not specify the keys, the array gets filled in the order the elements appear in the form.
Our first example will contain keys 0, 1, 2 and 3.
See also Array Functions and Variables from outside PHP.
How do I get all the results from a select multiple HTML tag?
The select multiple tag in an HTML construct allows users to select multiple items from a list.
These items are then passed to the action handler for the form.
The problem is that they are all passed with the same widget name. ie.
Note that if you are using JavaScript the [] on the element name might cause you problems when you try to refer to the element by name.
Use it 's numerical form element ID instead, or enclose the variable name in single quotes and use that as the index to the elements array, for example:
Prev
Home
Next
Using PHP
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Build Problems
PHP Manual
Prev
Next
PHP is the best language for web programing, but what about other languages?
ASP is not really a language in itself, it 's an acronym for Active Server Pages, the actual language used to program ASP with is Visual Basic Script or JScript.
The biggest drawback of ASP is that it' s a proprietary system that is natively used only on Microsoft Internet Information Server (IIS).
This limits it 's availability to Win32 based servers.
There are a couple of projects in the works that allows ASP to run in other environments and webservers:
InstantASP from Halcyon (commercial), Chili!Soft ASP from Chili!Soft (commercial) and OpenASP from ActiveScripting.org (free).
ASP is said to be a slower and more cumbersome language than PHP, less stable as well.
Some of the pros of ASP is that since it primarily uses VBScript it' s relatively easy to pick up the language if you're already know how to program in Visual Basic.
ASP support is also enabled by default in the IIS server making it easy to get up and running.
The components built in ASP are really limited, so if you need to use "advanced" features like interacting with FTP servers, you need to buy additional components.
Is there an ASP to PHP converter?
Yes, asp2php is the one most often referred to.
Prev
Home
Next
Up
Migrating from PHP 2 to PHP 3
PHP Manual
Prev
Next
This section holds questions about how to get in touch with the PHP community.
The best way is the mailing lists.
Are there any PHP mailing lists?
Of course!
There are many mailing lists for several subjects.
A whole list of mailing lists can be found on our Support page.
The most general mailing list is php-general.
To subscribe, send mail to php-general-subscribe@lists.php.net.
You don 't need to include anything special in the subject or body of the message.
To unsubscribe, send mail to php-general-unsubscribe@lists.php.net.
You can also subscribe and unsubscribe using the web interface on our Support page.
Are there any other communities?
There are countless of them around the world.
We have links for example to some IRC servers and foreign language mailing lists on our Support page.
Help!
I can 't seem to subscribe / unsubscribe to / from one of the mailing lists!
If your email address was joeblow@example.com, you can send your subscription request to php-general-subscribe-joeblow=example.com@lists.php.net, or your unsubscription request to php-general-unsubscribe-joeblow=example.com@lists.php.net.
Use similar addresses for the other mailing lists.
Is there an archive of the mailing lists anywhere?
The mailing list articles are also archived as news messages.
You can access the news server at news: / /news.php.net / with a news client.
There is also an experimental web interface for the news server at http: / /news.php.net /
What can I ask the mailing list?
Since PHP is growing more and more popular by the day the traffic has increased on the php-general mailing list and as of now the list gets about 150 to 200 posts a day.
Because of this it is in everyones interest that you use the list as a last resort when you have looked everywhere else.
Before you post to the list please have a look in this FAQ and the manual to see if you can find the help there.
If there is nothing to be found there try out the mailing list archives (see above).
If you' re having problem with installing or configuring PHP please read through all included documentation and README's.
If you still can' t find any information that helps you out you're more than welcome to use the mailing list.
Before asking questions, you may want to read the paper on How To Ask Questions The Smart Way as this is a good idea for everyone.
What information should I include when posting to the mailing list?
Help me!
What is wrong? "are of absolutely no use to anyone.
If you' re having problems getting PHP up and running you must include what operating system you are running on, what version of PHP you're trying to set up, how you got it (pre-compiled, CVS, RPMs and so on), what you have done so far, where you got stuck and the exact error message.
This goes for any other problem as well.
You have to include information on what you have done, where you got stuck, what you 're trying to do and, if applicable, exact error messages.
If you' re having problems with your source code you need to include the part of the code that isn't working.
It makes the post hard to read and a lot of people might just skip it all together because of this.
Another important thing to remember is to summarize your problem on the subject line.
A subject like "HELP MEEEE!!!" or "What is the problem here? "will be ignored by the majority of the readers.
And lastly, you 're encouraged to read the paper on How To Ask Questions The Smart Way as this will be a great help for everyone, especially yourself.
Prev
Home
Next
General Information
Up
PHP Manual
Prev
Next
PHP has already a long history behind him:
Legendary PHP 1.0, PHP / FI, PHP 3.0 and PHP 4.0.
Migrating from PHP3 to PHP4
PHP 4 was designed to be as compatible with earlier versions of PHP as possible and very little functionality was broken in the process.
If you 're really unsure about compatibility you should install PHP 4 in a test environment and run your scripts there.
Also see the appropriate migration appendix of this manual.
Incompatible functions?
Since PHP 4 is basically a rewrite of the entire PHP engine there was very few functions that were altered and only then some of the more exotic ones.
Prev
Home
Next
Migrating from PHP 2 to PHP 3
Up
Miscellaneous Questions
PHP Manual
Prev
Next
PHP has already a long history behind him:
Legendary PHP 1.0, PHP / FI, PHP 3.0 and PHP 4.0.
Migrating from PHP 2 to PHP 3?
PHP / FI 2.0 is no longer supported.
Please see appropriate manual section for information about migration from PHP / FI 2.0.
If you are still working with PHP 2, we strongly recommend you to upgrade straight to PHP 4.
Prev
Home
Next
PHP and other languages
Up
Migrating from PHP 3 to PHP 4
PHP Manual
Prev
Next
There can be some questions we can 't put into other categories.
Here you can find them.
Where did the pop-ups go on the website?
Can I have the code for that?
The yellow pop-up windows on the old site were pretty cool, but were very difficult to maintain (since some companies seem to enjoy changing the way their browsers work with every new release).
All the code for previous versions of the website is still available through CVS.
Specifically, the last version of shared.inc (that had all the Javascript and DHTML to do the popups) is available here.
How can I handle the bz2 compressed manuals on Windows?
If you don' t have an archiver-tool to handle bz2 files download the commandline tool from Redhat (please find further information below).
If you would not like to use a command line tool, you can try free tools like Stuffit Expander, UltimateZip, 7-Zip, or Quick Zip.
If you have tools like WinRAR or Power Archiver, you can easily decompress the bz2 files with it.
If you use Windows Commander, a bz2 plugin for that program is available freely from the Windows Commander site.
The bzip2 commandline tool from Redhat:
Win2k Sp2 users grab the latest version 1.0.2, all other Windows user should grab version 1.00.
After downloading rename the executable to bzip2.exe.
For convenience put it into a directory in your path, e.g.
C:\Windows where C represents your windows installation drive.
Note: lang stands for your language and x for the desired format, e.g.: pdf.
To uncompress the php_manual_lang.x.bz2 follow these simple instructions:
open a command prompt window
cd to the folder where you stored the downloaded php_manual_lang.x.bz2
invoke bzip2 -d php_manual_lang.x.bz2, extracting php_manual_lang.x in the same folder
In case you downloaded the php_manual_lang.tar.bz2 with many html-files in it, the procedure is the same.
The only difference is that you got a file php_manual_lang.tar.
The tar format is known to be treated with most common archivers on Windows like e.g.
Prev
Home
Next
Migrating from PHP 3 to PHP 4
Up
Appendixes
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Mailing lists
Up
PHP Manual
Prev
Next
This section gathers most common errors you can face, while writing PHP scripts.
pre ?php echo "This should be the first line .";? ?php echo "This should show up after the new line above .";? / pre
I would like to write a generic PHP script that can handle data coming from any form.
How do I know which POST method variables are available?
Make sure that the track_vars feature is enabled in your php.ini file.
Since PHP 4.0.3, this feature is always on.
So, to write a generic script to handle POST method variables you would need something similar to the following:
I need to convert all single-quotes (') to a backslash followed by a single-quote.
How can I do this with a regular expression?
It will do exactly what you want.
You should also have a look at the magic_quotes_gpc directive in your php.ini file.
When I do the following, the output is printed in the wrong order:
To be able to use the results of your function in an expression (such as concatenating it with other strings in the example above), you need to return() the value, not echo() it.
Hey, what happened to my newlines?
pre ?php echo "This should be the first line .";? ?php echo "This should show up after the new line above .";? / pre
In PHP, the ending for a block of code is either "?" or "? \n" (where \n means a newline).
So in the example above, the echoed sentences will be on one line, because PHP omits the newlines after the block ending.
This means that you need to insert an extra newline after each block of PHP code to make it print out one newline.
Why does PHP do this?
Because when formatting normal HTML, this usually makes your life easier because you don' t want that newline, but you'd have to create extremely long lines or otherwise make the raw page source unreadable to achieve that effect.
I get the message 'Warning:
Cannot send session cookie - headers already sent.. .' or'Cannot add header information - headers already sent... '.
The functions header(), setcookie() and the session functions need to add headers to the output stream.
But headers can only be sent before all other content, check if your script is sending headers after having already sent content.
How can I do this?
The getallheaders() function will do this if you are running PHP as an Apache module.
So, the following bit of code will show you all the request headers:
When I try to use authentication with IIS I get 'No Input file specified'.
The security model of IIS is at fault here.
This is a problem common to all CGI programs running under IIS.
A workaround is to create a plain HTML file (not parsed by PHP) as the entry page into an authenticated directory.
Then use a META tag to redirect to the PHP page, or have a link to the PHP page.
PHP will then recognize the authentication correctly.
With the ISAPI module, this is not a problem.
This should not effect other NT web servers.
For more information, see: http: / /support.microsoft.com / support / kb / articles / q160 / 4/22.asp.
My PHP script works on IE and Lynx, but on Netscape some of my output is missing.
When I do a "View Source" I see the content in IE but not in Netscape.
Netscape is more strict regarding html tags (such as tables) then IE.
Running your html output through a html validator, such as validator.w3.org, might be helpful.
For example, a missing / table might cause this.
Also, both IE and Lynx ignore any NULs (\0) in the HTML stream, Netscape does not.
The best way to check for this is to compile the command line The best way to check for this is to compile the command line version of PHP (also known as the CGI version) and run your script from the command line.
In *nix, pipe it through od -c and look for any \0 characters.
If you are on Windows you need to find an editor or some other program that lets you look at binary files.
When Netscape sees a NUL in a file it will typically not output anything else on that line whereas both IE and Lynx will.
How am I supposed to mix XML and PHP?
It complains about my ?xml tags!
You need to turn off the short tags by setting short_tags to 0 in your php.ini file, or by using the appropriate Apache directive.
You could even use a File section to do this selectively.
How can I use PHP with FrontPage or some other HTML editor that insists on moving my code around?
One of the easiest things to do is to enable using ASP tags in your PHP code.
This allows you to use the ASP-style% and% code delimiters.
Some of the popular HTML editors handle those more intelligently (for now).
To enable the ASP-style tags, you need to set the asp_tags php.ini variable, or use the appropriate Apache directive.
Where can I find a complete list of pre-set variables available to me, and why are these not documented in the PHP documentation?
The best way is to stick a ?php phpinfo();? part on a page and load it up.
This will show you all sorts of information about your PHP setup, including a list of both environment variables and also special variables set by your web server.
This list can 't really be documented in the PHP documentation because it will change from one server to another.
I' m trying to access one of the standard CGI variables (such as $DOCUMENT_ROOT or $HTTP_REFERER) in a user-defined function, and it can't seem to find it.
What 's wrong?
Environment variables are normal global variables, so you must either declare them as global variables in your function (by using "global $DOCUMENT_ROOT;", for example) or by using the global variable array (ie, "$GLOBALS["DOCUMENT_ROOT"]").
Note:
Since PHP 4.1.0 you can also use the superglobal array $_SERVER which is available in every function.
For example, you can now use $_SERVER[ "DOCUMENT_ROOT"] instead of $DOCUMENT_ROOT.
Prev
Home
Next
Build Problems
Up
PHP and HTML
PHP Manual
Prev
Next
Note:
Table 23-1.
Note:
Table 23-2.
Note:
Note:
Table 23-3.
Note:
Note:
Note:
Note:
Example 23-1.
Example 23-2.
Prev
Home
Next
Functions restricted / disabled by safe mode
Up
Function Reference
PHP Manual
Prev
Next
Note:
The following applies to 3.0.7 and later.
Internally in PHP a connection status is maintained.
There are 3 possible states:
When a PHP script is running normally the NORMAL state, is active.
If the remote client disconnects the ABORTED state flag is turned on.
A remote client disconnect is usually caused by the user hitting his STOP button.
If the PHP-imposed time limit (see set_time_limit()) is hit, the TIMEOUT state flag is turned on.
You can decide whether or not you want a client disconnect to cause your script to be aborted.
Sometimes it is handy to always have your scripts run to completion even if there is no remote browser receiving the output.
The default behaviour is however for your script to be aborted when the remote client disconnects.
This behaviour can be set via the ignore_user_abort php.ini directive as well as through the corresponding "php_value ignore_user_abort" Apache .conf directive or with the ignore_user_abort() function.
If you do not tell PHP to ignore a user abort and the user aborts, your script will terminate.
The one exception is if you have registered a shutdown function using register_shutdown_function().
With a shutdown function, when the remote user hits his STOP button, the next time your script tries to output something PHP will detect that the connection has been aborted and the shutdown function is called.
This shutdown function will also get called at the end of your script terminating normally, so to do something different in case of a client disconnect you can use the connection_aborted() function.
This function will return TRUE if the connection was aborted.
Your script can also be terminated by the built-in script timer.
The default timeout is 30 seconds.
It can be changed using the max_execution_time php.ini directive or the corresponding "php_value max_execution_time" Apache .conf directive as well as with the set_time_limit() function.
When the timer expires the script will be aborted and as with the above client disconnect case, if a shutdown function has been registered it will be called.
Within this shutdown function you can check to see if a timeout caused the shutdown function to be called by calling the connection_timeout() function.
This function will return TRUE if a timeout caused the shutdown function to be called.
One thing to note is that both the ABORTED and the TIMEOUT states can be active at the same time.
This is possible if you tell PHP to ignore user aborts.
PHP will still note the fact that a user may have broken the connection, but the script will keep running.
If it then hits the time limit it will be aborted and your shutdown function, if any, will be called.
At this point you will find that connection_timeout() and connection_aborted() return TRUE.
You can also check both states in a single call by using the connection_status().
This function returns a bitfield of the active states.
So, if both states are active it would return 3, for example.
Prev
Home
Next
Using remote files
Up
Persistent Database Connections
PHP Manual
Prev
Next
PHP transparently supports HTTP cookies.
Cookies are a mechanism for storing data in the remote browser and thus tracking or identifying return users.
You can set cookies using the setcookie() function.
Cookies are part of the HTTP header, so setcookie() must be called before any output is sent to the browser.
This is the same limitation that header() has.
You can use the output buffering functions to delay the script output until you have decided whether or not to set any cookies or send any headers.
Any cookies sent to you from the client will automatically be turned into a PHP variable just like GET and POST method data, depending on the register_globals and variables_order configuration variables.
If you wish to assign multiple values to a single cookie, just add [] to the cookie name.
In PHP 4.1.0 and later, the $_COOKIE auto-global array will always be set with any cookies sent from the client. $HTTP_COOKIE_VARS is also set in earlier versions of PHP when the track_vars configuration variable is set.
For more details, including notes on browser bugs, see the setcookie() function.
Prev
Home
Next
HTTP authentication with PHP
Up
Handling file uploads
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
The MAX_FILE_SIZE item cannot specify a file size greater than the file size that has been set in the upload_max_filesize ini-setting.
The default is 2 Megabytes.
If memory limit is enabled, larger memory_limit may be needed.
Make sure to set memory_limit large enough.
If max_execution_time is set too small, script execution may be exceeded the value.
Make sure to set max_execution_time large enough.
If post_max_size set too small, large files cannot be uploaded.
Make sure to set post_max_size large enough.
Not validating which file you operate on may mean that users can access sensitive information in other directories.
Please note that the CERN httpd seems to strip off everything starting at the first whitespace in the content-type mime header it gets from the client.
As long as this is the case, CERN httpd will not support the file upload feature.
Due to the large amount of directory listing styles we cannot guarantee that files with exotic names (like containing spaces) are handled properly.
Prev
Home
Next
Error Messages Explained
Up
Uploading multiple files
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
Since PHP 4.2.0, PHP returns an appropriate error code along with the file array.
The error code can be found in the ['error'] segment of the file array that is created during the file upload by PHP.
In otherwords, the error might be found in $_FILES[ 'userfile']['error'].
Value:
0; There is no error, the file uploaded with success.
Value:
1; The uploaded file exceeds the upload_max_filesize directive in php.ini.
Value:
2; The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the html form.
Value:
3; The uploaded file was only partially uploaded.
Value:
4; No file was uploaded.
Note:
These became PHP constants in PHP 4.3.0
Prev
Home
Next
Handling file uploads
Up
Common Pitfalls
PHP Manual
Prev
Next
PHP is capable of receiving file uploads from any RFC-1867 compliant browser (which includes Netscape Navigator 3 or later, Microsoft Internet Explorer 3 with a patch from Microsoft, or later without a patch).
This feature lets people upload both text and binary files.
With PHP 's authentication and file manipulation functions, you have full control over who is allowed to upload and what is to be done with the file once it has been uploaded.
Related Configurations Note:
See also the file_uploads, upload_max_filesize, upload_tmp_dir, and post_max_size directives in php.ini
Note that PHP also supports PUT-method file uploads as used by Netscape Composer and W3C 's Amaya clients.
See the PUT Method Support for more details.
A file upload screen can be built by creating a special form which looks something like this:
Example 18-1.
File Upload Form
Warning
It is easy to circumvent this maximum.
So don 't count on it that the browser obeys your wish!
The PHP-settings for maximum-size, however, cannot be fooled.
The Variables defined for uploaded files differs depending on the PHP version and configuration.
The autoglobal $_FILES exists as of PHP 4.1.0 The $HTTP_POST_FILES array has existed since PHP 4.0.0.
These arrays will contain all your uploaded file information.
Using $_FILES is preferred.
If the PHP directive register_globals is on, related variable names will also exist. register_globals defaults to off as of PHP 4.2.0.
The contents of $_FILES from our example script is as follows.
Note that this assumes the use of the file upload name userfile, as used in the example script above.
The original name of the file on the client machine.
The mime type of the file, if the browser provided this information.
An example would be "image / gif".
The size, in bytes, of the uploaded file.
The temporary filename of the file in which the uploaded file was stored on the server.
The error code associated with this file upload. ['error'] was added in PHP 4.2.0
Note:
In PHP versions prior 4.1.0 this was named $HTTP_POST_FILES and it 's not an autoglobal variable like $_FILES is.
PHP 3 does not support $HTTP_POST_FILES.
When register_globals is turned on in php.ini, additional variables are available.
For example, $userfile_name will equal $_FILES[ 'userfile']['name'], $userfile_type will equal $_FILES['userfile']['type'], etc.
It 's preferred to not rely on this directive.
Files will by default be stored in the server 's default temporary directory, unless another location has been given with the upload_tmp_dir directive in php.ini.
The server 's default directory can be changed by setting the environment variable TMPDIR in the environment in which PHP runs.
Setting it using putenv() from within a PHP script will not work.
This environment variable can also be used to make sure that other operations are working on uploaded files, as well.
Example 18-2.
Validating file uploads
See also the function entries for is_uploaded_file() and move_uploaded_file() for further information.
The following example will process the file upload that came from a form.
?php / / In PHP earlier then 4.1.0, $HTTP_POST_FILES should be used instead of $_FILES. / / In PHP earlier then 4.0.3, use copy() and is_uploaded_file() instead of move_uploaded_file $uploaddir = '/ var / www / uploads /'; print "pre"; if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploaddir. $_FILES['userfile']['name'])) {print "File is valid, and was successfully uploaded.
The PHP script which receives the uploaded file should implement whatever logic is necessary for determining what should be done with the uploaded file.
You can for example use the $_FILES[ 'userfile']['size'] variable to throw away any files that are either too small or too big.
As of PHP 4.2.0, you could use $_FILES[ 'userfile']['error'] and plan your logic according to the error codes.
Whatever the logic, you should either delete the file from the temporary directory or move it elsewhere.
The file will be deleted from the temporary directory at the end of the request if it has not been moved away or renamed.
Prev
Home
Next
Up
Error Messages Explained
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
Multiple files can be uploaded using different name for input.
It is also possible to upload multiple files simultaneously and have the information organized automatically in arrays for you.
To do so, you need to use the same array submission syntax in the HTML form as you do with multiple selects and checkboxes:
Note:
Support for multiple file uploads was added in version 3.0.10.
Example 18-3.
Uploading multiple files
When the above form is submitted, the arrays $_FILES[ 'userfile'], $_FILES['userfile']['name'], and $_FILES['userfile']['size'] will be initialized (as well as in $HTTP_POST_FILES for PHP version prior 4.1.0).
When register_globals is on, globals for uploaded files are also initialized.
Each of these will be a numerically indexed array of the appropriate values for the submitted files.
For instance, assume that the filenames / home / test / review.html and / home / test / xwp.out are submitted.
In this case, $_FILES[ 'userfile']['name'][0] would contain the value review.html, and $_FILES['userfile']['name'][1] would contain the value xwp.out.
Similarly, $_FILES[ 'userfile']['size'][0] would contain review.html's filesize, and so forth.
$_FILES[ 'userfile']['name'][0], $_FILES['userfile']['tmp_name'][0], $_FILES['userfile']['size'][0], and $_FILES['userfile']['type'][0] are also set.
Prev
Home
Next
Common Pitfalls
Up
PUT method support
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
PUT method support has changed between PHP 3 and PHP 4.
In PHP 4, one should use the standard input stream to read the contents of an HTTP PUT.
Example 18-4.
Saving HTTP PUT files with PHP 4
?php / * PUT data comes in on the stdin stream * / $putdata = fopen( "php: / /stdin" ,"r"); / * Open a file for writting * / $fp = fopen("myputfile.ext" ,"w"); / * Read the data 1kb at a time and write to the file * / while ($data = fread($putdata,1024)) fwrite($fp,$data); / * Close the streams * / fclose($fp); fclose($putdata);?
Note:
All documentation below applies to PHP 3 only.
PHP provides support for the HTTP PUT method used by clients such as Netscape Composer and W3C Amaya.
PUT requests are much simpler than a file upload and they look something like this:
This would normally mean that the remote client would like to save the content that follows as: / path / filename.html in your web tree.
It is obviously not a good idea for Apache or PHP to automatically let everybody overwrite any files in your web tree.
So, to handle such a request you have to first tell your web server that you want a certain PHP script to handle the request.
In Apache you do this with the Script In Apache you do this with the Script directive.
A common place is inside a Directory block or perhaps inside a Virtualhost block.
A line like this would do the trick:
This tells Apache to send all PUT requests for URIs that match the context in which you put this line to the put.php script.
This assumes, of course, that you have PHP enabled for the .php extension and PHP is active.
Inside your put.php file you would then do something like this:
This would copy the file to the location requested by the remote client.
You would probably want to perform some checks and / or authenticate the user before performing this file copy.
The only trick here is that when PHP sees a PUT-method request it stores the uploaded file in a temporary file just like those handled but the POST-method.
When the request ends, this temporary file is deleted.
So, your PUT handling PHP script has to copy that file somewhere.
The filename of this temporary file is in the $PHP_PUT_FILENAME variable, and you can see the suggested destination filename in the $REQUEST_URI (may vary on non-Apache web servers).
This destination filename is the one that the remote client specified.
You could, for example, copy all uploaded files to a special uploads directory.
Prev
Home
Next
Uploading multiple files
Up
Using remote files
PHP Manual
Prev
Next
Prev
Home
Next
Spotting References
HTTP authentication with PHP
PHP Manual
Prev
Next
The HTTP Authentication hooks in PHP are only available when it is running as an Apache module and is hence not available in the CGI version.
In an Apache module PHP script, it is possible to use the header() function to send an "Authentication Required "message to the client browser causing it to pop up a Username / Password input window.
Once the user has filled in a username and a password, the URL containing the PHP script will be called again with the predefined variables PHP_AUTH_USER, PHP_AUTH_PW, and PHP_AUTH_TYPE Once the user has filled in a username and a password, the URL containing the PHP script will be called again with the predefined variables PHP_AUTH_USER, PHP_AUTH_PW, and PHP_AUTH_TYPE set to the user name, password and authentication type respectively.
These predefined variables are found in the $_SERVER and $HTTP_SERVER_VARS These predefined variables are found in the $_SERVER and $HTTP_SERVER_VARS arrays.
Only "Basic" authentication is supported.
See the header() function for more information.
Autoglobals, such as $_SERVER, became available in PHP version 4.1.0. $HTTP_SERVER_VARS has been available since PHP 3.
An example script fragment which would force client authentication on a page is as follows:
Example 16-1.
HTTP Authentication example
?php if (!isset($_SERVER['PHP_AUTH_USER'])) {header( 'WWW-Authenticate:
Compatibility Note:
In order to guarantee maximum compatibility with all clients, the keyword "Basic" should be written with an uppercase "B", the realm string must be enclosed in double (not single) quotes, and exactly one space should precede the 401 code in the HTTP / 1.0 401 header line.
Instead of simply printing out PHP_AUTH_USER and PHP_AUTH_PW, as done in the above example, you may want to check the username and password for validity.
Perhaps by sending a query to a database, or by looking up the user in a dbm file.
They seem very picky about the order of the headers.
Sending the WWW-Authenticate header before the HTTP / 1.0 401 header seems to do the trick for now.
As of PHP 4.3.0, in order to prevent someone from writing a script which reveals the password for a page that was authenticated through a traditional external mechanism, the PHP_AUTH variables will not be set if external authentication is enabled for that particular page and safe mode is enabled.
So, you can use $_SERVER[ 'REMOTE_USER'].
PHP uses the presence of an AuthType directive to determine whether external authentication is in effect.
Note, however, that the above does not prevent someone who controls a non-authenticated URL from stealing passwords from authenticated URLs on the same server.
Both Netscape Navigator and Internet Explorer will clear the local browser window 's authentication cache for the realm upon receiving a server response of 401.
Some people use this to "time out" logins, or provide a "log-out "button.
Example 16-2.
HTTP Authentication example forcing a new name / password
?php function authenticate() {header( 'WWW-Authenticate:
Basic realm=" Test Authentication System"'); header('HTTP / 1.0 401 Unauthorized'); echo "You must enter a valid login ID and password to access this resource\n"; exit;} if (!isset($_SERVER['PHP_AUTH_USER']) _BAR_ _BAR_ ($_POST['SeenBefore'] == 1 $_POST['OldAuth'] == $_SERVER['PHP_AUTH_USER'])) {authenticate();} else {echo "p Welcome: {$_SERVER['PHP_AUTH_USER']} br"; echo "Old: {$_REQUEST['OldAuth']}"; echo "form action='{$_SERVER['PHP_SELF']} 'METHOD='POST' \n"; echo" input type='hidden 'name='SeenBefore' value='1 '\n"; echo "input type='hidden' name='OldAuth 'value='{$_SERVER['PHP_AUTH_USER']}' \n"; echo" input type='submit 'value='Re Authenticate' \n"; echo "/ form / p \n";}?
This behavior is not required by the HTTP Basic authentication standard, so you should never depend on this.
Testing with Lynx has shown that Lynx does not clear the authentication credentials with a 401 server response, so pressing back and then forward again will open the resource as long as the credential requirements haven 't changed.
Also note that this does not work using Microsoft 's IIS server and the CGI version of PHP due to a limitation of IIS.
If safe mode is enabled, the uid of the script is added to the realm part of the WWW-Authenticate header.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Persistent connections are SQL links that do not close when the execution of your script ends.
When a persistent connection is requested, PHP checks if there' s already an identical persistent connection (that remained open from earlier) - and if it exists, it uses it.
If it does not exist, it creates the link.
An 'identical' connection is a connection that was opened to the same host, with the same username and the same password (where applicable).
Note:
There are other extensions that provide persistent connections, such as the IMAP extension.
People who aren' t thoroughly familiar with the way web servers work and distribute the load may mistake persistent connects for what they're not.
In particular, they do not give you an ability to open 'user sessions' on the same SQL link, they do not In particular, they do not give you an ability to open'user sessions' on the same SQL link, they do not give you an ability to build up a transaction efficiently, and they don't do a whole lot of other things.
In fact, to be extremely clear about the subject, persistent connections don' t give you any functionality that wasn't possible with their non-persistent brothers.
Why?
This has to do with the way web servers work.
There are three ways in which your web server can utilize PHP to generate web pages.
The first method is to use PHP as a CGI "wrapper".
When run this way, an instance of the PHP interpreter is created and destroyed for every page request (for a PHP page) to your web server.
Because it is destroyed after every request, any resources that it acquires (such as a link to an SQL database server) are closed when it is destroyed.
In this case, you do not gain anything from trying to use persistent connections - - they simply don 't persist.
The second, and most popular, method is to run PHP as a module in a multiprocess web server, which currently only includes Apache.
A multiprocess server typically has one process (the parent) which coordinates a set of processes (its children) who actually do the work of serving up web pages.
When each request comes in from a client, it is handed off to one of the children that is not already serving another client.
This means that when the same client makes a second request to the server, it may be serviced by a different child process than the first time.
What a persistent connection does for you in this case it make it so each child process only needs to connect to your SQL server the first time that it serves a page that makes use of such a connection.
When another page then requires a connection to the SQL server, it can reuse the connection that child established earlier.
The last method is to use PHP as a plug-in for a multithreaded web server.
Currently PHP 4 has support for ISAPI, WSAPI, and NSAPI (on Windows), which all allow PHP to be used as a plug-in on multithreaded servers like Netscape FastTrack (iPlanet), Microsoft's Internet Information Server (IIS), and O'Reilly's WebSite Pro.
The behavior is essentially the same as for the multiprocess model described before.
Note that SAPI support is not available in PHP 3.
If persistent connections don 't have any added functionality, what are they good for?
The answer here is extremely simple - - efficiency.
Persistent connections are good if the overhead to create a link to your SQL server is high.
Like, what kind of database it is, whether or not it sits on the same computer on which your web server sits, how loaded the machine the SQL server sits on is and so forth.
The bottom line is that if that connection overhead is high, persistent connections help you considerably.
They cause the child process to simply connect only once for its entire lifespan, instead of every time it processes a page that requires connecting to the SQL server.
This means that for every child that opened a persistent connection will have its own open persistent connection to the server.
For example, if you had 20 different child processes that ran a script that made a persistent connection to your SQL server, you 'd have 20 different connections to the SQL server, one from each child.
Note, however, that this can have some drawbacks if you are using a database with connection limits that are exceeded by persistent child connections.
If your database has a limit of 16 simultaneous connections, and in the course of a busy server session, 17 child threads attempt to connect, one will not be able to.
If there are bugs in your scripts which do not allow the connections to shut down (such as infinite loops), the database with only 16 connections may be rapidly swamped.
Check your database documentation for information on handling abandoned or idle connections.
Warning
There are a couple of additional caveats to keep in mind when using persistent connections.
One is that when using table locking on a persistent connection, if the script for whatever reason cannot release the lock, then subsequent scripts using the same connection will block indefinitely and may require that you either restart the httpd server or the database server.
Another is that when using transactions, a transaction block will also carry over to the next script which uses that connection if script execution ends before the transaction block does.
In either case, you can use register_shutdown_function() to register a simple cleanup function to unlock your tables or roll back your transactions.
Better yet, avoid the problem entirely by not using persistent connections in scripts which use table locks or transactions (you can still use them elsewhere).
An important summary.
Persistent connections were designed to have one-to-one mapping to regular connections.
That means that you should always be able to replace persistent connections with non-persistent connections, and it won 't change the way your script behaves.
It may (and probably will) change the efficiency of the script, but not its behavior!
See also fbsql_pconnect(), ibase_pconnect(), ifx_pconnect(), imap_popen(), ingres_pconnect(), msql_pconnect(), mssql_pconnect(), mysql_pconnect(), OCIPLogon(), odbc_pconnect(), Ora_pLogon(), pfsockopen(), pg_pconnect(), and sybase_pconnect().
Prev
Home
Next
Connection handling
Up
PHP Manual
Prev
Next
In addition, URLs can be used with the include(), include_once(), require() and require_once() statements.
Note:
Note:
For example, you can use this to open a file on a remote web server, parse the output for the data you want, and then use that data in a database query, or simply to output it in a style matching the rest of your website.
Getting the title of a remote page
?php $file = fopen ("http: / /www.example.com / ", "r"); if (!$file) {echo" p Unable to open remote file.\n"; exit;} while (!feof ($file)) {$line = fgets ($file, 1024); / * This only works if the title and its tags are on one line * / if (eregi ("title (.*) / title", $line, $out)) {$title = $out[1]; break;}} fclose($file);?
You can also write to files on an FTP server (provided that you have connected as a user with the correct access rights).
To connect as a user other than 'anonymous', you need to specify the username (and possibly password) within the URL, such as'ftp: / /user:password@ftp.example.com / path / to / file'. (You can use the same sort of syntax to access files via HTTP when they require Basic authentication.)
Example 19-2.
Storing data on a remote server
?php $file = fopen ("ftp: / /ftp.example.com / incoming / outputfile", "w"); if (!$file) {echo "p Unable to open remote file for writing.\n"; exit;} / * Write the data here. * / fputs ($file, $_SERVER['HTTP_USER_AGENT']. "\n"); fclose ($file);?
Note:
You might get the idea from the example above that you can use this technique to write to a remote log file.
Unfortunately that would not work because the fopen() call will fail if the remote file already exists.
To do distributed logging like that, you should take a look at syslog().
Prev
Home
Next
PUT method support
Up
Connection handling
PHP Manual
Prev
Next
The PHP safe mode is an attempt to solve the shared-server security problem.
Table 22-1.
Security and Safe Mode Configuration Directives
Name
Default
"0"
PHP_INI_SYSTEM
PHP_INI_SYSTEM
safe_mode_allowed_env_vars
PHP_INI_SYSTEM
open_basedir
NULL
PHP_INI_SYSTEM
disable_functions
""
PHP_INI_SYSTEM
Whether to enable PHP 's safe mode.
By default, Safe Mode does a UID compare check when opening files.
Whether to use UID (FALSE) or GID (TRUE) checking upon file access.
UID / GID checks are bypassed when including files from this directory and its subdirectories (directory must also be in include_path or full path must including).
As of PHP 4.2.0, this directive can take a semi-colon separated path in a similar fashion to the include_path directive, rather than just a single directory.
The restriction specified is actually a prefix, not a directory name.
This means that "safe_mode_include_dir = / dir / incl" also allows access to "/ dir / include" and "/ dir / incls" if they exist.
When you want to restrict access to only the specified directory, end with a slash.
For example: "safe_mode_include_dir = / dir / incl /"
If PHP is used in safe mode, system() and the other functions executing system programs refuse to start programs that are not in this directory.
Setting certain environment variables may be a potential security breach.
This directive contains a comma-delimited list of prefixes.
In Safe Mode, the user may only alter environment variables whose names begin with the prefixes supplied here.
PHP_FOO=BAR).
Note:
If this directive is empty, PHP will let the user modify ANY environment variable!
This directive contains a comma-delimited list of environment variables that the end user won' t be able to change using putenv().
These variables will be protected even if safe_mode_allowed_env_vars is set to allow to change them.
Limit the files that can be opened by PHP to the specified directory-tree, including the file itself.
This directive is NOT affected by whether Safe Mode is turned On or Off.
When a script tries to open a file with, for example, fopen or gzopen, the location of the file is checked.
When the file is outside the specified directory-tree, PHP will refuse to open it.
All symbolic links are resolved, so it 's not possible to avoid this restriction with a symlink.
The special value. indicates that the directory in which the script is stored will be used as base-directory.
On all other systems, separate the directories with a colon.
As an Apache module, open_basedir paths from parent directories are now automatically inherited.
The restriction specified with open_basedir is actually a prefix, not a directory name.
This means that "open_basedir = / dir / incl" also allows access to "/ dir / include" and "/ dir / incls" if they exist.
When you want to restrict access to only the specified directory, end with a slash.
For example: "open_basedir = / dir / incl /"
Note:
The default is to allow all files to be opened.
This directive allows you to disable certain functions for security This directive allows you to disable certain functions for security reasons.
It takes on a comma-dilimited list of function names. disable_functions is not affected by Safe Mode.
This directive must be set in php.ini For example, you cannot set this in httpd.conf.
See also: register_globals, display_errors, and log_errors
When safe_mode is on, PHP checks to see if the owner of the current script matches the owner of the file to be operated on by a file function.
For example:
-rw-rw-r- - 1 rasmus rasmus 33 Jul 1 19:20 script.php -rw-r--r- - 1 root root 1116 May 26 18:01 / etc / passwd
?php readfile( '/ etc / passwd');?
Warning:
The script whose uid is 500 is not allowed to access / etc / passwd owned by uid 0 in / docroot / script.php on line 2
However, there may be environments where a strict UID check is not appropriate and a relaxed GID check is sufficient.
This is supported by means of the safe_mode_gid switch.
Setting it to On performs the relaxed GID checking, setting it to Off (the default) performs UID checking.
If instead of safe_mode, you set an open_basedir directory then all file operations will be limited to files under the specified directory For example (Apache httpd.conf example):
Warning: open_basedir restriction in effect.
File is in wrong directory in / docroot / script.php on line 2
You can also disable individual functions.
Note that the disable_functions directive can not be used outside of the php.ini file which means that you cannot disable functions on a per-virtualhost or per-directory basis in your httpd.conf file.
disable_functions readfile,system
Warning: readfile() has been disabled for security reasons in / docroot / script.php on line 2
Prev
Home
Next
Persistent Database Connections
Up
Functions restricted / disabled by safe mode
PHP Manual
Prev
Next
Prev
Home
Next
Apache-specific Functions
PHP Manual
Prev
Next
If the argument number is of type float, the return type is also float, otherwise it is integer (as float usually has a bigger value range than integer).
$abs = abs( -4.2); / / $abs = 4.2; (double / float) $abs2 = abs(5); / / $abs2 = 5; (integer) $abs3 = abs(-5); / / $abs3 = 5; (integer)
Prev
Home
Next
Mathematical Functions
Up
PHP Manual
Prev
Next
Note:
This function is not implemented on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos() 'range.
See also acosh(), asin() and atan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with backslashes before characters that are listed in charlist Returns a string with backslashes before characters that are listed in charlist parameter.
Be careful if you choose to escape characters 0, a, b, f, n, r, t and v.
They will be converted to \0, \a, \b, \f, \n, \r, \t and \v.
In PHP \0 (NULL), \r (carriage return), \n (newline) and \t (tab) are predefined escape sequences, while in C all of these are predefined escape sequences.
charlist like "\0..\37", which would escape all characters with ASCII code between 0 and 31.
Example 1. addcslashes() example
$escaped = addcslashes( $not_escaped, "\0..\37!@\177..\377");
echo addcslashes( 'foo []', 'A..z'); / / output: \f\o\o\ [\] / / All upper and lower-case letters will be escaped / /... but so will the [\ ]^_` and any tabs, line / / feeds, carriage returns, etc.
echo addcslashes( "zoo[' .']", 'z..A'); / / output: \zoo['\ .']
See also stripcslashes(), stripslashes(), htmlspecialchars(), and quotemeta().
Prev
Home
Next
String functions
Up
PHP Manual
Prev
Next
Returns a string with backslashes before characters that need to be quoted in database queries etc.
These characters are single quote ('), double quote ("), backslash (\) and NUL (the NULL byte).
See also stripslashes(), htmlspecialchars(), and quotemeta().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code it is completed.
It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.
Note:
The availability of this feature is controlled by the php.ini directive apache.child_terminate, which is set to off by default.
This feature is also not available on multithreaded versions of apache like the win32 version.
See also exit().
Prev
Home
Next
Apache-specific Functions
Up
PHP Manual
Prev
Next
This performs a partial request for a URI.
It goes just far enough to obtain all the important information about the given resource and returns this information in a class.
The properties of the returned class are:
Prev
Home
Next
Up
PHP Manual
Prev
Next
apache_note() is an Apache-specific function which gets and sets values in a request's notes table.
If called with one argument, it returns the current value of note note_name.
If called with two arguments, it sets the value of note note_name to note_value and returns the previous value of note note_name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
apache_request_headers() returns an associative array of all the HTTP headers in the current request.
This is only supported when PHP runs as an Apache module.
Note:
Prior to PHP 4.3.0, apache_request_headers() was called getallheaders().
After PHP 4.3.0, getallheaders() is an alias for apache_request_headers().
Example 1. apache_request_headers() Example
Note:
You can also get at the value of the common CGI variables by reading them from the environment, which works whether or not you are using PHP as an Apache module.
Use phpinfo() to see a list of all of the available environment variables.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of all Apache response headers.
This functionality is only available in PHP version 4.3.0 and greater.
See also getallheaders() and headers_sent().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_change_key_case() changes the keys in the input array to be all lowercase or uppercase.
You can pass two constants there, CASE_UPPER and CASE_LOWER.
The default is CASE_LOWER.
The function will leave number indices as is.
Example 1. array_change_key_case() example
The printout of the above program will be:
Prev
Home
Next
Array Functions
Up
PHP Manual
Prev
Next
array_chunk() splits the array into several arrays with size values in them.
You may also have an array with less values at the end.
You get the arrays as members of a multidimensional array indexed with numbers starting from zero.
By setting the optional preserve_keys parameter to TRUE, you can force PHP to preserve the original keys from the input array.
If you specify FALSE new number indices will be used in each resulting array with indices starting from zero.
The default is FALSE.
Example 1. array_chunk() example
The printout of the above program will be:
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_count_values() returns an array using the values of the input array as keys and their frequency in input as values.
Example 1. array_count_values() example
The printout of the above program will be:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. array_diff_assoc() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_diff() returns an array containing all the values of array1 that are not present in any of the other arguments.
Note that keys are preserved.
Example 1. array_diff() example
$array1 = array ("a "= "green", "red", "blue", "red"); $array2 = array ("b" = "green", "yellow", "red"); $result = array_diff ($array1, $array2);
This makes $result have array ("blue");.
Multiple occurrences in $array1 are all treated the same way.
Note:
Two elements are considered equal if and only if (string) $elem1 === (string) $elem2.
In words: when the string representation is the same.
Note:
Please note that this function only checks one dimension of a n-dimensional array.
Of course you can check deeper dimensions by using array_diff( $array1[0], $array2[0]);.
Warning
This was broken in PHP 4.0.4!
See also array_diff_assoc(), array_intersect() and array_intersect_assoc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_fill() fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.
Example 1. array_fill() example
$a = array_fill( 5, 6, 'banana');
$a now has the following entries using print_r():
Array ([5] = banana [6] = banana [7] = banana [8] = banana [9] = banana [10] = banana)
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_filter() returns an array containing all the elements of input filtered according a callback function.
If the input is an associative array the keys are preserved.
Example 1. array_filter() example
function odd( $var) {return ($var% 2 == 1);} function even($var) {return ($var% 2 == 0);} $array1 = array ("a"= 1, "b"= 2, "c"= 3, "d"= 4, "e"= 5); $array2 = array (6, 7, 8, 9, 10, 11, 12); echo "Odd :\n"; print_r(array_filter($array1, "odd")); echo "Even:\n"; print_r(array_filter($array2, "even"));
The printout of the program above will be:
Odd:
Array ([a] = 1 [c] = 3 [e] = 5) Even:
Add / delete an element, unset the array that array_filter() is applied to.
If the array is changed, the behavior of this function is undefined.
See also array_map() and array_reduce().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_flip() returns an array in flip order, i.e. keys from trans become values and trans's values become keys.
Note that the values of trans need to be valid keys, i.e. they need to be either integer or string.
A warning will be emitted if a value has the wrong type, and the key / value pair in question will not be flipped.
If a value has several occurrences, the latest key will be used as its values, and all others will be lost.
array_flip() returns FALSE if it fails.
Example 1. array_flip() example
Example 2. array_flip() example: collision
now $trans is:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of the parameters.
The parameters can be given an index with the = operator.
Syntax "index = values", separated by commas, define index and values. index may be of type string or numeric.
When index is omitted, a integer index is automatically generated, starting at 0.
If index is an integer, next generated index will be the biggest integer index + 1.
Note that when two identical index are defined, the last overwrite the first.
The following example demonstrates how to create a two-dimensional array, how to specify keys for associative arrays, and how to skip-and-continue numeric indices in normal arrays.
Example 1. array() example
$fruits = array ("fruits "= array ("a"= "orange", "b"= "banana", "c"= "apple"), "numbers" = array (1, 2, 3, 4, 5, 6), "holes "= array ("first", 5 = "second", "third"));
Example 2.
Automatic index with array()
will display:
This example creates a 1-based array.
Example 3.
1-based index with array()
$firstquarter = array( 1 = 'January', 'February', 'March'); print_r($firstquarter);
will display:
Array ([1] = 'January '[2] = 'February' [3] = 'March ')
See also array_pad(), list(), and range().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. array_intersect_assoc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_intersect() returns an array containing all the values of array1 that are present in all the arguments.
Note that keys are preserved.
Example 1. array_intersect() example
$array1 = array ("a "= "green", "red", "blue"); $array2 = array ("b" = "green", "yellow", "red"); $result = array_intersect ($array1, $array2);
This makes $result have
Array ([a] = green [0] = red)
Note:
Two elements are considered equal if and only if (string) $elem1 === (string) $elem2.
In words: when the string representation is the same.
Warning
This was broken in PHP 4.0.4!
See also array_intersect_assoc(), array_diff(), array_diff_assoc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.
Example 1. array_key_exists() example
$search_array = array( "first "= 1, "second" = 4); if (array_key_exists("first", $search_array)) {echo "The'first 'element is in the array";}
Note:
The name of this function is key_exists() in PHP version 4.0.6.
See also isset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_keys() returns the keys, numeric and string, from the input array.
If the optional search_value is specified, then only the keys for that value are returned.
Otherwise, all the keys from the input are returned.
Example 1. array_keys() example
$array = array (0 = 100, "color "= "red"); print_r(array_keys ($array)); $array = array ("blue", "red", "green", "blue", "blue"); print_r(array_keys ($array, "blue")); $array = array ("color" = array("blue", "red", "green"), "size "= array("small", "medium", "large")); print_r(array_keys ($array));
The printout of the program above will be:
Array ([0] = 0 [1] = color) Array ([0] = 0 [1] = 3 [2] = 4) Array ([0] = color [1] = size)
Note:
This function was added to PHP 4, below is an implementation for those still using PHP 3.
Example 2.
Implementation of array_keys() for PHP 3 users
See also array_values().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_map() returns an array containing all the elements of arr1 after applying the callback function to each one.
The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()
Example 1. array_map() example
This makes $b have:
Example 2. array_map() - using more arrays
?php function show_Spanish( $n, $m) {return "The number $n is called $m in Spanish";} function map_Spanish($n, $m) {return array ($n = $m);} $a = array(1, 2, 3, 4, 5); $b = array("uno", "dos", "tres", "cuatro", "cinco"); $c = array_map("show_Spanish", $a, $b); print_r($c); $d = array_map("map_Spanish", $a, $b); print_r($d);?
This results:
/ / printout of $c Array ([0] = The number 1 is called uno in Spanish [1] = The number 2 is called dos in Spanish [2] = The number 3 is called tres in Spanish [3] = The number 4 is called cuatro in Spanish [4] = The number 5 is called cinco in Spanish) / / printout of $d Array ([0] = Array ([1] = uno) [1] = Array ([2] = dos) [2] = Array ([3] = tres) [3] = Array ([4] = cuatro) [4] = Array ([5] = cinco))
Usually when using two or more arrays, they should be of equal length because the callback function is applied in parallel to the corresponding elements.
If the arrays are of unequal length, the shortest one will be extended with empty elements.
An interesting use of this function is to construct an array of arrays, which can be easily performed by using NULL as the name of the callback function
Example 3.
Creating an array of arrays
?php $a = array( 1, 2, 3, 4, 5); $b = array("one", "two", "three", "four", "five"); $c = array("uno", "dos", "tres", "cuatro", "cinco"); $d = array_map(null, $a, $b, $c); print_r($d);?
The printout of the program above will be:
Array ([0] = Array ([0] = 1 [1] = one [2] = uno) [1] = Array ([0] = 2 [1] = two [2] = dos) [2] = Array ([0] = 3 [1] = three [2] = tres) [3] = Array ([0] = 4 [1] = four [2] = cuatro) [4] = Array ([0] = 5 [1] = five [2] = cinco))
See also array_filter(), array_reduce(), and array_walk().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_merge() merges the elements of two or more arrays together so that the values of one are appended to the end of the previous one.
It returns the resulting array.
If the input arrays have the same string keys, then the later value for that key will overwrite the previous one.
If, however, the arrays contain numeric keys, the later value will not overwrite the original value, but will be appended.
Example 1. array_merge() example
$array1 = array ("color "= "red", 2, 4); $array2 = array ("a", "b", "color" = "green", "shape "= "trapezoid", 4); $result = array_merge ($array1, $array2);
The $result will be:
Array ([color] = green [0] = 2 [1] = 4 [2] = a [3] = b [shape] = trapezoid [4] = 4)
Example 2.
Simple array_merge() example
Don 't forget that numeric keys will be renumbered!
If you want to completely preserve the arrays and just want to append them to each other, use the + operator:
Note:
Shared keys will be overwritten on a first-come first-served basis.
See also array_merge_recursive().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_merge_recursive() merges the elements of two or more arrays together so that the values of one are appended to the end of the previous one.
It returns the resulting array.
If, however, the arrays have the same numeric key, the later value will not overwrite the original value, but will be appended.
Example 1. array_merge_recursive() example
$ar1 = array ("color "= array ("favorite" = "red"), 5); $ar2 = array (10, "color "= array ("favorite" = "green", "blue")); $result = array_merge_recursive ($ar1, $ar2);
Array ([color] = Array ([favorite] = Array ([0] = red [1] = green) [0] = blue) [0] = 5 [1] = 10)
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_multisort() can be used to sort several arrays at once or a multi-dimensional array according by one of more dimensions.
It maintains key association when sorting.
The input arrays are treated as columns of a table to be sorted by rows - this resembles the functionality of SQL ORDER BY clause.
The first array is the primary one to sort by.
The rows (values) in that array that compare the same are sorted by the next input array, and so on.
The argument structure of this function is a bit unusual, but flexible.
The very first argument has to be an array.
Subsequently, each argument can be either an array or a sorting flag from the following lists.
Sorting order flags:
SORT_ASC - sort in ascending order
SORT_DESC - sort in descending order
Sorting type flags:
SORT_REGULAR - compare items normally
SORT_NUMERIC - compare items numerically
SORT_STRING - compare items as strings
No two sorting flags of the same type can be specified after each array.
The sorting flags specified after an array argument apply only to that array - they are reset to default SORT_ASC and SORT_REGULAR before each new array argument.
Returns TRUE on success or FALSE on failure.
Example 1.
Sorting multiple arrays
In this example, after sorting, the first array will contain 10, "a", 100, 100.
The second array will contain 1, 1, "2", 3.
The entries in the second array corresponding to the identical entries in the first array (100 and 100) were sorted as well.
Example 2.
Sorting multi-dimensional array
In this example, after sorting, the first array will contain 10, 100, 100, "a" (it was sorted as strings in ascending order), and the second one will contain 1, 3, "2", 1 (sorted as numbers, in descending order).
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_pad() returns a copy of the input padded to size specified by pad_size with value pad_value.
If pad_size is positive then the array is padded on the right, if it 's negative then on the left.
If the absolute value of pad_size is less than or equal to the length of the input then no padding takes place.
Example 1. array_pad() example
$input = array (12, 10, 9); $result = array_pad ($input, 5, 0); / / result is array (12, 10, 9, 0, 0) $result = array_pad ($input, -7, -1); / / result is array (-1, -1, -1, -1, 12, 10, 9) $result = array_pad ($input, 2, "noop"); / / not padded
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_pop() pops and returns the last value of the array, shortening the array by one element.
If array is empty (or is not an array), NULL will be returned.
Example 1. array_pop() example
$stack = array ("orange", "banana", "apple", "raspberry"); $fruit = array_pop ($stack);
After this, $stack will have only 3 elements:
Array ([0] = orange [1] = banana [2] = apple)
Warning
This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or "".
Please read the section on Booleans for more information.
Use the === operator for testing the return value of this function.
See also array_push(), array_shift(), and array_unshift().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_push() treats array as a stack, and pushes the passed variables onto the end of array.
The length of array increases by the number of variables pushed.
Has the same effect as:
Returns the new number of elements in the array.
Example 1. array_push() example
$stack = array ("orange", "banana"); array_push ($stack, "apple", "raspberry");
This example would result in $stack having the following elements:
Array ([0] = orange [1] = banana [2] = apple [3] = raspberry)
See also array_pop(), array_shift(), and array_unshift().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_rand() is rather useful when you want to pick one or more random entries out of an array.
It takes an input array and an optional argument num_req which specifies how many entries you want to pick - if not specified, it defaults to 1.
If you are picking only one entry, array_rand() returns the key for a random entry.
Otherwise, it returns an array of keys for the random entries.
This is done so that you can pick random keys as well as values out of the array.
Don' t forget to call srand() to seed the random number generator.
Example 1. array_rand() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_reduce() applies iteratively the function function to the elements of the array input, so as to reduce the array to a single value.
If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty.
Example 1. array_reduce() example
This will result in $b containing 15, $c containing 1200 (= 1*2*3*4*5*10), and $d containing 1.
See also array_filter() and array_map().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_reverse() takes input array and returns a new array with the order of the elements reversed, preserving the keys if preserve_keys is TRUE.
Example 1. array_reverse() example
$input = array ("php", 4.0, array ("green", "red")); $result = array_reverse ($input); $result_keyed = array_reverse ($input, TRUE);
This makes both $result and $result_keyed have the same elements, but note the difference between the keys.
The printout of $result and $result_keyed will be:
Array ([0] = Array ([0] = green [1] = red) [1] = 4 [2] = php) Array ([2] = Array ([0] = green [1] = red) [1] = 4 [0] = php)
Note:
The second parameter was added in PHP 4.0.3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Searches haystack for needle and returns the key if it is found in the array, FALSE otherwise.
Prior to PHP 4.2.0, array_search() returns NULL on failure instead of FALSE.
If the optional third parameter strict is set to TRUE then the array_search() will also check the types of the needle in the haystack.
Warning
This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or "".
Please read the section on Booleans for more information.
Use the === operator for testing the return value of this function.
See also array_keys() and in_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down.
All numerical array keys will be modified to start counting from zero while literal keys won 't be touched.
If array is empty (or is not an array), NULL will be returned.
Example 1. array_shift() example
$stack = array ("orange", "banana", "apple", "raspberry"); $fruit = array_shift ($stack);
This would result in $stack having 3 elements left:
Array ([0] = banana [1] = apple [2] = raspberry)
See also array_unshift(), array_push(), and array_pop().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.
If offset is positive, the sequence will start at that offset in the array.
If offset is negative, the sequence will start that far from the end of the array.
If length is given and is positive, then the sequence will have that many elements in it.
If length is given and is negative then the sequence will stop that many elements from the end of the array.
If it is omitted, then the sequence will have everything from offset up until the end of the array.
Note that array_slice() will ignore array keys, and will calculate offsets and lengths based on the actual positions of elements within the array.
Example 1. array_slice() examples
$input = array ("a", "b", "c", "d", "e"); $output = array_slice ($input, 2); / / returns "c", "d", and "e "$output = array_slice ($input, 2, -1); / / returns "c", "d" $output = array_slice ($input, -2, 1); / / returns "d "$output = array_slice ($input, 0, 3); / / returns "a", "b", and "c"
See also array_splice().
Prev
Home
Next
Up
PHP Manual
Prev
Next
It returns an array containing the extracted elements.
If offset is negative then it starts that far from the end of the input array.
If length is omitted, removes everything from offset to the end of the array.
If length is specified and is positive, then that many elements will be removed.
If length is specified and is negative then the end of the removed portion will be that many elements from the end of the array.
Tip: to remove everything from offset to the end of the array when replacement is also specified, use count( $input) for length.
If replacement array is specified, then the removed elements are replaced with elements from this array.
If offset and length are such that nothing is removed, then the elements from the replacement array are inserted in the place specified by the offset.
Tip: if the replacement is just one element it is not necessary to put array() around it, unless the element is an array itself.
The following equivalences hold:
Returns the array consisting of removed elements.
Example 1. array_splice() examples
$input = array ("red", "green", "blue", "yellow"); array_splice ($input, 2); / / $input is now array ("red", "green") $input = array ("red", "green", "blue", "yellow"); array_splice ($input, 1, -1); / / $input is now array ("red", "yellow") $input = array ("red", "green", "blue", "yellow"); array_splice ($input, 1, count($input), "orange"); / / $input is now array ("red", "orange") $input = array ("red", "green", "blue", "yellow"); array_splice ($input, -1, 1, array("black", "maroon")); / / $input is now array ("red", "green", / / "blue", "black", "maroon")
See also array_slice().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_sum() returns the sum of values in an array as an integer or float.
Example 1. array_sum() examples
The printout of the program above will be:
Note:
PHP versions prior to 4.0.6 modified the passed array itself and converted strings to numbers (which most of the time converted them to zero, depending on their value).
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_unique() takes input array and returns a new array without duplicate values.
Note that keys are preserved. array_unique() sorts the values treated as string at first, then will keep the first key encountered for every value, and ignore all following keys.
It does not mean that the key of the first related value from the unsorted array will be kept.
Note:
Two elements are considered equal if and only if (string) $elem1 === (string) $elem2.
In words: when the string representation is the same.
The first element will be used.
Warning
This was broken in PHP 4.0.4!
Example 1. array_unique() example
$input = array ("a "= "green", "red", "b" = "green", "blue", "red"); $result = array_unique ($input); print_r($result);
This will output:
Array ([b] = green [1] = blue [2] = red)
Example 2. array_unique() and types
The printout of the program above will be (PHP 4.0.6):
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_unshift() prepends passed elements to the front of the array.
Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order.
All numerical array keys will be modified to start counting from zero while literal keys won 't be touched.
Returns the new number of elements in the array.
Example 1. array_unshift() example
$queue = array ("orange", "banana"); array_unshift ($queue, "apple", "raspberry");
This would result in $queue having the following elements:
Array ([0] = apple [1] = raspberry [2] = orange [3] = banana)
See also array_shift(), array_push(), and array_pop().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_values() returns all the values from the input array.
Example 1. array_values() example
$array = array ("size "= "XL", "color" = "gold"); print_r(array_values ($array));
This will output:
Note:
This function was added to PHP 4, below is an implementation for those still using PHP 3.
Example 2.
Implementation of array_values() for PHP 3 users
See also array_keys().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Typically, function takes on two parameters.
The array parameter 's value being the first, and the key / index second.
If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback function.
If function function requires more parameters than given to it, an error of level E_WARNING will be generated each time array_walk() calls function.
These warnings may be suppressed by prepending the PHP error operator @ to the array_walk() call, or by using error_reporting().
Note:
If function needs to be working with the actual values of the array, specify the first parameter of function as a reference.
Then, any changes made to those elements will be made in the original array itself.
Note:
Passing the key and userdata to function was added in 4.0.0
array_walk() is not affected by the internal array pointer of array. array_walk() will walk through the entire array regardless of pointer position.
To reset the pointer, use reset().
In PHP 3, array_walk() resets the pointer.
Add / delete elements, unset elements, etc.
If the array that array_walk() is applied to is changed, the behavior of this function is undefined, and unpredictable.
Example 1. array_walk() example
?php $fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); function test_alter ($item1, $key, $prefix) {$item1 = "$prefix: $item1";} function test_print ($item2, $key) {echo "$key. $item2 br \n";} echo "Before ...:\n"; array_walk ($fruits, 'test_print'); array_walk ($fruits, 'test_alter', 'fruit'); echo "... and after:\n"; array_walk ($fruits, 'test_print');?
The printout of the program above will be:
Before...: d. lemon a. orange b. banana c. apple... and after: d. fruit: lemon a. fruit: orange b. fruit: banana c. fruit: apple
See also list(), foreach, each(), and call_user_func_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.
This is used mainly when sorting associative arrays where the actual element order is significant.
Example 1. arsort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); arsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
a = orange d = lemon b = banana c = apple
The fruits have been sorted in reverse alphabetical order, and the index associated with each element has been maintained.
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also asort(), rsort(), ksort(), and sort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ascii2ebcdic() is an Apache-specific function which is available only on EBCDIC based operating systems (OS / 390, BS2000).
It translates the ASCII encoded string ascii_str to its equivalent EBCDIC representation (binary safe), and returns the result.
See also the reverse function ebcdic2ascii()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This function is not implemented on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin() 's range.
See also asinh(), acos() and atan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.
This is used mainly when sorting associative arrays where the actual element order is significant.
Example 1. asort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); asort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
c = apple b = banana d = lemon a = orange
The fruits have been sorted in alphabetical order, and the index associated with each element has been maintained.
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also arsort(), rsort(), ksort(), and sort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
aspell_check() checks the spelling of a word and returns TRUE if the spelling is correct, FALSE if not.
Example 1. aspell_check()
$aspell_link = aspell_new( "english"); if (aspell_check($aspell_link, "testt")) {echo "This is a valid spelling";} else {echo "Sorry, wrong spelling";}
Prev
Home
Next
aspell_check_raw
Up
PHP Manual
Prev
Next
aspell_check_raw() checks the spelling of a word, without changing its case or trying to trim it in any way and returns TRUE if the spelling is correct, FALSE if not.
Example 1. aspell_check_raw()
$aspell_link = aspell_new( "english"); if (aspell_check_raw($aspell_link, "test")) {echo "This is a valid spelling";} else {echo "Sorry, wrong spelling";}
Prev
Home
Next
Aspell functions [deprecated]
Up
PHP Manual
Prev
Next
aspell_new() opens up a new dictionary and returns the dictionary link identifier for use in other aspell functions.
Returns FALSE on error.
Example 1. aspell_new()
Prev
Home
Next
Up
PHP Manual
Prev
Next
aspell_suggest() returns an array of possible spellings for the given word.
Example 1. aspell_suggest()
$aspell_link = aspell_new( "english"); if (!aspell_check($aspell_link, "test")) {$suggestions = aspell_suggest($aspell_link, "test"); foreach ($suggestions as $suggestion) {echo "Possible spelling: $suggestion br \n";}}
Prev
Home
Next
Up
BCMath Arbitrary Precision Mathematics Functions
PHP Manual
Prev
Next
If the assertion is given as a string it will be evaluated as PHP code by assert().
The advantages of a string assertion are less overhead when assertion checking is off and messages containing the assertion expression when an assertion fails.
This means that if you pass a boolean condition as assertion this condition will not show up as parameter to the assertion function which you may have defined with the assert_options() function, the condition is converted to a string before calling that handler function, and the boolean FALSE is converted as the empty string.
You may use them for sanity-checks that test for conditions that should always be TRUE and that indicate some programming errors if not or to check for the presence of certain features like extension functions or certain system limits and features.
As a rule of thumb your code should always be able to work correctly if assertion checking is not activated.
The assert_options() function and / or ASSERT_CALLBACK configuration directive allow a callback function to be set to handle failed assertions.
While this information can be captured via other methods, using assertions makes it much faster and easier!
The callback function should accept three arguments.
The second argument will contain the line the assertion failed on and the third argument will contain the expression that failed (if any - literal values such as 1 or "two "will not be passed via this argument)
Example 1.
Handle a failed assertion with a custom handler
Prev
Home
Next
Up
PHP Manual
Prev
Next
Using assert_options() you may set the various assert() control options or just query their current settings.
Assert Options
option
ini-parameter
default
description
enable assert() evaluation
issue a PHP warning for each failed assertion
terminate execution on failed assertions
disable error_reporting during assertion expression evaluation
user function to call on failed assertions
assert_options() will return the original setting of any option or FALSE on errors.
Prev
Home
Next
PHP Options Information
Up
PHP Manual
Prev
Next
This function calculates the arc tangent of the two variables x and y.
The function returns the result in radians, which is between -PI and PI (inclusive).
See also acos() and atan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This function is not implemented on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan() 's range.
See also atanh(), asin() and acos().
Prev
Home
Next
Up
PHP Manual
Prev
Next
base64_decode() decodes encoded_data and returns the original data.
The returned data may be binary.
See also: base64_encode(), RFC 2045 section 6.8.
Prev
Home
Next
URL Functions
Up
PHP Manual
Prev
Next
base64_encode() returns data encoded with base64.
This encoding is designed to make binary data survive transport through transport layers that are not 8-bit clean, such as mail bodies.
Base64-encoded data takes about 33% more space than the original data.
See also: base64_decode(), chunk_split(), RFC 2045 section 6.8.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing number represented in base tobase.
The base in which number is given is specified in frombase.
Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.
Example 1. base_convert()
$binary = base_convert ($hexadecimal, 16, 2);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Given a string containing a path to a file, this function will return the base name of the file.
If the filename ends in suffix this will also be cut off.
On Windows, both slash (/) and backslash (\) are used as path separator character.
In other environments, it is the forward slash (/).
Example 1. basename() example
$path = "/ home / httpd / html / index.php"; $file = basename ($path); / / $file is set to "index.php" $file = basename ($path ,".php"); / / $file is set to "index "
Note:
The suffix parameter was added in PHP 4.1.0.
See also: dirname()
Prev
Home
Next
Filesystem functions
Up
PHP Manual
Prev
Next
Adds the left_operand to the right_operand and returns the sum in a string.
The optional scale parameter is used to set the number of digits after the decimal place in the result.
See also bcsub().
Prev
Home
Next
BCMath Arbitrary Precision Mathematics Functions
Up
PHP Manual
Prev
Next
Compares the left_operand to the right_operand and returns the result as an integer.
The optional scale The optional scale parameter is used to set the number of digits after the decimal place which will be used in the comparison.
The return value is 0 if the two operands are equal.
If the left_operand is larger than the right_operand the return value is +1 and if the left_operand is less than the right_operand the return value is -1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Divides the left_operand by the right_operand and returns the result.
The optional scale sets the number of digits after the decimal place in the result.
See also bcmul().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Get the modulus of the left_operand using modulus.
See also bcdiv().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Multiply the left_operand by the right_operand and returns the result.
The optional scale sets the number of digits after the decimal place in the result.
See also bcdiv().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Raise x to the power y.
The optional scale can be used to set the number of digits after the decimal place in the result.
See also bcpowmod(), and bcsqrt().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use the fast-exponentiation method to raise x to the power y with respect to the modulus modulus.
The optional scale can be used to set the number of digits after the decimal place in the result.
The following two statements are functionally identical.
The bcpowmod() version however, executes in less time and can accept larger parameters.
?php $a = bcpowmod( $x,$y,$mod); $b = bcmod(bcpow($x,$y),$mod); / * $a and $b are equal to each other. * /?
Note:
Because this method uses the modulus operation, non-natural numbers may give unexpected results.
A natural number is any positive non-zero integer.
See also bcpow(), and bcmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sets the default scale parameter for all subsequent bc math functions that do not explicitly specify a scale parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the square root of the operand.
The optional scale parameter sets the number of digits after the decimal place in the result.
See also bcpow().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Subtracts the right_operand from the left_operand and returns the result in a string.
The optional scale parameter is used to set the number of digits after the decimal place in the result.
See also bcadd().
Prev
Home
Next
Up
Bzip2 Compression Functions
PHP Manual
Prev
Next
Returns an ASCII string containing the hexadecimal representation of str.
See also pack() and unpack().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the decimal equivalent of the binary number represented by the binary_string argument.
The largest number that can be converted is 31 bits of 1 's or 2147483647 in decimal.
See also: decbin().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Gettext
Up
PHP Manual
Prev
Next
The bindtextdomain() function sets the path for a domain.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Closes the bzip2 file referenced by the pointer bz.
Returns TRUE on success or FALSE on failure.
The file pointer must be valid, and must point to a file successfully opened by bzopen().
See also bzopen().
Prev
Home
Next
Bzip2 Compression Functions
Up
PHP Manual
Prev
Next
bzcompress() compresses the source string and returns it as bzip2 encoded data.
The optional parameter blocksize specifies the blocksize used during compression and should be a number from 1 to 9 with 9 giving the best compression, but using more resources to do so. blocksize defaults to 4.
The optional parameter workfactor controls how the compression phase behaves when presented with worst case, highly repetitive, input data.
The value can be between 0 and 250 with 0 being a special case and 30 being the default value.
Regardless of the workfactor, the generated output is the same.
Example 1. bzcompress() Example
?php $str = "sample data"; $bzstr = bzcompress($str, 9); print ($bzstr);?
See also bzdecompress().
Prev
Home
Next
Up
PHP Manual
Prev
Next
bzdecompress() decompresses the source string containing bzip2 encoded data and returns it.
If the optional parameter small is TRUE, an alternative decompression algorithm will be used which uses less memory (the maximum memory requirement drops to around 2300K) but works at roughly half the speed.
See the bzip2 documentation for more information about this feature.
Example 1. bzdecompress()
?php $start_str = "This is not an honest face ?"; $bzstr = bzcompress($start_str); print ("Compressed String:"); print ($bzstr); print ("\n br \n "); $str = bzdecompress($bzstr); print ("Decompressed String:"); print ($str); print ("\n br \n ");?
See also bzcompress().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error number of any bzip2 error returned by the file pointer bz.
See also bzerror() and bzerrstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error number and error string, in an associative array, of any bzip2 error returned by the file pointer bz.
Example 1. bzerror() Example
?php $error = bzerror( $bz); echo $error["errno"]; echo $error["errstr"];?
See also bzerrno() and bzerrstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error string of any bzip2 error returned by the file pointer bz.
See also bzerrno() and bzerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Forces a write of all buffered bzip2 data for the file pointer bz.
Returns TRUE on success or FALSE on failure.
See also bzread() and bzwrite().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Opens a bzip2 (.bz2) file for reading or writing. filename is the name of the file to open. mode is similar to the fopen() function (`r 'for read, `w' for write, etc.).
If the open fails, the function returns FALSE, otherwise it returns a pointer to the newly opened file.
Example 1. bzopen() Example
?php $bz = bzopen( "/ tmp / foo.bz2", "r"); $decompressed_file = bzread($bz, filesize(" / tmp / foo.bz2")); bzclose($bz); print ("The contents of / tmp / foo.bz2 are:"); print ("\n br \n "); print ($decompressed_file);?
See also bzclose().
Prev
Home
Next
Up
PHP Manual
Prev
Next
bzread() reads up to length bytes from the bzip2 file pointer referenced by bz.
Reading stops when length Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.
If the optional parameter length is not specified, bzread() will read 1024 (uncompressed) bytes at a time.
Example 1. bzread() Example
See also bzwrite() and bzopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
bzwrite() writes the contents of the string data to the bzip2 file stream pointed to by bz.
If the optional length argument is given, writing will stop after length (uncompressed) bytes have been written or the end of string is reached, whichever comes first.
Example 1. bzwrite() Example
?php $str = "uncompressed data"; $bz = bzopen(" / tmp / foo.bz2", "w"); bzwrite($bz, $str, strlen($str)); bzclose($bz);?
See also bzread() and bzopen().
Prev
Home
Next
Up
Calendar functions
PHP Manual
Prev
Next
This function will return the number of days in the month of year for the specified calendar.
See also jdtounix().
Prev
Home
Next
Calendar functions
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Take the following:
See also: call_user_func_array(), call_user_method(), call_user_method_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Note:
Prev
Home
Next
Class / Object Functions
Up
PHP Manual
Prev
Next
The call_user_method() function is deprecated as of PHP 4.1.0, use the call_user_func() variety with the array ($obj, "method_name") syntax instead.
An example of usage is below, where we define a class, instantiate an object and use call_user_method() to call indirectly its print_info method.
?php class Country {var $NAME; var $TLD; function Country($name, $tld) {$this - NAME = $name; $this - TLD = $tld;} function print_info($prestr="") {echo $prestr ."Country: ".$this - NAME ."\n"; echo $prestr ."Top Level Domain: ".$this - TLD ."\n";}} $cntry = new Country("Peru" ,"pe"); echo "* Calling the object method directly\n"; $cntry - print_info(); echo "\n* Calling the same method indirectly\n"; call_user_method ("print_info", $cntry, "\t");?
See also call_user_func_array(), call_user_func(), and call_user_method_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
CCVS API Functions
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
COM support functions for Windows
PHP Manual
Prev
Next
Example 1. ceil() example
See also floor() and round().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Changes PHP 's current directory to directory.
See also getcwd().
Prev
Home
Next
Directory functions
Up
PHP Manual
Prev
Next
Returns TRUE if the date given is valid; otherwise returns FALSE.
Checks the validity of the date formed by the arguments.
A date is considered valid if:
year is between 1 and 32767 inclusive
month is between 1 and 12 inclusive
Day is within the allowed number of days for the given month.
Leap year s are taken into consideration.
See also mktime() and strtotime().
Prev
Home
Next
Date and Time functions
Up
PHP Manual
Prev
Next
Searches DNS for records of type type corresponding to host.
Returns TRUE if any records are found; returns FALSE if no records were found or if an error occurred.
A, MX, NS, SOA, PTR, CNAME, AAAA, or ANY.
Host may either be the IP address in dotted-quad notation or the host name.
Note:
Note:
Try the PEAR class Net_DNS.
See also getmxrr(), gethostbyaddr(), gethostbyname(), gethostbynamel(), and the named(8) manual page.
Prev
Home
Next
Network Functions
Up
PHP Manual
Prev
Next
Attempts to change the group of the file filename to group (specified by name or number).
Only the superuser may change the group of a file arbitrarily; other users may change the group of a file to any group of which that user is a member.
Returns TRUE on success or FALSE on failure.
See also chown() and chmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to change the mode of the file specified by filename to that given in mode.
Note that mode is not automatically assumed to be an octal value, so strings (such as "g+w") will not work properly.
To ensure the expected operation, you need to prefix mode with a zero (0):
chmod ("/ somedir / somefile", 755); / / decimal; probably incorrect chmod (" / somedir / somefile", "u+rwx,go+rx"); / / string; incorrect chmod (" / somedir / somefile", 0755); / / octal; correct value of mode
The mode parameter consists of three octal number components specifying access restrictions for the owner, the user group in which the owner is in, and to everybody else in this order.
One component can be computed by adding up the needed permissions for that target user base.
Number 1 means that you grant execute rights, number 2 means that you make the file writeable, number 4 means that you make the file readable.
Add up these numbers to specify needed rights.
You can also read more about modes on UNIX systems with 'man 1 chmod' and'man 2 chmod '.
/ / Read and write for owner, nothing for everybody else chmod ("/ somedir / somefile", 0600); / / Read and write for owner, read for everybody else chmod (" / somedir / somefile", 0644); / / Everything for owner, read and execute for others chmod (" / somedir / somefile", 0755); / / Everything for owner, read and execute for owner's group chmod (" / somedir / somefile", 0750);
Note:
The current user is the user under which PHP runs.
It is probably not the same user you use for normal shell or FTP access.
Returns TRUE on success or FALSE on failure.
See also chown() and chgrp().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of rtrim().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to change the owner of the file filename to user user (specified by name or number).
Only the superuser may change the owner of a file.
Returns TRUE on success or FALSE on failure.
See also chmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
$str .= chr( 27); / * add an escape character at the end of $str * / / * Often this is more useful * / $str = sprintf("The string ends in escape: %c", 27);
You can find an ASCII-table over here: http: / /www.asciitable.com.
See also sprintf() with a format string of %c.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure..
Note:
Note:
This function is not implemented on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode output to match RFC 2045 semantics.
It inserts end (defaults to "\r\n") every chunklen characters (defaults to 76).
It returns the new string leaving the original string untouched.
Example 1. chunk_split() example
See also explode(), split() wordwrap() and RFC 2045.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also get_declared_classes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance.
However, in certain cases, you may want to clear the cached information.
For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script 's operation, you may elect to clear the status cache.
In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file.
Note:
This function caches information about specific filenames, so you only need to call clearstatcache() if you are performing multiple operations on the same filename and require the information about that particular file to not be cached.
Affected functions include stat(), lstat(), file_exists(), is_writable(), is_readable(), is_executable(), is_file(), is_dir(), is_link(), filectime(), fileatime(), filemtime(), fileinode(), filegroup(), fileowner(), filesize(), filetype(), and fileperms().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Closes the directory stream indicated by dir_handle.
The stream must have previously been opened by opendir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
closelog() closes the descriptor being used to write to the system logger.
The use of closelog() is optional.
See also define_syslog_variables(), syslog() and openlog().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Increases the components reference counter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the value of the property of the COM component referenced by com_object.
Returns FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
com_invoke() invokes a method of the COM component referenced by com_object.
Returns FALSE on error, returns the function_name 's return value on success.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
com_load() creates a new COM component and returns a reference to it.
Returns FALSE on failure.
Possible values for codepage are CP_ACP, CP_MACCP, CP_OEMCP, CP_SYMBOL, CP_THREAD_ACP, CP_UTF7 and CP_UTF8.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
compact() takes a variable number of parameters.
Each parameter can be either a string containing the name of the variable, or an array of variable names.
The array can contain other arrays of variable names inside it; compact() handles it recursively.
For each of these, compact() For each of these, compact() looks for a variable with that name in the current symbol table and adds it to the output array such that the variable name becomes the key and the contents of the variable become the value for that key.
In short, it does the opposite of extract().
It returns the output array with all the variables added to it.
Any strings that are not set will simply be skipped.
Example 1. compact() example
After this, $result will be:
See also extract().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias for com_get().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias for com_set().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias for com_set().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Decreases the components reference counter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the value of the property of the COM component referenced by com_object.
Returns the newly set value if succeeded, FALSE on error.
Prev
Home
Next
Up
Class / Object Functions
PHP Manual
Prev
Next
Returns TRUE if client disconnected.
See the Connection Handling description in the Features chapter for a complete explanation.
Prev
Home
Next
Miscellaneous functions
Up
PHP Manual
Prev
Next
See the Connection Handling description in the Features chapter for a complete explanation.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated
See the Connection Handling description in the Features chapter for a complete explanation.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. constant() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the given string converted from one Cyrillic character set to another.
The from and to arguments are single characters that represent the source and target Cyrillic character sets.
The supported types are:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Makes a copy of a file.
Returns TRUE if the copy succeeded, FALSE otherwise.
Example 1. copy() example
Note:
As of PHP 4.3.0, both source and dest may be URLs if the "fopen wrappers" have been enabled.
See fopen() for more details.
If dest is an URL, the copy operation may fail if the wrapper does not support overwriting of existing files.
Warning
If the destination file already exists, it will be overwritten.
See also move_uploaded_file(), rename(), and the section of the manual about handling file uploads.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The arg parameter is in radians.
See also acos(), sin() tan() and deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.
The optional parameter Mode default to 0.
Depending on mode count_chars() returns one of the following:
0 - an array with the byte-value as key and the frequency of every byte as value.
1 - same as 0 but only byte-values with a frequency greater than zero are listed.
2 - same as 0 but only byte-values with a frequency equal to zero are listed.
3 - a string containing all used byte-values is returned.
4 - a string containing all not used byte-values is returned.
See also strpos() and substr_count().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of elements in var, which is typically an array (since anything else will have one element).
If var is not an array, 1 will be returned (exception: count (NULL) equals 0).
Warning
count() may return 0 for a variable that isn't set, but it may also return 0 for a variable that has been initialized with an empty array.
Use isset() to test if a variable is set.
Please see the Arrays section of the manual for a detailed explanation of how arrays are implemented and used in PHP.
Example 1. count() example
$a[ 0] = 1; $a[1] = 3; $a[2] = 5; $result = count ($a); / / $result == 3 $b[0] = 7; $b[5] = 9; $b[10] = 11; $result = count ($b); / / $result == 3;
Note:
The sizeof() function is an alias for count().
See also is_array(), isset(), and strlen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_add_annotation() adds a note with the lower left corner at (llx, lly) and the upper right corner at (urx, ury).
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
Prev
Home
Next
ClibPDF functions
Up
PHP Manual
Prev
Next
The cpdf_add_outline() function adds a bookmark with text text that points to the current page.
Example 1.
Adding a page outline
?php $cpdf = cpdf_open( 0); cpdf_page_init($cpdf, 1, 0, 595, 842); cpdf_add_outline($cpdf, 0, 0, 0, 1, "Page 1"); / /... / / some drawing / /... cpdf_finalize($cpdf); Header("Content-type: application / pdf"); cpdf_output_buffer($cpdf); cpdf_close($cpdf);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_arc() function draws an arc with center at point (x-coor, y-coor) and radius radius, starting at angle start and ending at angle end.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_circle().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_begin_text() function starts a text section.
It must be ended with cpdf_end_text().
Example 1.
Text output
?php cpdf_begin_text( $pdf); cpdf_set_font($pdf, 16, "Helvetica", "WinAnsiEncoding"); cpdf_text($pdf, 100, 100, "Some text"); cpdf_end_text($pdf)?
See also cpdf_end_text().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_circle() function draws a circle with center at point (x-coor, y-coor) and radius radius.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_arc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_clip() function clips all drawing to the current path.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_close() function closes the pdf document.
This should be the last function even after cpdf_finalize(), cpdf_output_buffer() and cpdf_save_to_file().
See also cpdf_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_closepath_fill_stroke() function closes, fills the interior of the current path with the current fill color and draws current path.
See also cpdf_closepath(), cpdf_stroke(), cpdf_fill(), cpdf_setgray_fill(), cpdf_setgray(), cpdf_setrgbcolor_fill(), cpdf_setrgbcolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_closepath() function closes the current path.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_closepath_stroke() function is a combination of cpdf_closepath() and cpdf_stroke().
Then clears the path.
See also cpdf_closepath(), cpdf_stroke().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_continue_text() function outputs the string in text in the next line.
See also cpdf_show_xy(), cpdf_text(), cpdf_set_leading(), cpdf_set_text_pos().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_curveto() function draws a Bezier curve from the current point to the point (x3, y3) using (x1, y1) and (x2, y2) as control points.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_moveto(), cpdf_rmoveto(), cpdf_rlineto(), cpdf_lineto().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_end_text() function ends a text section which was started with cpdf_begin_text().
Example 1.
Text output
?php cpdf_begin_text( $pdf); cpdf_set_font($pdf, 16, "Helvetica", "WinAnsiEncoding"); cpdf_text($pdf, 100, 100, "Some text"); cpdf_end_text($pdf)?
See also cpdf_begin_text().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_fill() function fills the interior of the current path with the current fill color.
See also cpdf_closepath(), cpdf_stroke(), cpdf_setgray_fill(), cpdf_setgray(), cpdf_setrgbcolor_fill(), cpdf_setrgbcolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_fill_stroke() function fills the interior of the current path with the current fill color and draws current path.
See also cpdf_closepath(), cpdf_stroke(), cpdf_fill(), cpdf_setgray_fill(), cpdf_setgray(), cpdf_setrgbcolor_fill(), cpdf_setrgbcolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_finalize() function ends the document.
You still have to call cpdf_close()
See also cpdf_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_finalize_page() function ends the page with page number page number.
This function is only for saving memory.
A finalized page takes less memory but cannot be modified anymore.
See also cpdf_page_init().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_global_set_document_limits() function sets several document limits.
This function has to be called before cpdf_open() to take effect.
It sets the limits for any document open afterwards.
See also cpdf_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_import_jpeg() function opens an image stored in the file with the name file name.
The format of the image has to be jpeg.
The image is placed on the current page at position (x-coor, y-coor).
The image is rotated by angle degrees.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_place_inline_image().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_lineto() function draws a line from the current point to the point with coordinates (x-coor, y-coor).
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_moveto(), cpdf_rmoveto(), cpdf_curveto().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_moveto() function set the current point to the coordinates x-coor and y-coor.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_newpath() starts a new path on the document given by the pdf document parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_open() function opens a new pdf document.
The first parameter turns document compression on if it is unequal to 0.
The second optional parameter sets the file in which the document is written.
If it is omitted the document is created in memory and can either be written into a file with the cpdf_save_to_file() or written to standard output with cpdf_output_buffer().
Note:
The return value will be needed in further versions of ClibPDF as the first parameter in all other functions which are writing to the pdf document.
The ClibPDF library takes the filename "-" as a synonym for stdout.
If PHP is compiled as an apache module this will not work because the way ClibPDF outputs to stdout does not work with apache.
You can solve this problem by skipping the filename and using cpdf_output_buffer() to output the pdf document.
See also cpdf_close(), cpdf_output_buffer().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_output_buffer() The cpdf_output_buffer() function outputs the pdf document to stdout.
The document has to be created in memory which is the case if cpdf_open() has been called with no filename parameter.
See also cpdf_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_page_init() function starts a new page with height height and width width.
The page has number page number and orientation orientation. orientation can be 0 for portrait and 1 for landscape.
The last optional parameter unit sets the unit for the coordinate system.
The value should be the number of postscript points per unit.
Since one inch is equal to 72 points, a value of 72 would set the unit to one inch.
The default is also 72.
See also cpdf_set_current_page().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_place_inline_image() function places an image created with the php image functions on the page at position (x-coor, y-coor).
The image can be scaled at the same time.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_import_jpeg().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_rect() function draws a rectangle with its lower left corner at point (x-coor, y-coor).
This height is set to height.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_restore() function restores the environment saved with cpdf_save().
Very useful if you want to translate or rotate an object without effecting other objects.
Example 1.
Save / Restore
?php cpdf_save( $pdf); / / do all kinds of rotations, transformations,... cpdf_restore($pdf)?
See also cpdf_save().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_rlineto() function draws a line from the current point to the relative point with coordinates (x-coor, y-coor).
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_moveto(), cpdf_rmoveto(), cpdf_curveto().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_rmoveto() function set the current point relative to the coordinates x-coor and y-coor.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_moveto().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_rotate() function set the rotation in degrees to angle.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_save() function saves the current environment.
Very useful if you want to translate or rotate an object without effecting other objects.
See also cpdf_restore().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_save_to_file() function outputs the pdf document into a file if it has been created in memory.
This function is not needed if the pdf document has been open by specifying a filename as a parameter of cpdf_open().
See also cpdf_output_buffer(), cpdf_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_scale() function set the scaling factor in both directions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_char_spacing() function sets the spacing between characters.
See also cpdf_set_word_spacing(), cpdf_set_leading().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_creator() function sets the creator of a pdf document.
See also cpdf_set_subject(), cpdf_set_title(), cpdf_set_keywords().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_current_page() function set the page on which all operations are performed.
One can switch between pages until a page is finished with cpdf_finalize_page().
See also cpdf_finalize_page().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setdash() function set the dash pattern white white units and black black units.
If both are 0 a solid line is set.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setflat() function set the flatness to a value between 0 and 100.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_font() function sets the current font face, font size and encoding.
Currently only the standard postscript fonts are supported.
The last parameter encoding can take the following values: "MacRomanEncoding", "MacExpertEncoding", "WinAnsiEncoding", and" NULL "." NULL "stands for the font's built-in encoding.
See the ClibPDF Manual for more information, especially how to support asian fonts.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setgray_fill() function sets the current gray value to fill a path.
See also cpdf_setrgbcolor_fill().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setgray() function sets the current drawing and filling color to the given gray value.
See also cpdf_setrgbcolor_stroke(), cpdf_setrgbcolor_fill().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setgray_stroke() function sets the current drawing color to the given gray value.
See also cpdf_setrgbcolor_stroke().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_horiz_scaling() function sets the horizontal scaling to scale percent.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_keywords() function sets the keywords of a pdf document.
See also cpdf_set_title(), cpdf_set_creator(), cpdf_set_subject().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_leading() function sets the distance between text lines.
This will be used if text is output by cpdf_continue_text().
See also cpdf_continue_text().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setlinecap() function set the linecap parameter between a value of 0 and 2.
0 = butt end, 1 = round, 2 = projecting square.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setlinejoin() function set the linejoin parameter between a value of 0 and 2.
0 = miter, 1 = round, 2 = bevel.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setlinewidth() function set the line width to width.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setmiterlimit() function set the miter limit to a value greater or equal than 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_page_animation() function set the transition between following pages.
The value of transition can be
0 for none,
1 for two lines sweeping across the screen reveal the page,
2 for multiple lines sweeping across the screen reveal the page,
3 for a box reveals the page,
4 for a single line sweeping across the screen reveals the page,
5 for the old page dissolves to reveal the page,
6 for the dissolve effect moves from one screen edge to another,
7 for the old page is simply replaced by the new page (default)
The value of duration is the number of seconds between page flipping.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setrgbcolor_fill() function sets the current rgb color value to fill a path.
See also cpdf_setrgbcolor_stroke(), cpdf_setrgbcolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setrgbcolor() function sets the current drawing and filling color to the given rgb color value.
See also cpdf_setrgbcolor_stroke(), cpdf_setrgbcolor_fill().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_setrgbcolor_stroke() function sets the current drawing color to the given rgb color value.
See also cpdf_setrgbcolor_fill(), cpdf_setrgbcolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_subject() function sets the subject of a pdf document.
See also cpdf_set_title(), cpdf_set_creator(), cpdf_set_keywords().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_text_matrix() function sets a matrix which describes a transformation applied on the current text font.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_text_pos() function sets the position of text for the next cpdf_show() function call.
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
See also cpdf_show(), cpdf_text().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_text_rendering() function determines how text is rendered.
The possible values for mode are 0=fill text, 1=stroke text, 2=fill and stroke text, 3=invisible, 4=fill text and add it to clipping path, 5=stroke text and add it to clipping path, 6=fill and stroke text and add it to clipping path, 7=add it to clipping path.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_text_rise() function sets the text rising to value units.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_title() function sets the title of a pdf document.
See also cpdf_set_subject(), cpdf_set_creator(), cpdf_set_keywords().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_set_word_spacing() function sets the spacing between words.
See also cpdf_set_char_spacing(), cpdf_set_leading().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_show() function outputs the string in text at the current position.
See also cpdf_text(), cpdf_begin_text(), cpdf_end_text().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_show_xy() function outputs the string text at position with coordinates (x-coor, y-coor).
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
Note:
The function cpdf_show_xy() is identical to cpdf_text() without the optional parameters.
See also cpdf_text().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_stringwidth() function returns the width of the string in text.
It requires a font to be set before.
See also cpdf_set_font().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_stroke() function draws a line along current path.
See also cpdf_closepath(), cpdf_closepath_stroke().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_text() function outputs the string text at position with coordinates (x-coor, y-coor).
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
The optional parameter orientation is the rotation of the text in degree.
The optional parameter alignmode determines how the text is aligned.
See the ClibPDF documentation for possible values.
See also cpdf_show_xy().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The cpdf_translate() function set the origin of coordinate system to the point (x-coor, y-coor).
The optional parameter mode determines the unit length.
If it 's 0 or omitted the default unit as specified for the page is used.
Otherwise the coordinates are measured in postscript points disregarding the current unit.
Prev
Home
Next
Up
Crack functions
PHP Manual
Prev
Next
Returns TRUE if password is strong, or FALSE otherwise.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
crack_check() performs an obscure check with the given password on the specified dictionary.
If dictionary is not specified, the last opened dictionary is used.
Prev
Home
Next
Crack functions
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
crack_closedict() closes the specified dictionary crack_closedict() closes the specified dictionary identifier.
If dictionary is not specified, the current dictionary is closed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
crack_getlastmessage() returns the message from the last obscure check.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a dictionary resource identifier on success, or FALSE on failure.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
crack_opendict() opens the specified CrackLib dictionary for use with crack_check().
Note:
Only one dictionary may be open at a time.
See also: crack_check(), and crack_closedict().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
?php $checksum = crc32( "The quick brown fox jumped over the lazy dog ."); printf("%u\n", $checksum);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates an anonymous function from the parameters passed, and returns a unique name for it.
Usually the args will be passed as a single quote delimited string, and this is also recommended for the code.
The reason for using single quoted strings, is to protect the variable names from parsing, otherwise, if you use double quotes there will be a need to escape the variable names, e.g. \$avar.
You can use this function, to (for example) create a function from information gathered at run time:
Example 1.
Creating an anonymous function with create_function()
$newfunc = create_function( '$a,$b' ,'return "ln($a) + ln($b) = ".log($a * $b) ;'); echo "New anonymous function: $newfunc\n"; echo $newfunc(2,M_E) ."\n"; / / outputs / / New anonymous function: lambda_1 / / ln(2) + ln(2.718281828459) = 1.6931471805599
Example 2.
Making a general processing function with create_function()
function process( $var1, $var2, $farr) {for ($f=0; $f count($farr); $f++) echo $farr[$f]($var1,$var2) ."\n";} / / create a bunch of math functions $f1 = 'if ($a =0) {return "b*a^2 = ".$b*sqrt($a);} else {return false ;}'; $f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a) ;"; $f3 = 'if ($a 0 $b != 0) {return "ln(a) / b = ".log($a) / $b;} else {return false; }'; $farr = array (create_function('$x,$y', 'return "some trig: ".(sin($x) + $x*cos($y)) ;'), create_function('$x,$y', 'return "a hypotenuse: ".sqrt($x*$x + $y*$y) ;'), create_function('$a,$b', $f1), create_function('$a,$b', $f2), create_function('$a,$b', $f3)); echo "\nUsing the first array of anonymous functions\n"; echo "parameters:
2.3445, M_PI\n"; process(2.3445, M_PI, $farr); / / now make a bunch of string processing functions $garr = array (create_function('$b,$a' ,'if (strncmp($a,$b,3) == 0) return "** \"$a\ "'. 'and \"$b\"\n** Look the same to me! (looking at the first 3 chars)" ;'), create_function('$a,$b' ,'; return "CRCs: ".crc32($a).", ".crc32(b) ;'), create_function('$a,$b' ,'; return "similar(a,b) = ".similar_text($a,$b, $p) ."($p%)" ;')); echo "\nUsing the second array of anonymous functions\n"; process("Twas brilling and the slithy toves", "Twas the night", $garr);
Using the first array of anonymous functions parameters:
2.3445, M_PI some trig: -1.6291725057799 a hypotenuse:
3.9199852871011 b*a^2 = 4.8103313314525 min( b^2+a, a^2,b) = 8.6382729035898 ln(a / b) = 0.27122299212594 Using the second array of anonymous functions ** "Twas the night "and "Twas brilling and the slithy toves" ** Look the same to me! (looking at the first 3 chars) CRCs: -725381282, 1908338681 similar(a,b) = 11(45.833333333333%)
Example 3.
Using anonymous functions as callback functions
$av = array( "the ","a" ,"that ","this "); array_walk($av, create_function( '$v,$k' ,'$v = $v ."mango" ;')); print_r($av); / / for PHP 3 use var_dump() / / outputs: / / Array / / (/ / [0] = the mango / / [1] = a mango / / [2] = that mango / / [3] = this mango / /) / / an array of strings ordered from shorter to longer $sv = array("small" ,"larger" ,"a big string" ,"it is a string thing"); print_r($sv); / / outputs: / / Array / / (/ / [0] = small / / [1] = larger / / [2] = a big string / / [3] = it is a string thing / /) / / sort it from longer to shorter usort($sv, create_function('$a,$b' ,'return strlen($b) - strlen($a) ;')); print_r($sv); / / outputs: / / Array / / (/ / [0] = it is a string thing / / [1] = a big string / / [2] = larger / / [3] = small / /)
Prev
Home
Next
Up
PHP Manual
Prev
Next
crypt() will return an encrypted string using the standard Unix DES -based encryption algorithm or alternative algorithms that may be available on the system.
See the Unix man page for your crypt function for more information.
If the salt argument is not provided, one will be randomly generated by PHP.
Some operating systems support more than one type of encryption.
In fact, sometimes the standard DES-based encryption is replaced by an MD5-based encryption algorithm.
The encryption type is triggered by the salt argument.
At install time, PHP determines the capabilities of the crypt function and will accept salts for other encryption types.
If no salt is provided, PHP will auto-generate a standard two character salt by default, unless the default encryption type on the system is MD5, in which case a random MD5-compatible salt is generated.
PHP sets a constant named CRYPT_SALT_LENGTH which tells you whether a regular two character salt applies to your system or the longer twelve character salt is applicable.
If you are using the supplied salt, you should be aware that the salt is generated once.
If you are calling this function recursively, this may impact both appearance and security.
The standard DES-based encryption crypt() returns the salt as the first two characters of the output.
It also only uses the first eight characters of str, so longer strings that start with the same eight characters will generate the same result (when the same salt is used).
On systems where the crypt() function supports multiple encryption types, the following constants are set to 0 or 1 depending on whether the given type is available:
CRYPT_STD_DES - Standard DES-based encryption with a two character salt
CRYPT_MD5 - MD5 encryption with a twelve character salt starting with $1$
CRYPT_BLOWFISH - Blowfish encryption with a sixteen character salt starting with $2$
There is no decrypt function, since crypt() uses a one-way algorithm.
Example 1. crypt() examples
?php $password = crypt( "My1sTpassword"); # let salt be generated # You should pass the entire results of crypt() as the salt for comparing a # password, to avoid problems when different hashing algorithms are used. (As # it says above, standard DES-based password hashing uses a 2-character salt, # but MD5-based hashing uses 12.) if (crypt($user_input,$password) == $password) {echo "Password verified !";}?
See also md5() and the Mcrypt extension.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is either a letter or a digit, FALSE Returns TRUE if every character in text is either a letter or a digit, FALSE otherwise.
In the standard C locale letters are just [A-Za-z].
The function is equivalent to (ctype_alpha($text) _BAR_ _BAR_ ctype_digit($text)).
See also ctype_alpha(), ctype_digit(), and setlocale().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is a letter from the current locale, FALSE otherwise.
In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) _BAR_ _BAR_ ctype_lower($text)), but other languages have letters that are considered neither upper nor lower case.
See also ctype_upper(), ctype_lower(), and setlocale().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text has a special control function, FALSE otherwise.
Control characters are e.g. line feed, tab, esc.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is a decimal digit, FALSE otherwise.
See also ctype_alnum() and ctype_xdigit().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is printable and actually creates visible output (no white space), FALSE otherwise.
See also ctype_alnum(), ctype_print(), and ctype_punct().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is a lowercase letter in the current locale.
See also ctype_alpha() and ctype_upper().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text will actually create output (including blanks).
Returns FALSE if text contains control characters or characters that do not have any output or control function at all.
See also ctype_cntrl(), ctype_graph(), and ctype_punct().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is printable, but neither letter, digit or blank, FALSE otherwise.
See also ctype_cntrl(), ctype_graph(), and ctype_punct().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text creates some sort of white space, FALSE otherwise.
Besides the blank character this also includes tab, vertical tab, line feed, carriage return and form feed characters.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is a uppercase letter in the current locale.
See also ctype_alpha() and ctype_lower().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if every character in text is a hexadecimal 'digit', that is a decimal digit or a character from [A-Fa-f], FALSE otherwise.
See also ctype_digit().
Prev
Home
Next
Up
Database (dbm-style) abstraction layer functions
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Cybercash payment functions
PHP Manual
Prev
Next
Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array.
The current() function simply returns the array element that's currently being pointed by the internal pointer.
It does not move the pointer in any way.
If the internal pointer points beyond the end of the elements list, current() returns FALSE.
Warning
If the array contains empty elements (0 or "", the empty string) then this function will return FALSE for these elements as well.
This makes it impossible to determine if you are really at the end of the list in such an array using current().
To properly traverse an array that may contain empty elements, use the each() function.
See also end(), next(), prev(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Cybercash payment functions
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function returns an associative array with the elements "errcode" and, if "errcode "is FALSE, "outbuff" (string), "outLth "(long) and "macbuff" (string).
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function returns an associative array with the elements "errcode" and, if "errcode "is FALSE, "outbuff" (string), "outLth "(long) and "macbuff" (string).
Prev
Home
Next
Up
PHP Manual
Prev
Next
cybermut_creerformulairecm() is used to generate the HTML form of request for payment.
Example 1.
First step of payment (equiv cgi1.c)
?php / / Directory where the keys are located putenv( "CMKEYDIR= / var / creditmut / cles"); / / Version number $VERSION="1.2"; $retour = cybermut_creerformulairecm ("https: / /www.creditmutuel.fr / test / telepaiement / paiement.cgi", $VERSION, "1234567890", "300FRF", $REFERENCE, $TEXTE_LIBRE, $URL_RETOUR, $URL_RETOUR_OK, $URL_RETOUR_ERR, "francais", "company", "Paiement par carte bancaire"); echo $retour;?
See also cybermut_testmac() and cybermut_creerreponsecm().
Prev
Home
Next
Up
PHP Manual
Prev
Next
cybermut_creerreponsecm() returns a string containing delivery acknowledgement message.
The parameter is "OK" if the message of confirmation of the payment was correctly identified by cybermut_testmac().
Any other chain is regarded as an error message.
See also cybermut_creerformulairecm() and cybermut_testmac().
Prev
Home
Next
Up
PHP Manual
Prev
Next
cybermut_testmac() is used to make sure that there was not data diddling contained in the received message of confirmation.
Pay attention to parameters code-retour and texte-libre, which cannot be evaluated as is, because of the dash.
You must retrieve them by using:
?php $code_retour = $_GET[ "code-retour"]; $texte_libre = $_GET["texte-libre"];?
Example 1.
Last step of payment (equiv cgi2.c)
?php / / Make sure that Enable Track Vars is ON. / / Directory where are located the keys putenv( "CMKEYDIR= / var / creditmut / cles"); / / Version number $VERSION="1.2"; $texte_libre = $_GET["texte-libre"]; $code_retour = $_GET["code-retour"]; $mac_ok = cybermut_testmac($MAC,$VERSION,$TPE,$date,$montant,$reference,$texte_libre,$code_retour); if ($mac_ok) {/ / / / insert data processing here / / / / $result=cybermut_creerreponsecm("OK");} else {$result=cybermut_creerreponsecm("Document Falsifie");}?
See also cybermut_creerformulairecm() and cybermut_creerreponsecm().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
In otherwords, timestamp is optional and defaults to the value of time().
Note:
On windows this range is limited from 01-01-1970 to 19-01-2038.
To generate a timestamp from a string representation of the date, you may be able to use strtotime().
Table 1.
format character
Example returned values
Lowercase Ante meridiem and Post meridiem
A
AM or PM
000 through 999
01 to 31
Mon through Sun
January through December
1 through 12
0 through 23
12-hour format of an hour with leading zeros
H
00 through 23
00 to 59
Whether or not the date is in daylights savings time
j
1 to 31
A full textual representation of the day of the week
L
1 if it is a leap year, 0 otherwise.
Numeric representation of a month, with leading zeros
M
Jan through Dec
1 through 12
Example: +0200
Thu, 21 Dec 2000 16:01:07 +0200
00 through 59
English ordinal suffix for the day of the month, 2 characters
Works well with j
28 through 31
Timezone setting of this machine
EST, MDT...
Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
w
0 (for Sunday) through 6 (for Saturday)
Example:
Examples:
Examples:
0 through 366
The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.
The Z format will always return 0 when using gmdate().
?php / / Prints something like:
Wednesday 15th of January 2003 05:51:38 AM echo date ("l dS of F Y h:i:s A"); / / Prints:
July 1, 2000 is on a Saturday echo "July 1, 2000 is on a". date ("l", mktime(0,0,0,7,1,2000));?
If the character with a backslash is already a special sequence, you may need to also escape the backslash.
It is possible to use date() and mktime() together to find dates in the future or the past.
?php $tomorrow = mktime (0,0,0,date("m") ,date("d")+1,date("Y")); $lastmonth = mktime (0,0,0,date("m")-1,date("d"), date("Y")); $nextyear = mktime (0,0,0,date("m"), date("d"), date("Y")+1);?
This can be more reliable than simply adding or subtracting the number of seconds in a day or month to a timestamp because of daylight savings time.
Note that you should escape any other characters, as any which currently have a special meaning will produce undesirable results, and other characters may be assigned meaning in future PHP versions.
Example 4. date() Formatting
March 10th, 2001, 5:16:18 pm $today = date( "F j, Y, g:i a"); / / March 10, 2001, 5:16 pm $today = date("m.d.y"); / / 03.10.01 $today = date("j, n, Y"); / / 10, 3, 2001 $today = date("Ymd"); / / 20010310 $today = date('h-i-s, j-m-y, it is w Day z '); / / 05-16-17, 10-03-01, 1631 1618 6 Fripm01 $today = date('\i\t \i\s \t\h\e jS \d\a\y .'); / / It is the 10th day. $today = date("D M j G:i:s T Y"); / / Sat Mar 10 15:16:08 MST 2001 $today = date('H:m:s \m \i\s\ \m\o\n\t\h'); / / 17:03:17 m is month $today = date("H:i:s"); / / 17:16:17?
To format dates in other languages, you should use the setlocale() and strftime() functions.
See also getlastmod(), gmdate(), mktime(), strftime() and time().
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_close() closes the established database and frees all resources specified by handle.
handle is a database handle returned by dba_open().
dba_close() does not return any value.
See also: dba_open() and dba_popen()
Prev
Home
Next
Database (dbm-style) abstraction layer functions
Up
PHP Manual
Prev
Next
dba_delete() deletes the entry specified by key from the database specified with handle.
key is the key of the entry which is deleted.
handle is a database handle returned by dba_open().
dba_delete() returns TRUE or FALSE, if the entry is deleted or not deleted, respectively.
See also: dba_exists(), dba_fetch(), dba_insert(), and dba_replace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_exists() checks whether the specified key exists in the database specified by handle.
Key is the key the check is performed for.
Handle is a database handle returned by dba_open().
dba_exists() returns TRUE or FALSE, if the key is found or not found, respectively.
See also: dba_fetch(), dba_delete(), dba_insert(), and dba_replace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Key is the key the data is specified by.
Skip is the number of key-value pairs to ignore when using cdb databases.
Handle is a database handle returned by dba_open().
See also: dba_exists(), dba_delete(), dba_insert(), and dba_replace().
The skip parameter is available since PHP 4.3 to support cdb 's capability of multiple keys having the same name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_firstkey() returns the first key of the database specified by handle and resets the internal key pointer.
This permits a linear search through the whole database.
Handle is a database handle returned by dba_open().
dba_firstkey() returns the key or FALSE depending on whether it succeeds or fails, respectively.
See also: dba_nextkey() and example 2 in the DBA examples
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_insert() inserts the entry described with key and value into the database specified by handle.
It fails, if an entry with the same key already exists.
key is the key of the entry to be inserted.
value is the value to be inserted.
handle is a database handle returned by dba_open().
dba_insert() returns TRUE or FALSE, depending on whether it succeeds of fails, respectively.
See also: dba_exists() dba_delete() dba_fetch() dba_replace()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_nextkey() returns the next key of the database specified by handle and advances the internal key pointer.
handle is a database handle returned by dba_open().
dba_nextkey() returns the key or FALSE depending on whether it succeeds or fails, respectively.
See also: dba_firstkey() and example 2 in the DBA examples
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_open() establishes a database instance for path with mode using handler.
path is commonly a regular path in your filesystem.
If you want to test the access and do not want to wait for the lock you can add "t" as third character.
When none of "d", "l" or "-" is used dba will lock on the database file as it would with "d ".
It is passed all optional parameters given to dba_open() and can act on behalf of them.
dba_open() returns a positive handle or FALSE, in the case the database was opened successfull or fails, respectively.
There can only be one writer for one database file.
Also read during write is not allowed.
See the follwoing table:
DBA locking
wait: the second call waits until dba_close() is called for the first.
This is important to know since in such cases locking is simply ignored on the resource and other solutions have to be found.
In PHP versions before PHP 4.3.0 you must use semaphores to guard against simultanious database access for any database handler with the exception of GDBM.
See also: dba_popen() dba_close()
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_optimize() optimizes the underlying database specified by handle.
handle is a database handle returned by dba_open().
dba_optimize() returns TRUE or FALSE, if the optimization succeeds or fails, respectively.
See also: dba_sync()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
dba_popen() establishes a persistent database instance for path with mode using handler.
path is commonly a regular path in your filesystem.
mode is "r" for read access, "w "for read / write access to an already existing database, "c" for read / write access and database creation if it doesn't currently exist, and "n "for create, truncate and read / write access.
handler is the name of the handler which shall be used for accessing path.
It is passed all optional parameters given to dba_popen() and can act on behalf of them.
dba_popen() returns a positive handle or FALSE, in the case the open is successful or fails, respectively.
See also: dba_open() dba_close()
Prev
Home
Next
Up
PHP Manual
Prev
Next
dba_replace() replaces or inserts the entry described with key and value into the database specified by handle.
key is the key of the entry to be inserted.
value is the value to be inserted.
handle is a database handle returned by dba_open().
dba_replace() returns TRUE or FALSE, depending on whether it succeeds of fails, respectively.
See also: dba_exists(), dba_delete(), dba_fetch(), and dba_insert().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Adds the data in the record to the database.
If the number of items in the supplied record isn 't equal to the number of fields in the database, the operation will fail and FALSE will be returned.
Prev
Home
Next
dBase functions
Up
PHP Manual
Prev
Next
Closes the database associated with dbase_identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fields parameter is an array of arrays, each array describing the format of one field in the database.
Each field consists of a name, a character indicating the field type, a length, and a precision.
The types of fields available are:
These do not have a length or precision.
Memo. (Note that these aren't supported by PHP.) These do not have a length or precision.
Date (stored as YYYYMMDD).
These do not have a length or precision.
Number.
These have both a length and a precision (the number of digits after the decimal point).
String.
If the database is successfully created, a dbase_identifier is returned, otherwise FALSE is returned.
Example 1.
Creating a dBase database file
/ / "database" name $dbname = "/ tmp / test.dbf"; / / database "definition" $def = array (array("date", "D"), array("name", "C", 50), array("age", "N", 3, 0), array("email", "C", 128), array("ismember", "L")); / / creation if (!dbase_create($dbname, $def)) print "strong Error! / strong";
Prev
Home
Next
Up
PHP Manual
Prev
Next
Marks record to be deleted from the database.
To actually remove the record from the database, you must also call dbase_pack().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the data from record in an array.
The array is indexed starting at 0, and includes an associative member named 'deleted' which is set to 1 if the record has been marked for deletion (see dbase_delete_record().
Dates are left as strings
Integers that would have caused an overflow (32 bits) are returned as strings
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the data from record in an associative array.
Each field is converted to the appropriate PHP type, except:
Integers that would have caused an overflow (32 bits) are returned as strings
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of fields (columns) in the specified database.
Field numbers are between 0 and dbase_numfields( $db)-1, while record numbers are between 1 and dbase_numrecords($db).
Example 1.
Using dbase_numfields()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of records (rows) in the specified database.
Record numbers are between 1 and dbase_numrecords( $db), while field numbers are between 0 and dbase_numfields($db )-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a dbase_identifier for the opened database, or FALSE if the database couldn 't be opened.
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Packs the specified database (permanently deleting all records marked for deletion using dbase_delete_record()).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Replaces the data associated with the record record_number with the data in the record in the database.
If the number of items in the supplied record is not equal to the number of fields in the database, the operation will fail and FALSE will be returned.
dbase_record_number is an integer which spans from 1 to the number of records in the database (as returned by dbase_numrecords()).
Prev
Home
Next
Up
DBM Functions [deprecated]
PHP Manual
Prev
Next
dba_sync() synchronizes the database specified by handle.
This will probably trigger a physical write to disk, if supported.
handle is a database handle returned by dba_open().
dba_sync() returns TRUE or FALSE, if the synchronization succeeds or fails, respectively.
See also: dba_optimize()
Prev
Home
Next
Up
Date and Time functions
PHP Manual
Prev
Next
Prev
Home
Next
DBM Functions [deprecated]
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Unlocks and closes the specified database.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deletes the value for key in the database.
Returns FALSE if the key didn 't exist in the database.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if there is a value associated with the key.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the value associated with key.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the first key in the database.
Note that no particular order is guaranteed since the database may be built using a hash-table, which doesn 't guarantee any ordering.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Adds the value to the database with the specified key.
Returns -1 if the database was opened read-only, 0 if the insert was successful, and 1 if the specified key already exists. (To replace the value, use dbmreplace().)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the next key after key.
For example:
Example 1.
Visiting every key / value pair in a DBM database
Prev
Home
Next
Up
PHP Manual
Prev
Next
The first argument is the full-path filename of the DBM file to be opened and the second is the file open mode which is one of "r", "n", "c" or "w "for read-only, new (implies read-write, and most likely will truncate an already-existing database of the same name), create (implies read-write, and will not truncate an already-existing database of the same name) and read-write respectively.
Returns an identifier to be passed to the other DBM functions on success, or FALSE on failure.
If NDBM support is used, NDBM will actually create filename.dir and filename.pag files.
GDBM only uses one file, as does the internal flat-file support, and Berkeley DB creates a filename.db file.
Note that PHP does its own file locking in addition to any file locking that may be done by the DBM library itself.
PHP does not delete the .lck files it creates.
It uses these files simply as fixed inodes on which to do the file locking.
For more information on DBM files, see your Unix man pages, or obtain GNU 's GDBM.
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Replaces the value for the specified key in the database.
This will also add the key to the database if it didn 't already exist.
Prev
Home
Next
Up
dbx functions
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
Direct IO functions
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Example 1. dbx_close() example
?php $link = dbx_connect( DBX_MYSQL, "localhost", "db", "username", "password") or die ("Could not connect"); print("Connected successfully"); dbx_close($link);?
Note:
Always refer to the module-specific documentation as well.
See also: dbx_connect().
Prev
Home
Next
dbx functions
Up
PHP Manual
Prev
Next
dbx_compare() returns 0 if the row_a[$column_key] is equal to row_b[$column_key], and 1 or -1 if the former is greater or is smaller than the latter one, respectively, or vice versa if the flag is set to DBX_CMP_DESC. dbx_compare() is a helper function for dbx_sort() to ease the make and use of the custom sorting function.
The flags can be set to specify comparison direction:
DBX_CMP_ASC - ascending order
DBX_CMP_DESC - descending order
DBX_CMP_NATIVE - no type conversion
DBX_CMP_TEXT - compare items as strings
DBX_CMP_NUMBER - compare items numerically
Example 1. dbx_compare() example
?php function user_re_order ($a, $b) {$rv = dbx_compare ($a, $b, "parentid", DBX_CMP_DESC); if (!$rv) {$rv = dbx_compare ($a, $b, "id", DBX_CMP_NUMBER);} return $rv;} $link = dbx_connect (DBX_ODBC, "", "db", "username", "password") or die ("Could not connect"); $result = dbx_query ($link, "SELECT id, parentid, description FROM table ORDER BY id"); / / data in $result is now ordered by id dbx_sort ($result, "user_re_order"); / / date in $result is now ordered by parentid (descending), then by id dbx_close ($link);?
See also dbx_sort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
dbx_connect() returns an object on success, FALSE on error.
If a connection has been made but the database could not be selected, the connection is closed and FALSE is returned.
The persistent parameter can be set to DBX_PERSISTENT, if so, a persistent connection will be created.
The module parameter can be either a string or a constant, though the latter form is preferred.
The possible values are given below, but keep in mind that they only work if the module is actually loaded.
DBX_MYSQL or "mysql"
DBX_ODBC or "odbc"
DBX_PGSQL or "pgsql"
DBX_MSSQL or "mssql"
DBX_FBSQL or "fbsql" (available from PHP 4.1.0)
DBX_SYBASECT or "sybase_ct" (available from PHP 4.2.0)
DBX_OCI8 or "oci8" (available from PHP 4.3.0)
The host, database, username and password parameters are expected, but not always used depending on the connect functions for the abstracted module.
The returned object has three properties:
It is the name of the currently selected database.
It is a valid handle for the connected database, and as such it can be used in module-specific functions (if required).
$link = dbx_connect (DBX_MYSQL, "localhost", "db", "username", "password"); mysql_close ($link - handle); / / dbx_close($link) would be better here
It is used internally by dbx only, and is actually the module number mentioned above.
Example 1. dbx_connect() example
?php $link = dbx_connect (DBX_ODBC, "", "db", "username", "password", DBX_PERSISTENT) or die ("Could not connect"); print ("Connected successfully"); dbx_close ($link);?
Note:
Always refer to the module-specific documentation as well.
See also: dbx_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
dbx_error() returns a string containing the error message from the last function call of the abstracted module (e.g. mysql module).
If there are multiple connections in the same module, just the last error is given.
If there are connections on different modules, the latest error is returned for the module specified by the link_identifier parameter.
Example 1. dbx_error() example
?php $link = dbx_connect( DBX_MYSQL, "localhost", "db", "username", "password") or die ("Could not connect"); $result = dbx_query($link, "select id from non_existing_table"); if ($result == 0) {echo dbx_error ($link);} dbx_close ($link);?
Note:
Always refer to the module-specific documentation as well.
The error message for Microsoft SQL Server is actually the result of the mssql_get_last_message() function.
The error message for Oracle (oci8) is not implemented (yet).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. dbx_escape_string() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
dbx_query() returns an object or 1 on success, and 0 on failure.
The result object is returned only if the query given in sql_statement produces a result set.
Example 1.
How to handle the returned value
?php $link = dbx_connect( DBX_ODBC, "", "db", "username", "password") or die("Could not connect"); $result = dbx_query($link, 'SELECT id, parentid, description FROM table'); if (is_object($result)) {/ /... do some stuff here, see detailed examples below... / / first, print out field names and types / / then, draw a table filled with the returned field values} else if ($result == 1) {echo("Query executed successfully, but no result set returned");} else {exit("Query failed");} dbx_close($link);?
The flags parameter is used to control the amount of information that is returned.
It may be any combination of the following constants with the bitwise OR operator (_BAR_).
The DBX_COLNAMES_* flags override the dbx.colnames_case setting from php.ini.
It is always set, that is, the returned object has a data property which is a 2 dimensional array indexed numerically.
For example, in the expression data[ 2][3] 2 stands for the row (or record) number and 3 stands for the column (or field) number.
The first row and column are indexed at 0.
If DBX_RESULT_ASSOC is also specified, the returning object contains the information related to DBX_RESULT_INFO too, even if it was not specified.
It provides info about columns, such as field names and field types.
It effects that the field values can be accessed with the respective column names used as keys to the returned object 's data property.
Associated results are actually references to the numerically indexed data, so modifying data[ 0][0] causes that data[0]['field_name_for_first_column'] is modified as well.
DBX_RESULT_INDEX _BAR_ DBX_RESULT_INFO _BAR_ DBX_RESULT_ASSOC - this is the default, if flags is not specified.
The returing object has four or five properties depending on flags:
It is a valid handle for the connected database, and as such it can be used in module specific functions (if required).
These contain the number of columns (or fields) and rows (or records) respectively.
$result = dbx_query ($link, 'SELECT id FROM table'); echo $result - rows; / / number of records echo $result - cols; / / number of fields
It is returned only if either DBX_RESULT_INFO or DBX_RESULT_ASSOC is specified in the flags parameter.
It is a 2 dimensional array, that has two named rows (name and type) to retrieve column information.
Example 2. lists each field 's name and type
This property contains the actual resulting data, possibly associated with column names as well depending on flags.
If DBX_RESULT_ASSOC is set, it is possible to use $result - data[ 2]["field_name"].
Example 3. outputs the content of data property into HTML table
Note:
Always refer to the module-specific documentation as well.
Column names for queries on an Oracle database are returned in lowercase.
See also: dbx_escape_string() and dbx_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Note:
It is always better to use ORDER BY SQL clause instead of dbx_sort(), if possible.
Example 1. dbx_sort() example
?php function user_re_order ($a, $b) {$rv = dbx_compare ($a, $b, "parentid", DBX_CMP_DESC); if (!$rv) {$rv = dbx_compare ($a, $b, "id", DBX_CMP_NUMBER);} return $rv;} $link = dbx_connect (DBX_ODBC, "", "db", "username", "password") or die ("Could not connect"); $result = dbx_query ($link, "SELECT id, parentid, description FROM tbl ORDER BY id"); / / data in $result is now ordered by id dbx_sort ($result, "user_re_order"); / / data in $result is now ordered by parentid (descending), then by id dbx_close ($link);?
See also dbx_compare().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function allows you to override the current domain for a single message lookup.
It also allows you to specify a category.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Oracle 8 functions
PHP Manual
Prev
Next
Table 1.
Example 1. debug_backtrace() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is only available in PHP 3.
For more information see the appendix on Debugging PHP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is only available in PHP 3.
For more information see the appendix on Debugging PHP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing a binary representation of the given number argument.
The largest number that can be converted is 4294967295 in decimal resulting to a string of 32 1 's.
See also: bindec().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The largest number that can be converted is 2147483647 in decimal resulting to "7fffffff".
See also hexdec().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing an octal representation of the given number argument.
The largest number that can be converted is 2147483647 in decimal resulting to "17777777777".
See also octdec().
Prev
Home
Next
Up
PHP Manual
Prev
Next
?php if (defined("CONSTANT")) {/ / Note that it should be quoted echo CONSTANT; / /}?
See also define(), constant(), get_defined_constants() and the section on Constants.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Defines a named constant.
See the section on constants for more details.
The name of the constant is given by name; the value is given by value.
The optional third parameter case_insensitive is also available.
If the value TRUE is given, then the constant will be defined case-insensitive.
The default behaviour is case-sensitive; i.e.
CONSTANT and Constant represent different values.
Defining Constants
?php define ("CONSTANT", "Hello world ."); echo CONSTANT; / / outputs "Hello world. "echo Constant; / / outputs "Constant" and issues a notice. define ("GREETING", "Hello you .",TRUE); echo GREETING; / / outputs "Hello you. "echo Greeting; / / outputs "Hello you."?
Returns TRUE on success or FALSE on failure.
See also defined(), constant() and the section on Constants.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Initializes all constants used in the syslog functions.
See also openlog(), syslog() and closelog().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function converts number from degrees to the radian equivalent.
See also rad2deg().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is a dummy manual entry to satisfy those people who are looking for unlink() or unset() in the wrong place.
See also: unlink() to delete files, unset() to delete variables.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The dgettext() function allows you to override the current domain for a single message lookup.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of exit().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function dio_close() closes the file descriptor resource.
Prev
Home
Next
Direct IO functions
Up
PHP Manual
Prev
Next
The dio_fcntl() function performs the operation specified by cmd on the file descriptor fd.
Some commands require additional arguments args to be supplied.
arg is an associative array, when cmd is F_SETLK or F_SETLLW, with the following keys:
"start" - offset where lock begins
"length" - size of locked area. zero means to end of file
"wenth" - Where l_start is relative to: can be SEEK_SET, SEEK_END and SEEK_CUR
"type" - type of lock: can be F_RDLCK (read lock), F_WRLCK (write lock) or F_UNLCK (unlock)
cmd can be one of the following operations:
F_SETLK - Lock is set or cleared.
If the lock is held by someone else dio_fcntl() returns -1.
F_SETLKW - like F_SETLK, but in case the lock is held by someone else, dio_fcntl() waits until the lock is released.
F_GETLK - dio_fcntl() F_GETLK - dio_fcntl() returns an associative array (as described above) if someone else prevents lock.
F_DUPFD - finds the lowest numbered available file descriptor greater or equal than arg and returns them.
To use O_ASYNC you will need to use the pcntl extension.
Prev
Home
Next
Up
PHP Manual
Prev
Next
dio_open() opens a file and returns a new file descriptor for it, or FALSE if any error occurred.
If flags is O_CREAT, optional third parameter mode will set the mode of the file (creation permissions).
The flags parameter can be one of the following options:
O_RDONLY - opens the file for read access
O_WRONLY - opens the file for write access
O_RDWR - opens the file for both reading and writing
O_CREAT - creates the file, if it doesn 't already exist
O_EXCL - if both, O_CREAT and O_EXCL are set, dio_open() fails, if file already exists
O_TRUNC - if file exists, and its opened for write access, file will be truncated to zero length.
O_APPEND - write operations write data at the end of file
O_NONBLOCK - sets non blocking mode
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function dio_read() reads and returns n bytes from file with descriptor resource.
If n is not specified, dio_read() reads 1K sized block and returns them.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function dio_seek() is used to change the file position of the file with descriptor resource.
The parameter whence specifies how the position pos should be interpreted:
SEEK_SET - specifies that pos is specified from the beginning of the file
This count may be positive or negative
SEEK_END - Specifies that pos is a count of characters from the end of the file.
If you set the position past the current end, and actually write data, you will extend the file with zeros up to that position
Prev
Home
Next
Up
PHP Manual
Prev
Next
Function dio_stat() returns information about the file with file descriptor fd. dio_stat() returns an associative array with the following keys:
"device" - device
"inode" - inode
"mode" - mode
"nlink" - number of hard links
"uid" - user id
"gid" - group id
"device_type" - device type (if inode device)
"size" - total size in bytes
"blocksize" - blocksize
"blocks" - number of blocks allocated
"atime" - time of last access
"mtime" - time of last modification
"ctime" - time of last change
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Function dio_truncate() causes the file referenced by fd to be truncated to at most offset bytes in size.
If the file previously was shorter, it is unspecified whether the file is left unchanged or is extended.
Returns 0 on success, otherwise -1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function dio_write() writes up to len bytes from data to file fd.
If len is not specified, dio_write() writes all data to the specified file. dio_write() returns the number of bytes written to fd.
Prev
Home
Next
Up
Directory functions
PHP Manual
Prev
Next
Given a string containing a path to a file, this function will return the name of the directory.
On Windows, both slash (/) and backslash (\) are used as path separator character.
In other environments, it is the forward slash (/).
Example 1. dirname() example
$path = "/ etc / passwd"; $file = dirname ($path); / / $file is set to" / etc "
Note:
In PHP 4.0.3, dirname() was fixed to be POSIX-compliant.
Essentially, this means that if there are no slashes in path, a dot ('.') is returned, indicating the current directory.
Otherwise, the returned string is path with any trailing / component removed.
Note that this means that you will often get a slash or a dot back from dirname() in situations where the older functionality would have given you the empty string.
See also: basename(), pathinfo(), and realpath().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.
Example 1. disk_free_space() example
$df = disk_free_space( "/ "); / / $df contains the number of bytes / / available on" / "
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use that function instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.
Example 1. disk_total_space() example
$df = disk_total_space( "/ "); / / $df contains the total number of / / bytes available on" / "
Prev
Home
Next
Up
PHP Manual
Prev
Next
Loads the PHP extension given by the parameter library.
The library parameter is only the filename of the extension to load which also depends on your platform.
For example, the sockets extension (if compiled as a shared module, not the default!) would be called sockets.so on unix platforms whereas it is called php_sockets.dll on the windows platform.
Returns TRUE on success or FALSE on failure.
If the functionality of loading modules is not available (see Note) or has been disabled (either by turning it off enable_dl or by enabling safe_mode in php.ini) an E_ERROR is emitted and execution is stopped.
If dl() fails because the specified library couldn't be loaded, in addition to FALSE an E_WARNING message is emitted.
Use extension_loaded() to test whether a given extension is already available or not.
This works on both built-in extensions and dynamically loaded ones (either through php.ini or dl()).
Example:
The directory where the extension is loaded from depends on your platform:
Windows - If not explicitly set in the php.ini, the extension is loaded from c:\php4\extensions\ by default.
Unix - If not explicitly set in the php.ini, the default extension directory depends on
whether PHP has been built with --enable-debug or not
whether PHP has been built with (experimental) ZTS (Zend Thread Safety) support or not
the current internal ZEND_MODULE_API_NO (Zend internal module API number, which is basically the date on which a major module API change happened, e.g.
20010901)
Use the extensions statement in your php.ini when operating under such an environment.
However, the CGI and CLI build are not affected!
See also Extension Loading Directives and extension_loaded().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Check DNS records corresponding to a given Internet host name or IP address
Prev
Home
Next
Up
PHP Manual
Prev
Next
Get MX records corresponding to a given Internet host name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Table 1.
Note:
Table 2.
Note:
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the name of the attribute.
See also domattribute_value().
Prev
Home
Next
DOM XML functions
Up
PHP Manual
Prev
Next
Check DOM standard for a detailed explanation.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the value of the attribute.
See also domattribute_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Adds a root element node to a dom document and returns the new node.
The element name is given in the passed parameter.
Example 1.
Creating a simple HTML document header
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a new instance of class DomAttribute.
The name of the attribute is the value of the first parameter.
The value of the attribute is the value of the second parameter.
This node will not show up in the document unless it is inserted with e.g. domnode_append_child().
The return value is FALSE if an error occured.
See also domnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_cdata_section(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), and domnode_insert_before().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a new instance of class DomCData.
The content of the cdata is the value of the passed parameter.
This node will not show up in the document unless it is inserted with e.g. domnode_append_child().
The return value is FALSE if an error occured.
See also domnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_attribute(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), and domnode_insert_before().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a new instance of class DomComment.
The content of the comment is the value of the passed parameter.
This node will not show up in the document unless it is inserted with e.g. domnode_append_child().
The return value is FALSE if an error occured.
See also domnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_attribute(), domdocument_create_processing_instruction(), domdocument_create_entity_reference() and domnode_insert_before().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a new instance of class DomEntityReference.
The content of the entity reference is the value of the passed parameter.
This node will not show up in the document unless it is inserted with e.g. domnode_append_child().
The return value is FALSE if an error occured.
See also domnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_cdata_section(), domdocument_create_processing_instruction(), domdocument_create_attribute(), and domnode_insert_before().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a new instance of class DomCData.
The content of the pi is the value of the passed parameter.
This node will not show up in the document unless it is inserted with e.g. domnode_append_child().
The return value is FALSE if an error occured.
See also domnode_append_child(), domdocument_create_element(), domdocument_create_text(), domdocument_create_cdata_section(), domdocument_create_attribute(), domdocument_create_entity_reference(), and domnode_insert_before().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a new instance of class DomText.
The content of the text is the value of the passed parameter.
This node will not show up in the document unless it is inserted with e.g. domnode_append_child().
The return value is FALSE if an error occured.
See also domnode_append_child(), domdocument_create_element(), domdocument_create_comment(), domdocument_create_text(), domdocument_create_attribute(), domdocument_create_processing_instruction(), domdocument_create_entity_reference(), and domnode_insert_before().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an object of class DomDocumentType.
In versions of PHP before 4.3 this has been the class Dtd, but the DOM Standard does not know such a class.
See also the methods of class DomDocumentType.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the root element node of a document.
The following example returns just the element with name CHAPTER and prints it.
The other node - - the comment - - is not returned.
Example 1.
Retrieving root element
?php include( "example.inc"); if(!$dom = domxml_open_mem($xmlstr)) {echo "Error while parsing the document\n"; exit;} $root = $dom - document_element(); print_r($root);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates an XML document from the dom representation.
This function usually is called after building a new dom document from scratch as in the example below.
The format specifies whether the output should be neatly formatted, or not.
The first parameter specifies the name of the filename and the second parameter, whether it should be compressed or not.
Example 1.
Creating a simple HTML document header
?php $doc = domxml_new_doc( "1.0"); $root = $doc - create_element("HTML"); $root = $doc - append_child($root); $head = $doc - create_element("HEAD"); $head = $root - append_child($head); $title = $doc - create_element("TITLE"); $title = $head - append_child($title); $text = $doc - create_text_node("This is the title"); $text = $title - append_child($text); $doc - dump_file(" / tmp / test.xml", false, true);?
See also domdocument_dump_mem() domdocument_html_dump_mem().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Creates an XML document from the dom representation.
This function usually is called after building a new dom document from scratch as in the example below.
The format specifies whether the output should be neatly formatted, or not.
Example 1.
Creating a simple HTML document header
?php $doc = domxml_new_doc( "1.0"); $root = $doc - create_element("HTML"); $root = $doc - append_child($root); $head = $doc - create_element("HEAD"); $head = $root - append_child($head); $title = $doc - create_element("TITLE"); $title = $head - append_child($title); $text = $doc - create_text_node("This is the title"); $text = $title - append_child($text); echo "PRE"; echo htmlentities($doc - dump_mem(true)); echo "/ PRE";?
Note:
The first parameter was added in PHP 4.3.0.
See also domdocument_dump_file(), domdocument_html_dump_mem().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is similar to domdocument_get_elements_by_tagname() but searches for an element with a given id.
According to the DOM standard this requires a DTD which defines the attribute ID to be of type ID, though the current implementation simply does an xpath search for "/ /*[@ID = '%s']".
This does not comply to the DOM standard which requires to return null if it is not known which attribute is of type id.
This behaviour is likely to be fixed, so do not rely on the current behaviour.
See also domdocument_get_elements_by_tagname()
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also domdocument_add_root()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates an HTML document from the dom representation.
This function usually is called after building a new dom document from scratch as in the example below.
Example 1.
Creating a simple HTML document header
?php $doc = domxml_new_doc( "1.0"); $root = $doc - create_element("HTML"); $root = $doc - append_child($root); $head = $doc - create_element("HEAD"); $head = $root - append_child($head); $title = $doc - create_element("TITLE"); $title = $head - append_child($title); $text = $doc - create_text_node("This is the title"); $text = $title - append_child($text); echo "PRE"; echo htmlentities($doc - html_dump_mem()); echo "/ PRE";?
See also domdocument_dump_file(), domdocument_html_dump_mem().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
.NET functions
Up
PHP Manual
Prev
Next
This function is an alias of floatval().
Note:
This alias is a left-over from a function-renaming.
In older versions of PHP you' ll need to use this alias of the floatval() function, because floatval() wasn't yet available in that version.
Prev
Home
Next
Variable Functions
Up
PHP Manual
Prev
Next
Returns the current key and value pair from the array array and advances the array cursor.
This pair is returned in a four-element array, with the keys 0, 1, key, and value.
Elements 0 and key contain the key name of the array element, and 1 and value contain the data.
If the internal pointer for the array points past the end of the array contents, each() returns FALSE.
Example 1. each() examples
$bar now contains the following key / value pairs:
$bar now contains the following key / value pairs:
each() is typically used in conjunction with list() to traverse an array; for instance, $_POST:
Example 2.
Traversing $_POST with each()
echo "Values submitted via POST method: br / \n"; reset ($_POST); while (list ($key, $val) = each ($_POST)) {echo "$key = $val br / \n";}
After each() has executed, the array cursor will be left on the next element of the array, or on the last element if it hits the end of the array.
You have to use reset() if you want to traverse the array again using each.
See also key(), list(), current(), reset(), next(), prev(), and foreach.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Since PHP 4.3.0, the year parameter is optional and defaults to the current year according to the localtime if ommited.
Warning:
This function will generate a warning if the year is outside of the range for UNIX timestamps (i.e. before 1970 or after 2037).
Example 1. easter_date() example
echo date ("M-d-Y", easter_date(1999)); / * "Apr-04-1999 "* / echo date ("M-d-Y", easter_date(2000)); / * "Apr-23-2000" * / echo date ("M-d-Y", easter_date(2001)); / * "Apr-15-2001 "* /
The date of Easter Day was defined by the Council of Nicaea in AD325 as the Sunday after the first full moon which falls on or after the Spring Equinox.
The Equinox is assumed to always fall on 21st March, so the calculation reduces to determining the date of the full moon and the date of the following Sunday.
The algorithm used here was introduced around the year 532 by Dionysius Exiguus.
Under the Julian Calendar (for years before 1753) a simple 19-year cycle is used to track the phases of the Moon.
Under the Gregorian Calendar (for years after 1753 - devised by Clavius and Lilius, and introduced by Pope Gregory XIII in October 1582, and into Britain and its then colonies in September 1752) two correction factors are added to make the cycle more accurate.
(The code is based on a C program by Simon Kershaw, webmaster@ely.anglican.org)
See easter_days() for calculating Easter before 1970 or after 2037.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Since PHP 4.3.0, the year parameter is optional and defaults to the current year according to the localtime if ommited.
The method parameter was also introduced in PHP 4.3.0 and allows to calculate easter dates based on the Gregorian calendar during the years 1582 - 1752 when set to CAL_EASTER_ROMAN.
This function can be used instead of easter_date() to calculate Easter for years which fall outside the range of UNIX timestamps (i.e. before 1970 or after 2037).
echo easter_days (1999); / * 14, i.e.
See also easter_date().
Prev
Home
Next
Up
FrenchToJD
PHP Manual
Prev
Next
ebcdic2ascii() is an Apache-specific function which is available only on EBCDIC based operating systems (OS / 390, BS2000).
It translates the EBCDIC encoded string ebcdic_str to its equivalent ASCII representation (binary safe), and returns the result.
See also the reverse function ascii2ebcdic()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Outputs all parameters.
echo() is not actually a function (it is a language construct) so you are not required to use parentheses with it.
In fact, if you want to pass more than one parameter to echo, you must not enclose the parameters within parentheses.
It is not possible to use echo() in a variable function context.
Example 1. echo() examples
?php echo "Hello World"; echo "This spans multiple lines.
The newlines will be output as well"; echo "This spans\nmultiple lines.
The newlines will be\noutput as well ."; echo "Escaping characters is done \"Like this\" ."; / /You can use variables inside of an echo statement $foo = "foobar"; $bar = "barbaz"; echo "foo is $foo"; / / foo is foobar / / Using single quotes will print the variable name, not the value echo'foo is $foo'; / / foo is $foo / / If you are not using any other characters, you can just echo variables echo $foo; / / foobar echo $foo,$bar; / / foobarbarbaz echo END This uses the "here document "syntax to output multiple lines with $variable interpolation.
Note that the here document terminator must appear on a line with just a semicolon no extra whitespace!
END; / / Because echo is not a function, following code is invalid. ($some_var)? echo('true'): echo('false'); / / However, the following examples will work: ($some_var)? print('true'): print('false'); / / print is a function echo $some_var? 'true': 'false'; / / changing the statement around?
echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign.
Note:
This short syntax only works with the short_open_tag configuration setting enabled.
See also print(), printf(), and flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See converting to boolean for more information.
Note that this is meaningless when used on anything which isn' t a variable; i.e. empty (addslashes ($name)) has no meaning since it would be checking whether something which isn't a variable is a variable with a FALSE value.
See also isset() and unset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
end() advances array's internal pointer to the last element, and returns that element.
Example 1.
A simple end() example
See also current(), each(), next(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Searches a string for matches to the regular expression given in pattern.
Note:
Up to (and including) PHP 4.1.0 $regs will be filled with exactly ten elements, even though more or fewer than ten parenthesized substrings may actually have matched.
This has no effect on ereg() 's ability to match more substrings.
If no matches are found, $regs will not be altered by ereg().
Searching is case sensitive.
Returns TRUE if a match for pattern was found in string, or FALSE if no matches were found or an error occurred.
The following code snippet takes a date in ISO format (YYYY-MM-DD) and prints it in DD.MM.YYYY format:
Example 1. ereg() Example
if (ereg ("([0-9]{4}) -([0-9]{1,2}) -([0-9]{1,2})", $date, $regs)) {echo "$regs[3].$regs[2].$regs[1]";} else {echo "Invalid date format: $date";}
See also eregi(), ereg_replace(), eregi_replace(), and preg_match().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is identical to ereg() except that this ignores case distinction when matching alphabetic characters.
Example 1. eregi() example
See also ereg(), ereg_replace(), and eregi_replace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is identical to ereg_replace() except that this ignores case distinction when matching alphabetic characters.
See also ereg(), eregi(), and ereg_replace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function scans string for matches to pattern, then replaces the matched text with replacement.
The modified string is returned. (Which may mean that the original string is returned if there are no matches to be replaced.)
If pattern contains parenthesized substrings, replacement may contain substrings of the form\\ digit, which will be replaced by the text matching the digit' th parenthesized substring; \\0 will produce the entire contents of string.
Up to nine substrings may be used.
Parentheses may be nested, in which case they are counted by the opening parenthesis.
If no matches are found in string, then string will be returned unchanged.
For example, the following code snippet prints "This was a test" three times:
Example 1. ereg_replace() Example
$string = "This is a test"; echo ereg_replace (" is", "was", $string); echo ereg_replace (" ()is", "\\1was", $string); echo ereg_replace ("( ()is)", "\\2was", $string);
One thing to take note of is that if you use an integer value as the replacement One thing to take note of is that if you use an integer value as the replacement parameter, you may not get the results you expect.
This is because ereg_replace() will interpret the number as the ordinal value of a character, and apply that.
For instance:
Example 2. ereg_replace() Example
?php / * This will not work as expected. * / $num = 4; $string = "This string has four words ."; $string = ereg_replace('four', $num, $string); echo $string; / * Output: 'This string has words. '* / / * This will work. * / $num = '4'; $string = "This string has four words ."; $string = ereg_replace('four', $num, $string); echo $string; / * Output: 'This string has 4 words.' * /?
Example 3.
Replace URLs with links
See also ereg(), eregi(), eregi_replace(), str_replace(), and preg_match().
Prev
Home
Next
Regular Expression Functions (POSIX Extended)
Up
PHP Manual
Prev
Next
Sends an error message to the web server 's error log, a TCP port or to a file.
The first parameter, message, is the error message that should be logged.
The second parameter, message_type says where the message should go:
Table 1. error_log() log types
message is sent to PHP' s system logger, using the Operating System's system logging mechanism or a file, depending on what the error_log configuration directive is set to.
message is sent by email to the address in the destination parameter.
This is the only message type where the fourth parameter, extra_headers is used.
This message type uses the same internal function as mail() does.
message is sent through the PHP debugging connection.
This option is only available if remote debugging has been enabled.
In this case, the destination parameter specifies the host name or IP address and optionally, port number, of the socket receiving the debug information.
message is appended to the file destination.
Remote debugging via TCP / IP is a PHP 3 feature that is not available in PHP 4.
Example 1. error_log() examples
/ / Send notification through the server log if we can not / / connect to the database. if (!Ora_Logon ($username, $password)) {error_log ("Oracle database not available !", 0);} / / Notify administrator by email if we run out of FOO if (!($foo = allocate_new_foo()) {error_log ("Big trouble, we're all out of FOOs !", 1, "operator@mydomain.com");} / / other ways of calling error_log(): error_log ("You messed up !", 2, "127.0.0.1:7000"); error_log ("You messed up !", 2, "loghost"); error_log ("You messed up !", 3, "/ var / tmp / my-errors.log");
Prev
Home
Next
Up
PHP Manual
Prev
Next
The level parameter takes on either a bitmask, or named constants.
As error levels are added, the range of integers increases, so older integer-based error levels will not always behave as expected.
Example 1. error_reporting() examples
The available error level constants are listed below.
Table 1. error_reporting() level constants and bit values
Prev
Home
Next
Up
PHP Manual
Prev
Next
escapeshellarg() adds single quotes around a string and quotes / escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument.
This function should be used to escape individual arguments to shell functions coming from user input.
The shell functions include exec(), system() and the backtick operator.
A standard use would be:
See also exec(), popen(), system(), and the backtick operator.
Prev
Home
Next
Program Execution functions
Up
PHP Manual
Prev
Next
escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands.
This function should be used to make sure that any data coming from user input is escaped before this data is passed to the exec() or system() functions, or to the backtick operator.
A standard use would be:
$e = escapeshellcmd( $userinput); system("echo $e"); / / here we don't care if $e has spaces $f = escapeshellcmd($filename); system("touch \" / tmp / $f\"; ls -l \" / tmp / $f\""); / / and here we do, so we use quotes
See also escapeshellarg(), exec(), popen(), system(), and the backtick operator.
Prev
Home
Next
Up
PHP Manual
Prev
Next
eval() evaluates the string given in code_str as PHP code.
Among other things, this can be useful for storing code in a database text field for later execution.
There are some factors to keep in mind when using eval().
Remember that the string passed must be valid PHP code, including things like terminating statements with a semicolon so the parser doesn' t die on the line after the eval(), and properly escaping things in code_str.
Also remember that variables given values under eval() will retain these values in the main script afterwards.
A return statement will terminate the evaluation of the string immediately.
In PHP 3, eval() does not return a value.
Example 1. eval() example - simple text merge
?php $string = 'cup'; $name = 'coffee'; $str = 'This is a $string with my $name in it. br'; echo $str; eval ("\$str = \"$str\" ;"); echo $str;?
The above example will show:
This is a $string with my $name in it.
Tip:
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Prev
Home
Next
Up
PHP Manual
Prev
Next
exec() executes the given command, however it does not output anything.
It simply returns the last line from the result of the command.
If you need to execute a command and have all the data from the command passed directly back without any interference, use the passthru() function.
If the array argument is present, then the specified array will be filled with every line of output from the command.
Note that if the array already contains some elements, exec() will append to the end of the array.
If you do not want the function to append elements, call unset() on the array before passing it to exec().
If the return_var argument is present along with the array argument, then the return status of the executed command will be written to this variable.
If you are going to allow data coming from user input to be passed to this function, then you should be using escapeshellarg() or escapeshellcmd() to make sure that users cannot trick the system into executing arbitrary commands.
If you start a program using this function and want to leave it running in the background, you have to make sure that the output of that program is redirected to a file or some other output stream or else PHP will hang until the execution of the program ends.
See also system(), passthru(), popen(), escapeshellcmd(), and the backtick operator.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Image functions
Up
PHP Manual
Prev
Next
Note:
Example 1. exif_read_data() example
Note:
Note:
Note:
Note:
Also the size of an embedded thumbnail is returned in THUMBNAIL subarray and the function exif_read_data() can return thumbnails in TIFF Also the size of an embedded thumbnail is returned in THUMBNAIL subarray and the function exif_read_data() can return thumbnails in TIFF format.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. exif_thumbnail() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Exit statuses should be in the range 1 to 254, the exit status 255 is reserved by PHP and shall not be used.
?php $filename = '/ path / to / data-file'; $file = fopen ($filename, 'r') or exit("unable to open file ($filename)");?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns e raised to the power of arg.
See also pow().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string separator.
If separator is an empty string (""), explode() will return FALSE.
Note:
Example 1. explode() examples
Note:
You must ensure that the separator argument comes before the string argument.
See also preg_split(), spliti(), split(), and implode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
if (!extension_loaded('gd')) {if (!dl('gd.so')) {exit;}}
$php -m [PHP Modules] xml tokenizer standard sockets session posix pcre overload mysql mbstring ctype [Zend Modules]
Most internal extension names are written in lower case but there may be extension available which also use uppercase letters.
Be warned that this function compares case sensitive!
See also get_loaded_extensions(), get_extension_funcs(), phpinfo() and dl().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is used to import variables from an array into the current symbol table.
It takes an associative array var_array and treats keys as variable names and values as variable values.
For each key / value pair it will create a variable in the current symbol table, subject to extract_type and prefix parameters.
Note:
Beginning with version 4.0.5, this function returns the number of variables extracted.
Note:
EXTR_IF_EXISTS and EXTR_PREFIX_IF_EXISTS was introduced in version 4.2.0.
Note:
EXTR_REFS was introduced in version 4.3.0.
It also checks for collisions with existing variables in the symbol table.
The way invalid / numeric keys and collisions are treated is determined by the extract_type.
It can be one of the following values:
If there is a collision, overwrite the existing variable.
If there is a collision, don 't overwrite the existing variable.
If there is a collision, prefix the variable name with prefix.
Prefix all variable names with prefix.
Beginning with PHP 4.0.5, this includes numeric variables as well.
Only prefix invalid / numeric variable names with prefix.
This flag was added in PHP 4.0.5.
Only overwrite the variable if it already exists in the current symbol table, otherwise do nothing.
This is useful for defining a list of valid variables and then extracting only those variables you have defined out of $_REQUEST, for example.
This flag was added in PHP 4.2.0.
Only create prefixed variable names if the non-prefixed version of the same variable exists in the current symbol table.
This flag was added in PHP 4.2.0.
Extracts variables as references.
This effectively means that the values of the imported variables are still referencing the values of the var_array parameter.
You can use this flag on its own or combine it with any other flag by OR 'ing the extract_type.
This flag was added in PHP 4.3.0.
If extract_type is not specified, it is assumed to be EXTR_OVERWRITE.
Note that prefix is only required if extract_type is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS.
If the prefixed result is not a valid variable name, it is not imported into the symbol table.
extract() returns the number of variables successfully imported into the symbol table.
A possible use for extract() is to import into the symbol table variables contained in an associative array returned by wddx_deserialize().
Example 1. extract() example
?php / * Suppose that $var_array is an array returned from wddx_deserialize * / $size = "large"; $var_array = array ("color" = "blue", "size "= "medium", "shape" = "sphere"); extract ($var_array, EXTR_PREFIX_SAME, "wddx"); print "$color, $size, $shape, $wddx_size\n";?
The above example will produce:
blue, large, sphere, medium
The $size wasn 't overwritten, because we specified EXTR_PREFIX_SAME, which resulted in $wddx_size being created.
If EXTR_SKIP was specified, then $wddx_size wouldn 't even have been created.
EXTR_OVERWRITE would have caused $size to have value "medium", and EXTR_PREFIX_ALL would result in new variables being named $wddx_color, $wddx_size, and $wddx_shape.
You must use an associative array, a numerically indexed array will not produce results unless you use EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.
See also compact().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Mail functions
Up
PHP Manual
Prev
Next
fbsql_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier.
If the link identifier isn' t specified, the last link opened by fbsql_connect() is assumed.
Note:
If you are using transactions, you need to call fbsql_affected_rows() after your INSERT, UPDATE, or DELETE query, not after the commit.
If the last query was a DELETE query with no WHERE clause, all of the records will have been deleted from the table but this function will return zero.
Note:
When using UPDATE, FrontBase will not update columns where the new value is the same as the old value.
This creates the possibility that fbsql_affected_rows() may not actually equal the number of rows matched, only the number of rows that were literally affected by the query.
If the last query failed, this function will return -1.
See also: fbsql_num_rows().
Prev
Home
Next
FrontBase Functions
Up
PHP Manual
Prev
Next
fbsql_autocommit() returns the current autocommit status. if the optional OnOff parameter is given the auto commit status will be changed.
With OnOff set to TRUE each statement will be committed automatically, if no errors was found.
With OnOff set to FALSE the user must commit or rollback the transaction using either fbsql_commit() or fbsql_rollback().
See also: fbsql_commit() and fbsql_rollback()
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_change_user() changes the logged in user of the current active connection, or the connection given by the optional parameter link_identifier.
If a database is specified, this will default or current database after the user has been changed.
If the new user and password authorization fails, the current connected user stays active.
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on error.
fbsql_close() closes the connection to the FrontBase server that's associated with the specified link identifier.
If link_identifier isn 't specified, the last opened link is used.
Using fbsql_close() isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
Example 1. fbsql_close() example
See also: fbsql_connect() and fbsql_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
fbsql_commit() ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction.
This command is only needed if autocommit is set to false.
See also: fbsql_autocommit() and fbsql_rollback()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive FrontBase link identifier on success, or an error message on failure.
fbsql_connect() establishes a connection to a FrontBase server.
The following defaults are assumed for missing optional parameters: hostname = 'NULL', username = '_SYSTEM 'and password = empty password.
If a second call is made to fbsql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling fbsql_close().
Example 1. fbsql_connect() example
?php $link = fbsql_connect ("localhost", "_SYSTEM", "secret") or die ("Could not connect"); print ("Connected successfully"); fbsql_close ($link);?
See also fbsql_pconnect() and fbsql_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_create_blob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_create_clob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_create_db() attempts to create a new database on the server associated with the specified link identifier.
Example 1. fbsql_create_db() example
?php $link = fbsql_pconnect ("localhost", "_SYSTEM", "secret") or die ("Could not connect"); if (fbsql_create_db ("my_db")) {print("Database created successfully\n");} else {printf("Error creating database: %s\n", fbsql_error ());}?
See also: fbsql_drop_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_create_clob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Example 1. fbsql_data_seek() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
A positive FrontBase result identifier to the query result, or FALSE on error.
fbsql_db_query() selects a database and executes a query on it.
If the optional link identifier isn' t specified, the function will try to find an open link to the FrontBase server and if no such link is found it'll try to create one as if fbsql_connect() was called with no arguments
See also fbsql_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
An integer value with the current status.
fbsql_db_status() requests the current status of the database specified by database_name.
If the link_identifier is omitted the default link_identifier will be used.
The return value can be one of the following constants:
FALSE - The exec handler for the host was invalid.
This error will occur when the link_identifier connects directly to a database by using a port number.
FBExec can be available on the server but no connection has been made for it.
FBSQL_UNKNOWN - The Status is unknown.
FBSQL_STOPPED - The database is not running.
Use fbsql_start_db() to start the database.
FBSQL_STARTING - The database is starting.
FBSQL_RUNNING - The database is running and can be used to perform SQL operations.
FBSQL_STOPPING - The database is stopping.
FBSQL_NOEXEC - FBExec is not running on the server and it is not possible to get the status of the database.
See also: fbsql_start_db() and fbsql_stop_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
fbsql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error number from the last fbsql function, or 0 (zero) if no error occurred.
Errors coming back from the fbsql database backend don 't issue warnings.
Instead, use fbsql_errno() to retrieve the error code.
Note that this function only returns the error code from the most recently executed fbsql function (not including fbsql_error() and fbsql_errno()), so if you want to use it, make sure you check the value before calling another fbsql function.
?php fbsql_connect( "marliesle"); echo fbsql_errno() .": ".fbsql_error(). "BR"; fbsql_select_db("nonexistentdb"); echo fbsql_errno() .": ".fbsql_error(). "BR"; $conn = fbsql_query("SELECT * FROM nonexistenttable ;"); echo fbsql_errno() .": ".fbsql_error(). "BR";?
See also: fbsql_error() and fbsql_warnings().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error text from the last fbsql function, or '' (the empty string) if no error occurred.
Errors coming back from the fbsql database backend don 't issue warnings.
Instead, use fbsql_error() to retrieve the error text.
Note that this function only returns the error text from the most recently executed fbsql function (not including fbsql_error() and fbsql_errno()), so if you want to use it, make sure you check the value before calling another fbsql function.
?php fbsql_connect( "marliesle"); echo fbsql_errno() .": ".fbsql_error(). "BR"; fbsql_select_db("nonexistentdb"); echo fbsql_errno() .": ".fbsql_error(). "BR"; $conn = fbsql_query("SELECT * FROM nonexistenttable ;"); echo fbsql_errno() .": ".fbsql_error(). "BR";?
See also: fbsql_errno() and fbsql_warnings().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_fetch_array() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_fetch_assoc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_fetch_field() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_fetch_object() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_field_len() returns the length of the specified field.
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_field_name() returns the name of the specified field index. result must be a valid result identifier and field_index is the numerical offset of the field.
e.g.
The index of the third field would actually be 2, the index of the fourth field would be 3 and so on.
Example 1. fbsql_field_name() example
The above example would produce the following output:
user_id password
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_field_type() is similar to the fbsql_field_name() function.
The arguments are identical, but the field type is returned instead.
The field type will be one of "int", "real", "string", "blob", and others as detailed in the FrontBase documentation.
Example 1. fbsql_field_type() example
?php fbsql_connect ("localhost", "_SYSTEM", ""); fbsql_select_db ("wisconsin"); $result = fbsql_query ("SELECT * FROM onek ;"); $fields = fbsql_num_fields ($result); $rows = fbsql_num_rows ($result); $i = 0; $table = fbsql_field_table ($result, $i); echo "Your '".$table ." 'table has ".$fields. "fields and ".$rows." records BR "; echo "The table has the following fields BR"; while ($i $fields) {$type = fbsql_field_type ($result, $i); $name = fbsql_field_name ($result, $i); $len = fbsql_field_len ($result, $i); $flags = fbsql_field_flags ($result, $i); echo $type. "".$name." ".$len. "".$flags." BR "; $i++;} fbsql_close();?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_list_dbs() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function returns FALSE if an error occurs.
Example 1. fbsql_list_fields() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
When sending more than one SQL statement to the server or executing a stored procedure with multiple results will cause the server to return multiple result sets.
This function will test for additional results available form the server.
If an additional result set exists it will free the existing result set and prepare to fetch the words from the new result set.
The function will return TRUE if an additional result set was available or FALSE otherwise.
Example 1. fbsql_next_result() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_num_fields() returns the number of fields in a result set.
See also: fbsql_db_query(), fbsql_query(), fbsql_fetch_field(), and fbsql_num_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_num_rows() returns the number of rows in a result set.
This command is only valid for SELECT statements.
To retrieve the number of rows returned from a INSERT, UPDATE or DELETE query, use fbsql_affected_rows().
Example 1. fbsql_num_rows() example
?php $link = fbsql_connect( "localhost", "username", "password"); fbsql_select_db("database", $link); $result = fbsql_query("SELECT * FROM table1 ;", $link); $num_rows = fbsql_num_rows($result); echo "$num_rows Rows\n";?
See also: fbsql_affected_rows(), fbsql_connect(), fbsql_select_db(), and fbsql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
fbsql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
If link_identifier isn 't specified, the last opened link is assumed.
If no link is open, the function tries to establish a link as if fbsql_connect() was called with no arguments, and use it.
Note:
The query string shall always end with a semicolon.
fbsql_query() returns TRUE (non-zero) or FALSE to indicate whether or not the query succeeded.
A return value of TRUE means that the query was legal and could be executed by the server.
It does not indicate anything about the number of rows affected or returned.
It is perfectly possible for a query to succeed but affect no rows or return no rows.
The following query is syntactically invalid, so fbsql_query() fails and returns FALSE:
Example 1. fbsql_query() example
?php $result = fbsql_query ("SELECT * WHERE 1=1") or die ("Invalid query");?
The following query is semantically invalid if my_col is not a column in the table my_tbl, so fbsql_query() fails and returns FALSE:
Example 2. fbsql_query() example
?php $result = fbsql_query ("SELECT my_col FROM my_tbl") or die ("Invalid query");?
fbsql_query() will also fail and return FALSE if you don't have permission to access the table(s) referenced by the query.
Assuming the query succeeds, you can call fbsql_num_rows() to find out how many rows were returned for a SELECT statement or fbsql_affected_rows() to find out how many rows were affected by a DELETE, INSERT, REPLACE, or UPDATE statement.
For SELECT statements, fbsql_query() returns a new result identifier that you can pass to fbsql_result().
When you are done with the result set, you can free the resources associated with it by calling fbsql_free_result().
Although, the memory will automatically be freed at the end of the script 's execution.
See also: fbsql_affected_rows(), fbsql_db_query(), fbsql_free_result(), fbsql_result(), fbsql_select_db(), and fbsql_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_read_blob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_read_clob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on error.
fbsql_select_db() sets the current active database on the server that's associated with the specified link identifier.
If no link identifier is specified, the last opened link is assumed.
If no link is open, the function will try to establish a link as if fbsql_connect() was called, and use it.
The client contacts FBExec to obtain the port number to use for the connection to the database.
If the database name is a number the system will use that as a port number and it will not ask FBExec for the port number.
The FrontBase server can be stared as FRontBase -FBExec=No -port= port number database name.
Every subsequent call to fbsql_query() will be made on the active database.
if the database is protected with a database password, the user must call fbsql_database_password() before selecting the database.
See also: fbsql_connect(), fbsql_pconnect(), fbsql_database_password() and fbsql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on error.
fbsql_set_lob_mode() sets the mode for retrieving LOB data from the database.
When BLOB and CLOB data is stored in FrontBase it can be stored direct or indirect.
Direct stored LOB data will always be fetched no matter the setting of the lob mode.
If the LOB data is less than 512 bytes it will always be stored directly.
FBSQL_LOB_DIRECT - LOB data is retrieved directly.
When data is fetched from the database with fbsql_fetch_row(), and other fetch functions, all CLOB and BLOB columns will be returned as ordinary columns.
This is the default value on a new FrontBase result.
FBSQL_LOB_HANDLE - LOB data is retrieved as handles to the data.
When data is fetched from the database with fbsql_fetch_row (), and other fetch functions, LOB data will be returned as a handle to the data if the data is stored indirect or the data if it is stored direct.
If a handle is returned it will be a 27 byte string formatted as "@'000000000000000000000000'".
See also: fbsql_create_blob(), fbsql_create_clob(), fbsql_read_blob(), and fbsql_read_clob().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
See also: fbsql_db_status() and fbsql_stop_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
See also: fbsql_db_status() and fbsql_start_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_tablename() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if warnings is turned on otherwise FALSE.
fbsql_warnings() enables or disables FrontBase warnings.
Prev
Home
Next
Up
filePro functions
PHP Manual
Prev
Next
The file pointed to by handle is closed.
Returns TRUE on success or FALSE on failure.
The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen().
Example 1.
A simple fclose() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Forms Data Format functions
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_close() function closes the FDF document.
See also fdf_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_create() creates a new FDF document.
This function is needed if one would like to populate input fields in a PDF document with data.
Example 1.
Populating a PDF document
?php $outfdf = fdf_create(); fdf_set_value($outfdf, "volume", $volume, 0); fdf_set_file($outfdf, "http: / testfdf / resultlabel.pdf"); fdf_save($outfdf, "outtest.fdf"); fdf_close($outfdf); Header("Content-type: application / vnd.fdf"); $fp = fopen("outtest.fdf", "r"); fpassthru($fp); unlink("outtest.fdf");?
See also fdf_close(), fdf_save(), fdf_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_file() returns the value of the / F key.
See also fdf_set_file().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_get_status() returns the value of the / STATUS key.
See also fdf_set_status().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_get_value() function returns the value for the requested fieldname.
Elements of an array field can be retrieved by passing the optional which, starting at zero.
For non-array fields the optional parameter which will be ignored.
Note:
Array support and optional which parameter were added in PHP 4.3.
See also fdf_set_value().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_next_field_name() function returns the name of the field after the field in fieldname or the field name of the first field if the second parameter is NULL.
Example 1.
See also fdf_enum_fields() and fdf_get_value().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_open() function opens a file with form data.
This file must contain the data as returned from a PDF form or created using fdf_create() and fdf_save().
You can process the results of a PDF form POST request by writing the data recieved in $HTTP_FDF_DATA to a file and open it using fdf_open().
Starting with PHP 4.3 you can also use fdf_open_string() which handles temporary file creation and cleanup for you.
Example 1.
Accessing the form data
?php / / Save the FDF data into a temp file $fdffp = fopen( "test.fdf", "w"); fwrite($fdffp, $HTTP_FDF_DATA, strlen($HTTP_FDF_DATA)); fclose($fdffp); / / Open temp file and evaluate data $fdf = fdf_open("test.fdf");... fdf_close($fdf);?
See also fdf_open_string(), fdf_close(), fdf_create() and fdf_save().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_save() function saves a FDF document.
The resulting FDF will be written to filename.
Without a filename fdf_save() will write the FDF to the default PHP output stream.
See also fdf_save_string(), fdf_create() and fdf_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_ap() function sets the appearance of a field (i.e. the value of the / AP key).
The possible values of face are FDFNormalAP, FDFRolloverAP and FDFDownAP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
fdf_set_encoding() sets the character encoding in FDF document fdf_document. encoding should be the valid encoding name.
Currently the following values are supported: "Shift-JIS", "UHC", "GBK", "BigFive".
An empty string resets the encoding to the default PDFDocEncoding / Unicode scheme.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_file() selects a different PDF document to display the form results in then the form it originated from.
The url needs to be given as an absolute URL.
The frame to display the document in may be selected using the optional parameter target_frame or the function fdf_set_target_frame().
Example 1.
Passing FDF data to a second form
See also fdf_get_file() and fdf_set_target_frame().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_flags() sets certain flags of the given field fieldname.
See also fdf_set_opt().
Prev
Home
Next
Up
PHP Manual
Prev
Next
fdf_set_javascript_action() sets a javascript action for the given field fieldname.
See also fdf_set_submit_form_action().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_opt() sets options of the given field fieldname.
See also fdf_set_flags().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_status() sets the value of the / STATUS key.
When a client recieves a FDF with a status set it will present the value in an alert box.
See also fdf_get_status().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_submit_form_action() sets a submit form action for the given field fieldname.
See also fdf_set_javascript_action().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The fdf_set_value() function sets the value for a field named fieldname.
In this case all array elements will be stored as a value array.
Note:
In older versions of the fdf toolkit last parameter determined if the field value was to be converted to a PDF Name (isName = 1) or set to a PDF String (isName = 0).
The value is no longer used in the current toolkit version 5.0.
For compatibility reasons it is still supported as an optional parameter beginning with PHP 4.3, but ignored internaly.
Support for value arrays was added in PHP 4.3.
See also fdf_get_value() and fdf_remove_item().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
FriBiDi functions
PHP Manual
Prev
Next
Returns TRUE if the file pointer is at EOF or an error occurs; otherwise returns FALSE.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function forces a write of all buffered output to the resource pointed to by the file handle handle.
Returns TRUE if successful, FALSE otherwise.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns FALSE on EOF.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
This function is binary safe.
See also fread(), fopen(), popen(), fsockopen(), and fgets().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read.
The optional third delimiter parameter defaults as a comma.
The optional enclosure cannot be null, and is limited to one character.
If enclosure is more than one character, only the first character is used.
Note:
The enclosure parameter was added in PHP 4.3.0.
The handle parameter must be a valid file pointer to a file successfully opened by fopen(), popen(), or fsockopen().
The length parameter must be greater than the longest line to be found in the CSV file (allowing for trailing line-end characters).
fgetcsv() returns FALSE on error, including end of file.
Note:
A blank line in a CSV file will be returned as an array comprising a single null field, and will not be treated as an error.
Example 1.
Read and print the entire contents of a CSV file
?php $row = 1; $handle = fopen ("test.csv" ,"r"); while ($data = fgetcsv ($handle, 1000, ",")) {$num = count ($data); print" p $num fields in line $row: br \n"; $row++; for ($c=0; $c $num; $c++) {print $data[$c]. "br \n";}} fclose ($handle);?
See also explode(), file(), and pack()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string of up to length - 1 bytes read from the file pointed to by handle.
Reading ends when length - 1 bytes have been read, on a newline (which is included in the return value), or on EOF (whichever comes first).
If no length is specified, the length defaults to 1k, or 1024 bytes.
If an error occurs, returns FALSE.
Common Pitfalls:
People used to the 'C' semantics of fgets() should note the difference in how EOF is returned.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
A simple example follows:
Example 1.
Reading a file line by line
$handle = fopen ("/ tmp / inputfile.txt", "r"); while (!feof ($handle)) {$buffer = fgets($handle, 4096); echo $buffer;} fclose ($handle);
Note:
The length parameter became optional in PHP 4.2.0, if omitted, it would assume 1024 as the line length.
As of PHP 4.3, omitting length will keep reading from the stream until it reaches the end of the line.
If the majority of the lines in the file are all larger than 8KB, it is more resource efficient for your script to specify the maximum line length.
Note:
Earlier versions were not binary safe.
Note:
If you are having problems with PHP not recognizing the line endings when reading files either on or created by a Macintosh computer, you might want to enable the auto_detect_line_endings run-time configuration option.
See also fread(), fopen(), popen(), fgetc(), fsockopen(), and socket_set_timeout().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to fgets(), except that fgetss attempts to strip any HTML and PHP tags from the text it reads.
You can use the optional third parameter to specify tags which should not be stripped.
Note:
If you are having problems with PHP not recognizing the line endings when reading files either on or created by a Macintosh computer, you might want to enable the auto_detect_line_endings run-time configuration option.
See also fgets(), fopen(), fsockopen(), popen(), and strip_tags().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the time the file was last accessed, or FALSE in case of an error.
The time is returned as a Unix timestamp.
The results of this function are cached.
See clearstatcache() for more details.
Note:
The atime of a file is supposed to change whenever the data blocks of a file are being read.
This can be costly performancewise when an application regularly accesses a very large number of files or directories.
Some Unix filesystems can be mounted with atime updates disabled to increase the performance of such applications; USENET news spools are a common example.
On such filesystems this function will be useless.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the time the file was last changed, or FALSE in case of an error.
The time is returned as a Unix timestamp.
The results of this function are cached.
See clearstatcache() for more details.
Note:
In most Unix filesystems, a file is considered changed when its inode data is changed; that is, when the permissions, owner, group, or other metadata from the inode is updated.
See also filemtime() (which is what you want to use when you want to create "Last Modified "footers on web pages) and fileatime().
Note also that in some Unix texts the ctime of a file is referred to as being the creation time of the file.
This is wrong.
There is no creation time for Unix files in most Unix filesystems.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the file specified by filename exists; FALSE otherwise.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
The results of this function are cached.
See clearstatcache() for more details.
Using Windows shares:
On windows, use / /computername / share / filename or \\\\computername\share\filename to check files on network shares.
Example 1.
Testing whether a file exists
See also is_readable(), is_writable(), is_file() and file().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to file(), except that file_get_contents() returns the file in a string.
Note:
This function is binary-safe.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
See also: fgets(), file(), fread(), include(), and readfile().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the group ID of the file, or FALSE in case of an error.
The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.
The results of this function are cached.
See clearstatcache() for more details.
Note:
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to readfile(), except that file() returns the file in an array.
Each element of the array corresponds to a line in the file, with the newline still attached.
Upon failure, file() returns FALSE.
Note:
Each line in the resulting array will include the line ending, so you still need to use trim() if you do not want the line ending present.
Note:
If you are having problems with PHP not recognizing the line endings when reading files either on or created by a Macintosh computer, you might want to enable the auto_detect_line_endings run-time configuration option.
You can use the optional use_include_path parameter and set it to "1", if you want to search for the file in the include_path, too.
?php / / Get a file into an array.
In this example we' ll go through HTTP to get / / the HTML source of a URL. $lines = file ('http: / /www.example.com / '); / / Loop through our array, show html source as html source; and line numbers too. foreach ($lines as $line_num = $line) {echo "Line # b {$line_num} / b: ". htmlspecialchars($line)." br \n";} / / Another example, let's get a web page into a string.
See also file_get_contents(). $html = implode ('', file ('http: / /www.example.com / '));?
Note:
As of PHP 4.3.0 you can use file_get_contents() to return the contents of a file as a string.
In PHP 4.3.0 file() became binary safe.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
See also readfile(), fopen(), fsockopen(), popen(), file_get_contents(), and include().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the inode number of the file, or FALSE in case of an error.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the time the file was last modified, or FALSE in case of an error.
The time is returned as a Unix timestamp, which is suitable for the date() function.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Note:
This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.
Example 1. filemtime() example
?php / / outputs e.g. somefile.txt was last modified:
See also filectime(), stat(), touch(), and getlastmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the user ID of the owner of the file, or FALSE in case of an error.
The user ID is returned in numerical format, use posix_getpwuid() to resolve it to a username.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the permissions on the file, or FALSE in case of an error.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of fields (columns) in the opened filePro database.
See also filepro().
Prev
Home
Next
filePro functions
Up
PHP Manual
Prev
Next
Returns the name of the field corresponding to field_number.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the edit type of the field corresponding to field_number.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the width of the field corresponding to field_number.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No locking is done, so you should avoid modifying your filePro database while it may be opened in PHP.
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
Filesystem functions
PHP Manual
Prev
Next
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
See also filepro().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the size of the file in bytes, or FALSE in case of an error.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the type of the file.
Possible values are fifo, char, dir, block, link, file, and unknown.
Returns FALSE if an error occurs. filetype() will also produce an E_NOTICE message if the stat call fails or if the file type is unknown.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also: is_dir(), is_file(), is_link(), file_exists(), and stat().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP supports a portable way of locking complete files in an advisory way (which means all accessing programs have to use the same way of locking or it will not work).
flock() operates on handle which must be an open file pointer. operation is one of the following values:
To acquire a shared lock (reader), set operation to LOCK_SH (set to 1 prior to PHP 4.0.1).
To acquire an exclusive lock (writer), set operation to LOCK_EX (set to 2 prior to PHP 4.0.1).
To release a lock (shared or exclusive), set operation to LOCK_UN (set to 3 prior to PHP 4.0.1).
If you don' t want flock() to block while locking, add LOCK_NB (4 prior to PHP 4.0.1) to operation.
flock() allows you to perform a simple reader / writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).
The optional third argument is set to TRUE if the lock would block (EWOULDBLOCK errno condition)
Returns TRUE on success or FALSE on failure.
Note:
Because flock() requires a file pointer, you may have to use a special lock file to protect access to a file that you intend to truncate by opening it in write mode (with a "w "or "w+" argument to fopen()).
Warning
flock() will not work on NFS and many other networked file systems.
Check your operating system documentation for more details.
On some operating systems flock() is implemented at the process level.
When using a multithreaded server API like ISAPI you may not be able to rely on flock() to protect files against other PHP scripts running in parallel threads of the same server instance!
flock() is not supported on antiquated filesystems like FAT and its derivates and will therefore always return FALSE under this environments (this is especially true for Windows 98 users).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. floor() example
See also ceil() and round().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Server modules for Apache like mod_gzip may do buffering of their own that will cause flush() to not result in data being sent immediately to the client.
Netscape, for example, buffers text until it receives an end-of-line or the beginning of a tag, and it won 't render tables until the / table tag of the outermost table is seen.
Prev
Home
Next
Output Control Functions
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
fopen() binds a named resource, specified by filename, to a stream.
If filename is of the form "scheme: / /.. .", it is assumed to be a URL and PHP will search for a protocol handler (also known as a wrapper) for that scheme.
If no wrappers for that protocol are registered, PHP will emit a notice to help you track potential problems in your script and then continue as though filename specifies a regular file.
If PHP has decided that filename specifies a local file, then it will try to open a stream on that file.
The file must be accessible to PHP, so you need to ensure that the file access permissions allow this access.
If you have enabled safe_mode, or open_basedir further restrictions may apply.
If PHP has decided that filename specifies a registered protocol, and that protocol is registered as a network URL, PHP will check to make sure that allow_url_fopen If PHP has decided that filename specifies a registered protocol, and that protocol is registered as a network URL, PHP will check to make sure that allow_url_fopen is enabled.
If it is switched off, PHP will emit a warning and the fopen call will fail.
Note:
The list of supported protocols can be found in Appendix I.
It may be any of the following:
'r' - Open for reading only; place the file pointer at the beginning of the file.
'r+' - Open for reading and writing; place the file pointer at the beginning of the file.
'w' - Open for writing only; place the file pointer at the beginning of the file and truncate the file to zero length.
If the file does not exist, attempt to create it.
If the file does not exist, attempt to create it.
'a' - Open for writing only; place the file pointer at the end of the file.
If the file does not exist, attempt to create it.
'a+' - Open for reading and writing; place the file pointer at the end of the file.
If the file does not exist, attempt to create it.
The mode may contain the letter 'b'.
This is useful only on systems which differentiate between binary and text files (i.e.
It' s useless on Unix).
You are encouraged to include the 'b' flag in order to make your scripts more portable.
The optional third use_include_path parameter can be set to '1' or TRUE if you want to search for the file in the include_path, too.
The optional fourth zcontext is used for specifying tuning parameters and callbacks.
If the open fails, the function returns FALSE.
If you are experiencing problems with reading and writing to files and you' re using the server module version of PHP, remember to make sure that the files and directories you're using are accessible to the server process.
On the Windows platform, be careful to escape any backslashes used in the path to the file, or use forward slashes.
?php $handle = fopen ("c:\\data\\info.txt", "r");?
See also Appendix I, fclose(), fgets(), fsockopen(), file(), file_exists(), is_readable(), socket_set_timeout(), and popen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.
If an error occurs, fpassthru() returns FALSE.
Otherwise, fpassthru() returns the number of characters read from handle and passed through to the output.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
You may need to call rewind() You may need to call rewind() to reset the file pointer to the beginning of the file if you have already written data to the file.
The file is closed when fpassthru() is done reading it (leaving handle useless).
If you just want to dump the contents of a file to the output buffer, without first modifying it or seeking to a particular offset, you may want to use the readfile(), which saves you the fopen() call.
Note:
When using fpassthru() on a binary file on Windows systems, you should make sure to open the file in binary mode by appending a b to the mode used in the call to fopen().
You are encouraged to use the b flag when dealing with binary files, even if your system does not require it, so that your scripts will be more portable.
See also readfile(), fopen(), popen(), and fsockopen()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. sprintf(): zero-padded integers
Example 2. sprintf(): formatting currency
Prev
Home
Next
Up
PHP Manual
Prev
Next
fputs() is an alias to fwrite(), and is identical in every way.
Note that the length parameter is optional and if not specified the entire string will be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
fread() reads up to length bytes from the file pointer referenced by handle.
Reading stops when length bytes have been read or EOF (end of file) reached, whichever comes first.
?php / / get contents of a file into a string $filename = "/ usr / local / something.txt"; $handle = fopen ($filename, "r"); $contents = fread ($handle, filesize ($filename)); fclose ($handle);?
Note:
On systems which differentiate between binary and text files (i.e.
Windows) the file must be opened with'b 'included in fopen() mode parameter.
See also fwrite(), fopen(), fsockopen(), popen(), fgets(), fgetss(), fscanf(), file(), and fpassthru().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Converts a date from the French Republican Calendar to a Julian Day Count.
These routines only convert dates in years 1 through 14 (Gregorian dates 22 September 1792 through 22 September 1806).
This more than covers the period when the calendar was in use.
Prev
Home
Next
Up
GregorianToJD
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
FriBiDi functions
Up
FTP functions
PHP Manual
Prev
Next
The function fscanf() is similar to sscanf(), but it takes its input from a file associated with handle and interprets the input according to the specified format.
If only two parameters were passed to this function, the values parsed will be returned as an array.
Otherwise, if optional parameters are passed, the function will return the number of assigned values.
The optional parameters must be passed by reference.
Any whitespace in the format string matches any whitespace in the input stream.
This means that even a tab \t in the format string can match a single space character in the input stream.
Example 1. fscanf() Example
$handle = fopen ("users.txt" ,"r"); while ($userinfo = fscanf ($handle, "%s\t%s\t%s\n")) {list ($name, $profession, $countrycode) = $userinfo; / /... do something with the values} fclose($handle);
Example 2. users.txt
Note:
Prior to PHP 4.3.0, the maximum number of characters read from the file was 512 (or up to the first \n, whichever came first).
As of PHP 4.3.0 arbitrarily long lines will be read and scanned.
See also fread(), fgets(), fgetss(), sscanf(), printf(), and sprintf().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the file position indicator for the file referenced by handle .The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence, whose values are defined as follows:
SEEK_SET - Set position equal to offset bytes.
SEEK_CUR - Set position to current location plus offset.
SEEK_END - Set position to end-of-file plus offset. (To move to a position before the end-of-file, you need to pass a negative value in offset.)
If whence is not specified, it is assumed to be SEEK_SET.
Upon success, returns 0; otherwise, returns -1.
Note that seeking past EOF is not considered an error.
May not be used on file pointers returned by fopen() if they use the "http: / / "or "ftp: / /" formats.
Note:
The whence argument was added after PHP 4.0.0.
See also ftell() and rewind().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Initiates a stream connection in the Internet (AF_INET, using TCP or UDP) or Unix (AF_UNIX) domain.
For the Internet domain, it will open a TCP socket connection to hostname on port port. hostname may in this case be either a fully qualified domain name or an IP address.
For UDP connections, you need to explicitly specify the protocol by prefixing hostname with 'udp: / /'.
The optional timeout can be used to set a timeout in seconds for the connect system call.
If you need to set a timeout for reading / writing data over the socket, use socket_set_timeout(), as the timeout parameter to fsockopen() only applies while connecting the socket.
As of PHP 4.3.0, if you have compiled in OpenSSL support, you may prefix the hostname with either 'ssl: / /' or 'tls: / /' to use an SSL or TLS client connection over TCP / IP to connect to the remote host.
If the call fails, it will return FALSE and if the optional errno and errstr arguments are present they will be set to indicate the actual system level error that occurred in the system-level connect() call.
This is most likely due to a problem initializing the socket.
Depending on the environment, the Unix domain or the optional connect timeout may not be available.
You can switch it to non-blocking mode by using socket_set_blocking().
?php $fp = fsockopen ("www.example.com", 80, $errno, $errstr, 30); if (!$fp) {echo "$errstr ($errno) br \n";} else {fputs ($fp, "GET / HTTP / 1.0\r\nHost: www.example.com\r\n\r\n"); while (!feof($fp)) {echo fgets ($fp,128);} fclose ($fp);}?
Using UDP connection
Warning
UDP sockets will sometimes appear to have opened without an error, even if the remote host is unreachable.
The reason for this is because UDP is a "connectionless" protocol, which means that the operating system does not try to establish a link for the socket until it actually needs to send or receive data.
Note:
The timeout parameter was introduced in PHP 3.0.9 and UDP support was added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Gathers the statistics of the file opened by the file pointer handle.
This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.
Returns an array with the statistics of the file with the following elements:
device
inode
number of links
user id of owner
group id owner
device type if inode device *
size in bytes
time of last access
time of last modification
time of last change
blocksize for filesystem I / O *
number of blocks allocated
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the position of the file pointer referenced by handle; i.e., its offset into the file stream.
If an error occurs, returns FALSE.
The file pointer must be valid, and must point to a file successfully opened by fopen() or popen().
See also fopen(), popen(), fseek(), and rewind().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Semaphore, Shared Memory and IPC Functions
Up
PHP Manual
Prev
Next
Changes to the parent directory.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
FTP functions
Up
PHP Manual
Prev
Next
Changes to the specified directory.
Returns TRUE on success or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The port The port parameter specifies an alternate port to connect to.
The timeout parameter specifies the timeout for all subsequent network operations.
The timeout can be changed and queried at any time with ftp_set_option() and ftp_get_option().
The timeout parameter became available in PHP 4.2.0.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_delete() deletes the file specified by path from the FTP server.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The transfer mode specified must be either FTP_ASCII or FTP_BINARY.
The resumepos parameter was added in PHP 4.3.0.
See also ftp_get().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_fput() uploads the data from the file pointer fp until the end of the file is reached.
The results are stored in remote_file on the FTP server.
Note:
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The transfer mode specified must be either FTP_ASCII or FTP_BINARY.
The resumepos parameter was added in PHP 4.3.0.
See also ftp_fget() and ftp_async_get().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Table 1.
Example 1. ftp_get_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Logs in to the given FTP stream.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_mdtm() checks the last modified time for a file, and returns it as a UNIX timestamp.
If an error occurs, or the file does not exist, -1 is returned.
Returns a UNIX timestamp on success, or -1 on error.
Not all servers support this feature!
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates the specified directory.
Returns the newly created directory name on success or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Example 1. ftp_nb_get() example
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Example 1. ftp_nb_put() example
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of filenames from the specified directory on success or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
In passive mode, data connections are initiated by the client, rather than by the server.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_put() stores local_file on the FTP server, as remote_file.
Note:
Returns TRUE on success or FALSE on failure.
Example 1. ftp_put() example
$upload = ftp_put( $conn_id, $destination_file, $source_file, FTP_ASCII);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current directory or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_quit() is an alias for ftp_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_rawlist() executes the FTP LIST command, and returns the result as an array.
Each array element corresponds to one line of text.
The output is not parsed in any way.
The system type identifier returned by ftp_systype() can be used to determine how the results should be interpreted.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_rename() renames the file or directory that is currently named from to the new name to, using the FTP stream ftp_stream.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Removes the specified directory.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Table 1.
Example 1. ftp_set_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
They are useful for handling such things as file permissions and group membership.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
If an error occurs, of if the file does not exist, -1 is returned.
Returns the file size on success, or -1 on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the remote system type, or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Takes the filepointer, handle, and truncates the file to length, size.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the argument which is at the arg_num 'th offset into a user-defined function's argument list.
Function arguments are counted starting from zero. func_get_arg() will generate a warning if called from outside of a function definition.
If arg_num is greater than the number of arguments actually passed, a warning will be generated and func_get_arg() will return FALSE.
?php function foo() {$numargs = func_num_args(); echo "Number of arguments: $numargs br \n"; if ($numargs = 2) {echo "Second argument is: ". func_get_arg (1)." br \n";}} foo (1, 2, 3);?
func_get_arg() may be used in conjunction with func_num_args() and func_get_args() to allow user-defined functions to accept variable-length argument lists.
Note:
This function was added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array in which each element is the corresponding member of the current user-defined function' s argument list. func_get_args() will generate a warning if called from outside of a function definition.
?php function foo() {$numargs = func_num_args(); echo "Number of arguments: $numargs br \n"; if ($numargs = 2) {echo "Second argument is: ". func_get_arg (1)." br \n";} $arg_list = func_get_args(); for ($i = 0; $i $numargs; $i++) {echo "Argument $i is: ". $arg_list[$i]." br \n";}} foo (1, 2, 3);?
func_get_args() may be used in conjunction with func_num_args() and func_get_arg() to allow user-defined functions to accept variable-length argument lists.
Note:
This function was added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of arguments passed into the current user-defined function. func_num_args() will generate a warning if called from outside of a user-defined function.
?php function foo() {$numargs = func_num_args(); echo "Number of arguments: $numargs\n";} foo (1, 2, 3); / / Prints'Number of arguments:
func_num_args() may be used in conjunction with func_get_arg() and func_get_args() to allow user-defined functions to accept variable-length argument lists.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
See also method_exists() and get_defined_functions().
Prev
Home
Next
Up
PHP Manual
Prev
Next
fwrite() writes the contents of string to the file stream pointed to by handle.
If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first.
fwrite() returns the number of bytes written, or FALSE on error.
Note that if the length argument is given, then the magic_quotes_runtime configuration option will be ignored and no slashes will be stripped from string.
Note:
On systems which differentiate between binary and text files (i.e.
Windows) the file must be opened with'b 'included in fopen() mode parameter.
Example 1.
A simple fwrite example
?php $filename = 'test.txt'; $somecontent = "Add this to the file\n"; / / Let's make sure the file exists and is writable first. if (is_writable($filename)) {/ / In our example we're opening $filename in append mode. / / The file pointer is at the bottom of the file hence / / that's where $somecontent will go when we fwrite() it. if (!$handle = fopen($filename, 'a')) {print "Cannot open file ($filename)"; exit;} / / Write $somecontent to our opened file. if (!fwrite($handle, $somecontent)) {print "Cannot write to file ($filename)"; exit;} print "Success, wrote ($somecontent) to file ($filename)"; fclose($handle);} else {print "The file $filename is not writable";}?
See also fread(), fopen(), fsockopen(), popen(), and fputs().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
getallheaders() is an alias for apache_request_headers().
It will return an associative array of all the HTTP headers in the current request.
Please read the apache_request_headers() documentation for more information on how this function works.
Note:
Essentially, it was renamed.
This is because this function only works when PHP is compiled as an Apache Module.
See also apache_request_headers().
Prev
Home
Next
Up
PHP Manual
Prev
Next
get_browser() attempts to determine the capabilities of the user's browser.
This is done by looking up the browser 's information in the browscap.ini file.
By default, the value of HTTP_USER_AGENT is used; however, you can alter this (i.e., look up another browser's info) by passing the optional user_agent parameter to get_browser().
The information is returned in an object, which will contain various data elements representing, for instance, the browser' s major and minor version numbers and ID string; TRUE / FALSE values for features such as frames, JavaScript, and cookies; and so forth.
While browscap.ini contains information on many browsers, it relies on user updates to keep the database current.
The following example shows how one might list all available information retrieved about the user 's browser.
?php echo $_SERVER[ 'HTTP_USER_AGENT']. "hr / \n"; $browser = get_browser(); foreach ($browser as $name = $value) {print" b $name / b $value br / \n";}?
The output of the above script would look something like this:
Mozilla / 4.5 [en] (X11; U; Linux 2.2.9 i586) hr / b browser_name_pattern: / b Mozilla / 4\.5.* br / b parent: / b Netscape 4.0 br / b platform: / b Linux br / b majorver: / b 4 br / b minorver: / b 5 br / b browser: / b Netscape br / b version: / b 4 br / b frames: / b 1 br / b tables: / b 1 br / b cookies: / b 1 br / b backgroundsounds: / b br / b vbscript: / b br / b javascript: / b 1 br / b javaapplets: / b 1 br / b activexcontrols: / b br / b beta: / b br / b crawler: / b br / b authenticodeupdate: / b br / b msn: / b br /
In order for this to work, your browscap configuration setting in php.ini must point to the correct location of the browscap.ini file on your system. browscap.ini is not bundled with PHP but you may find an up-to-date browscap.ini file here.
Note:
The only way to test if cookies are accepted is to set one with setcookie(), reload, and check for the value.
On versions older than PHP 4.0.6, you will have to pass the user agent in via the optional user_agent parameter if the PHP directive register_globals is off.
In this case, you will pass in $HTTP_SERVER_VARS[ 'HTTP_USER_AGENT'].
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current value of the PHP configuration variable specified by varname, or FALSE if an error occurs.
It will not return configuration information set when the PHP was compiled, or read from an Apache configuration file (using the php3_configuration_option directives).
To check whether the system is using a configuration file, try retrieving the value of the cfg_file_path configuration setting.
See also ini_get().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns FALSE if obj is not an object.
See also get_parent_class(), gettype(), and is_subclass_of().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. get_class_methods() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. get_class_vars() example
100 / / As of PHP 4.2.0 var1: var2: xyz var3:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the name of the owner of the current PHP script.
See also getmyuid(), getmygid(), getmypid(), getmyinode(), and getlastmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also chdir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given, as the following array elements:
"seconds" - seconds
"minutes" - minutes
"hours" - hours
"mday" - day of the month
"wday" - day of the week, numeric: from 0 as Sunday up to 6 as Saturday
"mon" - month, numeric
"year" - year, numeric
"yday" - day of the year, numeric; i.e. "299 "
"weekday" - day of the week, textual, full; i.e. "Friday "
"month" - month, textual, full; i.e. "January "
Example 1. getdate() example
$today = getdate(); $month = $today['month']; $mday = $today['mday']; $year = $today['year']; echo "$month $mday, $year";
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an array of the names of the declared classes in the current script.
Note:
Also note that depending on what libraries you have compiled into PHP, additional classes could be present.
There is a list of predefined classes in the Predefined Classes section of the appendices.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
$ip = getenv ("REMOTE_ADDR"); / / get the ip number of the user
Note:
See also putenv().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the names of all the functions defined in the module indicated by module_name.
For example the lines below
print_r (get_extension_funcs ("xml")); print_r (get_extension_funcs ("gd"));
See also: get_loaded_extensions()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the host name of the Internet host specified by ip_address or a string containing the unmodified ip_address on failure.
See also gethostbyname().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the IP address of the Internet host specified by hostname or a string containing the unmodified hostname on failure.
See also gethostbyaddr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a list of IP addresses to which the Internet host specified by hostname resolves.
See also gethostbyname(), gethostbyaddr(), checkdnsrr(), getmxrr(), and the named(8) manual page.
Prev
Home
Next
Up
PHP Manual
Prev
Next
get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities().
And as in the htmlspecialchars() and htmlentities() functions you can optionally specify the quote_style you are working with.
The default is ENT_COMPAT mode.
See the description of these modes in htmlspecialchars().
Example 1.
Translation Table Example
$trans = get_html_translation_table( HTML_ENTITIES); $str = "Hallo Frau Krämer"; $encoded = strtr($str, $trans);
The cool thing is using array_flip() to change the direction of the translation.
$trans = array_flip( $trans); $original = strtr($encoded, $trans);
See also htmlspecialchars(), htmlentities(), strtr(), and array_flip().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Index 2 is a flag indicating the type of the image:
These values correspond to the IMAGETYPE constants that were added in PHP 4.3.
Example 1. getimagesize (file)
Example 2. getimagesize (URL)
?php $size = getimagesize ("http: / /www.example.com / gifs / logo.gif");?
Beginning with PHP 4.3, bits and channels are present for other image types, too.
However, the presence of these values can be a bit confusing.
As an example, GIF always uses 3 channels per pixel, but the number of bits per pixel cannot be calculated for an animated GIF with a global color table.
Some formats may contain no image or may contain multiple images.
In these cases, getimagesize() might not be able to properly determine the image size. getimagesize() will return zero for width and height in these cases.
This information can be used to deliver images with correct HTTP Content-type headers:
?php $size = getimagesize ($filename); $fp=fopen($filename, "rb"); if ($size $fp) {header("Content-type: {$size['mime']}"); fpassthru($fp); exit;} else {/ / error}?
If accessing the filename image is impossible, or if it isn' t a valid picture, getimagesize() will return FALSE and generate a warning.
Currently, this will return the different JPG APP markers as an associative array.
A very common one is to embed IPTC http: / /www.iptc.org / A very common one is to embed IPTC http: / /www.iptc.org / information in the APP13 marker.
You can use the iptcparse() function to parse the binary APP13 marker into something readable.
Example 4. getimagesize() returning IPTC
Note:
This function does not require the GD image library.
URL support was added in PHP 4.0.5.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Files that are included or required multiple times only show up once in the returned array.
Files included using the auto_prepend_file configuration directive are not included in the returned array.
Example 1. get_included_files() Example
test1.php test2.php test3.php test4.php
In PHP 4.0.1pl2 and previous versions get_included_files() assumed that the required files ended in the extension .php; other extensions would not be returned.
See also: include(), include_once(), require(), require_once(), and get_required_files().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the time of the last modification of the current page.
Returns FALSE on error.
Example 1. getlastmod() example
?php / / outputs e.g. 'Last modified:
March 04 1998 20:43:59 .' echo "Last modified: ". date ("F d Y H:i:s .", getlastmod());?
If you' re interested in getting the last modification time of a different file, consider using filemtime().
See also date(), getmyuid(), getmygid(), get_current_user(), getmyinode(), getmypid(), and filemtime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the names of all the modules compiled and loaded in the PHP interpreter.
For example the line below
?php print_r (get_loaded_extensions());?
Array ([0] = xml [1] = wddx [2] = standard [3] = session [4] = posix [5] = pgsql [6] = pcre [7] = gd [8] = ftp [9] = db [10] = calendar [11] = bcmath)
See also get_extension_funcs(), extension_loaded(), dl() and phpinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
So even when get_magic_quotes() returns TRUE neither double quotes, backslashes or NUL's will be escaped.
See also addslashes(), stripslashes(), get_magic_quotes_runtime(), and ini_get().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current active configuration setting of magic_quotes_runtime (0 for off, 1 for on).
See also get_magic_quotes_gpc() and set_magic_quotes_runtime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Setting use_include_path to 1 will result in PHP trying to open the file along the standard include path as per the include_path directive.
Example 1.
Example 2.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Searches DNS for MX records corresponding to hostname.
A list of the MX records found is placed into the array mxhosts.
Note:
Try the PEAR class Net_DNS.
See also checkdnsrr(), gethostbyname(), gethostbynamel(), gethostbyaddr(), and the named(8) manual page.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also getmygid(), getmyuid(), get_current_user(), getmypid(), and getlastmod().
This function is not implemented on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current PHP process ID, or FALSE on error.
Warning
We recommend against relying on pids in security-dependent contexts.
See also getmygid(), getmyuid(), get_current_user(), getmyinode(), and getlastmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the user ID of the current script, or FALSE on error.
See also getmygid(), getmypid(), get_current_user(), getmyinode(), and getlastmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
In versions after PHP 4.2.0, the key will be assigned with a NULL value.
Example 1.
Use of get_object_vars()
Array ([x] = 1.233 [y] = 3.445 [label] =) Array ([x] = 1.233 [y] = 3.445 [label] = point #1)
See also get_class_methods() and get_class_vars()!
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
If obj is a string, returns the name of the parent class of the class with that name.
See also get_class() and is_subclass_of()
Prev
Home
Next
Up
PHP Manual
Prev
Next
getprotobyname() returns the protocol number associated with the protocol name as per / etc / protocols.
See also: getprotobynumber().
Prev
Home
Next
Up
PHP Manual
Prev
Next
getprotobynumber() returns the protocol name associated with protocol number as per / etc / protocols.
See also: getprotobyname().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the maximum value that can be returned by a call to rand().
See also rand(), srand() and mt_getrandmax().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
As of PHP 4.0.4, this function is an alias for get_included_files()
In PHP 4.0.1pl2 and previous versions get_required_files() assumed that the required files ended in the extension .php, other extensions would not be returned.
The array returned by get_required_files() was an associative array and only listed files included by require() and require_once().
See also: require(), require_once(), include(), include_once(), and get_included_files().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an interface to getrusage( 2).
It returns an associative array containing the data returned from the system call.
If who is 1, getrusage will be called with RUSAGE_CHILDREN.
All entries are accessible by using their documented field names.
Getrusage Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
getservbyname() returns the Internet port which corresponds to service for the specified protocol as per / etc / services. protocol is either "tcp "or "udp" (in lowercase).
See also: getservbyport().
Prev
Home
Next
Up
PHP Manual
Prev
Next
getservbyport() returns the Internet service associated with port for the specified protocol as per / etc / services. protocol is either "tcp "or "udp" (in lowercase).
See also: getservbyname().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a translated string if one is found in the translation table, or the submitted message if not found.
You may use the underscore character '_' as an alias to this function.
Example 1. gettext() -check
?php / / Set language to German setlocale( LC_ALL, 'de'); / / Specify location of translation tables bindtextdomain("myPHPApp", ". / locale"); / / Choose domain textdomain("myPHPApp"); / / Print a test message print gettext("Welcome to My PHP Application"); / / Or use the alias _() for gettext() print _("Have a nice day");?
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an interface to gettimeofday( 2).
It returns an associative array containing the data returned from the system call.
"sec" - seconds
"usec" - microseconds
"minuteswest" - minutes west of Greenwich
"dsttime" - type of dst correction
Prev
Home
Next
Up
PHP Manual
Prev
Next
Never use gettype() to test for a certain type, since the returned string may be subject to change in a future version.
Instead, use the is_* functions.
"double" (for historical reasons "double "is returned in case of a float, and not simply "float")
See also settype(), is_array(), is_bool(), is_float(), is_integer(), is_null(), is_numeric(), is_object(), is_resource(), is_scalar(), and is_string().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).
For example, when run in Finland (GMT +0200), the first line below prints "Jan 01 1998 00:00:00", while the second prints "Dec 31 1997 22:00:00 ".
Example 1. gmdate() example
echo date ("M d Y H:i:s", mktime (0,0,0,1,1,1998)); echo gmdate ("M d Y H:i:s", mktime (0,0,0,1,1,1998));
See also date(), mktime(), gmmktime() and strftime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to mktime() except the passed parameters represents a GMT date.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT).
For example, when run in Eastern Standard Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00", while the second prints "Jan 01 1999 01:00:00 ".
Example 1. gmstrftime() example
setlocale (LC_TIME, 'en_US'); echo strftime ("%b %d %Y %H:%M:%S", mktime (20,0,0,12,31,98)) ."\n"; echo gmstrftime ("%b %d %Y %H:%M:%S", mktime (20,0,0,12,31,98)) ."\n";
See also strftime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.
Although this function can handle dates all the way back to 4714 B.C., such use may not be meaningful.
The Gregorian calendar was not instituted until October 15, 1582 (or October 5, 1582 in the Julian calendar).
Some countries did not accept it until much later.
For example, Britain converted in 1752, The USSR in 1918 and Greece in 1923.
Most European countries used the Julian calendar prior to the Gregorian.
Example 1.
Prev
Home
Next
FrenchToJD
Up
JDDayOfWeek
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Zlib Compression Functions
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. gzopen() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
header() is used to send raw HTTP headers.
See the HTTP / 1.1 specification for more information on HTTP headers.
The optional replace The optional replace parameter indicates whether the header should replace a previous similar header, or add a second header of the same type.
By default it will replace, but if you pass in FALSE as the second argument you can force multiple headers of the same type.
For example:
The second optional http_response_code force the HTTP response code to the specified value. (This parameter is available in PHP 4.3.0 and higher.)
There are two special-case header calls.
The first is a header that starts with the string "HTTP /" (case is not significant), which will be used to figure out the HTTP status code to send.
For example, if you have configured Apache to use a PHP script to handle requests for missing files (using the ErrorDocument directive), you may want to make sure that your script generates the proper status code.
Note:
The HTTP status header line will always be the first sent to the client, regardless of the actual header() call beeing the first or not.
The status may be overridden by calling header() with a new status line at any time unless the HTTP headers have already been sent.
Note:
In PHP 3, this only works when PHP is compiled as an Apache module.
You can achieve the same effect using the Status header.
The second special case is the "Location:" header.
Not only does it send this header back to the browser, but it also returns a REDIRECT (302) status code to the browser unless some 3xx status code has already been set.
?php header( "Location: http: / /www.example.com / "); / * Redirect browser * / exit; / * Make sure that code below does not get executed when we redirect. * /?
Note:
HTTP / 1.1 requires an absolute URI as argument to Location: including the scheme, hostname and absolute path, but some clients accept relative URIs.
You can usually use $_SERVER[ 'HTTP_HOST'], $_SERVER['PHP_SELF'] and dirname() to make an absolute URI from a relative one yourself:
PHP scripts often generate dynamic content that must not be cached by the client browser or any proxy caches between the server and the client browser.
Many proxies and clients can be forced to disable caching with
Mon, 26 Jul 1997 05:00:00 GMT"); / / Date in the past header("Last-Modified: ". gmdate("D, d M Y H:i:s")." GMT"); / / always modified header("Cache-Control: no-store, no-cache, must-revalidate"); / / HTTP / 1.1 header("Cache-Control: post-check=0, pre-check=0", false); header("Pragma: no-cache"); / / HTTP / 1.0?
Note:
You may find that your pages aren' t cached even if you don't output all of the headers above.
There are a number of options that users may be able to set for their browser that change its default caching behavior.
By sending the headers above, you should override any settings that may otherwise cause the output of your script to be cached.
Additionally, session_cache_limiter() and the session.cache_limiter configuration setting can be used to automatically generate the correct caching-related headers when sessions are being used.
Remember that header() must be called before any actual output is sent, either by normal HTML tags, blank lines in a file, or from PHP.
It is a very common error to read code with include(), or require(), functions, or another file access function, and have spaces or empty lines that are output before header() is called.
The same problem exists when using a single PHP / HTML file.
html ?php / / This will give an error.
Note the output / / above, which is before the header() call header('Location: http: / /www.example.com / ');?
Note:
In PHP 4, you can use output buffering to get around this problem, with the overhead of all of your output to the browser being buffered in the server until you send it.
You can do this by calling ob_start() and ob_end_flush() in your script, or setting the output_buffering configuration directive on in your php.ini or server configuration files.
If you want the user to be prompted to save the data you are sending, such as a generated PDF file, you can use the Content-Disposition header to supply a recommended filename and force the browser to display the save dialog.
?php / / We' ll be outputting a PDF header("Content-type: application / pdf"); / / It will be called downloaded.pdf header("Content-Disposition: attachment; filename=downloaded.pdf"); / / The PDF source is in original.pdf readfile('original.pdf');?
Note:
There is no workaround.
There is also a bug in Microsoft Internet Explorer 5.5 that interferes with this, which can be resolved by upgrading to Service Pack 2 or later.
Note:
If safe mode is enabled the uid of the script is added to the realm part of the WWW-Authenticate header if you set this header (used for HTTP Authentication).
See also headers_sent(), setcookie(), and the section on HTTP authentication.
Prev
Home
Next
Up
PHP Manual
Prev
Next
headers_sent() will return FALSE if no HTTP headers have already been sent or TRUE headers_sent() will return FALSE if no HTTP headers have already been sent or TRUE otherwise.
If the optional file and line parameters are set, headers_sent() will put the php source file name and line number where output started in the file and line variables.
You can' t add any more header lines using the header() You can't add any more header lines using the header() function once the header block has already been sent.
Using this function you can at least prevent getting HTTP header related error messages.
Another option is to use Output Buffering.
New parameters:
The optional file and line parameters where added in PHP 4.3.0.
Example 1.
Examples using headers_sent()
?php / / If no headers are sent, send one if (!headers_sent()) {header ('Location: http: / /www.example.com / '); exit;} / / An example using the optional file and line parameters, as of PHP 4.3.0 / / Note that $filename and $linenum are passed in for later use. / / Do not assign them values beforehand. if (!headers_sent($filename, $linenum)) {header ('Location: http: / /www.example.com / '); exit; / / You would most likely trigger an error here.} else {print "Headers already sent in $filename on line $linenum\n ". "Cannot redirect, for now please click this a". "href=\"http: / /www.example.com\ "link / a instead\n"; exit;}?
See also ob_start(), trigger_error(), and header() for a more detailed discussion of the matters involved.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is similar to hebrev() This function is similar to hebrev() with the difference that it converts newlines (\n) to "br \n".
The optional parameter max_chars_per_line indicates maximum number of characters per line will be output.
The function tries to avoid breaking words.
See also hebrev()
Prev
Home
Next
Up
PHP Manual
Prev
Next
The optional parameter max_chars_per_line indicates maximum number of characters per line will be output.
The function tries to avoid breaking words.
See also hebrevc()
Prev
Home
Next
Up
PHP Manual
Prev
Next
The largest number that can be converted is 7fffffff or 2147483647 in decimal.
This way, all left zeros are ignored, but right zeros will be valued.
var_dump( hexdec("See")); var_dump(hexdec("ee")); / / both prints "int(238) "var_dump(hexdec("that")); var_dump(hexdec("a0")); / / both prints int(160)
Prev
Home
Next
Up
PHP Manual
Prev
Next
If the second parameter return is set to TRUE then highlight_file() If the second parameter return is set to TRUE then highlight_file() will return the highlighted code as a string instead of printing it out.
Note:
The return parameter became available in PHP 4.2.0.
Before this time it behaved like the default, which is FALSE
Care should be taken when using the show_source() and highlight_file() functions to make sure that you do not inadvertently reveal sensitive information such as passwords or any other type of information that might create a potential security risk.
Since PHP 4.2.1 this function is also affected by safe_mode and open_basedir.
Creating a source highlighting URL
To setup a URL that can code hightlight any script that you pass to it, we will make use of the "ForceType" directive in Apache to generate a nice URL pattern, and use the function highlight_file() to show a nice looking code list.
Location / source ForceType application / x-httpd-php / Location
HTML HEAD TITLE Source Display / TITLE / HEAD BODY BGCOLOR=" white "?php $script = getenv ("PATH_TRANSLATED"); if(!$script) {echo" BR B ERROR:
Script Name needed / B BR ";} else {if (ereg("(\.php_BAR_\.inc)$",$script)) {echo" H1 Source of: $PATH_INFO / H1 \n HR \n"; highlight_file($script);} else {echo "H1 ERROR:
Then you can use an URL like the one below to display a colorized version of a script located in "/ path / to / script.php" in your web site.
http: / /your.server.com / source / path / to / script.php
See also highlight_string(), show_source().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Before this time it behaved like the default, which is FALSE
See also highlight_file(), and show_source().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities.
Like htmlspecialchars(), the optional second quote_style parameter lets you define what will be done with'single 'and "double "quotes.
Table 1.
Constant Name
Will convert double-quotes and leave single-quotes alone.
Will convert both double and single quotes.
Will leave both double and single quotes unconverted.
Like htmlspecialchars(), it takes an optional third argument which defines character set used in conversion.
Presently, the ISO-8859-1 character set is used as the default.
See also html_entity_decode(), get_html_translation_table(), htmlspecialchars(), nl2br(), and urlencode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings.
This function returns a string with some of these conversions made; the translations made are those most useful for everyday web programming.
If you require all HTML character entities to be translated, use htmlentities() instead.
This function is useful in preventing user-supplied text from containing HTML markup, such as in a message board or guest book application.
The optional second argument, quote_style, tells the function what to do with single and double quote characters.
The default mode, ENT_COMPAT, is the backwards compatible mode which only translates the double-quote character and leaves the single-quote untranslated.
If ENT_QUOTES is set, both single and double quotes are translated and if ENT_NOQUOTES is set neither single nor double quotes are translated.
The translations performed are:
'' (ampersand) becomes' amp; '
'"' (double quote) becomes' quot; 'when ENT_NOQUOTES is not set.
'' '(single quote) becomes' #039; 'only when ENT_QUOTES is set.
'' (less than) becomes' lt; '
'' (greater than) becomes' gt; '
Example 1. htmlspecialchars() example
$new = htmlspecialchars( "a href='test 'Test / a", ENT_QUOTES);
Note that this function does not translate anything beyond what is listed above.
For full entity translation, see htmlentities().
Support for the optional second argument was added in PHP 3.0.17 and PHP 4.0.3.
The third argument defines character set used in conversion.
The default character set is ISO-8859-1.
Support for this third argument was added in PHP 4.1.0.
See also get_html_translation_table(), htmlentities() and nl2br().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
iconv functions
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. modifying an attribute
Example 2. adding a completely new attribute
Note:
Example 3. modifying Title attribute
Example 4. modifying Title attribute
Example 5. removing attribute
Note:
Note:
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
InterBase functions
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Closes the link to an InterBase database that' s associated with a connection id returned from ibase_connect().
If the connection id is omitted, the last opened link is assumed.
Default transaction on link is committed, other transactions are rolled back.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Establishes a connection to an InterBase server.
The database argument has to be a valid path to database file on the server it resides on.
If the server is not local, it must be prefixed with either 'hostname:' (TCP / IP), '/ /hostname /' (NetBEUI) or'hostname@ '(IPX / SPX), depending on the connection protocol used. username and password can also be specified with PHP configuration directives ibase.default_user and ibase.default_password. charset is the default character set for a database. buffers is the number of database buffers to allocate for the server-side cache.
If 0 or omitted, server chooses its own default. dialect selects the default SQL dialect for any statement executed within a connection, and it defaults to the highest one supported by client libraries.
In case a second call is made to ibase_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling ibase_close().
Example 1. ibase_connect() example
?php $host = 'localhost: / path / to / your.gdb'; $dbh = ibase_connect($host, $username, $password); $stmt = 'SELECT * FROM tblname'; $sth = ibase_query($dbh, $stmt); while ($row = ibase_fetch_object($sth)) {echo $row - email, "\n";} ibase_free_result($sth); ibase_close($dbh);?
Note:
The optional buffers parameter was added in PHP 4.0.0.
Note:
The optional dialect parameter was added in PHP 4.0.0 and is functional only with InterBase 6 and up.
Note:
The optional role parameter was added in PHP 4.0.0 and is functional only with InterBase 5 and up.
See also ibase_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Execute a query prepared by ibase_prepare().
This is a lot more effective than using ibase_query() if you are repeating a same kind of query several times with only some parameters changing.
?php $updates = array( 1 = 'Eric', 5 = 'Filip', 7 = 'Larry '); $query = ibase_prepare( "UPDATE FOO SET BAR =?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Fetches a row as a pseudo-object from a result_id obtained either by ibase_query() or ibase_execute().
See also ibase_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Subsequent call to ibase_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Free a query prepared by ibase_prepare().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Free' s a result set the has been created by ibase_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an integer containing the number of fields in a result set.
?php $dbh = ibase_connect ($host, $username, $password); $stmt = 'SELECT * FROM tblname'; $sth = ibase_query ($dbh, $stmt); if (ibase_num_fields($sth) 0) {while ($row = ibase_fetch_object ($sth)) {print $row - email. "\n";}} else {die ("No Results were found for your query");} ibase_close ($dbh);?
See also: ibase_field_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ibase_pconnect() acts very much like ibase_connect() with two major differences.
First, when connecting, the function will first try to find a (persistent) link that's already opened with the same parameters.
If one is found, an identifier for it will be returned instead of opening a new connection.
Second, the connection to the InterBase server will not be closed when the execution of the script ends.
This type of link is therefore called 'persistent'.
It is functional only with InterBase 6 and versions higher than that.
See also ibase_connect() for the meaning of parameters passed to this function.
They are exactly the same.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prepare a query for later binding of parameter placeholders and execution (via ibase_execute()).
Prev
Home
Next
Up
PHP Manual
Prev
Next
If the query was successful and there were no results, returns TRUE.
See also ibase_errmsg(), ibase_fetch_row(), ibase_fetch_object(), and ibase_free_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the format of timestamp, date or time type columns returned from queries.
Internally, the columns are formatted by c-function strftime(), so refer to it's documentation regarding to the format of the string. columntype is one of the constants IBASE_TIMESTAMP, IBASE_DATE and IBASE_TIME.
If omitted, defaults to IBASE_TIMESTAMP for backwards compatibility.
?php / / InterBase 6 TIME-type columns will be returned in / / the form '05 hours 37 minutes'. ibase_timefmt("%H hours %M minutes", IBASE_TIME);?
You can also set defaults for these formats with PHP configuration directives ibase.timestampformat, ibase.dateformat and ibase.timeformat.
It has any meaning only with InterBase version 6 and higher.
Note:
A backwards incompatible change happened in PHP 4.0 when PHP configuration directive ibase.timeformat was renamed to ibase.timestampformat and directives ibase.dateformat and ibase.timeformat were added, so that the names would match better their functionality.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Ingres II functions
PHP Manual
Prev
Next
pre ?php iconv_set_encoding( "internal_encoding", "UTF-8"); iconv_set_encoding("output_encoding", "ISO-8859-1"); var_dump(iconv_get_encoding('all'));? / pre
The printout of the above program will be:
See also: iconv_set_encoding() and ob_iconv_handler().
Prev
Home
Next
iconv functions
Up
PHP Manual
Prev
Next
It converts the string str encoded in in_charset to the string encoded in out_charset.
It returns the converted string or FALSE, if it fails.
Example 1. iconv() example:
echo iconv( "ISO-8859-1" ,"UTF-8" ,"This is a test .");
Prev
Home
Next
Up
PHP Manual
Prev
Next
The value of type can be:
output_encoding
See also: iconv_get_encoding() and ob_iconv_handler().
Prev
Home
Next
Up
PHP Manual
Prev
Next
result_id is a valid result id returned by ifx_query() or ifx_prepare().
Returns the number of rows affected by a query associated with result_id.
For inserts, updates and deletes the number is the real number (sqlerrd[2]) of affected rows.
For selects it is an estimate (sqlerrd[0]).
Don 't rely on it.
The database server can never return the actual number of rows that will be returned by a SELECT because it has not even begun fetching them at this stage (just after the "PREPARE "when the optimizer has determined the query plan).
Useful after ifx_prepare() to limit queries to reasonable result sets.
See also: ifx_num_rows()
Example 1.
$rid = ifx_prepare ("select * from emp where name like ". $name, $connid); if (! $rid) {... error...} $rowcount = ifx_affected_rows ($rid); if ($rowcount 1000) {printf ("Too many rows in result set (%d)\n br", $rowcount); die ("Please restrict your query br \n");}
Prev
Home
Next
Informix functions
Up
PHP Manual
Prev
Next
Set the default blob mode for all select queries.
Mode "0" means save Byte-Blobs in memory, and mode "1 "means save Byte-Blobs in a file.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the default byte mode for all select-queries.
Mode "0" will return a blob id, and mode "1 "will return a varchar with text content.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns: always TRUE.
ifx_close() closes the link to an Informix database that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
Note that this isn' t usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
ifx_close() will not close persistent links generated by ifx_pconnect().
See also: ifx_connect(), and ifx_pconnect().
Example 1.
Closing a Informix connection
$conn_id = ifx_connect ("mydb@ol_srv", "itsme", "mypassword");... some queries and stuff... ifx_close($conn_id);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a connection identifier on success, or FALSE on error.
ifx_connect() establishes a connection to an Informix server.
All of the arguments are optional, and if they' re missing, defaults are taken from values supplied in configuration file (ifx.default_host for the host (Informix libraries will use INFORMIXSERVER environment value if not defined), ifx.default_user for user, ifx.default_password for the password (none if not defined).
In case a second call is made to ifx_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling ifx_close().
See also ifx_pconnect(), and ifx_close().
Example 1.
Connect to a Informix database
Prev
Home
Next
Up
PHP Manual
Prev
Next
Duplicates the given blob object. bid is the ID of the blob object.
Returns FALSE on error otherwise the new blob object-id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates an blob object.
type:
mode:
0 = blob-object holds the content in memory, 1 = blob-object holds the content in file.
param: if mode = 0: pointer to the content, if mode = 1: pointer to the filestring.
Return FALSE on error, otherwise the new blob object-id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates an char object. param should be the char content.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Executes a previously prepared query or opens a cursor for it.
Does NOT free result_id on error.
Also sets the real number of ifx_affected_rows() for non-select statements for retrieval by ifx_affected_rows()
See also: ifx_prepare().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The Informix error codes (SQLSTATE SQLCODE) formatted as follows:
where x = space: no error
E: error
N: no more data
W: warning
?: undefined
If the "x" character is anything other than space, SQLSTATE and SQLCODE describe the error in more detail.
See the Informix manual for the description of SQLSTATE and SQLCODE
Returns in a string one character describing the general results of a statement and both SQLSTATE and SQLCODE associated with the most recent SQL statement executed.
The format of the string is "(char) [SQLSTATE=(two digits) (three digits) SQLCODE=(one digit)]".
The first character can be '' (space) (success), 'W' (the statement caused some warning), 'E' (an error happened when executing the statement) or 'N' (the statement didn't return any data).
See also: ifx_errormsg()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the Informix error message associated with the most recent Informix error, or, when the optional "errorcode" param is present, the error message corresponding to "errorcode".
See also: ifx_error()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array that corresponds to the fetched row, or FALSE if there are no more rows.
Blob columns are returned as integer blob id values for use in ifx_get_blob() unless you have used ifx_textasvarchar(1) or ifx_byteasvarchar(1), in which case blobs are returned as string values.
Returns FALSE on error
result_id is a valid resultid returned by ifx_query() or ifx_prepare() (select type queries only!).
position is an optional parameter for a "fetch" operation on "scroll "cursors: "NEXT", "PREVIOUS", "CURRENT", "FIRST", "LAST" or a number.
If you specify a number, an "absolute" row fetch is executed.
This parameter is optional, and only valid for SCROLL cursors.
ifx_fetch_row() fetches one row of data from the result associated with the specified result identifier.
The row is returned as an array.
Each result column is stored in an array offset, starting at offset 0, with the column name as key.
Subsequent calls to ifx_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
Example 1.
$rid = ifx_prepare ("select * from emp where name like ". $name, $connid, IFX_SCROLL); if (! $rid) {... error...} $rowcount = ifx_affected_rows($rid); if ($rowcount 1000) {printf ("Too many rows in result set (%d)\n br", $rowcount); die ("Please restrict your query br \n");} if (! ifx_do ($rid)) {... error...} $row = ifx_fetch_row ($rid, "NEXT"); while (is_array($row)) {for(reset($row); $fieldname=key($row); next($row)) {$fieldvalue = $row[$fieldname]; printf ("%s = %s ,", $fieldname, $fieldvalue);} printf("\n br "); $row = ifx_fetch_row ($rid, "NEXT");} ifx_free_result ($rid);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns FALSE on error.
Returns the Informix SQL fieldproperties of every field in the query as an associative array.
Properties are encoded as: "SQLTYPE;length;precision;scale;ISNULLABLE" where SQLTYPE = the Informix type like "SQLVCHAR "etc. and ISNULLABLE = "Y" or "N ".
Example 1.
Informix SQL fieldproperties
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array with fieldnames as key and the SQL fieldtypes as data for query with result_id.
Returns FALSE on error.
Example 1.
Fieldnames and SQL fieldtypes
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deletes the blobobject for the given blob object-id bid.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deletes the charobject for the given char object-id bid.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Releases resources for the query associated with result_id.
Returns FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the content of the blob object for the given blob object-id bid.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the content of the char object for the given char object-id bid.
Prev
Home
Next
Up
PHP Manual
Prev
Next
result_id is a valid result id returned by ifx_query() or ifx_prepare().
Returns a pseudo-row (associative array) with sqlca.sqlerrd[0]... sqlca.sqlerrd[5] after the query associated with result_id.
For inserts, updates and deletes the values returned are those as set by the server after executing the query.
This gives access to the number of affected rows and the serial insert value.
For SELECTs the values are those saved after the PREPARE statement.
This gives access to the *estimated* number of affected rows.
The use of this function saves the overhead of executing a "select dbinfo('sqlca.sqlerrdx')" query, as it retrieves the values that were saved by the ifx driver at the appropriate moment.
Example 1.
Retrieve Informix sqlca.sqlerrd[ x] values
/* assume the first column of 'sometable' is a serial * / $qid = ifx_query("insert into sometable values (0, '2nd column', 'another column') ", $connid); if (! $qid) {... error...} $sqlca = ifx_getsqlca ($qid); $serial_value = $sqlca["sqlerrd1"]; echo "The serial value of the inserted row is:". $serial_value br \n";
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of rows fetched or FALSE on error.
Formats all rows of the result_id query into a html table.
The optional second argument is a string of table tag options
Example 1.
Informix results as HTML table
$rid = ifx_prepare ("select * from emp where name like ". $name, $connid, IFX_SCROLL); if (! $rid) {... error...} $rowcount = ifx_affected_rows ($rid); if ($rowcount 1000) {printf ("Too many rows in result set (%d)\n br", $rowcount); die ("Please restrict your query br \n");} if (! ifx_do($rid) {... error...} ifx_htmltbl_result ($rid, "border=\"2\""); ifx_free_result($rid);
Prev
Home
Next
ifx_getsqlca
Up
PHP Manual
Prev
Next
Sets the default return value of a NULL-value on a fetch row.
Mode "0" returns "", and mode "1 "returns" NULL ".
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of columns in query for result_id or FALSE on error
After preparing or executing a query, this call gives you the number of columns in the query.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Gives the number of rows fetched so far for a query with result_id after a ifx_query() or ifx_do() query.
Prev
Home
Next
Up
PHP Manual
Prev
Next
A positive Informix persistent link identifier on success, or FALSE on error
ifx_pconnect() acts very much like ifx_connect() with two major differences.
This function behaves exactly like ifx_connect() when PHP is not running as an Apache module.
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password.
If one is found, an identifier for it will be returned instead of opening a new connection.
Second, the connection to the SQL server will not be closed when the execution of the script ends.
Instead, the link will remain open for future use (ifx_close() will not close links established by ifx_pconnect()).
This type of links is therefore called 'persistent'.
See also: ifx_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a integer result_id for use by ifx_do().
Sets affected_rows for retrieval by the ifx_affected_rows() function.
Prepares query on connection conn_id.
For "select-type" queries a cursor is declared and opened.
The optional cursor_type The optional cursor_type parameter allows you to make this a "scroll" and / or "hold "cursor.
It' s a bitmask and can be either IFX_SCROLL, IFX_HOLD, or both or'ed together.
For either query type the estimated number of affected rows is saved for retrieval by ifx_affected_rows().
If you have BLOB (BYTE or TEXT) columns in the query, you can add a blobidarray parameter containing the corresponding "blob ids", and you should replace those columns with a "?" in the query text.
If the contents of the TEXT (or BYTE) column allow it, you can also use "ifx_textasvarchar(1) "and "ifx_byteasvarchar(1)".
This allows you to treat TEXT (or BYTE) columns just as if they were ordinary (but long) VARCHAR columns for select queries, and you don't need to bother with blob id's.
With ifx_textasvarchar( 0) or ifx_byteasvarchar(0) (the default situation), select queries will return BLOB columns as blob id's (integer value).
You can get the value of the blob as a string or file with the blob functions (see below).
See also: ifx_do().
Prev
Home
Next
Up
PHP Manual
Prev
Next
A positive Informix result identifier on success, or FALSE on error.
A "result_id" resource used by other functions to retrieve the query results.
Sets "affected_rows" for retrieval by the ifx_affected_rows() function.
ifx_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
Executes query on connection conn_id.
For "select-type" queries a cursor is declared and opened.
The optional cursor_type The optional cursor_type parameter allows you to make this a "scroll" and / or "hold "cursor.
It' s a bitmask and can be either IFX_SCROLL, IFX_HOLD, or both or'ed together.
Non-select queries are "execute immediate".
IFX_SCROLL and IFX_HOLD are symbolic constants and as such shouldn 't be between quotes.
I you omit this parameter the cursor is a normal sequential cursor.
For either query type the number of (estimated or real) affected rows is saved for retrieval by ifx_affected_rows().
If you have BLOB (BYTE or TEXT) columns in an update query, you can add a blobidarray parameter containing the corresponding "blob ids", and you should replace those columns with a "?" in the query text.
If the contents of the TEXT (or BYTE) column allow it, you can also use "ifx_textasvarchar(1) "and "ifx_byteasvarchar(1)".
This allows you to treat TEXT (or BYTE) columns just as if they were ordinary (but long) VARCHAR columns for select queries, and you don't need to bother with blob id's.
With ifx_textasvarchar( 0) or ifx_byteasvarchar(0) (the default situation), select queries will return BLOB columns as blob id's (integer value).
You can get the value of the blob as a string or file with the blob functions (see below).
See also: ifx_connect().
Example 1.
Show all rows of the "orders" table as a html table
ifx_textasvarchar( 1); / / use "text mode "for blobs $res_id = ifx_query("select * from orders", $conn_id); if (! $res_id) {printf("Can't select orders: %s\n br %s br \n", ifx_error()); ifx_errormsg(); die;} ifx_htmltbl_result($res_id, "border=\"1\""); ifx_free_result($res_id);
Example 2.
Insert some values into the "catalog" table
/ / create blob id' s for a byte and text column $textid = ifx_create_blob(0, 0, "Text column in memory"); $byteid = ifx_create_blob(1, 0, "Byte column in memory"); / / store blob id's in a blobid array $blobidarray[] = $textid; $blobidarray[] = $byteid; / / launch query $query = "insert into catalog (stock_num, manu_code, ". "cat_descr,cat_picture) values(1 ,'HRO',?, ?)"; $res_id = ifx_query($query, $conn_id, $blobidarray); if (! $res_id) {... error...} / / free result id ifx_free_result($res_id);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
InterBase functions
PHP Manual
Prev
Next
This function sets whether a client disconnect should cause a script to be aborted.
It will return the previous setting and can be called without an argument to not change the current setting and only return the current setting.
See the Connection Handling section in the Features chapter for a complete description of connection handling in PHP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
W and h specifies the ellipse' s width and height respectively while the start and end points are specified in degrees indicated by the s and e W and h specifies the ellipse's width and height respectively while the start and end points are specified in degrees indicated by the s and e arguments.
0° is located at the three-o 'clock position, and the arc is drawn counter-clockwise.
See also imageellipse(), imagefilledellipse(), and imagefilledarc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagechar() draws the first character of c in the image identified by id with its upper-left at x, y (top left is 0, 0) with the color col.
If font is 1, 2, 3, 4 or 5, a built-in font is used (with higher numbers corresponding to larger fonts).
See also imageloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagecharup() draws the character c vertically in the image identified by image at coordinates x, y (top left is 0, 0) with the color col.
If font is 1, 2, 3, 4 or 5, a built-in font is used.
See also imageloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagecolorallocate() returns a color identifier representing the color composed of the given RGB components.
The im argument is the return from the imagecreate() function. red, green and blue are the values of the red, green and blue component of the requested color respectively.
These parameters are integers between 0 and 255. imagecolorallocate() must be called to create each color that is to be used in the image represented by image.
Returns -1 if the allocation failed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use bitshifting and masking to access the distinct red, green and blue component values:
See also imagecolorset() and imagecolorsforindex().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the index of the color in the palette of the image which is "closest" to the specified RGB value.
The "distance" between the desired color and each color in the palette is calculated as if the RGB values represented points in three-dimensional space.
See also imagecolorexact().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The imagecolordeallocate() function de-allocates a color previously allocated with the imagecolorallocate() function.
$white = imagecolorallocate ($im, 255, 255, 255); imagecolordeallocate ($im, $white);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the index of the specified color in the palette of the image.
If the color does not exist in the image 's palette, -1 is returned.
See also imagecolorclosest().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.
See also imagecolorclosest().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This sets the specified index in the palette to the specified color.
This is useful for creating flood-fill-like effects in paletted images without the overhead of performing the actual flood-fill.
See also imagecolorat().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This returns an associative array with red, green, and blue keys that contain the appropriate values for the specified color index.
See also imagecolorat() and imagecolorexact().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This returns the number of colors in the specified image 's palette.
See also imagecolorat() and imagecolorsforindex().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagecolortransparent() sets the transparent color in the image image to color. image is the image identifier returned by imagecreate() and color is a color identifier returned by imagecolorallocate().
The transparent color is a property of the image, transparency is not a property of the color.
The identifier of the new (or current, if none is specified) transparent color is returned.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h.
The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Dst_im is the destination image, src_im is the source image identifier.
If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed.
This function can be used to copy regions within the same image (if dst_im is the same as src_im) but if the regions overlap the results will be unpredictable.
There is a problem due to palette image limitations (255+1 colors).
With a palette image we try to allocate a new color, if that failed, we choose the closest (in theory) computed color.
To skip this problem, please use a truecolor image as a destination image, such as one created by imagecreatetruecolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagecreatefromgif() returns an image identifier representing the image obtained from the given filename.
imagecreatefromgif() returns an empty string on failure.
It also outputs an error message, which unfortunately displays as a broken link in a browser.
To ease debugging the following example will produce an error GIF:
Example 1.
Example to handle an error during creation (courtesy vic@zymsys.com)
Note:
Since all GIF support was removed from the GD library in version 1.6, this function is not available if you are using that version of the GD library.
Tip:
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagecreatefromjpeg() returns an empty string on failure.
It also outputs an error message, which unfortunately displays as a broken link in a browser.
Example 1.
Example to handle an error during creation (courtesy vic@zymsys.com)
Tip:
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagecreatefrompng() returns an empty string on failure.
It also outputs an error message, which unfortunately displays as a broken link in a browser.
Example 1.
Example to handle an error during creation (courtesy vic@zymsys.com)
Tip:
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagecreate() returns an image identifier representing a blank image of size x_size by y_size.
We recommend the use of imagecreatetruecolor().
Example 1.
Creating a new GD image stream and outputting an image.
See also imagecreatetruecolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use combination of imagesetstyle() and imageline() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagedestroy() frees any memory associated with image image. image is the image identifier returned by the imagecreate() function.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagefilledpolygon() creates a filled polygon in image image. points is a PHP array containing the polygon's vertices, ie. points[0] = x0, points[1] = y0, points[2] = x1, points[3] = y1, etc. num_points is the total number of vertices.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagefilledrectangle() creates a filled rectangle of color col in image image starting at upper left coordinates x1, y1 and ending at bottom right coordinates x2, y2.
0, 0 is the top left corner of the image.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagefill() performs a flood fill starting at coordinate x, y (top left is 0, 0) with color col in the image image.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagefilltoborder() performs a flood fill whose border color is defined by border.
The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color col.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the pixel height of a character in the specified font.
See also imagefontwidth() and imageloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the pixel width of a character in font.
See also imagefontheight() and imageloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The imagegammacorrect() function applies gamma correction to a gd image stream (image) given an input gamma, the parameter inputgamma and an output gamma, the parameter outputgamma.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagegif() creates the GIF file in filename from the image image.
The image argument is the return from the imagecreate() function.
The image format will be GIF87a unless the image has been made transparent with imagecolortransparent(), in which case the image format will be GIF89a.
The filename argument is optional, and if left off, the raw image stream will be output directly.
By sending an image / gif content-type using header(), you can create a PHP script that outputs GIF images directly.
Note:
Since all GIF support was removed from the GD library in version 1.6, this function is not available if you are using that version of the GD library.
The following code snippet allows you to write more portable PHP applications by auto-detecting the type of GD support which is available.
Replace the sequence header ("Content-type: image / gif"); imagegif ($im); by the more flexible sequence:
?php if (function_exists("imagegif")) {header ("Content-type: image / gif"); imagegif ($im);} elseif (function_exists("imagejpeg")) {header ("Content-type: image / jpeg"); imagejpeg ($im, "", 0.5);} elseif (function_exists("imagepng")) {header ("Content-type: image / png"); imagepng ($im);} elseif (function_exists("imagewbmp")) {header ("Content-type: image / vnd.wap.wbmp"); imagewbmp ($im);} else die("No image support in this PHP server");?
Note:
As of version 3.0.18 and 4.0.2 you can use the function imagetypes() in place of function_exists() for checking the presence of the various supported image formats:
if (imagetypes() IMG_GIF) {header ("Content-type: image / gif"); imagegif ($im);} elseif (imagetypes() IMG_JPG) {... etc.
See also imagepng(), imagewbmp(), imagejpeg(), imagetypes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
If interlace is 1 the image will be interlaced, and if interlace is 0 the interlace bit is turned off.
This function returns whether the interlace bit is set for the image.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagejpeg() creates the JPEG file in filename from the image image.
The image argument is the return from the imagecreate() function.
The filename argument is optional, and if left off, the raw image stream will be output directly.
To skip the filename argument in order to provide a quality argument just use an empty string ('').
Note:
quality is optional, and ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file).
The default is the default IJG quality value (about 75).
If you want to output Progressive JPEGs, you need to set interlacing on with imageinterlace().
See also imagepng(), imagegif(), imagewbmp(), imageinterlace() and imagetypes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imageline() draws a line from x1, y1 to x2, y2 (top left is 0, 0) in image im of color col.
See also imagecreate() and imagecolorallocate().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imageloadfont() loads a user-defined bitmap font and returns an identifier for the font (that is always greater than 5, so it will not conflict with the built-in fonts).
The font file format is currently binary and architecture dependent.
This means you should generate the font files on the same type of CPU as the machine you are running PHP on.
Table 1.
Font file format
byte position
C data type
description
byte 0-3
number of characters in the font
byte 4-7
value of first character in the font (often 32 for space)
byte 8-11
pixel width of each character
byte 12-15
pixel height of each character
byte 16 -
char
array with character data, one byte per pixel in each character, for a total of (nchars*width*height) bytes.
See also imagefontwidth() and imagefontheight().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
The imagepng() outputs a GD image stream (image) in PNG format to standard output (usually the browser) or, if a filename is given by the filename it outputs the image to the file.
?php $im = imagecreatefrompng ("test.png"); imagepng ($im);?
See also imagegif(), imagewbmp(), imagejpeg(), imagetypes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagepolygon() creates a polygon in image id. points is a PHP array containing the polygon's vertices, ie. points[0] = x0, points[1] = y0, points[2] = x1, points[3] = y1, etc. num_points is the total number of points (vertices).
See also imagecreate() and imagecreatetruecolor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Size is expressed in pixels.
Space allows you to change the default value of a space in a font.
This amount is added to the normal value and can also be negative.
Tightness allows you to control the amount of white space between characters.
This amount is added to the normal character width and can also be negative.
Angle is in degrees.
Parameters space and tightness are expressed in character space units, where 1 unit is 1 / 1000th of an em-square.
Parameters space, tightness, and angle are optional.
The bounding box is calculated using information available from character metrics, and unfortunately tends to differ slightly from the results achieved by actually rasterizing the text.
If the angle is 0 degrees, you can expect the text to need 1 pixel more to every direction.
This function returns an array containing the following elements:
lower left x-coordinate
lower left y-coordinate
upper right x-coordinate
upper right y-coordinate
See also imagepstext().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use this function if you need make further modifications to the font, for example extending / condensing, slanting it or changing it 's character encoding vector, but need to keep the original along as well.
Note that the font you want to copy must be one obtained using imagepsloadfont(), not a font that is itself a copied one.
You can although make modifications to it before copying.
Otherwise your script will hang.
In the case everything went right, a valid font index will be returned and can be used for further purposes.
Otherwise the function returns FALSE and prints a message describing what went wrong.
See also imagepsloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Loads a character encoding vector from from a file and changes the fonts encoding vector to it.
As a PostScript fonts default vector lacks most of the character positions above 127, you 'll definitely want to change this if you use an other language than english.
The exact format of this file is described in T1libs documentation.
T1lib comes with two ready-to-use files, IsoLatin1.enc and IsoLatin2.enc.
If you find yourself using this function all the time, a much better way to define the encoding is to set ps.default_encoding in the configuration file to point to the right encoding file and all fonts you load will automatically have the right encoding.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also imagepsloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Otherwise the function returns FALSE and prints a message describing what went wrong, which you cannot read directly, while the output type is image.
It worked !", $font, 32, $white, $black, 32, 32); imagepsfreefont ($font); imagejpeg ($im, "", 100); / /for best quality...your mileage may vary imagedestroy ($im);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Slant a font given by the font_index parameter with a slant of the value of the slant parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Size is expressed in pixels.
Foreground is the color in which the text will be painted.
Background is the color to which the text will try to fade in with antialiasing.
No pixels with the color background are actually painted, so the background image does not need to be of solid color.
The coordinates given by x, y will define the origin (or reference point) of the first character (roughly the lower-left corner of the character).
This is different from the imagestring(), where x, y define the upper-right corner of the first character.
Refer to PostScipt documentation about fonts and their measuring system if you have trouble understanding how this works.
Space allows you to change the default value of a space in a font.
This amount is added to the normal value and can also be negative.
Tightness allows you to control the amount of white space between characters.
This amount is added to the normal character width and can also be negative.
Angle is in degrees.
Antialias_steps allows you to control the number of colours used for antialiasing text.
Allowed values are 4 and 16.
The higher value is recommended for text sizes lower than 20, where the effect in text quality is quite visible.
With bigger sizes, use 4.
It 's less computationally intensive.
Parameters space and tightness are expressed in character space units, where 1 unit is 1 / 1000th of an em-square.
Parameters space, tightness, angle and antialias are optional.
This function returns an array containing the following elements:
lower left x-coordinate
lower left y-coordinate
upper right x-coordinate
upper right y-coordinate
See also imagepsbbox().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagerectangle() creates a rectangle of color col in image image starting at upper left coordinate x1, y1 and ending at bottom right coordinate x2, y2.
0, 0 is the top left corner of the image.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagesetpixel() draws a pixel at x, y (top left is 0, 0) in image image of color col.
See also imagecreate() and imagecolorallocate().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imagesetstyle() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagestring() draws the string s in the image identified by image at coordinates x, y (top left is 0, 0) in color col.
If font is 1, 2, 3, 4 or 5, a built-in font is used.
See also imageloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagestringup() draws the string s vertically in the image identified by image at coordinates x, y (top left is 0, 0) in color col.
If font is 1, 2, 3, 4 or 5, a built-in font is used.
See also imageloadfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagesx() returns the width of the image identified by image.
See also imagecreate() and imagesy().
Prev
Home
Next
Up
PHP Manual
Prev
Next
imagesy() returns the height of the image identified by image.
See also imagecreate() and imagesx().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function calculates and returns the bounding box in pixels for a TrueType text.
The string to be measured.
The font size in pixels.
The name of the TrueType font file. (Can also be an URL.) Depending on which version of the GD library that PHP is using, it may attempt to search for files that do not begin with a leading '/' by appending '.ttf 'to the filename and searching along a library-defined font path.
Angle in degrees in which text will be measured.
lower left corner, X position
lower left corner, Y position
lower right corner, X position
lower right corner, Y position
upper right corner, X position
upper right corner, Y position
upper left corner, X position
upper left corner, Y position
This function requires both the GD library and the FreeType library.
See also imagettftext().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Depending on which version of the GD library that PHP is using, when fontfile does not begin with a leading '/', '.ttf 'will be appended to the filename and the library will attempt to search for that filename along a library-defined font path.
The coordinates given by x, y will define the basepoint of the first character (roughly the lower-left corner of the character).
This is different from the imagestring(), where x, y define the upper-right corner of the first character.
angle is in degrees, with 0 degrees being left-to-right reading text (3 o'clock direction), and higher values representing a counter-clockwise rotation. (i.e., a value of 90 would result in bottom-to-top reading text).
fontfile is the path to the TrueType font you wish to use.
text is the text string which may include UTF-8 character sequences (of the form: #123;) to access characters in a font beyond the first 255.
Col is the color index.
Using the negative of a color index has the effect of turning off antialiasing.
imagettftext() returns an array with 8 elements representing four points making the bounding box of the text.
The order of the points is lower left, lower right, upper right, upper left.
The points are relative to the text regardless of the angle, so "upper left" means in the top left-hand corner when you see the text horizontallty.
This example script will produce a black GIF 400x30 pixels, with the words "Testing..." in white in the font Arial.
Example 1. imagettftext() example
?php header( "Content-type: image / jpeg"); $im = imagecreate(400,30); $white = imagecolorallocate($im, 255,255,255); $black = imagecolorallocate($im, 0,0,0); / / Replace path by your own font path imagettftext($im, 20, 0, 10, 20, $black, "/ path / arial.ttf", "Testing...
Omega: amp; #937 ;"); imagejpeg($im); imagedestroy($im);?
This function requires both the GD library and the FreeType library.
See also imagettfbbox().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a bit-field corresponding to the image formats supported by the version of GD linked into PHP.
The following bits are returned, IMG_GIF _BAR_ IMG_JPG _BAR_ IMG_PNG _BAR_ IMG_WBMP.
To check for PNG support, for example, do this:
Example 1. imagetypes
?php if (imagetypes() IMG_PNG) {echo "PNG Support is enabled";}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. image_type_to_mime_type (file)
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a quoted-printable string.
See also imap_qprint().
Prev
Home
Next
IMAP, POP3 and NNTP functions
Up
PHP Manual
Prev
Next
This function returns an array of all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page.
When imap_alerts() is called, the alert stack is subsequently cleared.
The IMAP specification requires that these messages be passed to the user.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on sucess, FALSE on error.
imap_append() appends a string message to the specified mailbox mbox.
If the optional options is specified, writes the options to that mailbox also.
When talking to the Cyrus IMAP server, you must use "\r\n" as your end-of-line terminator instead of "\n "or the operation will fail.
Example 1. imap_append() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
imap_base64() function decodes BASE-64 encoded text (see RFC2045, Section 6.8).
The decoded message is returned as a string.
See also imap_binary().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a base64 string.
See also imap_base64().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The optional flags are a bit mask with one or more of the following:
FT_PEEK - Do not set the \Seen flag if not already set
FT_INTERNAL - The return string is in internal format, will not canonicalize to CRLF.
imap_body() will only return a verbatim copy of the message body.
To extract single parts of a multipart MIME-encoded message you have to use imap_fetchstructure() to analyze its structure and imap_fetchbody() to extract a copy of a single body component.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns FALSE on failure.
The imap_check() function checks the current mailbox status on the server and returns the information in an object with following properties:
Date - last change of mailbox contents
POP3, IMAP, NNTP
Mailbox - the mailbox name
Nmsgs - number of messages in the mailbox
Recent - number of recent messages in the mailbox
Prev
Home
Next
Up
PHP Manual
Prev
Next
The flags which you can unset are "\\Seen", "\\Answered", "\\Flagged", "\\Deleted", and "\\Draft" (as defined by RFC2060).
The options are a bit mask with one or more of the following:
ST_UID The sequence argument contains UIDs instead of sequence numbers
Prev
Home
Next
Up
PHP Manual
Prev
Next
Close the imap stream.
Takes an optional flag CL_EXPUNGE, which will silently expunge the mailbox before closing, removing all messages marked for deletion.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Names containing international characters should be encoded by imap_utf7_encode()
Returns TRUE on success and FALSE on error.
See also imap_renamemailbox(), imap_deletemailbox() and imap_open() for the format of mbox names.
Example 1. imap_createmailbox() example
$mbox = imap_open( "{your.imap.host}" ,"username" ,"password",OP_HALFOPEN) or die("can't connect: ".imap_last_error()); $name1 = "phpnewbox"; $name2 = imap_utf7_encode("phpnewb ouml;x"); $newname = $name1; echo "Newname will be '$name1 'br \n"; # we will now create a new mailbox "phptestbox "in your inbox folder, # check its status after creation and finaly remove it to restore # your inbox to its initial state if(@imap_createmailbox($mbox,imap_utf7_encode("{your.imap.host}INBOX.$newname"))) {$status = @imap_status($mbox ,"{your.imap.host}INBOX.$newname",SA_ALL); if($status) {print("your new mailbox '$name1' has the following status: br \n"); print("Messages:". $status - messages). "br \n"; print("Recent:". $status - recent). "br \n"; print("Unseen:". $status - unseen). "br \n"; print("UIDnext:". $status - uidnext). "br \n"; print("UIDvalidity :". $status - uidvalidity)." br \n"; if(imap_renamemailbox($mbox ,"{your.imap.host}INBOX.$newname" ,"{your.imap.host}INBOX.$name2")) {echo "renamed new mailbox from '$name1 'to '$name2' br \n"; $newname=$name2;} else {print "imap_renamemailbox on new mailbox failed: ".imap_last_error(). "br \n";}} else {print "imap_status on new mailbox failed: ".imap_last_error()." br \n";} if(@imap_deletemailbox($mbox ,"{your.imap.host}INBOX.$newname")) {print "new mailbox removed to restore initial state br \n";} else {print "imap_deletemailbox on new mailbox failed: ".implode( "br \n",imap_errors())." br \n";}} else {print "could not create new mailbox: ".implode( "br \n",imap_errors())." br \n";} imap_close($mbox);
Prev
Home
Next
Up
PHP Manual
Prev
Next
imap_delete() marks messages listed in msg_number for deletion.
The optional flags parameter only has a single option, FT_UID, which tells the function to treat the msg_number argument as a UID.
Messages marked for deletion will stay in the mailbox until either imap_expunge() is called or imap_close() is called with the optional parameter CL_EXPUNGE.
POP3 mailboxes do not have their message flags saved between connections, so imap_expunge() must be called during the same connection in order for messages marked for deletion to actually be purged.
Example 1. imap_delete() Beispiel
$mbox = imap_open ("{your.imap.host}INBOX", "username", "password") or die ("can't connect: ". imap_last_error()); $check = imap_mailboxmsginfo ($mbox); print "Messages before delete:". $check - Nmsgs. "br \n"; imap_delete ($mbox, 1); $check = imap_mailboxmsginfo ($mbox); print "Messages after delete: ". $check - Nmsgs." br \n "; imap_expunge ($mbox); $check = imap_mailboxmsginfo ($mbox); print "Messages after expunge:". $check - Nmsgs. "br \n"; imap_close ($mbox);
Prev
Home
Next
Up
PHP Manual
Prev
Next
imap_deletemailbox() deletes the specified mailbox (see imap_open() for the format of mbox names).
Returns TRUE on success and FALSE on error.
See also imap_createmailbox(), imap_renamemailbox(), and imap_open() for the format of mbox.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an array of all of the IMAP error messages generated since the last imap_errors() call, or the beginning of the page.
When imap_errors() is called, the error stack is subsequently cleared.
Prev
Home
Next
Up
PHP Manual
Prev
Next
imap_expunge() deletes all the messages marked for deletion by imap_delete(), imap_mail_move(), or imap_setflag_full().
Returns TRUE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function causes a fetch of a particular section of the body of the specified messages as a text string and returns that text string.
The section specification is a string of integers delimited by period which index into a body part list as per the IMAP4 specification.
Body parts are not decoded by this function.
The options for imap_fetchbody() is a bitmask with one or more of the following:
FT_UID - The msg_number is a UID
FT_PEEK - Do not set the \Seen flag if not already set
See also: imap_fetchstructure().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function causes a fetch of the complete, unfiltered RFC2822 format header of the specified message as a text string and returns that text string.
The options are:
FT_UID The msgno argument is a UID FT_INTERNAL The return string is in "internal" format, without any attempt to canonicalize to CRLF newlines FT_PREFETCHTEXT The RFC822.TEXT should be pre-fetched at theFT_UID The msgno argument is a UID FT_INTERNAL The return string is in "internal "format, without any attempt to canonicalize to CRLF newlines FT_PREFETCHTEXT The RFC822.TEXT should be pre-fetched at the same time.
This avoids an extra RTT on an IMAP connection if a full message text is desired (e.g. in a "save to local file "operation)
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function fetches mail headers for the given sequence and returns an overview of their contents. sequence will contain a sequence of message indices or UIDs, if flags contains FT_UID.
The returned value is an array of objects describing one message header each:
subject - the messages subject
from - who sent it
date - when was it sent
references - is a reference to this message id
size - size in bytes
uid - UID the message has in the mailbox
msgno - message sequence number in the maibox
recent - this message is flagged as recent
flagged - this message is flagged
answered - this message is flagged as answered
deleted - this message is flagged for deletion
seen - this message is flagged as already read
draft - this message is flagged as being a draft
Example 1. imap_fetch_overview() example
$mbox = imap_open( "{your.imap.host:143}" ,"username" ,"password") or die("can't connect: ".imap_last_error()); $overview = imap_fetch_overview($mbox ,"2,4:6",0); if(is_array($overview)) {reset($overview); while (list($key,$val) = each($overview)) {print $val - msgno. "-". $val - date. "-". $val - subject. "\n";}} imap_close($mbox);
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function fetches all the structured information for a given message.
The optional flags parameter only has a single option, FT_UID, which tells the function to treat the msg_number argument as a UID.
The returned object includes the envelope, internal date, size, flags and body structure along with a similar object for each mime attachement.
The structure of the returned objects is as follows:
Table 1.
Returned Objects for imap_fetchstructure()
Primary body type
Body transfer encoding
TRUE if there is a subtype string
MIME subtype
TRUE if there is a description string
Content description string
TRUE if there is an identification string
Identification string
Number of lines
Number of bytes
TRUE if there is a disposition string
Disposition string
TRUE if the dparameters array exists
An array of objects where each object has an "attribute" and a "value "property corresponding to the parameters on the Content-disposition MIME header.
ifparameters
TRUE if the parameters array exists
parts
An array of objects identical in structure to the top-level object, each of which corresponds to a MIME body part.
Table 2.
Table 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Each object has the attributes name, specifying the full name of the mailbox; delimiter, which is the hierarchy delimiter for the part of the hierarchy this mailbox is in; and attributes.
Attributes is a bitmask that can be tested against:
LATT_NOINFERIORS - This mailbox has no "children" (there are no mailboxes below this one).
LATT_NOSELECT - This is only a container, not a mailbox - you cannot open it.
Only used by UW-IMAPD.
Only used by UW-IMAPD.
Mailbox names containing international Characters outside the printable ASCII range will be encoded and may be decoded by imap_utf7_decode().
ref should normally be just the server specification as described in imap_open(), and pattern specifies where in the mailbox hierarchy to start searching.
If you want all mailboxes, pass' * 'for pattern.
There are two special characters you can pass as part of the pattern: '*' and '%'. '* 'means to return all mailboxes.
If you pass pattern as' *', you will get a list of the entire mailbox hierarchy. '% 'means to return the current level only. '%' as the pattern parameter will return only the top level mailboxes; '~ / mail /% 'on UW_IMAPD will return every mailbox in the ~ / mail directory, but none in subfolders of that directory.
Example 1. imap_getmailboxes() example
See also imap_getsubscribed().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_get_quota() example
Example 2. imap_get_quota() 4.3 or greater example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_get_quotaroot() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is identical to imap_getmailboxes(), except that it only returns mailboxes that the user is subscribed to.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
This function is an alias to imap_headerinfo() and is identical to it in every way.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
One element per mail message.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the full text of the last IMAP error message that occurred on the current page.
The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_list() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias to imap_list() and is identical to it in every way.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias to imap_lsub() and is identical to it in every way.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The imap_mailboxmsginfo() The imap_mailboxmsginfo() function checks the current mailbox status on the server.
It returns the information in an object with following properties.
Table 1.
Mailbox properties
date of last change
name of the mailbox
number of messages
number of recent messages
number of unread messages
Size
Example 1. imap_mailboxmsginfo() example
?php $mbox = imap_open( "{your.imap.host}INBOX" ,"username", "password") or die("can't connect: ".imap_last_error()); $check = imap_mailboxmsginfo($mbox); if($check) {print "Date: ". $check - Date." br \n "; print "Driver:". $check - Driver. "br \n"; print "Mailbox: ". $check - Mailbox." br \n "; print "Messages:". $check - Nmsgs. "br \n"; print "Recent: ". $check - Recent." br \n "; print "Unread:". $check - Unread. "br \n"; print "Deleted: ". $check - Deleted." br \n "; print "Size:". $check - Size. "br \n";} else {print "imap_check() failed: ".imap_last_error(). "br \n";} imap_close($mbox);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success and FALSE on error.
Copies mail messages specified by msglist to specified mailbox. msglist is a range not just message numbers (as described in RFC2060).
Flags is a bitmask of one or more of
CP_UID - the sequence numbers contain UIDS
CP_MOVE - Delete the messages from the current mailbox after copying
Prev
Home
Next
Up
PHP Manual
Prev
Next
The parameters to, cc and bcc are all strings and are all parsed as rfc822 address lists.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success and FALSE on error.
Moves mail messages specified by msglist to specified mailbox. msglist is a range not just message numbers (as described in RFC2060).
Flags is a bitmask and may contain the single option
CP_UID - the sequence numbers contain UIDS
Prev
Home
Next
Up
PHP Manual
Prev
Next
imap_mime_header_decode() function decodes MIME message header extensions that are non ASCII text (see RFC2047) The decoded elements are returned in an array of objects, where each object has two properties, "charset ""text".
If the element hasn' t been encoded, and in other words is in plain US-ASCII,the "charset "property of that element is set to "default".
Example 1. imap_mime_header_decode() example
In the above example we would have two elements, whereas the first element had previously been encoded with ISO-8859-1, and the second element would be plain US-ASCII.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the message sequence number for the given UID.
It is the inverse of imap_uid().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also: imap_num_recent() and imap_status().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also: imap_num_msg() and imap_status().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an IMAP stream on success and FALSE on error.
This function can also be used to open streams to POP3 and NNTP servers, but some functions and features are only available on IMAP servers.
A mailbox name consists of a server part and a mailbox path on this server.
The special name INBOX stands for the current users personal mailbox.
The server part, which is enclosed in '{' and '}', consists of the servers name or ip address, an optional port (prefixed by ':'), and an optional protocol specification (prefixed by' / ').
The server part is mandatory in all mailbox parameters.
Mailbox names that contain international characters besides those in the printable ASCII space have to be encoded with imap_utf7_encode().
The options are a bit mask with one or more of the following:
OP_READONLY - Open mailbox read-only
OP_ANONYMOUS - Dont use or update a .newsrc for news (NNTP only)
OP_HALFOPEN - For IMAP and NNTP names, open a connection but dont open a mailbox
CL_EXPUNGE - Expunge mailbox automatically upon mailbox close
To connect to an IMAP server running on port 143 on the local machine, do the following:
$mbox = imap_open ("{localhost:995 / pop3 / ssl / novalidate-cert}", "user_id", "password");
$nntp = imap_open ("{localhost:119 / nntp}comp.test", "", "");
Example 1. imap_open() example
$mbox = imap_open ("{your.imap.host:143}", "username", "password"); echo "p h1 Mailboxes / h1 \n"; $folders = imap_listmailbox ($mbox, "{your.imap.host:143}", "*"); if ($folders == false) {echo "Call failed br \n";} else {while (list ($key, $val) = each ($folders)) {echo $val." br \n";}} echo "p h1 Headers in INBOX / h1 \n"; $headers = imap_headers ($mbox); if ($headers == false) {echo "Call failed br \n";} else {while (list ($key,$val) = each ($headers)) {echo $val." br \n";}} imap_close($mbox);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the stream is still alive, FALSE otherwise.
imap_ping() function pings the stream to see it is still active.
It may discover new mail; this is the preferred method for a periodic "new mail check "as well as a "keep alive" for servers which have inactivity timeout. (As PHP scripts do not tend to run that long, i can hardly imagine that this function will be usefull to anyone.)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an 8 bit (binary) string.
See also imap_8bit().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function renames on old mailbox to new mailbox (see imap_open() for the format of mbox names).
Returns TRUE on success and FALSE on error.
See also imap_createmailbox(), imap_deletemailbox(), and imap_open() for the format of mbox.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function reopens the specified stream to a new mailbox on an IMAP or NNTP server.
The options are a bit mask with one or more of the following:
OP_READONLY - Open mailbox read-only
OP_ANONYMOUS - Dont use or update a .newsrc for news (NNTP only)
OP_HALFOPEN - For IMAP and NNTP names, open a connection but dont open a mailbox.
CL_EXPUNGE - Expunge mailbox automatically upon mailbox close (see also imap_delete() and imap_expunge())
Returns TRUE on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function parses the address string as defined in RFC2822 and for each address, returns an array of objects.
The objects properties are:
mailbox - the mailbox name (username)
host - the host name
personal - the personal name
Example 1. imap_rfc822_parse_adrlist() example
$address_string = "Hartmut Holzgraefe hartmut@cvs.php.net, postmaster@somedomain.net, root"; $address_array = imap_rfc822_parse_adrlist($address_string ,"somedomain.net"); if(! is_array($address_array)) die("somethings wrong\n"); reset($address_array); while(list($key,$val)=each($address_array)) {print "mailbox: ".$val - mailbox." br \n"; print "host: ".$val - host. "br \n"; print "personal: ".$val - personal." br \n"; print "adl: ".$val - adl. "p \n";}
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a properly formatted email address as defined in RFC2822 given the mailbox, host, and personal info.
Example 1. imap_rfc822_write_address() example
print imap_rfc822_write_address( "hartmut" ,"cvs.php.net" ,"Hartmut Holzgraefe") ."\n";
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias to imap_listscan() and is identical to it in every way.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function performs a search on the mailbox currently opened in the given imap stream. criteria is a string, delimited by spaces, in which the following keywords are allowed.
FROM "joey smith") must be quoted.
ALL - return all messages matching the rest of the criteria
ANSWERED - match messages with the \\ANSWERED flag set
BCC "string" - match messages with "string "in the Bcc: field
BEFORE "date" - match messages with Date: before "date "
BODY "string" - match messages with "string "in the body of the message
CC "string" - match messages with "string "in the Cc: field
DELETED - match deleted messages
FLAGGED - match messages with the \\FLAGGED (sometimes referred to as Important or Urgent) flag set
FROM "string" - match messages with "string "in the From: field
KEYWORD "string" - match messages with "string "as a keyword
NEW - match new messages
OLD - match old messages
ON "date" - match messages with Date: matching "date "
RECENT - match messages with the \\RECENT flag set
SEEN - match messages that have been read (the \\SEEN flag is set)
SINCE "date" - match messages with Date: after "date "
SUBJECT "string" - match messages with "string "in the Subject:
TEXT "string" - match messages with text "string "
TO "string" - match messages with "string "in the To:
UNANSWERED - match messages that have not been answered
UNDELETED - match messages that are not deleted
UNFLAGGED - match messages that are not flagged
UNKEYWORD "string" - match messages that do not have the keyword "string "
UNSEEN - match messages which have not been read yet
For example, to match all unanswered messages sent by Mom, you' d use: "UNANSWERED FROM mom ".
Searches appear to be case insensitive.
This list of criteria is from a reading of the UW c-client source code and may be uncomplete or inaccurate (see also RFC2060, section 6.4.4).
Valid values for flags are SE_UID, which causes the returned array to contain UIDs instead of messages sequence numbers.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function causes a store to add the specified flag to the flags set for the messages in the specified sequence.
The flags which you can set are "\\Seen", "\\Answered", "\\Flagged", "\\Deleted", and "\\Draft" (as defined by RFC2060).
ST_UID The sequence argument contains UIDs instead of sequence numbers
Example 1. imap_setflag_full() example
$mbox = imap_open( "{your.imap.host:143}" ,"username" ,"password") or die("can't connect: ".imap_last_error()); $status = imap_setflag_full($mbox ,"2,5" ,"\\Seen \\Flagged"); print gettype($status) ."\n"; print $status ."\n"; imap_close($mbox);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_set_quota() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns an array of message numbers sorted by the given parameters.
Reverse is 1 for reverse-sorting.
Criteria can be one (and only one) of the following:
SORTDATE message Date SORTARRIVAL arrival date SORTFROM mailbox in first From address SORTSUBJECT message Subject SORTTO mailbox in first To address SORTCC mailbox in first cc address SORTSIZE size of message in octets
The flags are a bitmask of one or more of the following:
SE_UID Return UIDs instead of sequence numbers SE_NOPREFETCH Don 't prefetch searched messages.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Valid flags are:
SA_MESSAGES - set status - messages to the number of messages in the mailbox
SA_RECENT - set status - recent to the number of recent messages in the mailbox
SA_UNSEEN - set status - unseen to the number of unseen (new) messages in the mailbox
SA_UIDNEXT - set status - uidnext to the next uid to be used in the mailbox
SA_UIDVALIDITY - set status - uidvalidity to a constant that changes when uids for the mailbox may no longer be valid
SA_ALL - set all of the above
status - flags is also set, which contains a bitmask which can be checked against any of the above constants.
Example 1. imap_status() example
$mbox = imap_open( "{your.imap.host}" ,"username" ,"password",OP_HALFOPEN) or die("can't connect: ".imap_last_error()); $status = imap_status($mbox ,"{your.imap.host}INBOX",SA_ALL); if($status) {print("Messages: ". $status - messages)." br \n"; print("Recent: ". $status - recent)." br \n"; print("Unseen: ". $status - unseen)." br \n"; print("UIDnext: ". $status - uidnext)." br \n"; print("UIDvalidity :". $status - uidvalidity). "br \n";} else print "imap_status failed: ".imap_last_error() ."\n"; imap_close($mbox);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Subscribe to a new mailbox.
Returns TRUE on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the UID for the given message sequence number.
This function is the inverse of imap_msgno().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function removes the deletion flag for a specified message, which is set by imap_delete() or imap_mail_move().
Returns TRUE on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Unsubscribe from a specified mailbox.
Returns TRUE on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Decodes modified UTF-7 text into 8bit data.
Returns the decoded 8bit data, or FALSE if the input string was not valid modified UTF-7.
This function is needed to decode mailbox names that contain international characters outside of the printable ASCII range.
The modified UTF-7 encoding is defined in RFC 2060, section 5.1.3 (original UTF-7 was defned in RFC1642).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Converts 8bit data to modified UTF-7 text.
The modified UTF-7 encoding is defined in RFC 2060, section 5.1.3 (original UTF-7 was defned in RFC1642).
Returns the modified UTF-7 text.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Converts the given text to UTF8 (as defined in RFC2044).
Prev
Home
Next
Up
Informix functions
PHP Manual
Prev
Next
Example 1. implode() example
?php $array = array( 'lastname', 'email', 'phone'); $comma_separated = implode(" ,", $array); print $comma_separated; / / lastname,email,phone?
For consistency with explode(), however, it may be less confusing to use the documented order of arguments.
See also explode(), and split().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Searches haystack for needle and returns TRUE if it is found in the array, FALSE otherwise.
If the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack.
If needle is a string, the comparison is done in a case-sensitive manner.
Note:
In PHP versions before 4.2.0 needle was not allowed to be an array.
Example 1. in_array() example
The second condition fails because in_array() is case-sensitive, so the program above will display:
Example 2. in_array() with strict example
?php $a = array( '1.10', 12.4, 1.13); if (in_array('12.4', $a, TRUE)) echo "'12.4 'found with strict check\n"; if (in_array(1.13, $a, TRUE)) echo "1.13 found with strict check\n";?
This will display:
1.13 found with strict check
Example 3. in_array() with an array as needle
?php $a = array( array('p', 'h'), array('p', 'r'), 'o'); if (in_array(array ('p', 'h'), $a)) echo "'ph 'was found\n"; if (in_array(array ('f', 'i'), $a)) echo "'fi' was found\n"; if (in_array('o', $a)) echo "'o 'was found\n";? / / This will output: 'ph' was found'o 'was found
See also array_search().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The include() statement includes and evaluates the specified file.
The documentation below also applies to require().
The two constructs are identical in every way except how they handle failure. include() produces a Warning while require() results in a Fatal Error.
In other words, use require() if you want a missing file to halt processing of the page. include() does not behave this way, the script will continue regardless.
Be sure to have an appropriate include_path setting as well.
When a file is included, the code it contains inherits the variable scope of the line on which the include occurs.
Any variables available at that line in the calling file will be available within the called file, from that point forward.
Example 12-3.
Basic include() example
vars.php ?php $color = 'green'; $fruit = 'apple';? test.php ?php echo "A $color $fruit"; / / A include'vars.php'; echo "A $color $fruit"; / / A green apple?
If the include occurs inside a function within the calling file, then all of the code contained in the called file will behave as though it had been defined inside that function.
So, it will follow the variable scope of that function.
Example 12-4.
Including within functions
?php function foo() {global $color; include'vars.php'; echo "A $color $fruit";} / * vars.php is in the scope of foo() so * * $fruit is NOT available outside of this * * scope. $color is because we declared it * * as global. * / foo(); / / A green apple echo "A $color $fruit"; / / A green?
When a file is included, parsing drops out of PHP mode and into HTML mode at the beginning of the target file, and resumes again at the end.
For this reason, any code inside the target file which should be executed as PHP code must be enclosed within valid PHP start and end tags.
If "URL fopen wrappers" are enabled in PHP (which they are in the default configuration), you can specify the file to be included using an URL (via HTTP or other supported wrapper - see Appendix I for a list of protocols) instead of a local pathname.
If the target server interprets the target file as PHP code, variables may be passed to the included file using an URL request string as used with HTTP GET.
This is not strictly speaking the same thing as including the file and having it inherit the parent file' s variable scope; the script is actually being run on the remote server and the result is then being included into the local script.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Example 12-5. include() through HTTP
?php / * This example assumes that www.example.com is configured to parse .php * * files and not .txt files.
Also, 'Works' here means that the variables * * $foo and $bar are available within the included file. * / / / Won't work; file.txt wasn't handled by www.example.com as PHP include'http: / /www.example.com / file.txt?foo=1 bar=2'; / / Won't work; looks for a file named'file.php?foo=1 bar=2 'on the / / local filesystem. include'file.php?foo=1 bar=2'; / / Works. include'http: / /www.example.com / file.php?foo=1 bar=2'; $foo = 1; $bar = 2; include'file.txt'; / / Works. include'file.php'; / / Works.?
Because include() and require() are special language constructs, you must enclose them within a statement block if it's inside a conditional block.
Example 12-6. include() and conditional blocks
?php / / This is WRONG and will not work as desired. if ($condition) include $file; else include $other; / / This is CORRECT. if ($condition) {include $file;} else {include $other;}?
Handling Returns:
It is possible to execute a return() It is possible to execute a return() statement inside an included file in order to terminate processing in that file and return to the script which called it.
Also, it 's possible to return values from included files.
You can take the value of the include call as you would a normal function.
Note:
In PHP 3, the return may not appear inside a block unless it' s a function block, in which case the return() applies to that function and not the whole file.
Example 12-7. include() and the return() statement
return.php ?php $var = 'PHP'; return $var;? noreturn.php ?php $var = 'PHP';? testreturns.php ?php $foo = include'return.php'; echo $foo; / / prints'PHP' $bar = include'noreturn.php'; echo $bar; / / prints 1?
$bar is the value 1 because the include was successful.
Notice the difference between the above examples.
The first uses return() within the included file while the other does not.
A few other ways to "include" files into variables are with fopen(), file() or by using include() along with Output Control Functions.
See also require(), require_once(), include_once(), readfile(), virtual(), and include_path.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The include_once() statement includes and evaluates the specified file during the execution of the script.
This is a behavior similar to the include() This is a behavior similar to the include() statement, with the only difference being that if the code from a file has already been included, it will not be included again.
As the name suggests, it will be included just once.
include_once() should be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, and you want to be sure that it is included exactly once to avoid problems with function redefinitions, variable value reassignments, etc.
For more examples on using require_once() and include_once(), look at the PEAR code included in the latest PHP source code distributions.
Note:
Be aware, that the behaviour of include_once() and require_once() may not be what you expect on a non case sensitive operating system (such as Windows).
Example 12-9. include_once() is case sensitive
include_once( "a.php"); / / this will include a.php include_once("A.php"); / / this will include a.php again on Windows!
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
See also include(), require(), require_once(), get_required_files(), get_included_files(), readfile(), and virtual().
Prev
Home
Next
Up
Functions
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_autocommit() is called before opening a transaction (before the first call to ingres_query() or just after a call to ingres_rollback() or ingres_commit()) to switch the "autocommit "mode of the server on or off (when the script begins the autocommit mode is off).
When the autocommit mode is on, every query is automaticaly commited by the server, as if ingres_commit() was called after every call to ingres_query().
See also ingres_query(), ingres_rollback(), and ingres_commit().
Prev
Home
Next
Ingres II functions
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success, or FALSE on failure.
ingres_close() closes the connection to the Ingres server that's associated with the specified link.
If the link parameter isn 't specified, the last opened link is used.
ingres_close() isn't usually necessary, as it won't close persistent connections and all non-persistent connections are automatically closed at the end of the script.
See also ingres_connect() and ingres_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_commit() commits the currently open transaction, making all changes made to the database permanent.
This closes the transaction.
A new one can be open by sending a query with ingres_query().
You can also have the server commit automaticaly after every query by calling ingres_autocommit() before opening the transaction.
See also ingres_query(), ingres_rollback(), and ingres_autocommit().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns a Ingres II link resource on success, or FALSE on failure.
ingres_connect() opens a connection with the Ingres database designated by database, which follows the syntax [node_id: :]dbname[ / svr_class].
If some parameters are missing, ingres_connect() uses the values in php.ini for ingres.default_database, ingres.default_user, and ingres.default_password.
The connection is closed when the script ends or when ingres_close() is called on this link.
All the other ingres functions use the last opened link as a default, so you need to store the returned value only if you use more than one link at a time.
Example 1. ingres_connect() example
?php $link = ingres_connect ("mydb", "user", "pass") or die ("Could not connect"); print ("Connected successfully"); ingres_close ($link);?
Example 2. ingres_connect() example using default link
?php ingres_connect ("mydb", "user", "pass") or die ("Could not connect"); print ("Connected successfully"); ingres_close ();?
See also ingres_pconnect() and ingres_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_fetch_array() Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
This function is an extended version of ingres_fetch_row().
In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.
If two or more columns of the result have the same field names, the last column will take precedence.
To access the other column( s) of the same name, you must use the numeric index of the column or make an alias for the column.
result_type can be INGRES_NUM for enumerated array, INGRES_ASSOC for associative array, or INGRES_BOTH (default).
Speed-wise, the function is identical to ingres_fetch_object(), and almost as quick as ingres_fetch_row() (the difference is insignificant).
Example 1. ingres_fetch_array() example
?php ingres_connect ($database, $user, $password); ingres_query ("select * from table"); while ($row = ingres_fetch_array()) {echo $row["user_id"]; # using associative array echo $row["fullname"]; echo $row[1]; # using enumerated array echo $row[2];}?
See also ingres_query(), ingres_num_fields(), ingres_field_name(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_fetch_object() Returns an object that corresponds to the fetched row, or FALSE if there are no more rows.
This function is similar to ingres_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
The optional argument result_type is a constant and can take the following values:
INGRES_ASSOC, INGRES_NUM, and INGRES_BOTH.
Speed-wise, the function is identical to ingres_fetch_array(), and almost as quick as ingres_fetch_row() (the difference is insignificant).
Example 1. ingres_fetch_object() example
See also ingres_query(), ingres_num_fields(), ingres_field_name(), ingres_fetch_array(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_fetch_row() returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
Each result column is stored in an array offset, starting at offset 1.
Subsequent call to ingres_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
Example 1. ingres_fetch_row() example
See also ingres_num_fields(), ingres_query(), ingres_fetch_array(), and ingres_fetch_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_field_length() returns the length of a field.
This is the number of bytes used by the server to store the field.
For detailed information, see the Ingres / OpenAPI User Guide - Appendix C.
index is the number of the field and must be between 1 and the value given by ingres_num_fields().
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_field_name() returns the name of a field in a query result, or FALSE on failure.
index is the number of the field and must be between 1 and the value given by ingres_num_fields().
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object() and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_field_nullable() returns TRUE if the field can be set to the NULL value and FALSE if it can't.
index is the number of the field and must be between 1 and the value given by ingres_num_fields().
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_field_precision() returns the precision of a field.
This value is used only for decimal, float and money SQL data types.
For detailed information, see the Ingres / OpenAPI User Guide - Appendix C.
index is the number of the field and must be between 1 and the value given by ingres_num_fields().
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
This value is used only for the decimal SQL data type.
For detailed information, see the Ingres / OpenAPI User Guide - Appendix C.
index is the number of the field and must be between 1 and the value given by ingres_num_fields().
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_field_type() returns the type of a field in a query result, or FALSE on failure.
Examples of types returned are "IIAPI_BYTE_TYPE", "IIAPI_CHA_TYPE", "IIAPI_DTE_TYPE", "IIAPI_FLT_TYPE", "IIAPI_INT_TYPE", "IIAPI_VCH_TYPE".
Some of these types can map to more than one SQL type depending on the length of the field (see ingres_field_length()).
For example "IIAPI_FLT_TYPE" can be a float4 or a float8.
For detailed information, see the Ingres / OpenAPI User Guide - Appendix C.
index is the number of the field and must be between 1 and the value given by ingres_num_fields().
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_num_fields() returns the number of fields in the results returned by the Ingres server after a call to ingres_query()
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
For delete, insert or update queries, ingres_num_rows() returns the number of rows affected by the query.
For other queries, ingres_num_rows() returns the number of rows in the query's result.
Note:
This function is mainly meant to get the number of rows modified in the database.
If this function is called before using ingres_fetch_array(), ingres_fetch_object() or ingres_fetch_row() the server will delete the result's data and the script won't be able to get them.
You should instead retrieve the result 's data using one of these fetch functions in a loop until it returns FALSE, indicating that no more results are available.
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object(), and ingres_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns a Ingres II link resource on success, or FALSE on failure.
See ingres_connect() for parameters details and examples.
There are only 2 differences between ingres_pconnect() and ingres_connect():
First, when connecting, the function will first try to find a (persistent) link that's already opened with the same parameters.
If one is found, an identifier for it will be returned instead of opening a new connection.
Instead, the link will remain open for future use (ingres_close() will not close links established by ingres_pconnect()).
This type of link is therefore called 'persistent'.
See also ingres_connect() and ingres_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success, or FALSE on failure.
ingres_query() sends the given query to the Ingres server.
This query must be a valid SQL query (see the Ingres SQL reference guide)
The query becomes part of the currently open transaction.
If there is no open transaction, ingres_query() opens a new transaction.
To close the transaction, you can either call ingres_commit() to commit the changes made to the database or ingres_rollback() to cancel these changes.
When the script ends, any open transaction is rolled back (by calling ingres_rollback()).
You can also use ingres_autocommit() before opening a new transaction to have every SQL query immediatly commited.
Some types of SQL queries can 't be sent with this function:
close (see ingres_close())
commit (see ingres_commit())
connect (see ingres_connect())
disconnect (see ingres_close())
rollback (see ingres_rollback())
set autocommit (see ingres_autocommit())
all cursor related queries are unsupported
Example 1. ingres_query() example
See also ingres_fetch_array(), ingres_fetch_object(), ingres_fetch_row(), ingres_commit(), ingres_rollback(), and ingres_autocommit().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
ingres_rollback() rolls back the currently open transaction, actually canceling all changes made to the database during the transaction.
This closes the transaction.
A new one can be open by sending a query with ingres_query().
See also ingres_query(), ingres_commit(), and ingres_autocommit().
Prev
Home
Next
Up
IRC Gateway Functions
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Table 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
var may be any scalar type.
Note:
See also floatval(), strval(), settype() and Type juggling.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ip2long() Example
Note:
Example 2.
?php $ip = gethostbyname( "www.example.com"); printf("%u\n", ip2long($ip)); echo $out;?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
ircg_disconnect() will close a connection to a server previously established with ircg_pconnect().
See also: ircg_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ircg_fetch_error_msg() returns the error from a failed connection.
Note:
The error code is equivalent to IRC reply codes as defined by RFC 2812.
Example 1. ircg_fetch_error_msg() example
if (!ircg_join ($id, "#php")) {$error = ircg_fetch_error_msg($id); print ("Can't join channel #php.
Error code: $error[ 0] Description: $error[1]");}
Prev
Home
Next
Up
PHP Manual
Prev
Next
Function ircg_get_username() returns the username for the specified connection connection.
Returns FALSE if connection died or is not valid.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Encodes a HTML string html_string for output.
This exposes the interface which the IRCG extension uses internally to reformat data coming from an IRC link.
The function causes IRC color / font codes to be encoded in HTML and escapes certain entities.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function adds user nick to the ignore list of connection connection.
Afterwards, IRCG will suppress all messages from this user through the associated connection.
See also: ircg_ignore_del().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function removes user nick from the IRCG ignore list associated with connection.
See also: ircg_ignore_add().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ircg_is_conn_alive() returns TRUE if connection is still alive and working or FALSE, if the connection has died for some reason.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Join the channel channel on the server connected to by connection.
IRCG will optionally pass the room key key.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Kick user nick from channel on server connected to by connection. reason should give a short message describing why this action was performed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets may be registered with ircg_register_format_messages(), a default set named ircg is always available.
Returns TRUE, if the set exists and FALSE otherwise.
See also: ircg_register_format_messages()
Prev
Home
Next
Up
PHP Manual
Prev
Next
ircg_msg() will send the message to a channel or user on the server connected to by connection.
A recipient starting with # or will send the message to a channel, anything else will be interpreted as a username.
This so-called loopback is necessary, because the IRC server does not echo PRIVMSG commands back to us.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Change your nickname on the given connection to the one given in nick, if possible.
Will return TRUE on success and FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Function ircg_nickname_escape() returns an encoded nickname specified by nick wich is IRC-compliant.
See also: ircg_nickname_unescape()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Function ircg_nickname_unescape() returns a decoded nickname, which is specified in nick.
See also: ircg_nickname_escape()
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will send the message text to the user nick on the server connected to by connection.
IRC servers and other software will not automatically generate replies to NOTICEs in contrast to other message types.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Leave the channel channel on the server connected to by connection.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ircg_pconnect() will try to establish a connection to an IRC server and return a connection resource handle for further use.
The only mandatory parameter is username, this will set your initial nickname on the server. server_ip and server_port are optional and default to 127.0.0.1 and 6667.
For now parameter server_ip will not do any hostname lookups and will only accept IP addresses in numerical form.
DNS lookups are expensive and should be done in the context of IRCG.
You can customize the output of IRC messages and events by selecting a format message set previously created with ircg_register_format_messages() by specifying the set's name in msg_format.
ACTION) to a custom format string.
The keys of the array are the CTCP type and the respective value is the format message.
You can define "ident", "password", and "realname" tokens which are sent to the IRC server by setting these in an associative array.
See also: ircg_disconnect(), ircg_is_conn_alive(), ircg_register_format_messages().
Prev
Home
Next
Up
PHP Manual
Prev
Next
With ircg_register_format_messages() you can customize the way your IRC output looks like or which script functions are invoked on the client side.
Plain channel message
Private message received
Private message sent
Some user leaves channel
Some user enters channel
Some user was kicked from the channel
Topic has been changed
Error
Fatal error
Join list end(?)
Self part(?)
Some user changes his nick
Some user quits his connection
Mass join begin
Mass join element
Mass join end
Whois user
Whois server
Whois idle
Whois channel
Whois end
Voice status change on user
Operator status change on user
Banlist
Banlist end
%f - from
%t - to
%r - plain message
%m - encoded message
%j - js encoded message
2 - nickname decode
See also: ircg_lookup_format_messages().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Select the current HTTP connection for output in this execution context.
Every output sent from the server connected to by connection will be copied to standard output while using default formatting or a format message set specified by ircg_register_format_messages().
See also: ircg_register_format_messages().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success, otherwise FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This can be used to trigger a PHP script for example.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Change the topic for channel channel on the server connected to by connection to new_topic.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sends a query to the connected server connection to ask for information about the specified user nick.
Prev
Home
Next
Up
PHP / Java Integration
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if var is an array, FALSE otherwise.
See also is_float(), is_int(), is_integer(), is_string(), and is_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also is_array(), is_float(), is_int(), is_integer(), is_string(), and is_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is a directory.
If filename is a relative filename, it will be checked relative to the current working directory.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also chdir(), dir, opendir(), is_file() and is_link().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_float().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is executable.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Note:
This function is not available on Win32.
See also is_file() and is_link().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is a regular file.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also is_dir() and is_link().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
See also is_bool(), is_int(), is_integer(), is_numeric(), is_string(), is_array(), and is_object(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_int().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
See also is_bool(), is_float(), is_integer(), is_numeric(), is_string(), is_array(), and is_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is a symbolic link.
The results of this function are cached.
See clearstatcache() for more details.
See also is_dir(), is_file(), and readlink().
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_int().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also is_bool(), is_float(), is_int(), is_string(), is_object(), is_array(), and is_integer().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if var is an object, FALSE otherwise.
See also is_bool(), is_int(), is_integer(), is_float(), is_string(), and is_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is readable.
Keep in mind that PHP may be accessing the file as the user id that the web server runs as (often'nobody').
Safe mode limitations are not taken into account.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also is_writable().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_float().
Prev
Home
Next
Up
PHP Manual
Prev
Next
is_resource() returns TRUE if the variable given by the var parameter is a resource, otherwise it returns FALSE.
See the documentation on the resource -type for more information.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
If a variable has been unset with unset(), it will no longer be isset(). isset() will return FALSE if testing a variable that has been set to NULL.
For checking if constants are set use the defined() function.
This also work for elements in arrays:
See also empty(), unset(), defined(), array_key_exists() and the error control @ operator.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if var is a string, FALSE otherwise.
See also is_bool(), is_int(), is_integer(), is_float(), is_real(), is_object(), and is_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns TRUE if the object object, belongs to a class which is a subclass of class_name, FALSE otherwise.
See also get_class(), get_parent_class() and is_a().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the file named by filename was uploaded via HTTP POST.
This is useful to help ensure that a malicious user hasn 't tried to trick the script into working on files upon which it should not be working--for instance, / etc / passwd.
This sort of check is especially important if there is any chance that anything done with uploaded files could reveal their contents to the user, or even to other users on the same system.
is_uploaded_file() is available only in versions of PHP 3 after PHP 3.0.16, and in versions of PHP 4 after 4.0.2.
If you are stuck using an earlier version, you can use the following function to help protect yourself:
Note:
The following example will not work in versions of PHP 4 after 4.0.2.
It depends on internal functionality of PHP which changed after that version.
?php / * Userland test for uploaded file. * / function is_uploaded_file( $filename) {if (!$tmp_file = get_cfg_var('upload_tmp_dir')) {$tmp_file = dirname(tempnam('', ''));} $tmp_file .= '/'. basename($filename); / * User might have trailing slash in php.ini... * / return (ereg_replace(' / +', '/', $tmp_file) == $filename);} / * This is how to use it, since you also don't have * move_uploaded_file() in these older versions: * / if (is_uploaded_file($HTTP_POST_FILES['userfile'])) {copy($HTTP_POST_FILES['userfile'], "/ place / to / put / uploaded / file");} else {echo "Possible file upload attack: filename '$HTTP_POST_FILES[userfile]' .";}?
See also move_uploaded_file(), and the section Handling file uploads for a simple usage example.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is writable.
The filename argument may be a directory name allowing you to check if a directory is writeable.
Keep in mind that PHP may be accessing the file as the user id that the web server runs as (often'nobody').
Safe mode limitations are not taken into account.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also is_readable().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an alias for is_writable()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use this function at your own risk.
Prev
Home
Next
PHP / Java Integration
Up
PHP Manual
Prev
Next
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
The following example demonstrates the usage of Java 's exception handler from within PHP:
Java exception handler
Prev
Home
Next
Up
LDAP functions
PHP Manual
Prev
Next
Returns the day of the week.
Can return a string or an integer depending on the mode.
Table 1.
Calendar week modes
Meaning
Returns the day number as an int (0=sunday, 1=monday, etc)
Returns string containing the day of week (english-gregorian)
Returns a string containing the abbreviated day of week (english-gregorian)
Prev
Home
Next
GregorianToJD
Up
JDMonthName
PHP Manual
Prev
Next
Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned.
Table 1.
Calendar modes
0
1
January, February, March, April, May, June, July, August, September, October, November, December
Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
Julian
January, February, March, April, May, June, July, August, September, October, November, December
Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul
French Republican
Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra
Prev
Next
JDDayOfWeek
JDToFrench
PHP Manual
Prev
Next
Converts a Julian Day Count to the French Republican Calendar.
Prev
Home
Next
JDMonthName
Up
JDToGregorian
PHP Manual
Prev
Next
Converts Julian Day Count to a string containing the Gregorian date in the format of "month / day / year".
Prev
Home
Next
JDToFrench
Up
JDToJewish
PHP Manual
Prev
Next
Converts a Julian Day Count the the Jewish Calendar.
Prev
Home
Next
JDToGregorian
Up
JDToJulian
PHP Manual
Prev
Next
Converts Julian Day Count to a string containing the Julian Calendar Date in the format of "month / day / year".
Prev
Home
Next
JDToJewish
Up
PHP Manual
Prev
Next
This function will return a UNIX timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the UNIX epoch (Gregorian years between 1970 and 2037 or 2440588 = jday = 2465342).
The time returned is localtime (and not GMT).
See also unixtojd().
Prev
Home
Next
JDToJulian
Up
JewishToJD
PHP Manual
Prev
Next
Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful.
A new month was started when the new moon was first observed.
Prev
Home
Next
Up
JulianToJD
PHP Manual
Prev
Next
join() is an alias to implode(), and is identical in every way.
See also explode(), implode(), and split().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Although this function can handle dates all the way back to 4713 B.C., such use may not be meaningful.
Also, the beginning of a year varied from one culture to another - not all accepted January as the first month.
Caution
Remember, the current calendar system being used worldwide is the Gregorian calendar. gregoriantojd() can be used to convert such dates to their Julian Day count.
Prev
Home
Next
JewishToJD
Up
PHP Manual
Prev
Next
key() returns the index element of the current array position.
See also current() and next().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sorts an array by key in reverse order, maintaining key to data correlations.
This is useful mainly for associative arrays.
Example 1. krsort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); krsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
d = lemon c = apple b = banana a = orange
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also asort(), arsort(), ksort(), sort(), natsort(), and rsort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sorts an array by key, maintaining key to data correlations.
This is useful mainly for associative arrays.
Example 1. ksort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); ksort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
a = orange b = banana c = apple d = lemon
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also asort(), arsort(), krsort(), uksort(), sort(), natsort(), and rsort().
Note:
The second parameter was added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
LDAP functions
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
The ldap_add() function is used to add entries in the LDAP directory.
The DN of the entry to be added is specified by dn.
Array entry Array entry specifies the information about the entry.
The values in the entries are indexed by individual attributes.
In case of multiple values for an attribute, they are indexed using integers starting with 0.
entry[ "attribute1"] = value entry["attribute2"][0] = value1 entry["attribute2"][1] = value2
Example 1.
Complete example with authenticated bind
?php $ds=ldap_connect( "localhost"); / / assuming the LDAP server is on this host if ($ds) {/ / bind with appropriate dn to give update access $r=ldap_bind($ds ,"cn=root, o=My Company, c=US", "secret"); / / prepare data $info["cn"]="John Jones"; $info["sn"]="Jones"; $info["mail"]="jonj@here.and.now"; $info["objectclass"]="person"; / / add data to directory $r=ldap_add($ds, "cn=John Jones, o=My Company, c=US", $info); ldap_close($ds);} else {echo "Unable to connect to LDAP server";}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Binds to the LDAP directory with specified RDN and password.
Returns TRUE on success or FALSE on failure.
ldap_bind() does a bind operation on the directory. bind_rdn and bind_password are optional.
If not specified, anonymous bind is attempted.
Example 1.
Using LDAP Bind
?php / / using ldap bind $ldaprdn = 'uname'; / / ldap rdn or dn $ldappass = 'password'; / / associated password / / connect to ldap server $ldapconn = ldap_connect("ldap.example.com") or die("Could not connect to LDAP server ."); if ($ldapconn) {/ / binding to ldap server $ldapbind = ldap_bind($ldapconn, $ldaprdn, $ldappass); / / verify binding if ($ldapbind) {echo "LDAP bind successful.. .";} else {echo "LDAP bind failed.. .";}}?
Example 2.
Using LDAP Bind Anonymously
?php / /using ldap bind anonymously / / connect to ldap server $ldapconn = ldap_connect( "ldap.example.com") or die("Could not connect to LDAP server ."); if ($ldapconn) {/ / binding anonymously $ldapbind = ldap_bind($ldapconn); if ($ldapbind) {echo "LDAP bind anonymous successful.. .";} else {echo "LDAP bind anonymous failed.. .";}}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
ldap_close() closes the link to the LDAP server that's associated with the specified link_identifier.
This call is internally identical to ldap_unbind().
The LDAP API uses the call ldap_unbind(), so perhaps you should use this in preference to ldap_close().
Note:
This function is an alias of ldap_unbind().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if value matches otherwise returns FALSE.
Returns -1 on error.
ldap_compare() is used to compare value of attribute to value of same attribute in LDAP directory entry specified with dn.
The following example demonstrates how to check whether or not given password matches the one defined in DN specified entry.
Example 1.
Complete example of password check
?php $ds=ldap_connect( "localhost"); / / assuming the LDAP server is on this host if ($ds) {/ / bind if(ldap_bind($ds)) {/ / prepare data $dn = "cn=Matti Meikku, ou=My Unit, o=My Company, c=FI"; $value = "secretpassword"; $attr = "password"; / / compare value $r=ldap_compare($ds, $dn, $attr, $value); if ($r === -1) {echo "Error: ".ldap_error($ds);} elseif ($r === TRUE) {echo "Password correct .";} elseif ($r === FALSE) {echo "Wrong guess!
Password incorrect .";}} else {echo "Unable to bind to LDAP server .";} ldap_close($ds);} else {echo "Unable to connect to LDAP server .";}?
Warning
ldap_compare() can NOT be used to compare BINARY values!
Note:
This function was added in 4.0.2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive LDAP link identifier on success, or FALSE on error.
ldap_connect() establishes a connection to a LDAP server on a specified hostname and port.
Both the arguments are optional.
If no arguments are specified then the link identifier of the already opened link will be returned.
If only hostname is specified, then the port defaults to 389.
If you are using OpenLDAP 2.x.x you can specify a URL instead of the hostname.
To use LDAP with SSL, compile OpenLDAP 2.x.x with SSL support, configure PHP with SSL, and use ldaps: / /hostname / as host parameter.
The port parameter is not used when using URLs.
Note:
URL and SSL support were added in 4.0.4.
Example 1.
Example of connecting to LDAP server.
?php / / LDAP variables $ldaphost = "ldap.example.com"; / / your ldap servers $ldapport = 389; / / your ldap server's port number / / Connecting to LDAP $ldapconn = ldap_connect ($ldaphost, $ldapport) or die ("Could not connect to {$ldaphost}");?
Example 2.
Example of connecting securely to LDAP server.
?php / / make sure your host is the correct one / / that you issued your secure certificate to $ldaphost = "ldaps: / /ldap.example.com /"; / / Connecting to LDAP $ldapconn = ldap_connect ($ldaphost) or die ("Could not connect to {$ldaphost} ");?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns number of entries in the result or FALSE on error.
ldap_count_entries() returns the number of entries stored in the result of previous search operations. result_identifier identifies the internal ldap result.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
ldap_delete() function delete a particular entry in LDAP directory specified by dn.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ldap_dn2ufn() function is used to turn a DN, specified by dn, into a more user-friendly form, stripping off type names.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns string error message.
This function returns the string error message explaining the error number errno.
While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages.
Never check for a specific error message text, but always use an error number to check.
See also ldap_errno() and ldap_error().
Example 1.
Enumerating all LDAP error messages
?php for( $i=0; $i 100; $i++) {printf("Error $i: %s br \n", ldap_err2str($i));}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the LDAP error number of the last LDAP command for this link.
This function returns the standardized error number returned by the last LDAP command for the given link_identifier.
This number can be converted into a textual error message using ldap_err2str().
Unless you lower your warning level in your php.ini sufficiently or prefix your LDAP commands with @ (at) characters to suppress warning output, the errors generated will also show up in your HTML output.
Example 1.
Generating and catching an error
?php / / This example contains an error, which we will catch. $ld = ldap_connect( "localhost"); $bind = ldap_bind($ld); / / syntax error in filter expression (errno 87), / / must be "objectclass=* "to work. $res = @ldap_search($ld, "o=Myorg, c=DE", "objectclass"); if (!$res) {printf("LDAP-Errno: %s br \n", ldap_errno($ld)); printf("LDAP-Error: %s br \n", ldap_error($ld)); die("Argh! br \n");} $info = ldap_get_entries($ld, $res); printf("%d matching entries. br \n", $info["count"]);?
See also ldap_err2str() and ldap_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns string error message.
This function returns the string error message explaining the error generated by the last LDAP command for the given link_identifier This function returns the string error message explaining the error generated by the last LDAP command for the given link_identifier While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages.
Never check for a specific error message text, but always use an error number to check.
Unless you lower your warning level in your php.ini sufficiently or prefix your LDAP commands with @ (at) characters to suppress warning output, the errors generated will also show up in your HTML output.
See also ldap_err2str() and ldap_errno().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ldap_explode_dn() function is used to split the DN returned by ldap_get_dn() and breaks it up into its component parts.
Each part is known as Relative Distinguished Name, or RDN. ldap_explode_dn() returns an array of all those components. with_attrib is used to request if the RDNs are returned with only values or their attributes as well.
To get RDNs with the attributes (i.e. in attribute=value format) set with_attrib to 0 and to get only values set it to 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the first attribute in the entry on success and FALSE on error.
Similar to reading entries, attributes are also read one by one from a particular entry. ldap_first_attribute() returns the first attribute in the entry pointed by the result_entry_identifier.
Remaining attributes are retrieved by calling ldap_next_attribute() successively. ber_identifier is the identifier to internal memory location pointer.
It is passed by reference.
The same ber_identifier is passed to the ldap_next_attribute() function, which modifies that pointer.
See also ldap_get_attributes()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the result entry identifier for the first entry on success and FALSE on error.
Entries in the LDAP result are read sequentially using the ldap_first_entry() and ldap_next_entry() functions. ldap_first_entry() returns the entry identifier for first entry in the result.
This entry identifier is then supplied to ldap_next_entry() routine to get successive entries from the result.
See also ldap_get_entries().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
ldap_free_result() frees up the memory allocated internally to store the result and pointed by the result_identifier.
All result memory will be automatically freed when the script terminates.
In case the script is making successive searches which return large result sets, ldap_free_result() could be called to keep the runtime memory usage by the script low.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a complete entry information in a multi-dimensional array on success and FALSE on error.
ldap_get_attributes() function is used to simplify reading the attributes and values from an entry in the search result.
The return value is a multi-dimensional array of attributes and values.
Having located a specific entry in the directory, you can find out what information is held for that entry by using this call.
You would use this call for an application which "browses" directory entries and / or where you do not know the structure of the directory entries.
In many applications you will be searching for a specific attribute such as an email address or a surname, and won 't care what other data is held.
return_value[ "count"] = number of attributes in the entry return_value[0] = first attribute return_value[n] = nth attribute return_value["attribute"]["count"] = number of values for attribute return_value["attribute"][0] = first value of the attribute return_value["attribute"][i] = (i+1 )th value of the attribute
Example 1.
Show the list of attributes held for a particular directory entry
/ / $ds is the link identifier for the directory / / $sr is a valid search result from a prior call to / / one of the ldap directory search calls $entry = ldap_first_entry( $ds, $sr); $attrs = ldap_get_attributes($ds, $entry); echo $attrs["count"]. "attributes held for this entry: p"; for ($i=0; $i $attrs["count"]; $i++) echo $attrs[$i]. "br";
See also ldap_first_attribute() and ldap_next_attribute()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the DN of the result entry and FALSE on error.
ldap_get_dn() function is used to find out the DN of an entry in the result.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a complete result information in a multi-dimenasional array on success and FALSE on error.
ldap_get_entries() function is used to simplify reading multiple entries from the result, specified with result_identifier, and then reading the attributes and multiple values.
The entire information is returned by one function call in a multi-dimensional array.
The structure of the array is as follows.
The attribute index is converted to lowercase. (Attributes are case-insensitive for directory servers, but not when used as array indices.)
return_value[ "count"] = number of entries in the result return_value[0]: refers to the details of first entry return_value[i]["dn"] = DN of the ith entry in the result return_value[i]["count"] = number of attributes in ith entry return_value[i][j] = jth attribute in the ith entry in the result return_value[i]["attribute"]["count"] = number of values for attribute in ith entry return_value[i]["attribute"][j] = jth value of attribute in ith entry
See also ldap_first_entry() and ldap_next_entry()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets retval to the value of the specified option.
Returns TRUE on success or FALSE on failure.
The parameter option The parameter option can be one of:
These are described in draft-ietf-ldapext-ldap-c-api-xx.txt
Note:
This function is only available when using OpenLDAP 2.x.x OR Netscape Directory SDK x.x, and was added in PHP 4.0.4
Example 1.
Check protocol version
/ / $ds is a valid link identifier for a directory server if (ldap_get_option($ds, LDAP_OPT_PROTOCOL_VERSION, $version)) echo "Using protocol version $version"; else echo "Unable to determine protocol version";
See also ldap_set_option().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of values for the attribute on success and FALSE on error.
ldap_get_values() function is used to read all the values of the attribute in the entry in the result. entry is specified by the result_entry_identifier.
The number of values can be found by indexing "count" in the resultant array.
Individual values are accessed by integer index in the array.
The first index is 0.
This call needs a result_entry_identifier, so needs to be preceded by one of the ldap search calls and one of the calls to get an individual entry.
You application will either be hard coded to look for certain attributes (such as "surname "or "mail") or you will have to use the ldap_get_attributes() call to work out what attributes exist for a given entry.
LDAP allows more than one entry for an attribute, so it can, for example, store a number of email addresses for one person' s directory entry all labeled with the attribute "mail "
return_value[ "count"] = number of values for attribute return_value[0] = first value of attribute return_value[i] = ith value of attribute
Example 1.
List all values of the "mail" attribute for a directory entry
/ / $ds is a valid link identifier for a directory server / / $sr is a valid search result from a prior call to / / one of the ldap directory search calls / / $entry is a valid entry identifier from a prior call to / / one of the calls that returns a directory entry $values = ldap_get_values( $ds, $entry ,"mail"); echo $values["count"]. "email addresses for this entry. p"; for ($i=0; $i $values["count"]; $i++) echo $values[$i]. "br";
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of values for the attribute on success and FALSE on error.
ldap_get_values_len() function is used to read all the values of the attribute in the entry in the result. entry is specified by the result_entry_identifier.
The number of values can be found by indexing "count" in the resultant array.
Individual values are accessed by integer index in the array.
The first index is 0.
This function is used exactly like ldap_get_values() except that it handles binary data and not string data.
Note:
This function was added in 4.0.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a search result identifier or FALSE on error.
ldap_list() performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL.
LDAP_SCOPE_ONELEVEL means that the search should only return information that is at the level immediately below the base_dn given in the call. (Equivalent to typing "ls "and getting a list of files and folders in the current working directory.)
This call takes 5 optional parameters.
See ldap_search() notes.
Note:
These optional parameters were added in 4.0.2: attrsonly, sizelimit, timelimit, deref.
Example 1.
Produce a list of all organizational units of an organization
/ / $ds is a valid link identifier for a directory server $basedn = "o=My Company, c=US"; $justthese = array("ou"); $sr=ldap_list($ds, $basedn, "ou=*", $justthese); $info = ldap_get_entries($ds, $sr); for ($i=0; $i $info["count"]; $i++) echo $info[$i]["ou"][0];
Note:
From 4.0.5 on it 's also possible to do parallel searches.
See ldap_search() for details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
This function adds attribute( s) to the specified dn.
It performs the modification at the attribute level as opposed to the object level.
Object-level additions are done by the ldap_add() function.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
This function removes attribute( s) from the specified dn.
It performs the modification at the attribute level as opposed to the object level.
Object-level deletions are done by the ldap_delete() function.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
ldap_modify() function is used to modify the existing entries in the LDAP directory.
The structure of the entry is same as in ldap_add().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
This function replaces attribute( s) from the specified dn.
It performs the modification at the attribute level as opposed to the object level.
Object-level modifications are done by the ldap_modify() function.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the next attribute in an entry on success and FALSE on error.
ldap_next_attribute() is called to retrieve the attributes in an entry.
The internal state of the pointer is maintained by the ber_identifier.
It is passed by reference to the function.
The first call to ldap_next_attribute() is made with the result_entry_identifier returned from ldap_first_attribute().
See also ldap_get_attributes()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns entry identifier for the next entry in the result whose entries are being read starting with ldap_first_entry().
If there are no more entries in the result then it returns FALSE.
ldap_next_entry() function is used to retrieve the entries stored in the result.
Successive calls to the ldap_next_entry() return entries one by one till there are no more entries.
The first call to ldap_next_entry() is made after the call to ldap_first_entry() with the result_entry_identifier as returned from the ldap_first_entry().
See also ldap_get_entries()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a search result identifier or FALSE on error.
ldap_read() performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE.
So it is equivalent to reading an entry from the directory.
An empty filter is not allowed.
If you want to retrieve absolutely all information for this entry, use a filter of "objectClass=*".
If you know which entry types are used on the directory server, you might use an appropriate filter such as "objectClass=inetOrgPerson".
This call takes 5 optional parameters.
See ldap_search() notes.
Note:
These optional parameters were added in 4.0.2: attrsonly, sizelimit, timelimit, deref.
From 4.0.5 on it 's also possible to do parallel searches.
See ldap_search() for details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The entry specified by dn is renamed / moved.
The new RDN is specified by newrdn and the new parent / superior entry is specified by newparent.
If the parameter deleteoldrdn is TRUE the old RDN value( s) is removed, else the old RDN value(s) is retained as non-distinguished values of the entry.
Returns TRUE on success or FALSE on failure.
Note:
This function currently only works with LDAPv3.
You may have to use ldap_set_option() prior to binding to use LDAPv3.
This function is only available when using OpenLDAP 2.x.x OR Netscape Directory SDK x.x, and was added in PHP 4.0.5.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a search result identifier or FALSE on error.
ldap_search() performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE.
This is equivalent to searching the entire directory. base_dn specifies the base DN for the directory.
There is a optional fourth parameter, that can be added to restrict the attributes and values returned by the server to just those required.
This is much more efficient than the default action (which is to return all attributes and their associated values).
The use of the fourth parameter should therefore be considered good practice.
The fourth parameter is a standard PHP string array of the required attributes, eg array( "mail" ,"sn" ,"cn") Note that the "dn "is always returned irrespective of which attributes types are requested.
Note too that some directory server hosts will be configured to return no more than a preset number of entries.
If this occurs, the server will indicate that it has only returned a partial results set.
This occurs also if the sixth parameter sizelimit has been used to limit the count of fetched entries.
The fifth parameter attrsonly should be set to 1 if only attribute types are wanted.
If set to 0 both attributes types and attribute values are fetched which is the default behaviour.
With the sixth parameter sizelimit it is possible to limit the count of entries fetched.
Setting this to 0 means no limit.
NOTE:
This parameter can NOT override server-side preset sizelimit.
You can set it lower though.
The seventh parameter timelimit sets the number of seconds how long is spend on the search.
Setting this to 0 means no limit.
NOTE:
This parameter can NOT override server-side preset timelimit.
You can set it lower though.
The eigth parameter deref specifies how aliases should be handled during the search.
It can be one of the following:
LDAP_DEREF_NEVER - (default) aliases are never dereferenced.
LDAP_DEREF_SEARCHING - aliases should be dereferenced during the search but not when locating the base object of the search.
LDAP_DEREF_FINDING - aliases should be dereferenced when locating the base object but not during the search.
LDAP_DEREF_ALWAYS - aliases should be dereferenced always.
Note:
These optional parameters were added in 4.0.2: attrsonly, sizelimit, timelimit, deref.
The search filter can be simple or advanced, using boolean operators in the format described in the LDAP doumentation (see the Netscape Directory SDK for full information on filters).
The example below retrieves the organizational unit, surname, given name and email address for all people in "My Company" where the surname or given name contains the substring $person.
This example uses a boolean filter to tell the server to look for information in more than one attribute.
Example 1.
LDAP search
/ / $ds is a valid link identifier for a directory server / / $person is all or part of a person' s name, eg "Jo "$dn = "o=My Company, c=US"; $filter="(_BAR_(sn=$person*)(givenname=$person*))"; $justthese = array ("ou", "sn", "givenname", "mail"); $sr=ldap_search($ds, $dn, $filter, $justthese); $info = ldap_get_entries($ds, $sr); print $info["count"]." entries returned p ";
From 4.0.5 on it 's also possible to do parallel searches.
To do this you use an array of link identifiers, rather than a single identifier, as the first argument.
If you don 't want the same base DN and the same filter for all the searches, you can also use an array of base DNs and / or an array of filters.
Those arrays must be of the same size as the link identifier array since the first entries of the arrays are used for one search, the second entries are used for another, and so on.
When doing parallel searches an array of search result identifiers is returned, except in case of error, then the entry corresponding to the search will be FALSE.
This is very much like the value normally returned, except that a result identifier is always returned when a search was made.
There are some rare cases where the normal search returns FALSE while the parallel search returns an identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure. on error.
The parameter option The parameter option can be one of:
Here 's a brief description, see draft-ietf-ldapext-ldap-c-api-xx.txt for details.
The options LDAP_OPT_DEREF, LDAP_OPT_SIZELIMIT, LDAP_OPT_TIMELIMIT, LDAP_OPT_PROTOCOL_VERSION and LDAP_OPT_ERROR_NUMBER have integer value, LDAP_OPT_REFERRALS and LDAP_OPT_RESTART have boolean value, and the options LDAP_OPT_HOST_NAME, LDAP_OPT_ERROR_STRING and LDAP_OPT_MATCHED_DN have string value.
The first example illustrates their use.
The options LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS require a list of controls, this means that the value must be an array of controls.
A control consists of an oid identifying the control, an optional value, and an optional flag for criticality.
In PHP a control is given by an array containing an element with the key oid and string value, and two optional elements.
The optional elements are key value with string value and key iscritical with boolean value. iscritical defaults to FALSE if not supplied.
See also the second example below.
Note:
This function is only available when using OpenLDAP 2.x.x OR Netscape Directory SDK x.x, and was added in PHP 4.0.4.
Example 1.
Set protocol version
/ / $ds is a valid link identifier for a directory server if (ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) echo "Using LDAPv3"; else echo "Failed to set protocol version to 3";
Example 2.
Set server controls
/ / $ds is a valid link identifier for a directory server / / control with no value $ctrl1 = array( "oid "= "1.2.752.58.10.1", "iscritical" = TRUE); / / iscritical defaults to FALSE $ctrl2 = array("oid "= "1.2.752.58.1.10", "value" = "magic"); / / try to set both controls if (!ldap_set_option($ds, LDAP_OPT_SERVER_CONTROLS, array($ctrl1, $ctrl2))) echo "Failed to set server controls";
See also ldap_get_option().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
ldap_unbind() function unbinds from the LDAP directory.
Prev
Home
Next
Up
Mail functions
PHP Manual
Prev
Next
In its simplest form the function will take only the two strings as parameter and will calculate just the number of insert, replace and delete operations needed to transform str1 into str2.
This is more general and adaptive than variant one, but not as efficient.
It will call a user-supplied function that will determine the cost for every possible operation.
operation to apply: 'I', 'R' or'D '
remaining characters in string 2
Prev
Home
Next
Up
PHP Manual
Prev
Next
link() creates a hard link.
See also the symlink() to create soft links, and readlink() along with linkinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
linkinfo() returns the st_dev field of the UNIX C stat structure returned by the lstat system call.
This function is used to verify if a link (pointed to by path) really exists (using the same method as the S_ISLNK macro defined in stat.h).
Returns 0 or FALSE in case of error.
See also symlink(), link(), and readlink().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation.
Example 1. list() examples
?php $info = array( 'coffee', 'brown', 'caffeine'); / / Listing all the variables list($drink, $color, $power) = $info; print "$drink is $color and $power makes it special.\n"; / / Listing some of them list($drink,, $power) = $info; print "$drink has $power.\n"; / / Or let's skip to only the third one list (,, $power) = $info; print "I need $power!\n";?
An example use of list()
table tr th Employee name / th th Salary / th / tr ?php $result = mysql_query ("SELECT id, name, salary FROM employees",$conn); while (list ($id, $name, $salary) = mysql_fetch_row ($result)) {print ("tr \n"." td a href=\"info.php?id=$id\ "$name / a / td \n"." td $salary / td \n". "/ tr \n");}? / table
Warning
list() assigns the values starting with the right-most parameter.
If you are using plain variables, you don 't have to worry about this.
But if you are using arrays with indices you usually expect the order of the indices in the array the same you wrote in the list() from left to right; which it isn't.
It 's assigned in the reverse order.
Using list() with array indices
See also each(), array() and extract().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. localeconv() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
The localtime() function returns an array identical to that of the structure returned by the C function call.
The first argument to localtime() is the timestamp, if this is not given the current time is used.
The second argument to the localtime() is the is_associative, if this is set to 0 or not supplied than the array is returned as a regular, numerically indexed array.
If the argument is set to 1 then localtime() is an associative array containing all the different elements of the structure returned by the C function call to localtime.
The names of the different keys of the associative array are as follows:
"tm_sec" - seconds
"tm_min" - minutes
"tm_hour" - hour
"tm_mday" - day of the month
"tm_mon" - month of the year, starting with 0 for January
"tm_year" - Years since 1900
"tm_wday" - Day of the week
"tm_yday" - Day of the year
"tm_isdst" - Is daylight savings time in effect
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the base-10 logarithm of arg.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
As always you can calculate the logarithm in base b of a number n, but using the mathematical identity: log b (n) = log(n) / log(b), where log is the neperian (or natural) logarithm.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.
See also: ip2long()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Gathers the statistics of the file or symbolic link named by filename.
This function is identical to the stat() function except that if the filename parameter is a symbolic link, the status of the symbolic link is returned, not the status of the file pointed to by the symbolic link.
device
inode
number of links
user id of owner
group id owner
device type if inode device *
size in bytes
time of last access
time of last modification
time of last change
blocksize for filesystem I / O *
number of blocks allocated
lstat() cannot be used on remote files.
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Without the second parameter, ltrim() will strip these characters:
You can also specify the characters you want to strip, by means of the charlist You can also specify the characters you want to strip, by means of the charlist parameter.
With.. you can specify a range of characters.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is accomplished via MIME-encoding - for more information, see this Zend article or the PEAR Mime Classes.
mail() returns TRUE if the mail was successfully accepted for delivery, FALSE otherwise.
Second, the custom headers like From:, Cc:, Bcc: and Date: are not interpreted by the MTA in the first place, but are parsed by PHP.
PHP = 4.3 supports all the mentioned header elements and is no longer case-sensitive.
If a fourth string argument is passed, this string is inserted at the end of the header.
Example 2.
mail( "nobody@example.com", "the subject", $message, "From: webmaster@$SERVER_NAME\r\n "."Reply-To: webmaster@$SERVER_NAME\r\n". "X-Mailer:
You may need to add the user that your web server runs as to your sendmail configuration to prevent a 'X-Warning' header from being added to the message when you set the envelope sender using this method.
mail( "nobody@example.com", "the subject", $message, "From: webmaster@$SERVER_NAME", "-fwebmaster@$SERVER_NAME");
You can also use simple string building techniques to build complex email messages.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
Mathematical Functions
PHP Manual
Prev
Next
max() returns the numerically highest of the parameter values.
If the first parameter is an array, max() returns the highest value in that array.
You can compare an unlimited number of values.
If one or more of the values is a float, all the values will be treated as floats, and a float is returned.
If none of the values is a float, all of them will be treated as integers, and an integer is returned.
See also min().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_case() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_encoding() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_kana() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_variables() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. convmap example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_detect_encoding() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Example 2. mb_detect_order() examples
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_kana() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. convmap example
Example 2. mb_encode_numericentity() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_internal_encoding() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_output_handler() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_preferred_mime_string() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_strimwidth() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_strtolower() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_strtoupper() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_substitute_character() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_substr_count() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
MCAL functions
PHP Manual
Prev
Next
Returns the id of the newly inserted event.
Prev
Home
Next
MCAL functions
Up
PHP Manual
Prev
Next
Closes the given mcal stream.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
mcal_date_compare() Compares the two given dates, returns 0, 0, 0 if a b, a==b, a b respectively.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Possible return values range from 0 for Sunday through 6 for Saturday.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mcal_day_of_year() returns the day of the year of the given date.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
mcal_delete_event() deletes the calendar event specified by the event_id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
mcal_fetch_current_stream_event() returns the current stream's event structure as an object containing:
Prev
Home
Next
Up
PHP Manual
Prev
Next
mcal_fetch_event() fetches an event from the calendar stream specified by id.
Returns an event object consisting of:
int id - ID of that event.
int public - TRUE if the event if public, FALSE if it is private.
string category - Category string of the event.
string title - Title string of the event.
string description - Description string of the event.
int alarm - number of minutes before the event to send an alarm / reminder.
object end - Object containing a datetime entry.
int recur_interval - recurrence interval
datetime recur_enddate - recurrence end date
int year - year
int mday - day of month
int min - minutes
int sec - seconds
int alarm - minutes before event to send an alarm
0 - Indicates that this event does not recur
1 - This event recurs daily
2 - This event recurs on a weekly basis
3 - This event recurs monthly on a specific day of the month (e.g. the 10th of the month)
5 - This event recurs on an annual basis
Prev
Home
Next
Up
PHP Manual
Prev
Next
mcal_is_leap_year() returns 1 if the given year is a leap year, 0 if not.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of ID 's that are between the start and end dates, or if just a stream is given, uses the start and end dates in the global event structure.
mcal_list_events() function takes in an beginning date and an optional end date for a calendar stream.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an MCAL stream on success, FALSE on error.
mcal_open() opens up an MCAL connection to the specified calendar store.
If the optional options is specified, passes the options to that mailbox also.
The streams internal event structure is also initialized upon connection.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
mcal_snooze() turns off an alarm for a calendar event specified by the id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the event id of the modified event on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
mcal_time_valid
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_create_iv() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_enc_get_algorithms_name() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_enc_get_modes_name() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_enc_get_supported_key_sizes() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_encrypt() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_get_block_size() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_get_cipher_name() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_create_iv() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_get_block_size() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_list_algorithms() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_list_modes() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_module_open() Example
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
Mhash Functions
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The hash is a 32-character hexadecimal number.
See also crc32(), md5_file(), and sha1().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mdecrypt_generic() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Calculates the metaphone key of str.
Similar to soundex() metaphone creates the same key for similar sounding words.
It' s more accurate than soundex() It's more accurate than soundex() as it knows the basic rules of English pronunciation.
Metaphone was developed by Lawrence Philips lphilips@verity.com.
It is described in ["Practical Algorithms for Programmers", Binstock Rex, Addison Wesley, 1995].
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns TRUE if the method given by method_name has been defined for the given object, FALSE otherwise.
Prev
Home
Next
Up
ClibPDF functions
PHP Manual
Prev
Next
mhash_count() returns the highest available hash id.
Hashes are numbered from 0 to this hash id.
Example 1.
Traversing all hashes
?php $nr = mhash_count(); for ($i = 0; $i = $nr; $i++) {echo sprintf ("The blocksize of %s is %d\n", mhash_get_hash_name ($i), mhash_get_block_size ($i));}?
Prev
Home
Next
Mhash Functions
Up
PHP Manual
Prev
Next
mhash_get_block_size() is used to get the size of a block of the specified hash.
mhash_get_block_size() takes one argument, the hash and returns the size in bytes or FALSE, if the hash does not exist.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mhash_get_hash_name() is used to get the name of the specified hash.
mhash_get_hash_name() takes the hash id as an argument and returns the name of the hash or FALSE, if the hash does not exist.
Example 1. mhash_get_hash_name() example
The above example will print out:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Not all algorithms supported in mhash can be used in HMAC mode.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the string "msec sec" where sec is the current time measured in the number of seconds since the Unix Epoch (0:00:00 January 1, 1970 GMT), and msec is the microseconds part.
This function is only available on operating systems that support the gettimeofday() system call.
Both portions of the string are returned in units of seconds.
Example 1. microtime() example
function getmicrotime() {list($usec, $sec) = explode( "",microtime()); return ((float)$usec + (float)$sec);} $time_start = getmicrotime(); for ($i=0; $i 1000; $i++) {/ /do nothing, 1000 times} $time_end = getmicrotime(); $time = $time_end - $time_start; echo "Did nothing in $time seconds";
See also time().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Microsoft SQL Server functions
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
In the first variant, you need at least two parameters and min() returns the lowest of these values.
If one of the variables is undefined, min() will fail.
If one or more of the values is a float, all the values will be treated as floats, and a float is returned.
If none of the values is a float, all of them will be treated as integer s, and an integer is returned.
?php $a = 4; $b = 9; $c = 3; $arr = array(99, 34, 11); / / You may want to implement your own error checking in / / case of failure (a variable may not be set) if (!$min_value = @min($a, $b, $c)) {echo "Could not get min value, please try again .";} else {echo "min value is $min_value";} print min($arr); / / 11?
See also max().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to create the directory specified by pathname.
Note that you probably want to specify the mode as an octal number, which means it should have a leading zero.
The mode is also modified by the current umask, which you can change using umask().
Note:
Mode is ignored on Windows, and became optional in PHP 4.2.0.
The mode is 0777 by default, which means the widest possible access.
For more information on modes, read the details on the chmod() page.
Returns TRUE on success or FALSE on failure.
See also rmdir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning:
Note the strange order of arguments, which differs from the order of arguments in a regular UNIX mktime() call and which does not lend itself well to leaving out parameters from right to left (see below).
It is a common error to mix these values up in a script.
Returns the Unix timestamp corresponding to the arguments given.
This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970) and the time specified.
Arguments may be left out in order from right to left; any arguments thus omitted will be set to the current value according to the local date and time.
is_dst can be set to 1 if the time is during daylight savings time, 0 if it is not, or -1 (the default) if it is unknown whether the time is within daylight savings time or not.
If it 's unknown, PHP tries to figure it out itself.
This can cause unexpected (but not incorrect) results.
mktime() is useful for doing date arithmetic and validation, as it will automatically calculate the correct value for out-of-range input.
For example, each of the following lines produces the string "Jan-01-1998".
Example 1. mktime() example
echo date ("M-d-Y", mktime (0,0,0,12,32,1997)); echo date ("M-d-Y", mktime (0,0,0,13,1,1997)); echo date ("M-d-Y", mktime (0,0,0,1,1,1998)); echo date ("M-d-Y", mktime (0,0,0,1,1,98));
The last day of any given month can be expressed as the "0" day of the next month, not the -1 day.
Both of the following examples will produce the string "The last day in Feb 2000 is:
29 ".
Example 2.
Last day of next month
$lastday = mktime (0,0,0,3,0,2000); echo strftime ("Last day in Feb 2000 is: %d", $lastday); $lastday = mktime (0,0,0,4,-31,2000); echo strftime ("Last day in Feb 2000 is: %d", $lastday);
Date with year, month and day equal to zero is considered illegal (otherwise it what be regarded as 30.11.1999, which would be strange behavior).
See also date() and time().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. money_format() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism).
If the file is valid, it will be moved to the filename given by destination.
If filename is not a valid upload file, then no action will occur, and move_uploaded_file() will return FALSE.
If filename is a valid upload file, but cannot be moved for some reason, no action will occur, and move_uploaded_file() will return FALSE.
Additionally, a warning will be issued.
This sort of check is especially important if there is any chance that anything done with uploaded files could reveal their contents to the user, or even to other users on the same system.
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
This is not unsafe because move_uploaded_file() only operates on files uploaded via PHP.
Warning
If the destination file already exists, it will be overwritten.
See also is_uploaded_file(), and the section Handling file uploads for a simple usage example.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Mohawk Software session handler functions
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array of value, session for all sessions with a variable named name.
Used for searching sessions with common attributes.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns number of affected ("touched") rows by a specific query (i.e. the number of rows returned by a SELECT, the number of rows modified by an update, or the number of rows removed by a delete).
See also: msql_query().
Prev
Home
Next
mSQL functions
Up
PHP Manual
Prev
Next
Returns TRUE on success, FALSE on error.
msql_close() closes the link to a mSQL database that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
Note that this isn' t usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
msql_close() will not close persistent links generated by msql_pconnect().
See also: msql_connect() and msql_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive mSQL link identifier on success, or FALSE on error.
msql_connect() establishes a connection to a mSQL server.
The server parameter can also include a port number. eg. "hostname:port".
It defaults to 'localhost'.
In case a second call is made to msql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling msql_close().
See also msql_pconnect(), msql_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_create_db() attempts to create a new database on the server associated with the specified link identifier.
See also: msql_drop_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to msql_create_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
msql_data_seek() moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specifyed row number.
The next call to msql_fetch_row() would return that row.
See also: msql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_dbname() returns the database name stored in position i of the result pointer returned from the msql_listdbs() function.
The msql_numrows() function can be used to determine how many database names are available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
msql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
See also: msql_create_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_drop_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Errors coming back from the mSQL database backend no longer issue warnings.
Instead, use these functions to retrieve the error string.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
msql_fetch_array() is an extended version of msql_fetch_row().
In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.
The second optional argument result_type in msql_fetch_array() is a constant and can take the following values:
MSQL_ASSOC, MSQL_NUM, and MSQL_BOTH.
Be careful if you are retrieving results from a query that may return a record that contains only one field that has a value of 0 (or an empty string, or NULL).
An important thing to note is that using msql_fetch_array() is NOT significantly slower than using msql_fetch_row(), while it provides a significant added value.
For further details, also see msql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an object containing field information
msql_fetch_field() can be used in order to obtain information about fields in a certain query result.
If the field offset isn' t specified, the next field that wasn't yet retreived by msql_fetch_field() is retreived.
The properties of the object are:
name - column name
table - name of the table the column belongs to
not_null - 1 if the column cannot be NULL
primary_key - 1 if the column is a primary key
unique - 1 if the column is a unique key
type - the type of the column
See also msql_field_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an object with properties that correspond to the fetched row, or FALSE if there are no more rows.
msql_fetch_object() is similar to msql_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
The optional second argument result_type in msql_fetch_array() is a constant and can take the following values:
MSQL_ASSOC, MSQL_NUM, and MSQL_BOTH.
Speed-wise, the function is identical to msql_fetch_array(), and almost as quick as msql_fetch_row() (the difference is insignificant).
See also: msql_fetch_array() and msql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
msql_fetch_row() fetches one row of data from the result associated with the specified query identifier.
The row is returned as an array.
Each result column is stored in an array offset, starting at offset 0.
Subsequent call to msql_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
See also: msql_fetch_array(), msql_fetch_object(), msql_data_seek(), and msql_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_fieldflags() returns the field flags of the specified field.
Currently this is either, "not NULL", "primary key", a combination of the two or "" (an empty string).
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_fieldlen() returns the length of the specified field.
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_fieldname() returns the name of the specified field. query_identifier is the query identifier, and field is the field index. msql_fieldname($result, 2); will return the name of the second field in the result associated with the result identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Seeks to the specified field offset.
If the next call to msql_fetch_field() won't include a field offset, this field would be returned.
See also: msql_fetch_field().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the name of the table field was fetched from.
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_fieldtype() is similar to the msql_fieldname() function.
The arguments are identical, but the field type is returned.
This will be one of "int", "char" or "real ".
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_free_result() frees the memory associated with query_identifier.
When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don 't use too much memory while the script is running.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_free_result()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive mSQL query identifier to the query result, or FALSE on error.
msql() selects a database and executes a query on it.
If the optional link identifier isn' t specified, the function will try to find an open link to the mSQL server and if no such link is found it'll try to create one as if msql_connect() was called with no arguments (see msql_connect()).
Prev
Home
Next
Up
MySQL Functions
PHP Manual
Prev
Next
msql_list_dbs() will return a result pointer containing the databases available from the current msql daemon.
Use the msql_dbname() function to traverse this result pointer.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_list_dbs().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_list_fields() retrieves information about the given tablename.
Arguments are the database name and the table name.
A result pointer is returned which can be used with msql_fieldflags(), msql_fieldlen(), msql_fieldname(), and msql_fieldtype().
A query identifier is a positive integer.
The function returns -1 if a error occurs.
A string describing the error will be placed in $phperrmsg, and unless the function was called as @msql_list_fields() then this error string will also be printed out.
See also msql_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_list_fields().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_list_tables() takes a database name and result pointer much like the msql() msql_list_tables() takes a database name and result pointer much like the msql() function.
The msql_tablename() function should be used to extract the actual table names from the result pointer.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_list_tables().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_num_fields() returns the number of fields in a result set.
See also: msql(), msql_query(), msql_fetch_field(), and msql_num_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to msql_num_fields().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_num_rows() returns the number of rows in a result set.
See also: msql(), msql_query(), and msql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to msql_num_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive mSQL persistent link identifier on success, or FALSE on error.
msql_pconnect() acts very much like msql_connect() with two major differences.
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host.
If one is found, an identifier for it will be returned instead of opening a new connection.
Second, the connection to the SQL server will not be closed when the execution of the script ends.
Instead, the link will remain open for future use (msql_close() will not close links established by msql_pconnect()).
This type of links is therefore called 'persistent'.
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
If no link is open, the function tries to establish a link as if msql_connect() was called, and use it.
Returns a positive mSQL query identifier on success, or FALSE on error.
Example 1. msql_query()
?php $link = msql_connect( "dbserver") or die("unable to connect to msql server: ".msql_error()); msql_select_db("db", $link) or die("unable to select database'db': ".msql_error()); $result = msql_query("SELECT * FROM table WHERE id=1", $link); if (!$result) {die("query failed: ".msql_error());} while ($row = msql_fetch_array($result)) {echo $row["id"];}?
See also: msql(), msql_select_db(), and msql_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See sql_regcase().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the contents of the cell at the row and offset in the specified mSQL result set.
msql_result() returns the contents of one cell from a mSQL result set.
The field argument can be the field' s offset, or the field's name, or the field's table dot field's name (fieldname.tablename).
If the column name has been aliased ('select foo as bar from.. .'), use the alias instead of the column name.
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below).
As these functions return the contents of multiple cells in one function call, they' re MUCH quicker than msql_result().
Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.
Recommended high-performance alternatives: msql_fetch_row(), msql_fetch_array(), and msql_fetch_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success, FALSE on error.
msql_select_db() sets the current active database on the server that's associated with the specified link identifier.
If no link identifier is specified, the last opened link is assumed.
If no link is open, the function will try to establish a link as if msql_connect() was called, and use it.
Every subsequent call to msql_query() will be made on the active database.
See also: msql_connect(), msql_pconnect(), and msql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_select_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
msql_tablename() takes a result pointer returned by the msql_list_tables() function as well as an integer index and returns the name of a table.
The msql_numrows() function may be used to determine the number of tables in the result pointer.
Example 1. msql_tablename() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
See also mssql_execute(), mssql_free_statement() and mssql_init()
Prev
Home
Next
Microsoft SQL Server functions
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on error.
mssql_close() closes the link to a MS SQL Server database that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
Note that this isn' t usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
mssql_close() will not close persistent links generated by mssql_pconnect().
See also: mssql_connect(), mssql_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
A positive MS SQL link identifier on success, or FALSE on error.
mssql_connect() establishes a connection to a MS SQL server.
The servername argument has to be a valid servername that is defined in the 'interfaces' file.
In case a second call is made to mssql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling mssql_close().
See also mssql_pconnect(), mssql_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on failure.
mssql_data_seek() moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number.
The next call to mssql_fetch_row() would return that row.
See also: mssql_data_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note: if the stored procedure returns parameters or a return value these will be available after the call to mssql_execute() Note: if the stored procedure returns parameters or a return value these will be available after the call to mssql_execute() unless the stored procedure returns more than one result set.
In that case use mssql_next_result() to shift through the results.
See also mssql_bind(), mssql_free_statement() and mssql_init()
Prev
Home
Next
Up
PHP Manual
Prev
Next
An array that corresponds to the fetched row, or FALSE if there are no more rows.
mssql_fetch_array() is an extended version of mssql_fetch_row().
In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.
An important thing to note is that using mssql_fetch_array() is NOT significantly slower than using mssql_fetch_row(), while it provides a significant added value.
For further details, also see mssql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an object containing field information.
mssql_fetch_field() can be used in order to obtain information about fields in a certain query result.
If the field offset isn' t specified, the next field that wasn't yet retrieved by mssql_fetch_field() is retrieved.
The properties of the object are:
name - column name. if the column is a result of a function, this property is set to computed#N, where #N is a serial number.
column_source - the table from which the column was taken
max_length - maximum length of the column
numeric - 1 if the column is numeric
See also mssql_field_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
An object with properties that correspond to the fetched row, or FALSE if there are no more rows.
mssql_fetch_object() is similar to mssql_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
Speed-wise, the function is identical to mssql_fetch_array(), and almost as quick as mssql_fetch_row() (the difference is insignificant).
See also: mssql_fetch-array() and mssql_fetch-row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
An array that corresponds to the fetched row, or FALSE if there are no more rows.
mssql_fetch_row() fetches one row of data from the result associated with the specified result identifier.
The row is returned as an array.
Each result column is stored in an array offset, starting at offset 0.
Subsequent call to mssql_fetch_rows() would return the next row in the result set, or FALSE if there are no more rows.
See also: mssql_fetch_array(), mssql_fetch_object(), mssql_data_seek(), mssql_fetch_lengths(), and mssql_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
mssql_field_length
Up
PHP Manual
Prev
Next
Seeks to the specified field offset.
If the next call to mssql_fetch_field() won't include a field offset, this field would be returned.
See also: mssql_fetch_field().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
mssql_field_seek
Up
PHP Manual
Prev
Next
mssql_free_result() only needs to be called if you are worried about using too much memory while your script is running.
All result memory will automatically be freed when the script ends.
You may call mssql_free_result() with the result identifier as an argument and the associated result memory will be freed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
mssql_free_statement
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
See also mssql_bind(), mssql_execute() and mssql_free_statement()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
mssql_init
mssql_min_message_severity
PHP Manual
Prev
Next
Prev
Home
Next
mssql_min_error_severity
Up
PHP Manual
Prev
Next
When sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets.
This function will test for additional results available form the server.
If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set.
The function will return TRUE if an additional result set was available or FALSE otherwise.
Example 1. mssql_next_result() example
?php $link = mssql_connect ("localhost", "userid", "secret"); mssql_select_db("MyDB", $link); $SQL = "Select * from table1 select * from table2"; $rs = mssql_query($SQL, $link); do {while ($row = mssql_fetch_row($rs)) {}} while (mssql_next_result($rs)); mssql_free_result($rs); mssql_close ($link);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
mssql_num_fields() returns the number of fields in a result set.
See also: mssql_db_query(), mssql_query(), mssql_fetch_field(), and mssql_num_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mssql_num_rows() returns the number of rows in a result set.
See also: mssql_db_query(), mssql_query(), and mssql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
A positive MS SQL persistent link identifier on success, or FALSE on error.
mssql_pconnect() acts very much like mssql_connect() with two major differences.
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password.
If one is found, an identifier for it will be returned instead of opening a new connection.
Second, the connection to the SQL server will not be closed when the execution of the script ends.
Instead, the link will remain open for future use (mssql_close() will not close links established by mssql_pconnect()).
This type of links is therefore called 'persistent'.
Prev
Home
Next
Up
PHP Manual
Prev
Next
A positive MS SQL result identifier on success, or FALSE on error.
mssql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
If no link is open, the function tries to establish a link as if mssql_connect() was called, and use it.
See also: mssql_db_query(), mssql_select_db(), and mssql_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mssql_result() returns the contents of one cell from a MS SQL result set.
The field argument can be the field' s offset, the field's name or the field's table dot field's name (tablename.fieldname).
If the column name has been aliased ('select foo as bar from.. .'), it uses the alias instead of the column name.
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below).
As these functions return the contents of multiple cells in one function call, they' re MUCH quicker than mssql_result().
Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.
Recommended high-performance alternatives: mssql_fetch_row(), mssql_fetch_array(), and mssql_fetch_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on error
mssql_select_db() sets the current active database on the server that's associated with the specified link identifier.
If no link identifier is specified, the last opened link is assumed.
If no link is open, the function will try to establish a link as if mssql_connect() was called, and use it.
Every subsequent call to mssql_query() will be made on the active database.
See also: mssql_connect(), mssql_pconnect(), and mssql_query()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the maximum value that can be returned by a call to mt_rand().
See also mt_rand(), mt_srand() and getrandmax().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Many random number generators of older libcs have dubious or unknown characteristics and are slow.
By default, PHP uses the libc random number generator with the rand() By default, PHP uses the libc random number generator with the rand() function.
The mt_rand() function is a drop-in replacement for this.
It uses a random number generator with known characteristics using the Mersenne Twister, which will produce random numbers that should be suitable for seeding some kinds of cryptography (see the home page for details) and is four times faster than what the average libc provides.
If called without the optional min, max arguments mt_rand() returns a pseudo-random value between 0 and RAND_MAX.
If you want a random number between 5 and 15 (inclusive), for example, use mt_rand (5, 15).
Since 4.2.0 this is no longer necessary.
Note:
To get the same results in these versions the short example should be mt_rand (5, 11) to get a random number between 5 and 15.
See also mt_srand(), mt_getrandmax() and rand().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Seeds the random number generator with seed.
/ / seed with microseconds function make_seed() {list($usec, $sec) = explode( '', microtime()); return (float) $sec + ((float) $usec * 100000);} mt_srand(make_seed()); $randval = mt_rand();
Since PHP 4.2.0 it 's no longer necessary to seed the random number generator before using it.
See also mt_rand(), mt_getrandmax() and srand().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
Network Functions
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier.
If the link identifier isn' t specified, the last link opened by mysql_connect() is assumed.
Note:
If you are using transactions, you need to call mysql_affected_rows() after your INSERT, UPDATE, or DELETE query, not after the commit.
If the last query was a DELETE query with no WHERE clause, all of the records will have been deleted from the table but this function will return zero.
Note:
When using UPDATE, MySQL will not update columns where the new value is the same as the old value.
This creates the possiblity that mysql_affected_rows() may not actually equal the number of rows matched, only the number of rows that were literally affected by the query.
mysql_affected_rows() does not work with SELECT statements; only on statements which modify records.
To retrieve the number of rows returned by a SELECT, use mysql_num_rows().
If the last query failed, this function will return -1.
Example 1.
?php / * connect to database * / mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); / * this should return the correct numbers of deleted records * / mysql_query("DELETE FROM mytable WHERE id 10"); printf ("Records deleted: %d\n", mysql_affected_rows()); / * without a where clause in a delete statement, it should return 0 * / mysql_query("DELETE FROM mytable"); printf ("Records deleted: %d\n", mysql_affected_rows());?
The above example would produce the following output:
Records deleted:
10 Records deleted:
Example 2.
?php / * connect to database * / mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); / * Update records * / mysql_query("UPDATE mytable SET used=1 WHERE id 10"); printf ("Updated records: %d\n", mysql_affected_rows()); mysql_query("COMMIT");?
The above example would produce the following output:
Updated Records:
See also: mysql_num_rows(), mysql_info().
Prev
Home
Next
MySQL Functions
Up
PHP Manual
Prev
Next
If a database is specified, this will be the current database after the user has been changed.
Returns TRUE on success or FALSE on failure.
Note:
This function was introduced in PHP 3.0.13 and requires MySQL 3.23.3 or higher.
It is not available in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mysql_client_encoding() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
mysql_close() closes the connection to the MySQL server that's associated with the specified link identifier.
If link_identifier isn 't specified, the last opened link is used.
Using mysql_close() isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
See also freeing resources.
Example 1.
MySQL close example
?php $link = mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); print ("Connected successfully"); mysql_close($link);?
See also: mysql_connect(), and mysql_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a MySQL link identifier on success, or FALSE on failure.
mysql_connect() establishes a connection to a MySQL server.
The following defaults are assumed for missing optional parameters: server = 'localhost:3306', username = name of the user that owns the server process and password = empty password.
The server parameter can also include a port number. eg. "hostname:port" or a path to a socket eg. ": / path / to / socket" for the localhost.
Note:
Support for ":port" was added in PHP 3.0B4.
Support for ": / path / to / socket" was added in PHP 3.0.10.
You can suppress the error message on failure by prepending a @ to the function name.
If a second call is made to mysql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The new_link parameter modifies this behavior and makes mysql_connect() always open a new link, even if mysql_connect() was called before with the same parameters.
The client_flags parameter can be a combination of the constants MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE.
Note:
The new_link parameter became available in PHP 4.2.0
The client_flags parameter became available in PHP 4.3.0
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling mysql_close().
Example 1.
MySQL connect example
?php $link = mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); print ("Connected successfully"); mysql_close($link);?
See also mysql_pconnect() and mysql_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_create_db() attempts to create a new database on the server associated with the specified link identifier.
Returns TRUE on success or FALSE on failure.
Example 1.
MySQL create database example
?php $link = mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); if (mysql_create_db("my_db")) {print ("Database created successfully\n");} else {printf ("Error creating database: %s\n", mysql_error());}?
For downwards compatibility mysql_createdb() can also be used.
This is deprecated, however.
Note:
The function mysql_create_db() is deprecated.
It is preferable to use mysql_query() to issue a SQL CREATE DATABASE Statement instead.
See also: mysql_drop_db(), mysql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number.
The next call to mysql_fetch_row() would return that row.
Row_number starts at 0.
The row_number should be a value in the range from 0 to mysql_num_rows - 1.
Note:
The function mysql_data_seek() can be used in conjunction only with mysql_query(), not with mysql_unbuffered_query().
Example 1.
MySQL data seek example
?php $link = mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("samp_db") or die("Could not select database:". mysql_error()); $query = "SELECT last_name, first_name FROM friends"; $result = mysql_query($query) or die("Query failed: ". mysql_error()); / * fetch rows in reverse order * / for ($i = mysql_num_rows($result) - 1; $i = 0; $i- -) {if (!mysql_data_seek($result, $i)) {echo "Cannot seek to row $i:". mysql_error(). "\n"; continue;} if( !($row = mysql_fetch_object($result))) continue; echo "$row - last_name $row - first_name br / \n";} mysql_free_result($result);?
See also: mysql_query(), mysql_num_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_db_name() takes as its first parameter the result pointer from a call to mysql_list_dbs().
The row parameter is an index into the result set.
If an error occurs, FALSE is returned.
Use mysql_errno() and mysql_error() to determine the nature of the error.
Example 1. mysql_db_name() example
For backward compatibility, mysql_dbname() is also accepted.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive MySQL result resource to the query result, or FALSE on error.
The function also returns TRUE / FALSE for INSERT / UPDATE / DELETE queries to indicate success / failure.
mysql_db_query() selects a database and executes a query on it.
If the optional link identifier isn' t specified, the function will try to find an open link to the MySQL server and if no such link is found it'll try to create one as if mysql_connect() was called with no arguments.
Be aware that this function does NOT switch back to the database you were connected before.
In other words, you can 't use this function to temporarily run a sql query on another database, you would have to manually switch back.
Users are strongly encouraged to use the database.table syntax in their sql queries instead of this function.
See also mysql_connect() and mysql_query().
Note:
This function has been deprecated since PHP 4.0.6.
Do not use this function.
Use mysql_select_db() and mysql_query() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
mysql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
For downward compatibility mysql_dropdb() can also be used.
This is deprecated, however.
Note:
The function mysql_drop_db() is deprecated.
It is preferable to use mysql_query() to issue a SQL DROP DATABASE statement instead.
See also: mysql_create_db(), mysql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error number from the last MySQL function, or 0 (zero) if no error occurred.
Errors coming back from the MySQL database backend no longer issue warnings.
Instead, use mysql_errno() to retrieve the error code.
Note that this function only returns the error code from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.
Example 1. mysql_errno Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); mysql_select_db("nonexistentdb"); echo mysql_errno(). ":". mysql_error(). "\n"; mysql_select_db("kossu"); mysql_query("SELECT * FROM nonexistenttable"); echo mysql_errno(). ":". mysql_error(). "\n";?
The above example would produce the following output:
Unknown database 'nonexistentdb' 1146:
Table 'kossu.nonexistenttable' doesn't exist
Note:
If the optional argument is specified the given link is used to retrieve the error code.
If not, the last opened link is used.
See also: mysql_error()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error text from the last MySQL function, or '' (the empty string) if no error occurred.
Errors coming back from the MySQL database backend no longer issue warnings.
Instead, use mysql_error() to retrieve the error text.
Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.
Example 1. mysql_error Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); mysql_select_db("nonexistentdb"); echo mysql_errno(). ":". mysql_error(). "\n"; mysql_select_db("kossu"); mysql_query("SELECT * FROM nonexistenttable"); echo mysql_errno(). ":". mysql_error(). "\n";?
The above example would produce the following output:
Unknown database 'nonexistentdb' 1146:
Table 'kossu.nonexistenttable' doesn't exist
Note:
If the optional argument is specified the given link is used to retrieve the error message.
If not, the last opened link is used.
See also: mysql_errno()
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will escape the unescaped_string, so that it is safe to place it in a mysql_query().
This function is identical to mysql_real_escape_string() except that mysql_real_escape_string() takes a connection handler and escapes the string according to the current character set. mysql_escape_string() does not take a connection argument and does not respect the current charset setting.
Example 1. mysql_escape_string() example
?php $item = "Zak's Laptop"; $escaped_item = mysql_escape_string($item); printf ("Escaped string: %s\n", $escaped_item);?
The above example would produce the following output:
See also: mysql_real_escape_string(), addslashes(), and the magic_quotes_gpc directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
mysql_fetch_array() is an extended version of mysql_fetch_row().
In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.
If two or more columns of the result have the same field names, the last column will take precedence.
To access the other column( s) of the same name, you must use the numeric index of the column or make an alias for the column.
For aliased columns, you cannot access the contents with the original column name (by using'field 'in this example).
Example 1.
select table1.field as foo table2.field as bar from table1, table2
An important thing to note is that using mysql_fetch_array() is not significantly slower than using mysql_fetch_row(), while it provides a significant added value.
The optional second argument result_type in mysql_fetch_array() is a constant and can take the following values:
MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.
This feature was added in PHP 3.0.7.
MYSQL_BOTH is the default for this argument.
By using MYSQL_BOTH, you 'll get an array with both associative and number indices.
Using MYSQL_ASSOC, you only get associative indices (as mysql_fetch_assoc() works), using MYSQL_NUM, you only get number indices (as mysql_fetch_row() works).
Example 2. mysql_fetch_array with MYSQL_NUM
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_NUM)) {printf ("ID: %s Name: %s", $row[0], $row[1]);} mysql_free_result($result);?
Example 3. mysql_fetch_array with MYSQL_ASSOC
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {printf ("ID: %s Name: %s", $row["id"], $row["name"]);} mysql_free_result($result);?
Example 4. mysql_fetch_array with MYSQL_BOTH
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {printf ("ID: %s Name: %s", $row[0], $row["name"]);} mysql_free_result($result);?
For further details, see also mysql_fetch_row() and mysql_fetch_assoc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array that corresponds to the fetched row, or FALSE if there are no more rows.
mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter.
It only returns an associative array.
This is the way mysql_fetch_array() originally worked.
If you need the numeric indices as well as the associative, use mysql_fetch_array().
If two or more columns of the result have the same field names, the last column will take precedence.
To access the other column( s) of the same name, you either need to access the result with numeric indices by using mysql_fetch_row() or add alias names.
See the example at the mysql_fetch_array() description about aliases.
An important thing to note is that using mysql_fetch_assoc() is not significantly slower than using mysql_fetch_row(), while it provides a significant added value.
Example 1.
An expanded mysql_fetch_assoc() example
?php $conn = mysql_connect( "localhost", "mysql_user", "mysql_password"); if (!$conn) {echo "Unable to connect to DB: ". mysql_error(); exit;} if (!mysql_select_db("mydbname")) {echo "Unable to select mydbname:". mysql_error(); exit;} $sql = "SELECT id as userid, fullname, userstatus FROM sometable WHERE userstatus = 1"; $result = mysql_query($sql); if (!$result) {echo "Could not successfully run query ($sql) from DB: ". mysql_error(); exit;} if (mysql_num_rows($result) == 0) {echo "No rows found, nothing to print so am exiting"; exit;} / / While a row of data exists, put that row in $row as an associative array / / Note:
If you 're expecting just one row, no need to use a loop / / Note:
If you put extract( $row); inside the following loop, you'll / / then create $userid, $fullname, and $userstatus while ($row = mysql_fetch_assoc($result)) {echo $row["userid"]; echo $row["fullname"]; echo $row["userstatus"];} mysql_free_result($result);?
See also mysql_fetch_row(), mysql_fetch_array(), mysql_query(), and mysql_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an object containing field information.
mysql_fetch_field() can be used in order to obtain information about fields in a certain query result.
If the field offset isn' t specified, the next field that wasn't yet retrieved by mysql_fetch_field() is retrieved.
The properties of the object are:
name - column name
table - name of the table the column belongs to
max_length - maximum length of the column
not_null - 1 if the column cannot be NULL
primary_key - 1 if the column is a primary key
unique_key - 1 if the column is a unique key
multiple_key - 1 if the column is a non-unique key
numeric - 1 if the column is numeric
blob - 1 if the column is a BLOB
type - the type of the column
unsigned - 1 if the column is unsigned
zerofill - 1 if the column is zero-filled
Example 1. mysql_fetch_field()
?php mysql_connect( 'localhost:3306', $user, $password) or die("Could not connect: ". mysql_error()); mysql_select_db("database"); $result = mysql_query("select * from table") or die("Query failed:". mysql_error()); / * get column metadata * / $i = 0; while ($i mysql_num_fields($result)) {echo "Information for column $i: br / \n"; $meta = mysql_fetch_field($result); if (!$meta) {echo "No information available br / \n";} echo "pre blob: $meta - blob max_length: $meta - max_length multiple_key: $meta - multiple_key name: $meta - name not_null: $meta - not_null numeric: $meta - numeric primary_key: $meta - primary_key table: $meta - table type: $meta - type unique_key: $meta - unique_key unsigned: $meta - unsigned zerofill: $meta - zerofill / pre"; $i++;} mysql_free_result($result);?
See also mysql_field_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the lengths of each field in the last row fetched by mysql_fetch_row(), or FALSE on error.
mysql_fetch_lengths() stores the lengths of each result column in the last row returned by mysql_fetch_row(), mysql_fetch_array(), and mysql_fetch_object() in an array, starting at offset 0.
See also: mysql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an object with properties that correspond to the fetched row, or FALSE if there are no more rows.
mysql_fetch_object() is similar to mysql_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
?php / * this is valid * / echo $row - field; / * this is invalid * / echo $row - 0;?
Speed-wise, the function is identical to mysql_fetch_array(), and almost as quick as mysql_fetch_row() (the difference is insignificant).
Example 1. mysql_fetch_object() example
See also: mysql_fetch_array() and mysql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
mysql_fetch_row() fetches one row of data from the result associated with the specified result identifier.
The row is returned as an array.
Each result column is stored in an array offset, starting at offset 0.
Subsequent call to mysql_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
See also: mysql_fetch_array(), mysql_fetch_object(), mysql_data_seek(), mysql_fetch_lengths(), and mysql_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_flags() returns the field flags of the specified field.
The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode().
The following flags are reported, if your version of MySQL is current enough to support them: "not_null", "primary_key", "unique_key", "multiple_key", "blob", "unsigned", "zerofill", "binary", "enum", "auto_increment", "timestamp".
For downward compatibility mysql_fieldflags() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_len() returns the length of the specified field.
For downward compatibility mysql_fieldlen() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_name() returns the name of the specified field index. result must be a valid result identifier and field_index is the numerical offset of the field.
e.g.
The index of the third field would actually be 2, the index of the fourth field would be 3 and so on.
Example 1. mysql_field_name() example
/* The users table consists of three fields: * user_id * username * password. * / $link = mysql_connect( 'localhost', "mysql_user", "mysql_password"); mysql_select_db($dbname, $link) or die("Could not set $dbname: ". mysql_error()); $res = mysql_query("select * from users", $link); echo mysql_field_name($res, 0). "\n"; echo mysql_field_name($res, 2);
The above example would produce the following output:
For downwards compatibility mysql_fieldname() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Seeks to the specified field offset.
If the next call to mysql_fetch_field() doesn't include a field offset, the field offset specified in mysql_field_seek() will be returned.
See also: mysql_fetch_field().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the name of the table that the specifed field is in.
For downward compatibility mysql_fieldtable() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_type() is similar to the mysql_field_name() function.
The arguments are identical, but the field type is returned instead.
The field type will be one of "int", "real", "string", "blob", and others as detailed in the MySQL documentation.
Example 1.
MySQL field types
?php mysql_connect( "localhost", "mysql_username", "mysql_password"); mysql_select_db("mysql"); $result = mysql_query("SELECT * FROM func"); $fields = mysql_num_fields($result); $rows = mysql_num_rows($result); $table = mysql_field_table($result, 0); echo "Your '".$table ." 'table has ".$fields. "fields and ".$rows." record(s)\n"; echo "The table has the following fields:\n"; for ($i=0; $i $fields; $i++) {$type = mysql_field_type($result, $i); $name = mysql_field_name($result, $i); $len = mysql_field_len($result, $i); $flags = mysql_field_flags($result, $i); echo $type. "".$name." ".$len. "".$flags ."\n";} mysql_free_result($result); mysql_close();?
The above example would produce the following output:
Your 'func' table has 4 fields and 1 record(s) The table has the following fields: string name 64 not_null primary_key binary int ret 1 not_null string dl 128 not_null string type 9 not_null enum
For downward compatibility mysql_fieldtype() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_free_result() will free all memory associated with the result identifier result.
mysql_free_result() only needs to be called if you are concerned about how much memory is being used for queries that return large result sets.
All associated result memory is automatically freed at the end of the script 's execution.
Returns TRUE on success or FALSE on failure.
For downward compatibility mysql_freeresult() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_client_info() returns a string that represents the client library version.
Example 1. mysql_get_client_info Example
The above example would produce the following output:
See also: mysql_get_host_info(), mysql_get_proto_info() and mysql_get_server_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_host_info() returns a string describing the type of connection in use for the connection link_identifier, including the server host name.
If link_identifier is omitted, the last opened connection will be used.
Example 1. mysql_get_host_info Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); printf ("MySQL host info: %s\n", mysql_get_host_info());?
The above example would produce the following output:
See also: mysql_get_client_info(), mysql_get_proto_info() and mysql_get_server_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_proto_info() returns the protocol version used by connection link_identifier.
If link_identifier is omitted, the last opened connection will be used.
Example 1. mysql_get_proto_info Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); printf ("MySQL protocol version: %s\n", mysql_get_proto_info());?
The above example would produce the following output:
See also: mysql_get_client_info(), mysql_get_host_info() and mysql_get_server_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_server_info() returns the server version used by connection link_identifier.
If link_identifier is omitted, the last opened connection will be used.
Example 1. mysql_get_server_info Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); printf ("MySQL server version: %s\n", mysql_get_server_info());?
The above example would produce the following output:
See also: mysql_get_client_info(), mysql_get_host_info() and mysql_get_proto_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_info() returns detailed information about the last query using the given link_identifier.
If link_identifier isn 't specified, the last opened link is assumed.
For all other FALSE.
Example 1.
Relevant MySQL Statements
See also: mysql_affected_rows()
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_insert_id() returns the ID generated for an AUTO_INCREMENT column by the previous INSERT query using the given link_identifier.
If link_identifier isn 't specified, the last opened link is assumed.
mysql_insert_id() returns 0 if the previous query does not generate an AUTO_INCREMENT value.
If you need to save the value for later, be sure to call mysql_insert_id() immediately after the query that generates the value.
Note:
The value of the MySQL SQL function LAST_INSERT_ID() always contains the most recently generated AUTO_INCREMENT value, and is not reset between queries.
Warning
mysql_insert_id() converts the return type of the native MySQL C API function mysql_insert_id() to a type of long (named int in PHP).
If your AUTO_INCREMENT column has a column type of BIGINT, the value returned by mysql_insert_id() will be incorrect.
Instead, use the internal MySQL SQL function LAST_INSERT_ID() in an SQL query.
Example 1. mysql_insert_id Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); mysql_query("INSERT INTO mytable (product) values ('kossu')"); printf ("Last inserted record has id %d\n", mysql_insert_id());?
See also: mysql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_dbs() will return a result pointer containing the databases available from the current mysql daemon.
Use the mysql_tablename() function to traverse this result pointer, or any function for result tables.
Example 1. mysql_list_dbs() example
The above example would produce the following output:
database1 database2 database3...
Note:
The above code would just as easily work with mysql_fetch_row() or other similar functions.
For downward compatibility mysql_listdbs() can also be used.
This is deprecated however.
See also mysql_db_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_fields() retrieves information about the given table name.
Arguments are the database name and the table name.
A result pointer is returned which can be used with mysql_field_flags(), mysql_field_len(), mysql_field_name(), and mysql_field_type().
Example 1. mysql_list_fields() example
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $fields = mysql_list_fields("database1", "table1", $link); $columns = mysql_num_fields($fields); for ($i = 0; $i $columns; $i++) {echo mysql_field_name($fields, $i). "\n";}
The above example would produce the following output:
For downward compatibility mysql_listfields() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_processes() returns a result pointer describing the current server threads.
Example 1. mysql_list_processes() example
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $result = mysql_list_processes($link); while ($row = mysql_fetch_row($result)) {printf("%s %s %s %s %s\n", $row["Id"], $row["Host"], $row["db"], $row["Command"], $row["Time"]);} mysql_free_result ($result);?
The above example would produce the following output:
See also: mysql_thread_id()
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_tables() takes a database name and returns a result pointer much like the mysql_query() function.
You can use the mysql_tablename() function to extract the actual table names from the result pointer, or any other result table function such as mysql_fetch_assoc().
The database parameter is the name of the database to retrieve the list of tables from.
Upon failure, mysql_list_tables() returns FALSE.
For downward compatibility, the function alias named mysql_listtables() can be used.
This is deprecated however and is not recommended.
Example 1. mysql_list_tables Example
?php $dbname = 'mysql_dbname'; if (!mysql_connect('mysql_host', 'mysql_user', 'mysql_password')) {print'Could not connect to mysql'; exit;} $result = mysql_list_tables($dbname); if (!$result) {print "DB Error, could not list tables\n"; print'MySQL Error:'. mysql_error(); exit;} while ($row = mysql_fetch_row($result)) {print "Table: $row[0]\n";} mysql_free_result($result);?
See also: mysql_list_dbs(), and mysql_tablename().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_num_fields() returns the number of fields in a result set.
See also: mysql_select_db(), mysql_query(), mysql_fetch_field(), mysql_num_rows().
For downward compatibility mysql_numfields() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_num_rows() returns the number of rows in a result set.
This command is only valid for SELECT statements.
To retrieve the number of rows affected by a INSERT, UPDATE or DELETE query, use mysql_affected_rows().
Example 1. mysql_num_rows() example
Note:
If you use mysql_unbuffered_query(), mysql_num_rows() will not return the correct value until all the rows in the result set have been retrieved.
See also: mysql_affected_rows(), mysql_connect(), mysql_data_seek(), mysql_select_db(), and mysql_query().
For downward compatibility mysql_numrows() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive MySQL persistent link identifier on success, or FALSE on error.
mysql_pconnect() establishes a connection to a MySQL server.
The following defaults are assumed for missing optional parameters: server = 'localhost:3306', username = name of the user that owns the server process and password = empty password.
The client_flags parameter can be a combination of the constants MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE.
The server parameter can also include a port number. eg. "hostname:port" or a path to a socket eg. ": / path / to / socket" for the localhost.
Note:
Support for ":port" was added in 3.0B4.
Support for the ": / path / to / socket" was added in 3.0.10.
mysql_pconnect() acts very much like mysql_connect() with two major differences.
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password.
If one is found, an identifier for it will be returned instead of opening a new connection.
Second, the connection to the SQL server will not be closed when the execution of the script ends.
Instead, the link will remain open for future use (mysql_close() will not close links established by mysql_pconnect()).
The optional client_flags parameter became available in PHP 4.3.0.
This type of link is therefore called 'persistent'.
Note:
Note, that these kind of links only work if you are using a module version of PHP.
See the Persistent Database Connections section for more information.
Warning
Using persistent connections can require a bit of tuning of your Apache and MySQL configurations to ensure that you do not exceed the number of connections allowed by MySQL.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_ping() checks whether or not the connection to the server is working.
If it has gone down, an automatic reconnection is attempted.
This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary. mysql_ping() returns TRUE if the connection to the server is working, otherwise FALSE.
See also: mysql_thread_id(), mysql_list_processes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
If link_identifier isn 't specified, the last opened link is assumed.
If no link is open, the function tries to establish a link as if mysql_connect() was called with no arguments, and use it.
The optional result_mode parameter can be MYSQL_USE_RESULT and MYSQL_STORE_RESULT.
It defaults to MYSQL_STORE_RESULT, so the result is buffered.
See also mysql_unbuffered_query() for the counterpart of this behaviour.
Note:
The query string should not end with a semicolon.
Only for SELECT,SHOW,EXPLAIN or DESCRIBE statements mysql_query() returns a resource identifier or FALSE if the query was not executed correctly.
For other type of SQL statements, mysql_query() returns TRUE on success and FALSE on error.
A non - FALSE return value means that the query was legal and could be executed by the server.
It does not indicate anything about the number of rows affected or returned.
It is perfectly possible for a query to succeed but affect no rows or return no rows.
The following query is syntactically invalid, so mysql_query() fails and returns FALSE:
Example 1. mysql_query()
php $result = mysql_query( "SELECT * WHERE 1=1") or die("Invalid query: ". mysql_error());?
The following query is semantically invalid if my_col is not a column in the table my_tbl, so mysql_query() fails and returns FALSE:
Example 2. mysql_query()
?php $result = mysql_query( "SELECT my_col FROM my_tbl") or die("Invalid query: ". mysql_error());?
mysql_query() will also fail and return FALSE if you don't have permission to access the table(s) referenced by the query.
Assuming the query succeeds, you can call mysql_num_rows() to find out how many rows were returned for a SELECT statment or mysql_affected_rows() to find out how many rows were affected by a DELETE, INSERT, REPLACE, or UPDATE statement.
Only for SELECT,SHOW,DESCRIBE or EXPLAIN statements, mysql_query() returns a new result identifier that you can pass to mysql_fetch_array() and other functions dealing with result tables.
When you are done with the result set, you can free the resources associated with it by calling mysql_free_result().
Although, the memory will automatically be freed at the end of the script 's execution.
See also: mysql_num_rows(), mysql_affected_rows(), mysql_unbuffered_query(), mysql_free_result(), mysql_fetch_array(), mysql_fetch_row(), mysql_fetch_assoc(), mysql_result(), mysql_select_db(), and mysql_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will escape special characters in the unescaped_string, taking into account the current charset of the connection so that it is safe to place it in a mysql_query().
Example 1. mysql_real_escape_string() example
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $item = "Zak's and Derick's Laptop"; $escaped_item = mysql_real_escape_string($item); printf ("Escaped string: %s\n", $escaped_item);?
The above example would produce the following output:
Zak\' s and Derick\ 's Laptop
See also: mysql_escape_string(), mysql_character_set_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_result() returns the contents of one cell from a MySQL result set.
The field argument can be the field' s offset, or the field's name, or the field's table dot field name (tablename.fieldname).
If the column name has been aliased ('select foo as bar from.. .'), use the alias instead of the column name.
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below).
As these functions return the contents of multiple cells in one function call, they' re MUCH quicker than mysql_result().
Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.
Calls to mysql_result() should not be mixed with calls to other functions that deal with the result set.
Recommended high-performance alternatives: mysql_fetch_row(), mysql_fetch_array(), and mysql_fetch_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
mysql_select_db() sets the current active database on the server that's associated with the specified link identifier.
If no link identifier is specified, the last opened link is assumed.
If no link is open, the function will try to establish a link as if mysql_connect() was called without arguments, and use it.
Every subsequent call to mysql_query() will be made on the active database.
See also: mysql_connect(), mysql_pconnect(), and mysql_query().
For downward compatibility mysql_selectdb() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_stat() returns the current server status.
For a complete list of other status variables you have to use the SHOW STATUS SQL command.
Example 1. mysql_stat() example
The above example would produce the following output:
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_tablename() takes a result pointer returned by the mysql_list_tables() function as well as an integer index and returns the name of a table.
The mysql_num_rows() function may be used to determine the number of tables in the result pointer.
Example 1. mysql_tablename() Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); $result = mysql_list_tables("mydb"); for ($i = 0; $i mysql_num_rows($result); $i++) printf ("Table: %s\n", mysql_tablename($result, $i)); mysql_free_result($result);?
See also: mysql_list_tables().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_thread_id() returns the current thread ID.
If the connection is lost and you reconnect with mysql_ping(), the thread ID will change.
This means you should not get the thread ID and store it for later.
You should get it when you need it.
Example 1. mysql_thread_id() example
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $thread_id = mysql_thread_id($link); if ($thread_id) {printf ("current thread id is %d\n", $thread_id);}?
The above example would produce the following output:
current thread id is 73
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_unbuffered_query() sends a SQL query query to MySQL, without fetching and buffering the result rows automatically, as mysql_query() does.
On the one hand, this saves a considerable amount of memory with SQL queries that produce large result sets.
On the other hand, you can start working on the result set immediately after the first row has been retrieved: you don 't have to wait until the complete SQL query has been performed.
When using multiple DB-connects, you have to specify the optional parameter link_identifier.
The optional result_mode parameter can be MYSQL_USE_RESULT and MYSQL_STORE_RESULT.
It defaults to MYSQL_USE_RESULT, so the result is not buffered.
See also mysql_query() for the counterpart of this behaviour.
Note:
The benefits of mysql_unbuffered_query() come at a cost:
You cannot use mysql_num_rows() on a result set returned from mysql_unbuffered_query().
You also have to fetch all result rows from an unbuffered SQL query, before you can send a new SQL query to MySQL.
See also: mysql_query().
Prev
Home
Next
Up
Mohawk Software session handler functions
PHP Manual
Prev
Next
This function implements a sort algorithm that orders alphanumeric strings in the way a human being would.
This is described as a "natural ordering".
natcasesort() is a case insensitive version of natsort().
See natsort() for an example of the difference between this algorithm and the regular computer string sorting algorithms.
Martin Pool 's Natural Order String Comparison page.
See also sort(), natsort(), strnatcmp(), and strnatcasecmp().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is described as a "natural ordering".
An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen below:
Example 1. natsort() example
?php $array1 = $array2 = array ("img12.png", "img10.png", "img2.png", "img1.png"); sort($array1); echo "Standard sorting\n"; print_r($array1); natsort($array2); echo "\nNatural order sorting\n"; print_r($array2);?
The code above will generate the following output:
Standard sorting Array ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Natural order sorting Array ([3] = img1.png [2] = img2.png [1] = img10.png [0] = img12.png)
Note:
If you' re wanting to maintain index / value associations, consider using usort($arr, 'strnatcmp').
See also natcasesort(), strnatcmp(), and strnatcasecmp().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ncurses_getmouse() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ncurses_mousemask() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the array element in the next place that 's pointed by the internal array pointer, or FALSE if there are no more elements.
next() behaves like current(), with one difference.
That means it returns the next array element and advances the internal array pointer by one.
If advancing the internal array pointer results in going beyond the end of the element list, next() returns FALSE.
Warning
If the array contains empty elements, or elements that have a key value of 0 then this function will return FALSE for these elements as well.
To properly traverse an array which may contain empty elements or elements with key values of 0 see the each() function.
See also current(), end(), prev(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Starting with PHP 4.0.5, nl2br() is now XHTML compliant.
See also htmlspecialchars(), htmlentities(), wordwrap(), and str_replace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
Unified ODBC functions
PHP Manual
Prev
Next
Note:
Example 1. number_format() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function discards the contents of the output buffer and turns off output buffering.
See also ob_start(), ob_clean() and ob_end_flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will send the contents of the output buffer (if any) and turn output buffering off.
If you want to further process the buffer' s contents you have to call ob_get_contents() before ob_end_flush() as the buffer contents are discarded after ob_end_flush() is called.
See also ob_start(), ob_get_contents(), ob_flush() and ob_end_clean().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This will return the contents of the output buffer or FALSE, if output buffering isn 't active.
See also ob_start() and ob_get_length().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. ob_gzhandler() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
It converts the string encoded in internal_encoding to output_encoding.
internal_encoding and output_encoding should be defined by iconv_set_encoding() or in the configuration file php.ini.
Example 1. ob_iconv_handler() example:
See also: iconv_get_encoding(), iconv_set_encoding(), and output-control functions.
Prev
Home
Next
Up
Image functions
PHP Manual
Prev
Next
ob_implicit_flush() will turn implicit flushing on or off (if no flag is given, it defaults to on).
Implicit flushing will result in a flush operation after every output call, so that explicit calls to flush() will no longer be needed.
Turning implicit flushing on will disable output buffering, the output buffers current output will be sent as if ob_end_flush() had been called.
See also flush(), ob_start(), and ob_end_flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The contents of this internal buffer may be copied into a string variable using ob_get_contents().
When output_callback is called, it will receive the contents of the output buffer as its parameter and is expected to return a new output buffer as a result, which will be sent to the browser.
Just make sure that you call ob_end_flush() the appropriate number of times.
ob_end_clean(), ob_end_flush(), ob_clean(), ob_flush() and ob_start() may not be called from a callback function.
If you would like to delete the contents of a buffer, return "" (a null string) from callback function.
See also ob_get_contents(), ob_end_flush(), ob_end_clean(), ob_implicit_flush() and ob_gzhandler().
Prev
Home
Next
Up
PHP Manual
Prev
Next
OCIBindByName() binds the PHP variable variable to the Oracle placeholder ph_name.
The length The length parameter sets the maximum length for the bind.
If you set length to -1 OCIBindByName() will use the current length of variable to set the maximum length.
The length is not used for abstract Datatypes and should be set to -1.
The type variable tells oracle, what kind of descriptor we want to use.
OCI_B_FILE (Binary-File), OCI_B_CFILE (Character-File), OCI_B_CLOB (Character-LOB), OCI_B_BLOB (Binary-LOB) and OCI_B_ROWID (ROWID).
Example 1.
Warning
Prev
Home
Next
Oracle 8 functions
Up
OCICancel
PHP Manual
Prev
Next
If you do not want read more data from a cursor, then call OCICancel().
Prev
Home
Next
OCIBindByName
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCICancel
Up
OCICollAssign
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCICollAssign
Up
OCICollGetElem
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
OCICollAssignElem
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCICollAssignElem
Up
OCICollMax
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCICollGetElem
Up
OCICollSize
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCICollMax
Up
OCICollTrim
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCICollSize
Up
OCIColumnIsNULL
PHP Manual
Prev
Next
OCIColumnIsNULL() returns TRUE if the returned column column in the result from the statement stmt is NULL.
You can either use the column-number (1-Based) or the column-name for the col parameter.
Prev
Home
Next
OCICollTrim
Up
OCIColumnName
PHP Manual
Prev
Next
OCIColumnName() returns the name of the column corresponding to the column number (1-based) that is passed in.
Example 1.
?php print "HTML PRE \n"; $conn = OCILogon("scott", "tiger"); $stmt = OCIParse($conn ,"select * from emp"); OCIExecute($stmt); print" TABLE BORDER=\"1\ ""; print "TR"; print "TH Name / TH"; print "TH Type / TH"; print "TH Length / TH"; print "/ TR"; $ncols = OCINumCols($stmt); for ($i = 1; $i = $ncols; $i+ +) {$column_name = OCIColumnName($stmt,$i); $column_type = OCIColumnType($stmt,$i); $column_size = OCIColumnSize($stmt,$i); print "TR"; print "TD $column_name / TD"; print "TD $column_type / TD"; print "TD $column_size / TD"; print "/ TR";} print "/ TABLE \n"; OCIFreeStatement($stmt); OCILogoff($conn); print" / PRE "; print" / HTML \n";?
See also OCINumCols(), OCIColumnType(), and OCIColumnSize().
Prev
Home
Next
OCIColumnIsNULL
Up
OCIColumnPrecision
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCIColumnName
Up
OCIColumnScale
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCIColumnPrecision
Up
OCIColumnSize
PHP Manual
Prev
Next
OCIColumnSize() returns the size of the column as given by Oracle.
You can either use the column-number (1-Based) or the column-name for the col parameter.
Example 1.
See also OCINumCols(), OCIColumnName(), and OCIColumnSize().
Prev
Home
Next
OCIColumnScale
Up
OCIColumnType
PHP Manual
Prev
Next
OCIColumnType() returns the data type of the column corresponding to the column number (1-based) that is passed in.
Example 1.
?php print "HTML PRE \n"; $conn = OCILogon("scott", "tiger"); $stmt = OCIParse($conn ,"select * from emp"); OCIExecute($stmt); print" TABLE BORDER=\"1\ ""; print "TR"; print "TH Name / TH"; print "TH Type / TH"; print "TH Length / TH"; print "/ TR"; $ncols = OCINumCols($stmt); for ($i = 1; $i = $ncols; $i+ +) {$column_name = OCIColumnName($stmt,$i); $column_type = OCIColumnType($stmt,$i); $column_size = OCIColumnSize($stmt,$i); print "TR"; print "TD $column_name / TD"; print "TD $column_type / TD"; print "TD $column_size / TD"; print "/ TR";} print "/ TABLE \n"; OCIFreeStatement($stmt); OCILogoff($conn); print" / PRE "; print" / HTML \n";?
See also OCINumCols(), OCIColumnName(), and OCIColumnSize().
Prev
Home
Next
OCIColumnSize
Up
OCIColumnTypeRaw
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCIColumnType
Up
OCICommit
PHP Manual
Prev
Next
Oracle reports: '. $error['message'];} / / Close connection OCILogoff($conn);?
Prev
Home
Next
OCIColumnTypeRaw
Up
OCIDefineByName
PHP Manual
Prev
Next
OCIDefineByName() binds PHP variables for fetches of SQL-Columns.
Be careful that Oracle uses ALL-UPPERCASE column-names, whereby in your select you can also write lowercase.
OCIDefineByName() expects the Column-Name to be in uppercase.
If you define a variable that doesn 't exists in you select statement, no error will be given!
If you need to define an abstract datatype (LOB / ROWID / BFILE) you need to allocate it first using OCINewDescriptor() function.
See also the OCIBindByName() function.
Example 1.
?php / * OCIDefineByName example - thies@thieso.net (980219) * / $conn = OCILogon("scott" ,"tiger"); $stmt = OCIParse($conn ,"select empno, ename from emp"); / * the define MUST be done BEFORE ociexecute! * / OCIDefineByName($stmt ,"EMPNO",$empno); OCIDefineByName($stmt ,"ENAME",$ename); OCIExecute($stmt); while (OCIFetch($stmt)) {echo "empno :".$empno ."\n"; echo "ename :".$ename ."\n";} OCIFreeStatement($stmt); OCILogoff($conn);?
Prev
Home
Next
OCICommit
Up
OCIError
PHP Manual
Prev
Next
OCIError() returns the last error found.
If the optional stmt_BAR_ conn _BAR_global is not provided, the last error encountered is returned.
If no error is found, OCIError() returns FALSE.
In this array, code consists the oracle error code and message the oracle errorstring.
Prev
Home
Next
OCIDefineByName
Up
OCIExecute
PHP Manual
Prev
Next
OCIExecute() executes a previously parsed statement. (see OCIParse()).
The optional mode allows you to specify the execution-mode (default is OCI_COMMIT_ON_SUCCESS).
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
OCIError
Up
OCIFetch
PHP Manual
Prev
Next
OCIFetch() fetches the next row (for SELECT statements) into the internal result-buffer.
Prev
Home
Next
OCIExecute
Up
OCIFetchInto
PHP Manual
Prev
Next
OCIFetchInto() fetches the next row (for SELECT statements) into the result array.
OCIFetchInto() will overwrite the previous content of result.
The mode parameter allows you to change the default behaviour.
You can specify more than one flag by simply adding them up (eg OCI_ASSOC+OCI_RETURN_NULLS).
OCI_ASSOC Return an associative array.
OCI_NUM Return an numbered array starting with zero. (DEFAULT)
OCI_RETURN_NULLS Return empty columns.
OCI_RETURN_LOBS Return the value of a LOB instead of the descriptor.
A simple OCIFetchInto() example
See also OCIFetch() and OCIExecute().
Prev
Home
Next
OCIFetch
Up
OCIFetchStatement
PHP Manual
Prev
Next
OCIFetchStatement() fetches all the rows from a result into a user-defined array.
OCIFetchStatement() returns the number of rows fetched.
Example 1.
Prev
Home
Next
OCIFetchInto
Up
OCIFreeCollection
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCIFetchStatement
Up
OCIFreeCursor
PHP Manual
Prev
Next
OCIFreeCursor() returns TRUE if successful, or FALSE if unsuccessful.
Prev
Home
Next
OCIFreeCollection
Up
PHP Manual
Prev
Next
Prev
Home
Next
OCIFreeCursor
Up
OCIFreeStatement
PHP Manual
Prev
Next
OCIFreeStatement() returns TRUE if successful, or FALSE if unsuccessful.
Prev
Home
Next
Up
OCIInternalDebug
PHP Manual
Prev
Next
Set onoff to 0 to turn debug output off, 1 to turn it on.
Prev
Home
Next
OCIFreeStatement
Up
OCILoadLob
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCIInternalDebug
Up
OCILogOff
PHP Manual
Prev
Next
See also freeing resources.
Prev
Home
Next
OCILoadLob
Up
OCILogon
PHP Manual
Prev
Next
OCILogon() returns an connection identifier needed for most other OCI calls.
The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in tnsnames.ora to which you want to connect.
If the optional third parameter is not specified, PHP uses the environment variables ORACLE_SID (Oracle instance) or TWO_TASK (tnsnames.ora) to determine which database to connect to.
Connections are shared at the page level when using OCILogon().
This means that commits and rollbacks apply to all open transactions in the page, even if you have created multiple connections.
This example demonstrates how the connections are shared.
Example 1.
?php print "HTML PRE"; $db = ""; $c1 = ocilogon("scott" ,"tiger",$db); $c2 = ocilogon("scott" ,"tiger",$db); function create_table($conn) {$stmt = ociparse($conn ,"create table scott.hallo (test varchar2(64))"); ociexecute($stmt); echo $conn. "created table\n\n";} function drop_table($conn) {$stmt = ociparse($conn ,"drop table scott.hallo"); ociexecute($stmt); echo $conn." dropped table\n\n";} function insert_data($conn) {$stmt = ociparse($conn ,"insert into scott.hallo values('$conn '_BAR_ _BAR_' '_BAR_ _BAR_ to_char(sysdate ,'DD-MON-YY HH24:MI:SS'))"); ociexecute($stmt,OCI_DEFAULT); echo $conn. "inserted hallo\n\n";} function delete_data($conn) {$stmt = ociparse($conn ,"delete from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn." deleted hallo\n\n";} function commit($conn) {ocicommit($conn); echo $conn. "committed\n\n";} function rollback($conn) {ocirollback($conn); echo $conn." rollback\n\n";} function select_data($conn) {$stmt = ociparse($conn ,"select * from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn ."----selecting\n\n"; while (ocifetch($stmt)) echo $conn. "".ociresult($stmt ,"TEST")." \n\n"; echo $conn ."----done\n\n";} create_table($c1); insert_data($c1); / / Insert a row using c1 insert_data($c2); / / Insert a row using c2 select_data($c1); / / Results of both inserts are returned select_data($c2); rollback($c1); / / Rollback using c1 select_data($c1); / / Both inserts have been rolled back select_data($c2); insert_data($c2); / / Insert a row using c2 commit($c2); / / commit using c2 select_data($c1); / / result of c2 insert is returned delete_data($c1); / / delete all rows in table using c1 select_data($c1); / / no rows returned select_data($c2); / / no rows returned commit($c1); / / commit using c1 select_data($c1); / / no rows returned select_data($c2); / / no rows returned drop_table($c1); print "/ PRE / HTML";?
See also OCIPLogon() and OCINLogon().
Prev
Home
Next
OCILogOff
Up
OCINewCollection
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCILogon
Up
OCINewCursor
PHP Manual
Prev
Next
Example 1.
?php / / suppose your stored procedure info.output returns a ref cursor in :data $conn = OCILogon( "scott" ,"tiger"); $curs = OCINewCursor($conn); $stmt = OCIParse($conn ,"begin info.output(:data); end ;"); ocibindbyname($stmt ,"data", $curs,-1,OCI_B_CURSOR); ociexecute($stmt); ociexecute($curs); while (OCIFetchInto($curs, $data)) {var_dump($data);} OCIFreeStatement($stmt); OCIFreeCursor($curs); OCILogoff($conn);?
Example 2.
?php print "HTML BODY"; $conn = OCILogon("scott" ,"tiger"); $count_cursor = "CURSOR(select count(empno) num_emps from emp ". "where emp.deptno = dept.deptno) as EMPCNT from dept"; $stmt = OCIParse($conn ,"select deptno,dname,$count_cursor"); ociexecute($stmt); print" TABLE BORDER=\"1\ ""; print "TR"; print "TH DEPT NAME / TH"; print "TH DEPT # / TH"; print "TH # EMPLOYEES / TH"; print "/ TR"; while (OCIFetchInto($stmt, $data,OCI_ASSOC)) {print "TR"; $dname = $data["DNAME"]; $deptno = $data["DEPTNO"]; print "TD $dname / TD"; print "TD $deptno / TD"; ociexecute($data["EMPCNT"]); while (OCIFetchInto($data["EMPCNT"], $subdata,OCI_ASSOC)) {$num_emps = $subdata["NUM_EMPS"]; print "TD $num_emps / TD";} print "/ TR";} print "/ TABLE"; print "/ BODY / HTML"; OCIFreeStatement($stmt); OCILogoff($conn);?
Prev
Home
Next
OCINewCollection
Up
OCINewDescriptor
PHP Manual
Prev
Next
OCINewDescriptor() allocates storage to hold descriptors or LOB locators.
Valid values for type are OCI_D_FILE, OCI_D_LOB, OCI_D_ROWID.
For LOB descriptors, the methods load, save, and savefile are associated with the descriptor, for BFILE only the load method exists.
Example 1.
Example 2.
Prev
Home
Next
OCINewCursor
Up
OCINLogon
PHP Manual
Prev
Next
OCINLogon() creates a new connection to an Oracle 8 database and logs on.
The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in tnsnames.ora to which you want to connect.
If the optional third parameter is not specified, PHP uses the environment variables ORACLE_SID (Oracle instance) or TWO_TASK (tnsnames.ora) to determine which database to connect to.
This should be used if you need to isolate a set of transactions.
By default, connections are shared at the page level if using OCILogon() or at the web server process level if using OCIPLogon().
If you have multiple connections open using OCINLogon(), all commits and rollbacks apply to the specified connection only.
This example demonstrates how the connections are separated.
Example 1.
?php print "HTML PRE"; $db = ""; $c1 = ocilogon("scott" ,"tiger",$db); $c2 = ocinlogon("scott" ,"tiger",$db); function create_table($conn) {$stmt = ociparse($conn ,"create table scott.hallo (test varchar2(64))"); ociexecute($stmt); echo $conn. "created table\n\n";} function drop_table($conn) {$stmt = ociparse($conn ,"drop table scott.hallo"); ociexecute($stmt); echo $conn." dropped table\n\n";} function insert_data($conn) {$stmt = ociparse($conn ,"insert into scott.hallo values('$conn '_BAR_ _BAR_' '_BAR_ _BAR_ to_char(sysdate ,'DD-MON-YY HH24:MI:SS'))"); ociexecute($stmt,OCI_DEFAULT); echo $conn. "inserted hallo\n\n";} function delete_data($conn) {$stmt = ociparse($conn ,"delete from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn." deleted hallo\n\n";} function commit($conn) {ocicommit($conn); echo $conn. "committed\n\n";} function rollback($conn) {ocirollback($conn); echo $conn." rollback\n\n";} function select_data($conn) {$stmt = ociparse($conn ,"select * from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn ."----selecting\n\n"; while (ocifetch($stmt)) echo $conn. "".ociresult($stmt ,"TEST")." \n\n"; echo $conn ."----done\n\n";} create_table($c1); insert_data($c1); select_data($c1); select_data($c2); rollback($c1); select_data($c1); select_data($c2); insert_data($c2); commit($c2); select_data($c1); delete_data($c1); select_data($c1); select_data($c2); commit($c1); select_data($c1); select_data($c2); drop_table($c1); print "/ PRE / HTML";?
See also OCILogon() and OCIPLogon().
Prev
Home
Next
OCINewDescriptor
Up
OCINumCols
PHP Manual
Prev
Next
OCINumCols() returns the number of columns in a statement.
Example 1.
Prev
Home
Next
OCINLogon
Up
OCIParse
PHP Manual
Prev
Next
OCIParse() parses the query using conn.
The query can be any valid SQL statement or PL / SQL block.
Prev
Home
Next
OCINumCols
Up
OCIPLogon
PHP Manual
Prev
Next
OCIPLogon() creates a persistent connection to an Oracle 8 database and logs on.
The optional third parameter can either contain the name of the local Oracle instance or the name of the entry in tnsnames.ora to which you want to connect.
If the optional third parameter is not specified, PHP uses the environment variables ORACLE_SID (Oracle instance) or TWO_TASK (tnsnames.ora) to determine which database to connect to.
See also OCILogon() and OCINLogon().
Prev
Home
Next
OCIParse
Up
OCIResult
PHP Manual
Prev
Next
OCIResult() returns the data for column column in the current row (see OCIFetch()).
OCIResult() will return everything as strings except for abstract types (ROWIDs, LOBs and FILEs).
Prev
Home
Next
OCIPLogon
Up
OCIRollback
PHP Manual
Prev
Next
OCIRollback() rolls back all outstanding statements for Oracle connection connection.
See also OCICommit().
Prev
Home
Next
OCIResult
Up
OCIRowCount
PHP Manual
Prev
Next
OCIRowCount() returns the number of rows affected for eg update-statements.
This function will not tell you the number of rows that a select will return!
Example 1.
Prev
Home
Next
OCIRollback
Up
OCISaveLob
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCISaveLob
Up
OCIServerVersion
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCIRowCount
Up
OCISaveLobFile
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
OCISaveLobFile
Up
OCISetPrefetch
PHP Manual
Prev
Next
Sets the number of top level rows to be prefetched.
The default value is 1 row.
Prev
Home
Next
OCIServerVersion
Up
OCIStatementType
PHP Manual
Prev
Next
OCIStatementType() returns one of the following values:
Example 1.
OCIStatementType() examples
Prev
Home
Next
OCISetPrefetch
Up
OCIWriteLobToFile
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
Prev
Home
Next
OCIStatementType
Up
OpenSSL functions
PHP Manual
Prev
Next
Returns the decimal equivalent of the octal number represented by the octal_string argument.
The largest number that can be converted is 17777777777 or 2147483647 in decimal.
See also decoct().
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE is returned if auto-commit is on, FALSE if it is off or an error occurs.
If OnOff is TRUE, auto-commit is enabled, if it is FALSE auto-commit is disabled.
By default, auto-commit is on for a connection.
Disabling auto-commit is equivalent with starting a transaction.
See also odbc_commit() and odbc_rollback().
Prev
Home
Next
Unified ODBC functions
Up
PHP Manual
Prev
Next
(ODBC SQL types affected:
BINARY, VARBINARY, LONGVARBINARY)
Passthru BINARY data
Return as is
Convert to char and return
When binary SQL data is converted to character C data, each byte (8 bits) of source data is represented as two ASCII characters.
These characters are the ASCII character representation of the number in its hexadecimal form.
For example, a binary 00000001 is converted to "01" and a binary 11111111 is converted to "FF ".
Table 1.
LONGVARBINARY handling
result
passthru
passthru
passthru
passthru
passthru
return as is
return as char
If odbc_fetch_into() is used, passthru means that an empty string is returned for these columns.
If result_id is 0, the settings apply as default for new results.
Note:
Default for longreadlen is 4096 and binmode defaults to ODBC_BINMODE_RETURN.
Handling of binary long columns is also affected by odbc_longreadlen()
Prev
Home
Next
Up
PHP Manual
Prev
Next
odbc_close_all() will close down all connections to database server(s).
Note:
This function will fail if there are open transactions on a connection.
This connection will remain open in this case.
Prev
Home
Next
Up
PHP Manual
Prev
Next
odbc_close() will close down the connection to the database server associated with the given connection identifier.
Note:
This function will fail if there are open transactions on this connection.
The connection will remain open in this case.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on failure.
All pending transactions on connection_id are committed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an ODBC connection id or 0 (FALSE) on error.
The connection id returned by this functions is needed by other ODBC functions.
You can have multiple connections open at once.
The optional fourth parameter sets the type of cursor to be used for this connection.
This parameter is not normally needed, but can be useful for working around problems with some ODBC drivers.
With some ODBC drivers, executing a complex stored procedure may fail with an error similar to: "Cannot open a cursor on a stored procedure that has anything other than a single select statement in it".
Using SQL_CUR_USE_ODBC may avoid that error.
Also, some drivers don' t support the optional row_number parameter in odbc_fetch_row().
SQL_CUR_USE_ODBC might help in that case, too.
The following constants are defined for cursortype:
For persistent connections see odbc_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
odbc_cursor will return a cursorname for the given result_id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
odbc_do() will execute a query on the given connection.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an ODBC result identifier if the SQL command was executed successfully.
odbc_exec() will send an SQL statement to the database server specified by connection_id.
This parameter must be a valid identifier returned by odbc_connect() or odbc_pconnect().
See also: odbc_prepare() and odbc_execute() for multiple execution of SQL statements.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Parameters in parameter_array will be substituted for placeholders in the prepared statement in order.
Note:
File reading is not subject to any safe mode or open-basedir restrictions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
As of PHP 4.0.5 the result_array does not need to be passed by reference any longer.
As of PHP 4.2.0 the result_array and rownumber have been swapped.
Example 2. odbc_fetch_into() 4.0.6 example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
If odbc_fetch_row() was succesful (there was a row), TRUE is returned.
If there are no more rows, FALSE is returned.
odbc_fetch_row() fetches a row of the data that was returned by odbc_do() / odbc_exec().
After odbc_fetch_row() is called, the fields of that row can be accessed with odbc_result().
Calls to odbc_fetch_row() with and without row_number can be mixed.
To step through the result more than once, you can call odbc_fetch_row() with row_number 1, and then continue doing odbc_fetch_row() without row_number to review the result.
If a driver doesn 't support fetching rows by number, the row_number parameter is ignored.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Field numbering starts at 1.
See also: odbc_field_scale() to get the scale of a floating point number.
Prev
Home
Next
Up
PHP Manual
Prev
Next
odbc_field_name() will return the name of the field occupying the given column number in the given ODBC result identifier.
Field numbering starts at 1.
FALSE is returned on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Field numbering starts at 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Always returns TRUE.
odbc_free_result() only needs to be called if you are worried about using too much memory while your script is running.
All result memory will automatically be freed when the script is finished.
But, if you are sure you are not going to need the result data anymore in a script, you may call odbc_free_result(), and the memory associated with result_id will be freed.
Note:
If auto-commit is disabled (see odbc_autocommit()) and you call odbc_free_result() before commiting, all pending transactions are rolled back.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(ODBC SQL types affected:
LONG, LONGVARBINARY) The number of bytes returned to PHP is controled by the parameter length.
If it is set to 0, Long column data is passed thru to the client.
Note:
Handling of LONGVARBINARY columns is also affected by odbc_binmode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will return -1 on error.
The argument is a valid result identifier returned by odbc_exec().
Prev
Home
Next
Up
PHP Manual
Prev
Next
odbc_num_rows() will return the number of rows in an ODBC result.
This function will return -1 on error.
For INSERT, UPDATE and DELETE statements odbc_num_rows() returns the number of rows affected.
For a SELECT clause this can be the number of rows available.
Note:
Using odbc_num_rows() to determine the number of rows available after a SELECT will return -1 with many drivers.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an ODBC connection id or 0 (FALSE) on error.
This function is much like odbc_connect(), except that the connection is not really closed when the script has finished.
Future requests for a connection with the same dsn, user, password combination (via odbc_connect() and odbc_pconnect()) can reuse the persistent connection.
Note:
Persistent connections have no effect if PHP is used as a CGI program.
For information about the optional cursor_type parameter see the odbc_connect() function.
For more information on persistent connections, refer to the PHP FAQ.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns FALSE on error.
Returns an ODBC result identifier if the SQL command was prepared successfully.
The result identifier can be used later to execute the statement with odbc_execute().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of rows in the result or FALSE on error.
The result is printed in HTML table format.
With the optional string argument format, additional overall table formatting can be done.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the contents of the field.
field can either be an integer containing the column number of the field you want; or it can be a string containing the name of the field.
For example:
$item_3 = odbc_result ($Query_ID, 3); $item_val = odbc_result ($Query_ID, "val");
The first call to odbc_result() The first call to odbc_result() returns the value of the third field in the current record of the query result.
The second function call to odbc_result() returns the value of the field whose field name is "val "in the current record of the query result.
An error occurs if a column number parameter for a field is less than one or exceeds the number of columns (or fields) in the current record.
Similarly, an error occurs if a field with a name that is not one of the fieldnames of the table( s) that is(are) being queried.
Field indices start from 1.
Regarding the way binary or long column data is returned refer to odbc_binmode() and odbc_longreadlen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Rolls back all pending statements on connection_id.
Returns TRUE on success, FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function allows fiddling with the ODBC options for a particular connection or query result.
It was written to help find work arounds to problems in quirky ODBC drivers.
You should probably only use this function if you are an ODBC programmer and understand the effects the various options will have.
Different driver versions support different options.
Because the effects may vary depending on the ODBC driver, use of this function in scripts to be made publicly available is strongly discouraged.
Also, some ODBC options are not available to this function because they must be set before the connection is established or the query is prepared.
However, if on a particular job it can make PHP work so your boss doesn' t tell you to use a commercial product, that's all that really matters.
For SQLSetStmtOption(), this is a result id.
Function is the ODBC function to use.
The value should be 1 for SQLSetConnectOption() and 2 for SQLSetStmtOption().
Parameter option is the option to set.
Parameter param is the value for the given option.
ODBC Setoption Examples
Option 102 of SQLSetConnectOption() is SQL_AUTOCOMMIT. / / Value 1 of SQL_AUTOCOMMIT is SQL_AUTOCOMMIT_ON. / / This example has the same effect as / / odbc_autocommit($conn, true); odbc_setoption ($conn, 1, 102, 1); / / 2.
Option 0 of SQLSetStmtOption() is SQL_QUERY_TIMEOUT. / / This example sets the query to timeout after 30 seconds. $result = odbc_prepare ($conn, $sql); odbc_setoption ($result, 2, 0, 30); odbc_execute ($result);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
You can suppress the error output of opendir() by prepending `@ 'to the front of the function name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
openlog() opens a connection to the system logger for a program.
The string ident is added to each message.
Values for option and facility are given below.
The option argument is used to indicate what logging options will be used when generating a log message.
The facility The facility argument is used to specify what type of program is logging the message.
This allows you to specify (in your machine's syslog configuration) how messages coming from different facilities will be handled.
The use of openlog() is optional.
It will automatically be called by syslog() if necessary, in which case ident will default to FALSE.
Table 1. openlog() Options
Constant
Description
if there is an error while sending data to the system logger, write directly to the system console
open the connection to the logger immediately
(default) delay opening the connection until the first message is logged
print log message also to standard error
include PID with each message
Table 2. openlog() Facilities
Constant
Description
security / authorization messages (use LOG_AUTHPRIV instead in systems where that constant is defined)
security / authorization messages (private)
clock daemon (cron and at)
other system daemons
kernel messages
reserved for local use, these are not available in Windows
line printer subsystem
mail subsystem
USENET news subsystem
messages generated internally by syslogd
generic user-level messages
UUCP subsystem
See also define_syslog_variables(), syslog() and closelog().
Prev
Home
Next
Up
PHP Manual
Prev
Next
openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference.
The optional notext affects the verbosity of the output; if it is FALSE then additional human-readable information is included in the output.
The default value of notext is TRUE
See also openssl_csr_export_to_file(), openssl_csr_new() and openssl_csr_sign().
Prev
Home
Next
Up
PHP Manual
Prev
Next
openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename.
The optional notext affects the verbosity of the output; if it is FALSE The optional notext affects the verbosity of the output; if it is FALSE then additional human-readable information is included in the output.
The default value of notext is TRUE
See also openssl_csr_export(), openssl_csr_new() and openssl_csr_sign().
Prev
Home
Next
OpenSSL functions
Up
PHP Manual
Prev
Next
extraattribs is used to specify additional configuration options for the CSR.
Note:
By default, the information in your system openssl.conf is used to initialize the request; you can specify a configuration file section by setting the config_section_section key of configargs.
The following keys, if present in configargs behave as their equivalents in the openssl.conf, as listed in the table below.
The default value is OPENSSL_KEYTYPE_RSA which is currently the only supported key type.
Example 1. openssl_csr_new() example - creating a self-signed-certificate
Prev
Home
Next
Up
PHP Manual
Prev
Next
The generated certificate will be signed by cacert.
Returns an x509 certificate resource on success, FALSE on failure.
You need to have a valid openssl.cnf installed for this function to operate correctly.
See the notes under the installation section for more information.
Example 1. openssl_csr_sign() example - signing a CSR (how to implement your own CA)
You can use any certificate to sign another, but / / the process is worthless unless the signing certificate is trusted / / by the software / users that will deal with the newly signed certificate / / We need our CA cert and it' s private key $cacert = "file: / /path / to / ca.crt"; $privkey = array("file: / /path / to / ca.key", "your_ca_key_passphrase"); $userscert = openssl_csr_sign($csrdata, $cacert, $privkey, 365); / / Now display the generated certificate so that the user can / / copy and paste it into their local configuration (such as a file / / to hold the certificate for their SSL server) openssl_x509_export($usercert, $certout) and echo $certout; / / Show any errors that occurred here while (($e = openssl_error_string()) !== false) {echo $e. "\n";}
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns an error message string, or FALSE if there are no more error messages to return.
openssl_error_string() returns the last error from the openSSL library.
Error messages are stacked, so this function should be called multiple times to collect all of the information.
Example 1. openssl_error_string() example
/ / lets assume you just called an openssl function that failed while( $msg = openssl_error_string()) echo $msg. "br / \n";
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
openssl_free_key() frees the key associated with the specified key_identifier from memory.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This is an alias for openssl_pkey_get_private().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This is an alias for openssl_pkey_get_public().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
If successful the opened data is returned in open_data.
openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data.
The envelope key is generated when the data are sealed and can only be used by one specific private key.
See openssl_seal() for more information.
Example 1. openssl_open() example
/ / $sealed and $env_key are assumed to contain the sealed data / / and our envelope key, both given to us by the sealer. / / fetch private key from file and ready it $fp = fopen( "/ src / openssl-0.9.6 / demos / sign / key.pem", "r"); $priv_key = fread($fp, 8192); fclose($fp); $pkeyid = openssl_get_privatekey($priv_key); / / decrypt the data and store it in $open if (openssl_open($sealed, $open, $env_key, $pkeyid)) echo "here is the opened data:", $open; else echo "failed to open data"; / / free the private key from memory openssl_free_key($pkeyid);
See also openssl_seal().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Decrypts the S / MIME encrypted message contained in the file specified by infilename using the certificate and it 's associated private key specified by recipcert and recipkey.
The decrypted message is output to the file specified by outfilename
Example 1. openssl_pkcs7_decrypt() example
/ / $cert and $key are assumed to contain your personal certificate and private / / key pair, and that you are the recipient of an S / MIME message $infilename = "encrypted.msg"; / / this file holds your encrypted message $outfilename = "decrypted.msg"; / / make sure you can write to this file if (openssl_pkcs7_decrypt($infilename, $outfilename, $cert, $key)) echo "decrypted !"; else echo "failed to decrypt !";
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts, which is either a lone X.509 certificate, or an array of X.509 certificates. headers is an array of headers that will be prepended to the data after it has been encrypted. flags can be used to specify options that affect the encoding process - see PKCS7 constants. headers can be either an associative array keyed by header name, or an indexed array, where each element contains a single header line.
Example 1. openssl_pkcs7_encrypt() example
/ / the message you want to encrypt and send to your secret agent / / in the field, known as nighthawk.
You have his certificate / / in the file nighthawk.pem $data = EOD Nighthawk, Top secret, for your eyes only!
The enemy is closing in!
Meet me at the cafe at 8.30am to collect your forged passport!
HQ EOD; / / load key $key = file_get_contents("nighthawk.pem"); / / save message to file $fp = fopen("msg.txt", "w"); fwrite($fp, $data); fclose($fp); / / encrypt it if (openssl_pkcs7_encrypt("msg.txt", "enc.txt", $key, array("To "= "nighthawk@example.com", / / keyed syntax "From:
HQ hq@example.com ", / / indexed syntax "Subject" = "Eyes only"))) {/ / message encrypted - send it! exec(ini_get("sendmail_path"). "enc.txt");}
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and it's matching private key specified by signcert and privkey parameters.
headers is an array of headers that will be prepended to the data after it has been signed (see openssl_pkcs7_encrypt() for more information about the format of this parameter.
flags can be used to alter the output - see PKCS7 constants - if not specified, it defaults to PKCS7_DETACHED.
extracerts specifies the name of a file containing a bunch of extra certificates to include in the signature which can for example be used to help the recipient to verify the certificate that you used.
Example 1. openssl_pkcs7_sign() example
/ / the message you want to sign so that recipient can be sure it was you that / / sent it $data = EOD You have my authorization to spend $10,000 on dinner expenses.
The CEO EOD; / / save message to file $fp = fopen("msg.txt", "w"); fwrite($fp, $data); fclose($fp); / / encrypt it if (openssl_pkcs7_sign("msg.txt", "signed.txt", "mycert.pem", array("mycert.pem", "mypassphrase"), array("To "= "joes@sales.com", / / keyed syntax "From:
HQ ceo@sales.com ", / / indexed syntax "Subject" = "Eyes only")) {/ / message signed - send it! exec(ini_get("sendmail_path"). "signed.txt");}
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
openssl_pkcs7_verify() reads the S / MIME message contained in the filename specified by filename and examines the digital signature.
It returns TRUE if the signature is verified, FALSE if it is not correct (the message has been tampered with, or the signing certificate is invalid), or -1 on error.
flags can be used to affect how the signature is verified - see PKCS7 constants for more information.
If the outfilename is specified, it should be a string holding the name of a file into which the certificates of the persons that signed the messages will be stored in PEM format.
If the cainfo is specified, it should hold information about the trusted CA certificates to use in the verification process - see certificate verification for more information about this parameter.
If the extracerts is specified, it is the filename of a file containing a bunch of certificates to use as untrusted CAs.
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
PHP Manual
Prev
Next
openssl_pkey_export() exports key as a PEM encoded string and stores it into out openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference).
The key is optionally protected by passphrase. configargs can be used to fine-tune the export process by specifying and / or overriding options for the openssl configuration file.
Returns TRUE on success or FALSE on failure.
Note:
You need to have a valid openssl.cnf installed for this function to operate correctly.
See the notes under the installation section for more information.
Prev
Home
Next
Up
PHP Manual
Prev
Next
openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename.
The key can be optionally protected by a passphrase. configargs can be used to fine-tune the export process by specifying and / or overriding options for the openssl configuration file.
Returns TRUE on success or FALSE on failure.
Note:
You need to have a valid openssl.cnf installed for this function to operate correctly.
See the notes under the installation section for more information.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
openssl_pkey_new() generates a new private and public key pair.
You can finetune the key generation (such as specifying the number of bits) using configargs.
See openssl_csr_new() for more information about configargs.
Note:
You need to have a valid openssl.cnf installed for this function to operate correctly.
See the notes under the installation section for more information.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
openssl_private_decrypt() decrypts data that was previous encrypted via openssl_private_encrypt() and stores the result into decrypted. key must be the private key corresponding that was used to encrypt the data. padding defaults to OPENSSL_PKCS1_PADDING, but can also be one of OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING OPENSSL_NO_PADDING.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the length of the sealed data on success, or FALSE on error.
If successful the sealed data is returned in sealed_data, and the envelope keys in env_keys.
openssl_seal() seals (encrypts) data by using RC4 with a randomly generated secret key.
The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys.
This means that one can send sealed data to multiple recipients (provided one has obtained their public keys).
Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient 's public key.
Example 1. openssl_seal() example
/ / $data is assumed to contain the data to be sealed / / fetch public keys for our recipients, and ready them $fp = fopen( "/ src / openssl-0.9.6 / demos / maurice / cert.pem", "r"); $cert = fread($fp, 8192); fclose($fp); $pk1 = openssl_get_publickey($cert); / / Repeat for second recipient $fp = fopen(" / src / openssl-0.9.6 / demos / sign / cert.pem", "r"); $cert = fread($fp, 8192); fclose($fp); $pk2 = openssl_get_publickey($cert); / / seal message, only owners of $pk1 and $pk2 can decrypt $sealed with keys / / $ekeys[0] and $ekeys[1] respectively. openssl_seal($data, $sealed, $ekeys, array($pk1,$pk2)); / / free the keys from memory openssl_free_key($pk1); openssl_free_key($pk2);
See also openssl_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
If successful the signature is returned in signature.
openssl_sign() computes a signature for the specified data by using SHA1 for hashing followed by encryption using the private key associated with priv_key_id.
Note that the data itself is not encrypted.
Example 1. openssl_sign() example
/ / $data is assumed to contain the data to be signed / / fetch private key from file and ready it $fp = fopen( "/ src / openssl-0.9.6 / demos / sign / key.pem", "r"); $priv_key = fread($fp, 8192); fclose($fp); $pkeyid = openssl_get_privatekey($priv_key); / / compute signature openssl_sign($data, $signature, $pkeyid); / / free the key from memory openssl_free_key($pkeyid);
See also openssl_verify().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns 1 if the signature is correct, 0 if it is incorrect, and -1 on error.
openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id.
This must be the public key corresponding to the private key used for signing.
Example 1. openssl_verify() example
/ / $data and $signature are assumed to contain the data and the signature / / fetch public key from certificate and ready it $fp = fopen( "/ src / openssl-0.9.6 / demos / sign / cert.pem", "r"); $cert = fread($fp, 8192); fclose($fp); $pubkeyid = openssl_get_publickey($cert); / / state whether signature is okay or not $ok = openssl_verify($data, $signature, $pubkeyid); if ($ok == 1) echo "good"; elseif ($ok == 0) echo "bad"; else echo "ugly, error checking signature"; / / free the key from memory openssl_free_key($pubkeyid);
See also openssl_sign().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
openssl_x509_check_private_key() returns TRUE if key is the private key that corresponds to cert, or FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE if the certificate can be used for the intended purpose, FALSE if it cannot, or -1 on error.
openssl_x509_checkpurpose() examines the certificate specified by x509cert to see if it can be used for the purpose specified by purpose.
cainfo should be an array of trusted CA files / dirs as described in Certificate Verification.
untrustedfile, if specified, is the name of a PEM encoded file holding certificates that can be used to help verify the certificate, although no trust in placed in the certificates that come from that file.
Table 1. openssl_x509_checkpurpose() purposes
Constant
Description
Can the certificate be used for the client side of an SSL connection?
Can the certificate be used for the server side of an SSL connection?
Can the cert be used for Netscape SSL server?
Can the cert be used to sign S / MIME email?
Can the cert be used to encrypt S / MIME email?
Can the cert be used to sign a certificate revocation list (CRL)?
Can the cert be used for Any / All purposes?
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
openssl_x509_export() stores x509 into a file named by outfilename in a PEM encoded format.
The optional parameter notext default to TRUE.
If set to FALSE, additional human readable text will also be stored into output.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.
The optional parameter notext default to TRUE.
If set to FALSE, additional human readable text will also be stored into the output file.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc. shortnames controls how the data is indexed in the array - if shortnames is TRUE openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc. shortnames controls how the data is indexed in the array - if shortnames is TRUE (the default) then fields will be indexed with the short name form, otherwise, the long name form will be used - e.g.:
CN is the shortname form of commonName.
The structure of the returned data is (deliberately) not yet documented, as it is still subject to change.
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.
Note:
This function was added in 4.0.6.
Prev
Home
Next
Up
Oracle functions
PHP Manual
Prev
Next
Returns TRUE if the bind succeeds, otherwise FALSE.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
This function binds the named PHP variable with a SQL parameter.
The SQL parameter must be in the form ":name".
With the optional type parameter, you can define whether the SQL parameter is an in / out (0, default), in (1) or out (2) parameter.
As of PHP 3.0.1, you can use the constants ORA_BIND_INOUT, ORA_BIND_IN and ORA_BIND_OUT instead of the numbers.
ora_bind must be called after ora_parse() and before ora_exec().
Input values can be given by assignment to the bound PHP variables, after calling ora_exec() the bound PHP variables contain the output values if available.
?php ora_parse( $curs, "declare tmp INTEGER; begin tmp := :in; :out := tmp; :x := 7.77; end ;"); ora_bind($curs, "result", ":x", $len, 2); ora_bind($curs, "input", ":in", 5, 1); ora_bind($curs, "output", ":out", 5, 2); $input = 765; ora_exec($curs); echo "Result: $result BR Out: $output BR In: $input";?
Prev
Home
Next
Oracle functions
Up
Ora_Close
PHP Manual
Prev
Next
Returns TRUE if the close succeeds, otherwise FALSE.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
This function closes a data cursor opened with ora_open().
Prev
Home
Next
Ora_Bind
Up
Ora_ColumnName
PHP Manual
Prev
Next
Returns the name of the field / column column on the cursor cursor.
The returned name is in all uppercase letters.
Column 0 is the first column.
Prev
Home
Next
Ora_Close
Up
Ora_ColumnSize
PHP Manual
Prev
Next
Returns the size of the Oracle column column on the cursor cursor.
Column 0 is the first column.
Prev
Home
Next
Ora_ColumnName
Up
Ora_ColumnType
PHP Manual
Prev
Next
Returns the Oracle data type name of the field / column column on the cursor cursor.
Column 0 is the first column.
The returned type will be one of the following:
Prev
Home
Next
Ora_ColumnSize
Up
Ora_Commit
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
This function commits an Oracle transaction.
A transaction is defined as all the changes on a given connection since the last commit / rollback, autocommit was turned off or when the connection was established.
Prev
Home
Next
Ora_ColumnType
Up
Ora_CommitOff
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
This function turns off automatic commit after each ora_exec().
Prev
Home
Next
Ora_Commit
Up
Ora_CommitOn
PHP Manual
Prev
Next
This function turns on automatic commit after each ora_exec() on the given connection.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Ora_CommitOff
Up
Ora_Do
PHP Manual
Prev
Next
This function is quick combination of ora_parse(), ora_exec() and ora_fetch().
It will parse and execute a statement, then fetch the first result row.
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
See also ora_parse(), ora_exec(), and ora_fetch().
Prev
Home
Next
Ora_CommitOn
Up
Ora_Error
PHP Manual
Prev
Next
Returns the numeric error code of the last executed statement on the specified cursor or connection.
Note:
Support for connection ids was added in 3.0.4.
Prev
Home
Next
Ora_Error
Up
Ora_Exec
PHP Manual
Prev
Next
Returns an error message of the form XXX - NNNNN where XXX is where the error comes from and NNNNN identifies the error message.
Note:
Support for connection ids was added in 3.0.4.
Prev
Home
Next
Ora_Do
Up
Ora_ErrorCode
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
See also ora_parse(), ora_fetch(), and ora_do().
Prev
Home
Next
Ora_ErrorCode
Up
Ora_Fetch_Into
PHP Manual
Prev
Next
Returns TRUE (a row was fetched) or FALSE (no more rows, or an error occured).
If an error occured, details can be retrieved using the ora_error() and ora_errorcode() functions.
If there was no error, ora_errorcode() will return 0.
Retrieves a row of data from the specified cursor.
See also ora_parse(), ora_exec(), and ora_do().
Prev
Home
Next
Ora_Fetch_Into
Up
Ora_GetColumn
PHP Manual
Prev
Next
Fetches a row of data into an array.
The flags has two flag values: if the ORA_FETCHINTO_NULLS flag is set, columns with NULL values are set in the array; and if the ORA_FETCHINTO_ASSOC flag is set, an associative array is created.
Returns the number of columns fetched.
Example 1. ora_fetch_into()
?php $results = array(); ora_fetch_into($cursor, $results); echo $results[0]; echo $results[1]; $results = array(); ora_fetch_into($cursor, $results, ORA_FETCHINTO_NULLS_BAR_ORA_FETCHINTO_ASSOC); echo $results['MyColumn'];?
See also ora_parse(), ora_exec(), ora_fetch(), and ora_do().
Prev
Home
Next
Ora_Exec
Up
Ora_Fetch
PHP Manual
Prev
Next
Returns the column data.
If an error occurs, FALSE is returned and ora_errorcode() will return a non-zero value.
Note, however, that a test for FALSE on the results from this function may be TRUE in cases where there is not error as well (NULL result, empty string, the number 0, the string "0").
Fetches the data for a column or function result.
Prev
Home
Next
Ora_Fetch
Up
Ora_Logoff
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Logs out the user and disconnects from the server.
Prev
Home
Next
Ora_GetColumn
Up
Ora_Logon
PHP Manual
Prev
Next
Establishes a connection between PHP and an Oracle database with the given username and password.
Connections can be made using SQL*Net by supplying the TNS name to user like this:
For server modules, you should set it in the server 's environment before starting the server.
Returns a connection index on success, or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Ora_Logoff
Up
Ora_Numcols
PHP Manual
Prev
Next
ora_numcols() returns the number of columns in a result.
Only returns meaningful values after an parse / exec / fetch sequence.
See also ora_parse(), ora_exec(), ora_fetch(), and ora_do().
Prev
Home
Next
Ora_Logon
Up
Ora_Numrows
PHP Manual
Prev
Next
ora_numrows() returns the number of rows in a result.
Prev
Home
Next
Ora_Numcols
Up
Ora_Open
PHP Manual
Prev
Next
Opens an Oracle cursor associated with connection.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Ora_Numrows
Up
Ora_Parse
PHP Manual
Prev
Next
This function parses an SQL statement or a PL / SQL block and associates it with the given cursor.
Returns TRUE on success or FALSE on failure.
See also ora_exec(), ora_fetch(), and ora_do().
Prev
Home
Next
Ora_Open
Up
Ora_pLogon
PHP Manual
Prev
Next
Establishes a persistent connection between PHP and an Oracle database with the given username and password.
See also ora_logon().
Prev
Home
Next
Ora_Parse
Up
Ora_Rollback
PHP Manual
Prev
Next
This function undoes an Oracle transaction. (See ora_commit() for the definition of a transaction.)
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Ora_pLogon
Up
PHP Manual
Prev
Next
Returns the ASCII value of the first character of string.
This function complements chr().
Example 1. ord() example
You can find an ASCII-table over here: http: / /www.asciitable.com.
See also chr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PDF functions
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ovrimos_connect() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Example 3. ovrimos_result_all example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Output Control Functions
PHP Manual
Prev
Next
Pack given arguments into binary string according to format.
Returns binary string containing data.
The idea to this function was taken from Perl and all formatting codes work the same as there, however, there are some formatting codes that are missing such as Perl' s "u "format code.
The format string consists of format codes followed by an optional repeater argument.
The repeater argument can be either an integer value or * for repeating to the end of the input data.
For a, A, h, H the repeat count specifies how many characters of one data argument are taken, for @ it is the absolute position where to put the next data, for everything else the repeat count specifies how many data arguments are consumed and packed into the resulting binary string.
Currently implemented are
a NUL-padded string
A SPACE-padded string
h Hex string, low nibble first
H Hex string, high nibble first
s signed short (always 16 bit, machine byte order)
S unsigned short (always 16 bit, machine byte order)
n unsigned short (always 16 bit, big endian byte order)
v unsigned short (always 16 bit, little endian byte order)
i signed integer (machine dependent size and byte order)
I unsigned integer (machine dependent size and byte order)
l signed long (always 32 bit, machine byte order)
L unsigned long (always 32 bit, machine byte order)
N unsigned long (always 32 bit, big endian byte order)
V unsigned long (always 32 bit, little endian byte order)
f float (machine dependent size and representation)
d double (machine dependent size and representation)
x NUL byte
X Back up one byte
@ NUL-fill to absolute position
Example 1. pack() format string
The resulting binary string will be 6 bytes long and contain the byte sequence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
Note that the distinction between signed and unsigned values only affects the function unpack(), where as function pack() gives the same result for signed and unsigned format codes.
Also note that PHP internally stores integer Also note that PHP internally stores integer values as signed values of a machine dependent size.
If you give it an unsigned integer value too large to be stored that way it is converted to a float which often yields an undesired result.
Prev
Home
Next
Up
PHP Manual
Prev
Next
parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array.
By setting the last process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included.
The default for process_sections is FALSE
Note:
It is already processed, the time you run your script.
This function can be used to read in your own application 's configuration files.
Note:
If a value in the ini file contains any non-alphanumeric characters it needs to be enclosed in double-quotes (").
Note:
Since PHP 4.2.1 this function is also affected by safe_mode and open_basedir.
The structure of the ini file is similar to that of the php.ini 's.
Constants may also be parsed in the ini file so if you define a constant as an ini value before running parse_ini_file(), it will be integrated into the results.
Only ini values are evaluated.
For example:
Example 1.
Contents of sample.ini
; This is a sample configuration file; Comments start with ';', as in php.ini [first_section] one = 1 five = 5 animal = BIRD [second_section] path = / usr / local / bin URL = "http: / /www.example.com / ~username "
Example 2. parse_ini_file() example
?php define ('BIRD', 'Dodo bird'); / / Parse without sections $ini_array = parse_ini_file("sample.ini"); print_r($ini_array); / / Parse with sections $ini_array = parse_ini_file("sample.ini", TRUE); print_r($ini_array);?
Would produce:
Array ([one] = 1 [five] = 5 [animal] = Dodo bird [path] = / usr / local / bin [URL] = http: / /www.example.com / ~username) Array ([first_section] = Array ([one] = 1 [five] = 5 [animal] = Dodo bird) [second_section] = Array ([path] = / usr / local / bin [URL] = http: / /www.example.com / ~username))
Prev
Home
Next
Up
PHP Manual
Prev
Next
If the second parameter arr is present, variables are stored in this variable as an array elements instead.
Support for the optional second parameter was added in PHP 4.0.3.
Note:
To get the current QUERY_STRING, you may use the variable $_SERVER[ 'QUERY_STRING'].
Also, you may want to read the section on variables from outside of PHP.
Using parse_str()
See also parse_url(), pathinfo(), set_magic_quotes_runtime(), and urldecode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
fragment - after the hashmark #
Partial urls are also accepted, parse_url() tries its best to parse them correctly.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The passthru() function is similar to the exec() function in that it executes a command.
If the return_var argument is present, the return status of the Unix command will be placed here.
A common use for this is to execute something like the pbmplus utilities that can output an image stream directly.
By setting the Content-type to image / gif and then calling a pbmplus program to output a gif, you can create PHP scripts that output images directly.
If you are going to allow data coming from user input to be passed to this function, then you should be using escapeshellarg() or escapeshellcmd() to make sure that users cannot trick the system into executing arbitrary commands.
If you start a program using this function and want to leave it running in the background, you have to make sure that the output of that program is redirected to a file or some other output stream or else PHP will hang until the execution of the program ends.
See also exec(), system(), popen(), escapeshellcmd(), and the backtick operator.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pathinfo() returns an associative array containing information about path.
The following array elements are returned: dirname, basename and extension.
Example 1. pathinfo() Example
Would produce:
Note:
For information on retrieving the current path info, read the section on predefined reserved variables.
See also dirname(), basename(), parse_url() and realpath().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Closes a file pointer to a pipe opened by popen().
The file pointer must be valid, and must have been returned by a successful call to popen().
Returns the termination status of the process that was run.
See also popen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pcntl_fork() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Note:
Note:
Example 1. pcntl_signal() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1. possible values for pid
Table 2. possible values for options
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Program Execution functions
PHP Manual
Prev
Next
pdf_add_outline() is replaced by pdf_add_note()
See also pdf_add_note().
Prev
Home
Next
PDF functions
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_add_bookmark().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Draw a counterclockwise circular arc from alpha to beta degrees
See also: pdf_arcn()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Add a new page to the document.
The width and height are specified in points, which are 1 / 72 of an inch.
Common Page Sizes in Points
letter (8.5"✗11")
legal (8.5"✗14")
ledger (17"✗11")
Prev
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Draw a circle with center (x, y) and radius r.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use the current path as clipping path.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Close the generated PDF file, and free all document-related resources.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Close an image retrieved with one of the pdf_open_image*() functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Close the path, fill, and stroke it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Close the current path.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Close the path, and stroke it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Print text at the next line.
The spacing between lines is determined by the leading parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Draw a Bezier curve from the current point, using 3 more control points.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Finish the page.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated, use one of the stroke, fill, or clip functions instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Fill the interior of the path with the current fill color.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Fill and stroke the path with the current fill and stroke color.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pdf_findfont() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pdf_get_image_height() is deprecated, use pdf_get_value() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The pdf_get_image_width() is deprecated, use pdf_get_value() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Get the contents of some PDFlib parameter with string type.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Get the contents of some PDFlib parameter with float type.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Draw a line from the current point to (x, y).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
See pdf_set_text_pos() to set the text output position.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_open_image(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
pdf_open() is deprecated, use pdf_new() plus pdf_open_file() instead.
See also pdf_new(), pdf_open_file().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only, PHP 4)
Open an image file.
Supported types are "jpeg", "tiff", "gif", and "png". stringparam is either "", "mask", "masked", or "page". intparam is either 0, the image id of the applied mask, or the page.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See also pdf_open_image(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
The pdf_open_memory_image() The pdf_open_memory_image() function takes an image created with the PHP's image functions and makes it available for the pdf object.
The function returns a pdf image identifier.
Example 1.
Including a memory image
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_open_image().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Deprecated.
See also pdf_open_image(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
Place an image with the lower left corner at (x, y), and scale it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Draw a rectangle at lower left (x, y) with width and height.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Restore the most recently saved graphics state.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Rotate the coordinate system by phi degrees.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Save the current graphics state.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Scale the coordinate system.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.12, PHP 4)
Set the border color for all kinds of annotations.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the border dash style for all kinds of annotations.
See pdf_setdash().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.12, PHP 4)
Set the border style for all kinds of annotations. style is "solid" or "dashed ".
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See also pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current dash pattern to b black and w white units.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_set_value().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the flatness to a value between 0 and 100 inclusive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
You should use pdf_findfont() plus pdf_setfont() instead.
See pdf_findfont(), pdf_setfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current fill color to a gray value between 0 and 1 inclusive.
Deprecated, use pdf_setcolor() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current fill and stroke color.
Deprecated, use pdf_setcolor() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current stroke color to a gray value between 0 and 1 inclusive
Deprecated, use pdf_setcolor() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Fill document information field key with value. key is one of "Subject", "Title", "Creator", "Author", "Keywords", or a user-defined key.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See also pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the linecap parameter to a value between 0 and 2 inclusive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the line join parameter to a value between 0 and 2 inclusive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current linewidth to width.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the miter limit to a value greater than or equal to 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set some PDFlib parameter with string type.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current fill color to the supplied RGB values.
Deprecated, use pdf_setcolor() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current fill and stroke color to the supplied RGB values.
Deprecated, use pdf_setcolor() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current stroke color to the supplied RGB values.
Deprecated, use pdf_setcolor() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See pdf_set_paramter().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Set the text output position.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the value of some PDFlib parameter with float type.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See also pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Format text in the current font and size into the supplied text box according to the requested formatting mode, which must be one of "left", "right", "center", "justify", or "fulljustify".
If width and height are 0, only a single line is placed at the point (left, top) in the requested mode.
Returns the number of characters that did not fit in the specified box.
Returns 0 if all characters fit or the width and height parameters were set to 0 for single-line formattting.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Print text in the current font and size at the current position.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Print text in the current font at (x, y).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Skew the coordinate system in x and y direction by alpha and beta degrees.
Prev
Home
Next
Up
PHP Manual
Prev
Next
If the optional parameters font and size are specified, the width will be calculated using that font and size instead.
Note:
See Also: pdf_setfont() and pdf_findfont().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Stroke the path with the current color and line width, and clear it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Translate the origin of the coordinate system.
Prev
Home
Next
Up
Verisign Payflow Pro functions
PHP Manual
Prev
Next
pfpro_cleanup() is used to shutdown the Payflow Pro library cleanly.
However you may omit this call, in which case this extension will automatically call pfpro_cleanup() after your script terminates.
See also pfpro_init().
Prev
Home
Next
Verisign Payflow Pro functions
Up
PHP Manual
Prev
Next
pfpro_init() is used to initialise the Payflow Pro library.
You may omit this call, in which case this extension will automatically call pfpro_init() before the first transaction.
Prev
Home
Next
Up
PHP Manual
Prev
Next
An associative array containing the response
pfpro_process() processes a transaction with Payflow Pro.
The first parameter is an associative array containing keys and values that will be encoded and passed to the processor.
The second parameter is optional and specifies the host to connect to.
By default this is "test.signio.com", so you will certainly want to change this to "connect.signio.com" in order to process live transactions.
The third parameter specifies the port to connect on.
It defaults to 443, the standard SSL port.
The fourth parameter specifies the timeout to be used, in seconds.
This defaults to 30 seconds.
Note that this timeout appears to only begin once a link to the processor has been established and so your script could potentially continue for a very long time in the event of DNS or network problems.
The fifth parameter, if required, specifies the hostname of your SSL proxy.
The sixth parameter specifies the port to use.
The seventh and eighth parameters specify the logon identity and password to use on the proxy.
The function returns an associative array of the keys and values in the response.
Note:
Be sure to read the Payflow Pro Developers Guide for full details of the required parameters.
Example 1.
Payflow Pro example
?php pfpro_init(); $transaction = array('USER '= 'mylogin', 'PWD' = 'mypassword', 'PARTNER '= 'VeriSign', 'TRXTYPE' = 'S', 'TENDER '= 'C', 'AMT' = 1.50, 'ACCT '= '4111111111111111', 'EXPDATE' = '0904 '); $response = pfpro_process($transaction); if (!$response) {die("Couldn't establish link to Verisign.\n");} echo "Verisign response code was ".$response['RESULT']; echo ", which means: ".$response['RESPMSG'] ."\n"; echo "\nThe transaction request:"; print_r($transaction); echo "\nThe response: "; print_r($response); pfpro_cleanup();?
Prev
Home
Next
Up
PHP Manual
Prev
Next
A string containing the response.
pfpro_process_raw() processes a raw transaction string with Payflow Pro.
You should really use pfpro_process() instead, as the encoding rules of these transactions are non-standard.
The first parameter in this case is a string containing the raw transaction request.
All other parameters are the same as with pfpro_process().
The return value is a string containing the raw response.
Note:
Be sure to read the Payflow Pro Developers Guide for full details of the required parameters and encoding rules.
You would be well advised to use pfpro_process() instead.
Example 1.
Payflow Pro raw example
?php pfpro_init(); $response = pfpro_process_raw("USER=mylogin PWD[5]=m ndy PARTNER=VeriSign TRXTYPE=S TENDER=C AMT=1.50 ACCT=4111111111111111 EXPDATE=0904"); if (!$response) {die("Couldn't establish link to Verisign.\n");} echo "Verisign raw response was ".$response; pfpro_cleanup();?
Prev
Home
Next
Up
PHP Manual
Prev
Next
At the time of writing, this was L211.
Prev
Home
Next
Up
PHP Options Information
PHP Manual
Prev
Next
This function behaves exactly as fsockopen() with the difference that the connection is not closed after the script finishes.
It is the persistent version of fsockopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_affected_rows() returns the number of tuples (instances / records / rows) affected by INSERT, UPDATE, and DELETE queries executed by pg_query().
If no tuple is affected by this function, it will return 0.
Example 1. pg_affected_rows()
?php $result = pg_query ($conn, "INSERT INTO publisher VALUES ('Author')"); $cmdtuples = pg_affected_rows ($result); echo $cmdtuples. "tuples are affected .";?
Note:
This function used to be called pg_cmdtuples().
See also pg_query() and pg_num_rows().
Prev
Home
Next
PostgreSQL functions
Up
PHP Manual
Prev
Next
pg_cancel_query() cancel asynchronous query sent by pg_send_query().
You cannot cancel query executed by pg_query().
See also pg_send_query() and pg_connection_busy()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_client_encoding() returns the client encoding as the string.
The returned string should be either:
Note:
This function requires PHP-4.0.3 or higher and PostgreSQL-7.0 or higher.
If libpq is compiled without multibyte encoding support, pg_set_client_encoding() always return "SQL_ASCII ".
Supported encoding depends on PostgreSQL version.
Refer to PostgreSQL manual for details to enable multibyte support and encoding supported.
The function used to be called pg_clientencoding().
See also pg_set_client_encoding().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Using pg_close() is not usually necessary, as non-persistent open connections are automatically closed at the end of the script.
If there is open large object resource on the connection, do not close the connection before closing all large object resources.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_connect() returns a connection resource that is needed by other PostgreSQL functions.
pg_connect() opens a connection to a PostgreSQL database specified by the connection_string.
It returns a connection resource on success.
It returns FALSE if the connection could not be made. connection_string should be a quoted string.
Using pg_connect
?php $dbconn = pg_connect ("dbname=mary"); / /connect to a database named "mary "$dbconn2 = pg_connect ("host=localhost port=5432 dbname=mary"); / / connect to a database named "mary" on "localhost "at port "5432" $dbconn3 = pg_connect ("host=sheep port=5432 dbname=mary user=lamb password=foo"); / /connect to a database named "mary "on the host "sheep" with a username and password $conn_string = "host=sheep port=5432 dbname=test user=lamb password=bar"; $dbconn4 = pg_connect ($conn_string); / /connect to a database named "test "on the host "sheep" with a username and password?
If a second call is made to pg_connect() with the same connection_string, no new connection will be established, but instead, the connection resource of the already opened connection will be returned.
You can have multiple connections to the same database if you use different connection string.
The old syntax with multiple parameters $conn = pg_connect ("host", "port", "options", "tty", "dbname") has been deprecated.
See also pg_pconnect(), pg_close(), pg_host(), pg_port(), pg_tty(), pg_options() and pg_dbname().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_connection_busy() returns TRUE if the connection is busy.
If it is busy, a previous query is still executing.
If pg_get_result() is called, it will be blocked.
See also pg_connection_status() and pg_get_result()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_connection_reset() resets the connection.
Returns TRUE on success or FALSE on failure.
See also pg_connect(), pg_pconnect() and pg_connection_status()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_connection_status() returns a connection status.
Possible statuses are PGSQL_CONNECTION_OK and PGSQL_CONNECTION_BAD.
See also pg_connection_busy().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_copy_from() insert records into a table from rows.
It issues COPY FROM SQL command internally to insert records.
Returns TRUE on success or FALSE on failure.
See also pg_copy_to()
Prev
Home
Next
Up
PHP Manual
Prev
Next
It issues COPY TO SQL command internally to insert records.
It returns FALSE on failure.
See also pg_copy_from()
Prev
Home
Next
Up
PHP Manual
Prev
Next
It returns FALSE, if connection is not a valid PostgreSQL connection resource.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pg_delete
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.
Returns TRUE on success or FALSE on failure.
For further details and an example, see also pg_put_line().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_escape_bytea() escapes string for bytea datatype.
It returns escaped string.
Note:
When you SELECT bytea type, PostgreSQL returns octal byte value prefixed by\ (e.g. \032).
Users are supposed to convert back to binary format by yourself.
This function requires PostgreSQL 7.2 or later.
With PostgreSQL 7.2.0 and 7.2.1, bytea type must be casted when you enable multi-byte support. i.e.
INSERT INTO test_table (image) VALUES ('$image_escaped'::bytea); PostgreSQL 7.2.2 or later does not need cast.
Exception is when client and backend character encoding does not match, there may be multi-byte stream error.
User must cast to bytea to avoid this error.
Support for built-in unescape function will be added when it 's available.
See also pg_escape_string()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_escape_string() escapes string for text / char datatype.
It returns escaped string for PostgreSQL.
Use of this function is recommended instead of addslashes().
Note:
This function requires PostgreSQL 7.2 or later.
See also pg_escape_bytea()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_array() returns an array that corresponds to the fetched row (tuples / records).
It returns FALSE, if there are no more rows.
pg_fetch_array() is an extended version of pg_fetch_row().
In addition to storing the data in the numeric indices (field index) to the result array, it also stores the data in associative indices (field name) by default.
row is row (record) number to be retrieved.
First row is 0.
result_type is optional parameter controls how return value is initialized. result_type is a constant and can take the following values:
PGSQL_ASSOC, PGSQL_NUM, and PGSQL_BOTH. pg_fetch_array() PGSQL_ASSOC, PGSQL_NUM, and PGSQL_BOTH. pg_fetch_array() returns associative array that has field name as key for PGSQL_ASSOC. field index as key with PGSQL_NUM and both field name / index as key with PGSQL_BOTH.
Default is PGSQL_BOTH.
pg_fetch_array() is NOT significantly slower than using pg_fetch_row(), while it provides a significant ease of use.
See also pg_fetch_row() and pg_fetch_object() and pg_fetch_result().
Example 1.
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "An error occured.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM authors"); if (!$result) {echo "An error occured.\n"; exit;} $arr = pg_fetch_array ($result, 0, PGSQL_NUM); echo $arr[0]. "- array\n"; $arr = pg_fetch_array ($result, 1, PGSQL_ASSOC); echo $arr["author"]." - array\n";?
Note:
From 4.1.0, row became optional.
Calling pg_fetch_array() will increment internal row counter by 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
It returns FALSE if there are no more rows or error.
pg_fetch_object() is similar to pg_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
row is row (record) number to be retrieved.
Speed-wise, the function is identical to pg_fetch_array(), and almost as quick as pg_fetch_row() (the difference is insignificant).
Note:
From 4.3.0, result_type is default to PGSQL_ASSOC while older versions' default was PGSQL_BOTH.
There is no use for numeric property, since numeric property name is invalid in PHP.
result_type may be deleted in future versions.
See also pg_query(), pg_fetch_array(), pg_fetch_row() and pg_fetch_result().
Example 1.
Postgres fetch object
H1 Failed connecting to postgres database ?php echo $database? / H1 ?php exit; endif; $qu = pg_query ($db_conn, "SELECT * FROM verlag ORDER BY autor"); $row = 0; / / postgres needs a row counter other dbs might not while ($data = pg_fetch_object ($qu, $row)) {echo $data - autor. "("; echo $data - jahr ."):"; echo $data - titel. "BR"; $row++;}?
PRE ?php $fields[] = Array ("autor", "Author"); $fields[] = Array ("jahr", "Year"); $fields[] = Array ("titel"," Title"); $row= 0; / / postgres needs a row counter other dbs might not while ($data = pg_fetch_object ($qu, $row)) {echo "----------\n"; reset ($fields); while (list (,$item) = each ($fields)): echo $item[1] .": ".$data - $item[0] ."\n"; endwhile; $row++;} echo "----------\n";? / PRE ?php pg_free_result ($qu); pg_close ($db_conn);?
Note:
From 4.1.0, row became optional.
Calling pg_fetch_object() will increment internal row counter counter by 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_result() returns values from a result resource returned by pg_query(). row is integer. field is field name (string) or field index (integer).
The row and field specify what cell in the table of results to return.
Row numbering starts from 0.
Instead of naming the field, you may use the field index as an unquoted number.
Field indices start from 0.
All forms of integer types are returned as integer values.
All forms of float, and real types are returned as float All forms of float, and real types are returned as float values.
Boolean is returned as "t" or "f ".
All other types, including arrays are returned as strings formatted in the same default PostgreSQL manner that you would see in the psql program.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_row() fetches one row of data from the result associated with the specified result resource.
The row (record) is returned as an array.
Each result column is stored in an array offset, starting at offset 0.
It returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
See also: pg_query(), pg_fetch_array(), pg_fetch_object() and pg_fetch_result().
Example 1.
Postgres fetch row
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "An error occured.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM authors"); if (!$result) {echo "An error occured.\n"; exit;} while ($row = pg_fetch_row($result, $i)) {for ($j=0; $j count($row); $j++) {echo "$row[$j] nbsp ;";} echo "BR";}?
Note:
From 4.1.0, row became optional.
Calling pg_fetch_row() will increment internal row counter by 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_is_null() test if a field is NULL or not.
It returns 0 if the field in the given row is NOT NULL.
Field can be specified as column index (number) or fieldname (string).
Row numbering starts at 0.
Note:
This function used to be called pg_fieldisnull().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource.
Field numbering starts from 0.
Note:
This function used to be called pg_fieldname().
See also pg_field_num().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_num() will return the number of the column (field) slot that corresponds to the field_name in the given PostgreSQL result resource.
Field numbering starts at 0.
This function will return -1 on error.
Note:
This function used to be called pg_fieldnum().
See also pg_field_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result.
Row numbering starts at 0.
This function will return -1 on an error.
Note:
This function used to be called pg_field_prtlen().
See also pg_field_size().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result.
Field numbering starts at 0.
A field size of -1 indicates a variable length field.
This function will return FALSE on error.
Note:
This function used to be called pg_fieldsize().
See also pg_field_prtlen() and pg_field_type().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_type() returns a string containing the type name of the given field_number in the given PostgreSQL result resource.
Field numbering starts at 0.
Note:
This function used to be called pg_fieldtype().
See also pg_field_len() and pg_field_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_free_result() only needs to be called if you are worried about using too much memory while your script is running.
All result memory will automatically be freed when the script is finished.
But, if you are sure you are not going to need the result data anymore in a script, you may call pg_free_result() with the result resource as an argument and the associated result memory will be freed.
Returns TRUE on success or FALSE on failure.
Note:
This function used to be called pg_freeresult().
See also pg_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_get_result() get result resource from async query executed by pg_send_query(). pg_send_query() can send multiple queries to PostgreSQL server and pg_get_result() pg_get_result() get result resource from async query executed by pg_send_query(). pg_send_query() can send multiple queries to PostgreSQL server and pg_get_result() is used to get query result one by one.
If there is no more results, it returns FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_host() returns the host name of the given PostgreSQL connection resource is connected to.
See also pg_connect() and pg_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pg_insert
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_last_error() returns the last error message for given connection.
Error messages may be overwritten by internal PostgreSQL( libpq) function calls.
It may not return appropriate error message, if multiple errors are occured inside a PostgreSQL module function.
Use pg_result_error(), pg_result_status() and pg_connection_status() for better error handling.
Note:
This function used to be called pg_errormessage().
See also pg_result_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_last_notice() returns the last notice message from the PostgreSQL server specified by connection.
The PostgreSQL server sends notice messages in several cases, e.g. if the transactions can 't be continued.
With pg_last_notice(), you can avoid issuing useless queries, by checking whether the notice is related to the transaction or not.
Warning
This function is EXPERIMENTAL and it is not fully implemented yet. pg_last_notice() was added in PHP 4.0.6.
However, PHP 4.0.6 has problem with notice message handling.
Use of the PostgreSQL module with PHP 4.0.6 is not recommended even if you are not using pg_last_notice().
This function is fully implemented in PHP 4.3.0.
PHP earlier than PHP 4.3.0 ignores database connection parameter.
Notice message tracking can be set to optional by setting 1 for pgsql.ignore_notice ini from PHP 4.3.0.
Notice message logging can be set to optional by setting 0 for pgsql.log_notice ini from PHP 4.3.0.
Unless pgsql.ignore_notice is set to 0, notice message cannot be logged.
See also pg_query() and pg_last_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_last_oid() is used to retrieve the oid assigned to an inserted tuple (record) if the result resource is used from the last command sent via pg_query() and was an SQL INSERT.
Returns a positive integer if there was a valid oid.
It returns FALSE if an error occurs or the last command sent via pg_query() was not an INSERT or INSERT is failed.
OID field became an optional field from PostgreSQL 7.2.
When OID field is not defined in a table, programmer must use pg_result_status() to check if record is is inserted successfully or not.
Note:
This function used to be called pg_getlastoid().
See also pg_query() and pg_result_status()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_close() closes a Large Object. large_object is a resource for the large object from pg_lo_open().
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loclose().
See also pg_lo_open(), pg_lo_create() and pg_lo_import().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_create() creates a Large Object and returns the oid of the large object. connection specifies a valid database connection opened by pg_connect() or pg_pconnect().
PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access.
INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above).
It returns large object oid, otherwise it returns FALSE if an error occurred.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_locreate().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The oid argument specifies oid of the large object to export and the pathname argument specifies the pathname of the file.
It returns FALSE if an error occurred, TRUE otherwise.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loexport().
See also pg_lo_import().
Prev
Home
Next
Up
PHP Manual
Prev
Next
In versions before PHP 4.2.0 the syntax of this function was different, see the following definition:
It returns FALSE if an error occurred, oid of the just created large object otherwise.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Note:
This function used to be called pg_loimport().
See also pg_lo_export() and pg_lo_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_open() opens a Large Object and returns large object resource.
The resource encapsulates information about the connection. oid specifies a valid large object oid and mode can be either "r", "w", or "rw".
It returns FALSE if there is an error.
Warning
Do not close the database connection before closing the large object resource.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loopen().
See also pg_lo_close() and pg_lo_create().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers.
Mainly intended for sending binary data like images or sound.
It returns FALSE, if an error occurred.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loreadall().
See also pg_lo_read().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_read() reads at most len bytes from a large object and returns it as a string. large_object specifies a valid large object resource and len specifies the maximum allowable size of the large object segment.
It returns FALSE if there is an error.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loread().
See also pg_lo_read_all().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also pg_lo_tell().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also pg_lo_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_unlink() deletes a large object with the oid.
Returns TRUE on success or FALSE on failure.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_lo_unlink().
See also pg_lo_create() and pg_lo_import().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_write() writes at most to a large object from a variable data and returns the number of bytes actually written, or FALSE in the case of an error. large_object is a large object resource from pg_lo_open().
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_lo_write().
See also pg_lo_create() and pg_lo_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_num_fields() returns the number of fields (columns) in a PostgreSQL result.
The argument is a result resource returned by pg_query().
This function will return -1 on error.
Note:
This function used to be called pg_numfields().
See also pg_num_rows() and pg_affected_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_num_rows() will return the number of rows in a PostgreSQL result resource. result is a query result resource returned by pg_query().
This function will return -1 on error.
Note:
Use pg_affected_rows() to get number of rows affected by INSERT, UPDATE and DELETE query.
Note:
This function used to be called pg_numrows().
See also pg_num_fields() and pg_affected_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_pconnect() opens a connection to a PostgreSQL database.
It returns a connection resource that is needed by other PostgreSQL functions.
For a description of the connection_string parameter, see pg_connect().
To enable persistent connection, the pgsql.allow_persistent php.ini To enable persistent connection, the pgsql.allow_persistent php.ini directive must be set to "On" (which is the default).
The maximum number of persistent connection can be defined with the pgsql.max_persistent php.ini The maximum number of persistent connection can be defined with the pgsql.max_persistent php.ini directive (defaults to -1 for no limit).
The total number of connections can be set with the pgsql.max_links php.ini directive.
pg_close() will not close persistent links generated by pg_pconnect().
See also pg_connect(), and the section Persistent Database Connections for more information.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_port() returns the port number that the given PostgreSQL connection resource is connected to.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server.
This is useful for example for very high-speed inserting of data into a table, initiated by starting a PostgreSQL copy-operation.
That final NULL-character is added automatically.
Returns TRUE on success or FALSE on failure.
Note:
The application must explicitly send the two characters "\." on the last line to indicate to the backend that it has finished sending its data.
See also pg_end_copy().
Example 1.
High-speed insertion of data into a table
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_query() returns a query result resource if query could be executed.
It returns FALSE on failure or if connection is not a valid connection.
The connection must be a valid connection that was returned by pg_connect() or pg_pconnect().
The return value of this function is an query result resource to be used to access the results from other PostgreSQL functions such as pg_fetch_array().
Default connection is the last connection made by pg_connect() or pg_pconnect().
Although connection can be omitted, it is not recommended, since it could be a cause of hard to find bug in script.
Note:
This function used to be called pg_exec(). pg_exec() is still available for compatibility reasons but users are encouraged to use the newer name.
See also pg_connect(), pg_pconnect(), pg_fetch_array(), pg_fetch_object(), pg_num_rows(), and pg_affected_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_result_error() returns error message associated with result resource.
Therefore, user has better chance to get better error message than pg_last_error().
See also pg_query(), pg_send_query(), pg_get_result(), pg_last_error() and pg_last_notice()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_result_status() returns status of result resource.
Possible retun values are PGSQL_EMPTY_QUERY, PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_TO, PGSQL_COPY_FROM, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR and PGSQL_FATAL_ERROR.
See also pg_connection_status().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pg_select
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_send_query() send asynchronous query to the connection.
Unlike pg_query(), it can send multiple query to PostgreSQL and get the result one by one using pg_get_result().
Script execution is not blocked while query is executing.
Use pg_connection_busy() to check connection is busy (i.e. query is executing).
Query may be canceled by calling pg_cancel_query().
Although user can send multiple query at once, user cannot send multiple query over busy connection.
If query is sent while connection is busy, it waits until last query is finished and discards all result.
See also pg_query(), pg_cancel_query(), pg_get_result() and pg_connection_busy()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error.
SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE, MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5, WIN1250.
Available encoding depends on your PostgreSQL and libpq version.
Refer to PostgreSQL manual for supported encodings for your PostgreSQL.
Note:
This function requires PHP-4.0.3 or higher and PostgreSQL-7.0 or higher.
Supported encoding depends on PostgreSQL version.
Refer to PostgreSQL manual for details.
The function used to be called pg_setclientencoding().
See also pg_client_encoding().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_trace() enables tracing of the PostgreSQL frontend / backend communication to a debugging file specified as pathname.
To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.
For those who are not, it can still be useful for tracing errors in queries sent to the server, you could do for example grep '^To backend' trace.log and see what query actually were sent to the PostgreSQL server.
For more information, refer to PostgreSQL manual.
pathname and mode are the same as in fopen() (mode defaults to'w'), connection specifies the connection to trace and defaults to the last one opened.
It returns TRUE if pathname could be opened for logging, FALSE otherwise.
See also fopen() and pg_untrace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_tty() returns the tty name that server side debugging output is sent to on the given PostgreSQL connection resource.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Stop tracing started by pg_trace(). connection specifies the connection that was traced and defaults to the last one opened.
Returns always TRUE.
See also pg_trace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pg_update
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The output may be customized by passing one or more of the following constants bitwise values summed together in the optional what parameter.
?php / / Show all information, defaults to INFO_ALL phpinfo(); / / Show just the module information. / / phpinfo(8) yields identical results. phpinfo(INFO_MODULES);?
See also: phpversion(), phpcredits(), php_logo_guid(), ini_get(), ini_set(), and the section on Predefined Variables.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
See also: phpinfo(), phpversion(), and phpcredits().
Prev
Home
Next
Up
PHP Manual
Prev
Next
php_sapi_name() returns a lowercase string which describes the type of interface between web server and PHP (Server API, SAPI).
In CGI PHP, this string is "cgi", in mod_php for Apache, this string is "apache" and so on.
Example 1. php_sapi_name() Example
$sapi_type = php_sapi_name(); if ($sapi_type == "cgi") print "You are using CGI PHP\n"; else print "You are not using CGI PHP\n";
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. php_uname() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This information is also available in the predefined constant PHP_VERSION.
Example 1. phpversion() Example
4.1.1' echo'Current PHP version: '. phpversion();?
See also version_compare(), phpinfo(), phpcredits(), php_logo_guid(), and zend_version().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The returned float has a precision based on the precision directive in php.ini, which defaults to 14.
Also, you can use the M_PI constant which yields identical results to pi().
echo pi(); / / 3.1415926535898 echo M_PI; / / 3.1415926535898
Prev
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Opens a pipe to a process executed by forking the command given by command.
This pointer may be used with fgets(), fgetss(), and fputs().
Note:
If you' re looking for bi-directional support (two-way), use proc_open().
Example 1. popen() examole
Note:
If the command to be executed could not be found, a valid resource is returned.
This may seem odd, but makes sense; it allows you to access any error message returned by the shell:
?php error_reporting( E_ALL); / * Add redirection so we can get stderr. * / $handle = popen(' / path / to / spooge 2 1', 'r'); echo "'$handle'; ". gettype($handle). "\n"; $read = fread($handle, 2096); echo $read; pclose($handle);?
See also pclose(), fopen(), and proc_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an alias for current().
See also end(), next(), prev(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
POSIX functions
Up
PHP Manual
Prev
Next
Needs to be written ASAP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the numeric effective group ID of the current process.
See also posix_getgrgid() for information on how to convert this into a useable group name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the numeric effective user ID of the current process.
See also posix_getpwuid() for information on how to convert this into a useable username.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the numeric real group ID of the current process.
See also posix_getgrgid() for information on how to convert this into a useable group name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of integers containing the numeric group ids of the group set of the current process.
See also posix_getgrgid() for information on how to convert this into useable group names.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the login name of the user owning the current process.
See posix_getpwnam() for information how to get more information about this user.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the process group identifier of the process pid.
This is not a POSIX function, but is common on BSD and System V systems.
If your system does not support this function at system level, this PHP function will always return FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the process group identifier of the current process.
See POSIX.1 and the getpgrp( 2) manual page on your POSIX system for more information on process groups.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the process identifier of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the process identifier of the parent process of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array containing information about a user referenced by an alphanumeric username, passed in the username parameter.
The array elements returned are:
Table 1.
The user information array
Description
The name element contains the username of the user.
This is a short, usually less than 16 character "handle" of the user, not her real, full name.
This should be the same as the username parameter used when calling the function, and hence redundant.
The passwd element contains the user 's password in an encrypted format.
Often, for example on a system employing "shadow" passwords, an asterisk is returned instead.
User ID of the user in numeric form.
The group ID of the user.
Use the function posix_getgrgid() to resolve the group name and a list of its members.
GECOS is an obsolete term that refers to the finger information field on a Honeywell batch processing system.
The field, however, lives on, and its contents have been formalized by POSIX.
The field contains a comma separated list containing the user 's full name, office phone, office number, and home phone number.
On most systems, only the user 's full name is available.
This element contains the absolute path to the home directory of the user.
The shell element contains the absolute path to the executable of the user 's default shell.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array containing information about a user referenced by a numeric user ID, passed in the uid parameter.
The array elements returned are:
Table 1.
The user information array
Description
The name element contains the username of the user.
This is a short, usually less than 16 character "handle" of the user, not her real, full name.
The passwd element contains the user 's password in an encrypted format.
Often, for example on a system employing "shadow" passwords, an asterisk is returned instead.
User ID, should be the same as the uid parameter used when calling the function, and hence redundant.
The group ID of the user.
Use the function posix_getgrgid() to resolve the group name and a list of its members.
GECOS is an obsolete term that refers to the finger information field on a Honeywell batch processing system.
The field, however, lives on, and its contents have been formalized by POSIX.
The field contains a comma separated list containing the user 's full name, office phone, office number, and home phone number.
On most systems, only the user 's full name is available.
This element contains the absolute path to the home directory of the user.
The shell element contains the absolute path to the executable of the user 's default shell.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written ASAP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the sid of the process pid.
If pid is 0, the sid of the current process is returned.
This is not a POSIX function, but is common on System V systems.
If your system does not support this function at system level, this PHP function will always return FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the numeric real user ID of the current process.
See also posix_getpwuid() for information on how to convert this into a useable username.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Send the signal sig to the process with the process identifier pid.
Returns FALSE, if unable to send the signal, TRUE otherwise.
See also the kill( 2) manual page of your POSIX system, which contains additional information about negative process identifiers, the special pid 0, the special pid -1, and the signal number 0.
Prev
Home
Next
Up
PHP Manual
Prev
Next
posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.
The second parameter mode has to be given in octal notation (e.g.
The permission of the newly created FIFO also depends on the setting of the current umask().
The permissions of the created file are (mode ~umask).
Note:
When safe mode is enabled, PHP checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the effective group ID of the current process.
This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function.
Returns TRUE on success, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the real user ID of the current process.
This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function.
Returns TRUE on success, FALSE otherwise.
See also posix_setgid().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the real group ID of the current process.
This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function.
The appropriate order of function calls is posix_setgid() first, posix_setuid() last.
Returns TRUE on success, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Let the process pid join the process group pgid.
See POSIX.1 and the setsid( 2) manual page on your POSIX system for more informations on process groups and job control.
Returns TRUE on success, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Make the current process a session leader.
See POSIX.1 and the setsid( 2) manual page on your POSIX system for more informations on process groups and job control.
Returns the session id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the real user ID of the current process.
This is a privileged function and you need appropriate privileges (usually root) on your system to be able to perform this function.
Returns TRUE on success, FALSE otherwise.
See also posix_setgid().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a hash of strings with information about the current process CPU usage.
The indices of the hash are
ticks - the number of clock ticks that have elapsed since reboot.
utime - user time used by the current process.
stime - system time used by the current process.
cutime - user time used by current process and children.
cstime - system time used by current process and children.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a hash of strings with information about the system.
The indices of the hash are
sysname - operating system name (e.g.
nodename - system name (e.g. valiant)
release - operating system release (e.g.
version - operating system version (e.g. #4 Tue Jul 20 17:01:36 MEST 1999)
machine - system architecture (e.g. i586)
domainname - DNS domainname (e.g. php.net)
domainname is a GNU extension and not part of POSIX.1, so this field is only available on GNU systems or when using the GNU libc.
Posix requires that you must not make any assumptions about the format of the values, e.g. you cannot rely on three digit version numbers or anything else returned by this function.
Prev
Home
Next
Up
PostgreSQL functions
PHP Manual
Prev
Next
?php var_dump( pow(2,8)); / / int(256) echo pow(-1,20); / / 1 echo pow(0, 0); / / 1 echo pow(-1, 5.5); / / error?
See also exp() and sqrt().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. preg_grep() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2. find the word "web"
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
When working with a replacement pattern where a backreference is immediately followed by another number (i.e.: placing a literal number immediately after a matched pattern), you cannot use the familiar \\1 notation for your backreference. \\11, for example, would confuse preg_replace() since it does not know whether you want the \\1 backreference followed by a literal 1, or the \\11 When working with a replacement pattern where a backreference is immediately followed by another number (i.e.: placing a literal number immediately after a matched pattern), you cannot use the familiar \\1 notation for your backreference. \\11, for example, would confuse preg_replace() since it does not know whether you want the \\1 backreference followed by a literal 1, or the \\11 backreference followed by nothing.
Example 1.
Note:
Example 2.
Example 3.
Example 4.
Example 5.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. preg_split() Example 1. preg_split() example:
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the array element in the previous place that 's pointed by the internal array pointer, or FALSE if there are no more elements.
Warning
If the array contains empty elements then this function will return FALSE for these elements as well.
To properly traverse an array which may contain empty elements see the each() function.
prev() behaves just like next(), except it rewinds the internal array pointer one place instead of advancing it.
See also current(), end(), next(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_abort() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_close() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_create_dc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_bmp() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_chord() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_elipse() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_line() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_pie() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_rectangle() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_roundrect() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_text() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_get_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_list() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_logical_fontheight() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_open() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_select_brush() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_select_font() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_select_pen() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_set_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_start_doc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_write() example
Prev
Home
Next
Up
Pspell Functions
PHP Manual
Prev
Next
Produces output according to format, which is described in the documentation for sprintf().
See also print(), sprintf(), sscanf(), fscanf(), and flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note that the here document terminator must appear on a line with just a semicolon no extra whitespace!
See also echo(), printf(), and flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
If given an array, values will be presented in a format that shows keys and elements.
Use reset() to bring it back to beginning.
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Which will output:
Note:
An example is print_r( $GLOBALS) because $GLOBALS is itself a global variable that contains a reference to itself.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_add_to_personal() adds a word to the personal wordlist.
If you used pspell_new_config() with pspell_config_personal() to open the dictionary, you can save the wordlist later with pspell_save_wordlist().
Please, note that this function will not work unless you have pspell .11.2 and aspell .32.5 or later.
Example 1. pspell_add_to_personal()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); $pspell_link = pspell_new_config ($pspell_config); pspell_add_to_personal ($pspell_link, "Vlad"); pspell_save_wordlist ($pspell_link);
Prev
Home
Next
Pspell Functions
Up
PHP Manual
Prev
Next
pspell_add_to_session() adds a word to the wordlist associated with the current session.
It is very similar to pspell_add_to_personal()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_check() checks the spelling of a word and returns TRUE if the spelling is correct, FALSE if not.
Example 1. pspell_check()
$pspell_link = pspell_new ("en"); if (pspell_check ($pspell_link, "testt")) {echo "This is a valid spelling";} else {echo "Sorry, wrong spelling";}
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_clear_session() clears the current session.
The current wordlist becomes blank, and, for example, if you try to save it with pspell_save_wordlist(), nothing happens.
Example 1. pspell_add_to_personal()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); $pspell_link = pspell_new_config ($pspell_config); pspell_add_to_personal ($pspell_link, "Vlad"); pspell_clear_session ($pspell_link); pspell_save_wordlist ($pspell_link); / /"Vlad" will not be saved
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_config_create() has a very similar syntax to pspell_new().
In fact, using pspell_config_create() immediatelly followed by pspell_new_config() will produce the exact same result.
The language parameter is the language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.
Known values are 'american', 'british', and'canadian'.
The jargon parameter contains extra information to distinguish two different words lists that have the same language and spelling parameters.
The encoding parameter is the encoding that words are expected to be in.
This parameter is largely untested, so be careful when using.
The mode parameter is the mode in which spellchecker will work.
PSPELL_FAST - Fast mode (least number of suggestions)
PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions)
For more information and examples, check out inline manual pspell website: http: / /aspell.net /.
Example 1. pspell_config_create()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_personal ($pspell_config, "en");
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_config_ignore() should be used on a config before calling pspell_new_config().
This function allows short words to be skipped by the spellchecker.
Words less then n characters will be skipped.
Example 1. pspell_config_ignore()
$pspell_config = pspell_config_create ("en"); pspell_config_ignore($pspell_config, 5); $pspell_link = pspell_new_config($pspell_config); pspell_check($pspell_link, "abcd"); / /will not result in an error
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_config_mode() should be used on a config before calling pspell_new_config().
This function determines how many suggestions will be returned by pspell_suggest().
The mode parameter is the mode in which spellchecker will work.
There are several modes available:
PSPELL_FAST - Fast mode (least number of suggestions)
PSPELL_NORMAL - Normal mode (more suggestions)
PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions)
Example 1. pspell_config_mode()
$pspell_config = pspell_config_create ("en"); pspell_config_mode($pspell_config, PSPELL_FAST); $pspell_link = pspell_new_config($pspell_config); pspell_check($pspell_link, "thecat");
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_config_personal() should be used on a config before calling pspell_new_config().
The personal wordlist will be loaded and used in addition to the standard one after you call pspell_new_config().
If the file does not exist, it will be created.
The file is also the file where pspell_save_wordlist() will save personal wordlist to.
The file should be writable by whoever php runs as (e.g. nobody).
Please, note that this function will not work unless you have pspell .11.2 and aspell .32.5 or later.
Example 1. pspell_config_personal()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); $pspell_link = pspell_new_config ($pspell_config); pspell_check ($pspell_link, "thecat");
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_config_repl() should be used on a config before calling pspell_new_config().
The replacement pairs improve the quality of the spellchecker.
When a word is misspelled, and a proper suggestion was not found in the list, pspell_store_replacement() can be used to store a replacement pair and then pspell_save_wordlist() to save the wordlist along with the replacement pairs.
The file should be writable by whoever php runs as (e.g. nobody).
Please, note that this function will not work unless you have pspell .11.2 and aspell .32.5 or later.
Example 1. pspell_config_repl()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_config ($pspell_config); pspell_check ($pspell_link, "thecat");
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_config_runtogether() should be used on a config before calling pspell_new_config().
This function determines whether run-together words will be treated as legal compounds.
That is, "thecat" will be a legal compound, athough there should be a space between the two words.
Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions.
Example 1. pspell_config_runtogether()
$pspell_config = pspell_config_create ("en"); pspell_config_runtogether ($pspell_config, true); $pspell_link = pspell_new_config ($pspell_config); pspell_check ($pspell_link, "thecat");
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_config_save_repl() should be used on a config before calling pspell_new_config().
It determines whether pspell_save_wordlist() will save the replacement pairs along with the wordlist.
Usually there is no need to use this function because if pspell_config_repl() is used, the replacement pairs will be saved by pspell_save_wordlist() anyway, and if it is not, the replacement pairs will not be saved.
Please, note that this function will not work unless you have pspell .11.2 and aspell .32.5 or later.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_new_config() opens up a new dictionary with settings specified in a config, created with with pspell_config_create() and modified with pspell_config_*() functions.
This method provides you with the most flexibility and has all the functionality provided by pspell_new() and pspell_new_personal().
The config parameter is the one returned by pspell_config_create() when the config was created.
Example 1. pspell_new_config()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_config ($pspell_config);
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_new() opens up a new dictionary and returns the dictionary link identifier for use in other pspell functions.
The language parameter is the language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.
The spelling parameter is the requested spelling for languages with more than one spelling such as English.
Known values are 'american', 'british', and'canadian'.
The jargon parameter contains extra information to distinguish two different words lists that have the same language and spelling parameters.
The encoding parameter is the encoding that words are expected to be in.
Valid values are 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16', 'machine unsigned 32'.
This parameter is largely untested, so be careful when using.
The mode parameter is the mode in which spellchecker will work.
There are several modes available:
PSPELL_FAST - Fast mode (least number of suggestions)
PSPELL_NORMAL - Normal mode (more suggestions)
PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions)
PSPELL_RUN_TOGETHER PSPELL_RUN_TOGETHER - Consider run-together words as legal compounds.
That is, "thecat" will be a legal compound, athough there should be a space between the two words.
Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions.
For more information and examples, check out inline manual pspell website: http: / /aspell.net /.
Example 1. pspell_new()
$pspell_link = pspell_new ("en", "","", "", (PSPELL_FAST_BAR_PSPELL_RUN_TOGETHER));
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_new_personal() opens up a new dictionary with a personal wordlist and returns the dictionary link identifier for use in other pspell functions.
The wordlist can be modified and saved with pspell_save_wordlist(), if desired.
However, the replacement pairs are not saved.
In order to save replacement pairs, you should create a config using pspell_config_create(), set the personal wordlist file with pspell_config_personal(), set the file for replacement pairs with pspell_config_repl(), and open a new dictionary with pspell_new_config().
The personal parameter specifies the file where words added to the personal list will be stored.
It should be an absolute filename beginning with '/' because otherwise it will be relative to $HOME, which is "/ root" for most systems, and is probably not what you want.
The language parameter is the language code which consists of the two letter ISO 639 language code and an optional two letter ISO 3166 country code after a dash or underscore.
The spelling parameter is the requested spelling for languages with more than one spelling such as English.
Known values are 'american', 'british', and'canadian'.
The jargon parameter contains extra information to distinguish two different words lists that have the same language and spelling parameters.
The encoding parameter is the encoding that words are expected to be in.
Valid values are 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16', 'machine unsigned 32'.
This parameter is largely untested, so be careful when using.
The mode parameter is the mode in which spellchecker will work.
There are several modes available:
PSPELL_FAST - Fast mode (least number of suggestions)
PSPELL_NORMAL - Normal mode (more suggestions)
PSPELL_BAD_SPELLERS - Slow mode (a lot of suggestions)
PSPELL_RUN_TOGETHER PSPELL_RUN_TOGETHER - Consider run-together words as legal compounds.
That is, "thecat" will be a legal compound, athough there should be a space between the two words.
Changing this setting only affects the results returned by pspell_check(); pspell_suggest() will still return suggestions.
For more information and examples, check out inline manual pspell website: http: / /aspell.net /.
Example 1. pspell_new_personal()
$pspell_link = pspell_new_personal ("/ var / dictionaries / custom.pws", "en", "","", "", PSPELL_FAST_BAR_PSPELL_RUN_TOGETHER));
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_save_wordlist() saves the personal wordlist from the current session.
The dictionary has to be open with pspell_new_personal(), and the location of files to be saved specified with pspell_config_personal() and (optionally) pspell_config_repl().
Please, note that this function will not work unless you have pspell .11.2 and aspell .32.5 or later.
Example 1. pspell_add_to_personal()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ tmp / dicts / newdict"); $pspell_link = pspell_new_config ($pspell_config); pspell_add_to_personal ($pspell_link, "Vlad"); pspell_save_wordlist ($pspell_link);
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_store_replacement() stores a replacement pair for a word, so that replacement can be returned by pspell_suggest() later.
In order to be able to take advantage of this function, you have to use pspell_new_personal() to open the dictionary.
In order to permanently save the replacement pair, you have to use pspell_config_personal() and pspell_config_repl() to set the path where to save your custom wordlists, and then use pspell_save_wordlist() for the changes to be written to disk.
Please, note that this function will not work unless you have pspell .11.2 and aspell .32.5 or later.
Example 1. pspell_store_replacement()
$pspell_config = pspell_config_create ("en"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_config ($pspell_config); pspell_store_replacement ($pspell_link, $misspelled, $correct); pspell_save_wordlist ($pspell_link);
Prev
Home
Next
Up
PHP Manual
Prev
Next
pspell_suggest() returns an array of possible spellings for the given word.
Example 1. pspell_suggest()
$pspell_link = pspell_new ("en"); if (!pspell_check ($pspell_link, "testt")) {$suggestions = pspell_suggest ($pspell_link, "testt"); foreach ($suggestions as $suggestion) {echo "Possible spelling: $suggestion br ";}}
Prev
Home
Next
Up
PHP Manual
Prev
Next
The safe_mode_allowed_env_vars directive contains a comma-delimited list of prefixes.
By default, users will only be able to set environment variables that begin with PHP_ (e.g.
Note: if this directive is empty, PHP will let the user modify ANY environment variable!
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
Regular Expression Functions (POSIX Extended)
PHP Manual
Prev
Next
This function returns an 8-bit binary string corresponding to the decoded quoted printable string.
This function is similar to imap_qprint(), except this one does not require the IMAP module to work.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a version of str with a backslash character (\) before every character that is among these:
See also addslashes(), htmlentities(), htmlspecialchars(), nl2br(), and stripslashes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function converts number from radian to degrees.
See also deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
If you want a random number between 5 and 15 (inclusive), for example, use rand (5, 15).
Since 4.2.0 this is no longer necessary.
Note:
To get the same results in these versions the short example should be rand (5, 11) to get a random number between 5 and 15.
See also srand(), getrandmax(), and mt_rand().
Prev
Home
Next
Up
PHP Manual
Prev
Next
range() returns an array of elements from low to high, inclusive.
If low high, the sequence will be from high to low.
New parameter:
The optional step parameter was added in 5.0.0.
If a step value is given, it will be used as the increment between elements in the sequence. step should be given as a positive number.
If not specified, step will default to 1.
Example 1. range() examples
?php / / array( 0,1,2,3,4,5,6,7,8,9) foreach(range(0, 9) as $number) {echo $number;} / / The step parameter was introduced in 5.0.0 / / array(0,10,20,30,40,50,60,70,80,90,100) foreach(range(0, 100, 10) as $number) {echo $number;} / / Use of characters introduced in 4.1.0 / / array('a' ,'b' ,'c' ,'d' ,'e' ,'f' ,'g' ,'h' ,'i'); foreach(range('a', 'i') as $letter) {echo $letter;} / / array('c' ,'b' ,'a'); foreach(range('c', 'a') as $letter) {echo $letter;}?
Note:
Prior to version 4.1.0 the range() function only generated incrementing integer arrays.
Support for character sequences and decrementing arrays was added in 4.1.0.
See also shuffle() and foreach.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.
For example, the string
See also rawurlencode(), urldecode(), urlencode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string in which all non-alphanumeric characters except
Example 1. rawurlencode() example 1
echo 'a href="ftp: / /user :', rawurlencode('foo @+% / '), '@ftp.my.com / x.txt "';
Or, if you pass information in a PATH_INFO component of the URL:
echo 'a href="http: / /x.com / department_list_script /', rawurlencode('sales and marketing / Miami'), '"';
See also rawurldecode(), urldecode(), urlencode() and RFC 1738
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the filename of the next file from the directory.
The filenames are returned in the order in which they are stored by the filesystem.
We are explicitly testing whether the return value is identical to (equal to and of the same type as--see Comparison Operators for more information) FALSE since otherwise, any directory entry whose name evaluates to FALSE will stop the loop (e.g. a directory named "0").
List all files in a directory
/ / Note that !== did not exist until 4.0.0-RC2 ?php if ($handle = opendir(' / path / to / files')) {echo "Directory handle: $handle\n"; echo "Files:\n"; / * This is the correct way to loop over the directory. * / while (false !== ($file = readdir($handle))) {echo "$file\n";} / * This is the WRONG way to loop over the directory. * / while ($file = readdir($handle)) {echo "$file\n";} closedir($handle);}?
Note that readdir() will return the. and.. entries.
If you don 't want these, simply strip them out:
List all files in the current directory and strip out. and..
See also is_dir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Note:
The read_exif_data() function is an alias for exif_read_data().
See also exif_thumbnail().
Prev
Home
Next
Up
IMAP, POP3 and NNTP functions
PHP Manual
Prev
Next
Reads a file and writes it to the output buffer.
Returns the number of bytes read from the file.
If an error occurs, FALSE is returned and unless the function was called as @readfile, an error message is printed.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
You can use the optional second parameter and set it to "1", if you want to search for the file in the include_path, too.
See also fpassthru(), file(), fopen(), include(), require(), virtual() and Appendix I.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function adds a line to the command line history.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function clears the entire command line history.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function registers a completion function.
You must supply the name of an existing function which accepts a partial command line and returns an array of possible matches.
This is the same kind of functionality you 'd get if you hit your tab key while using Bash.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a single string from the user.
You may specify a string with which to prompt the user.
The line returned has the ending newline removed.
You must add this line to the history yourself using readline_add_history().
Example 1. readline()
/ / get 3 commands from user for ($i=0; $i 3; $i++) {$line = readline ("Command: "); readline_add_history ($line);} / /dump history print_r (readline_list_history()); / /dump variables print_r (readline_info());
Prev
Home
Next
Up
GNU Recode functions
PHP Manual
Prev
Next
If called with no parameters, this function returns an array of values for all the setting readline uses.
The elements will be indexed by the following values: done, end, erase_empty_line, library_version, line_buffer, mark, pending_input, point, prompt, readline_name, and terminal_name.
If called with one parameter, the value of that setting is returned.
If called with two parameters, the setting will be changed to the given value.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an array of the entire command line history.
The elements are indexed by integers starting at zero.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function reads a command history from a file.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function writes the command history to a file.
Prev
Home
Next
Up
PHP Manual
Prev
Next
readlink() does the same as the readlink C function and returns the contents of the symbolic link path or 0 in case of error.
See also is_link(), symlink(), and linkinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
realpath() expands all symbolic links and resolves references to '/. /', '/.. /' and extra '/' characters in the input path and return the canonicalized absolute pathname.
The resulting path will have no symbolic link, '/. /' or '/.. /' components.
realpath() returns FALSE on failure, e.g. if the file does not exists.
Example 1. realpath() example
$real_path = realpath (".. /.. / index.php");
See also: basename(), dirname(), and pathinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Recode the file referenced by file handle input into the file referenced by file handle output according to the recode request.
Returns FALSE, if unable to comply, TRUE otherwise.
This function does not currently process filehandles referencing remote files (URLs).
Both filehandles must refer to local files.
Example 1.
Basic recode_file() example
Prev
Home
Next
GNU Recode functions
Up
PHP Manual
Prev
Next
It has been added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Recode the string string according to the recode request request.
Returns the recoded string or FALSE, if unable to perform the recode request.
A simple recode request may be "lat1..iso646-de".
See also the GNU Recode documentation of your installation for detailed instructions about recode requests.
Example 1.
Basic recode_string() example:
print recode_string ("us..flat", "The following character has a diacritical mark: aacute ;");
Prev
Home
Next
Up
PHP Manual
Prev
Next
Registers the function named by function to be executed when script processing is complete.
If you call exit() within one registered shutdown function, processing will stop completely and no other registered shutdown functions will be called.
The registered shutdown functions are called after the request has been completed (including sending any output buffers), so it is not possible to send output to the browser using echo() or print(), or retrieve the contents of any output buffers using ob_get_contents().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to rename oldname to newname.
Returns TRUE on success or FALSE on failure.
Example 1.
Example with rename()
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The require() statement includes and evaluates the specific file.
require() includes and evaluates a specific file.
Detailed information on how this inclusion works is described in the documentation for include().
require() and include() are identical in every way except how they handle failure. include() produces a Warning while require() results in a Fatal Error.
In other words, don' t hesitate to use require() if you want a missing file to halt processing of the page. include() does not behave this way, the script will continue regardless.
Be sure to have an appropriate include_path setting as well.
Example 12-2.
Basic require() examples
See the include() documentation for more examples.
Note:
Prior to PHP 4.0.2, the following applies: require() will always attempt to read the target file, even if the line it's on never executes.
The conditional statement won' t affect require().
However, if the line on which the require() occurs is not executed, neither will any of the code in the target file be executed.
Similarly, looping structures do not affect the behaviour of require().
Although the code contained in the target file is still subject to the loop, the require() itself happens only once.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
See also include(), require_once(), include_once(), eval(), file(), readfile(), virtual() and include_path.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The require_once() statement includes and evaluates the specified file during the execution of the script.
This is a behavior similar to the require() This is a behavior similar to the require() statement, with the only difference being that if the code from a file has already been included, it will not be included again.
See the documentation for require() for more information on how this statement works.
require_once() should be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, and you want to be sure that it is included exactly once to avoid problems with function redefinitions, variable value reassignments, etc.
For examples on using require_once() and include_once(), look at the PEAR code included in the latest PHP source code distributions.
Note:
Be aware, that the behaviour of require_once() and include_once() may not be what you expect on a non case sensitive operating system (such as Windows).
Example 12-8. require_once() is case sensitive
require_once( "a.php"); / / this will include a.php require_once("A.php"); / / this will include a.php again on Windows!
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
See also: require(), include(), include_once(), get_required_files(), get_included_files(), readfile(), and virtual().
Prev
Home
Next
Up
PHP Manual
Prev
Next
reset() rewinds array's internal pointer to the first element.
reset() returns the value of the first array element.
See also current(), each(), next(), and prev().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
If called from within a function, the return() statement immediately ends execution of the current function, and returns its argument as the value of the function call. return() will also end the execution of an eval() statement or script file.
If called from the global scope, then execution of the current script file is ended.
If the current script file was include() ed or require() ed, then control is passed back to the calling file.
Furthermore, if the current script file was include() ed, then the value given to return() will be returned as the value of the include() Furthermore, if the current script file was include() ed, then the value given to return() will be returned as the value of the include() call.
If return() is called from within the main script file, then script execution ends.
For more information, see Returning values.
Note:
Note that since return() is a language construct and not a function, the parentheses surrounding its arguments are not required--in fact, it is more common to leave them out than to use them, although it doesn't matter one way or the other.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Resets the directory stream indicated by dir_handle to the beginning of the directory.
Prev
Home
Next
Up
DOM XML functions
PHP Manual
Prev
Next
Sets the file position indicator for handle to the beginning of the file stream.
If an error occurs, returns 0, otherwise it returns 1.
The file pointer must be valid, and must point to a file successfully opened by fopen().
Note:
If you have opened the file in append ("a") mode, any data you write to the file will always be appended, regardless of the file position.
See also fseek() and ftell().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to remove the directory named by dirname.
The directory must be empty, and the relevant permissions must permit this.
Returns TRUE on success or FALSE on failure.
See also mkdir() and unlink().
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP doesn' t handle strings like "12,300.2 "correctly by default.
echo round( 3.4); / / 3 echo round(3.5); / / 4 echo round(3.6); / / 4 echo round(3.6, 0); / / 4 echo round(1.95583, 2); / / 1.96 echo round(1241757, -3); / / 1242000
Note:
See also ceil() and floor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array in reverse order (highest to lowest).
Example 1. rsort() example
$fruits = array ("lemon", "orange", "banana", "apple"); rsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
0 = orange 1 = lemon 2 = banana 3 = apple
The fruits have been sorted in reverse alphabetical order.
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also arsort(), asort(), ksort(), sort(), and usort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Without the second parameter, rtrim() will strip these characters:
"\t" (ASCII 9 (0x09)), a tab.
"\r" (ASCII 13 (0x0D)), a carriage return.
"\x0B" (ASCII 11 (0x0B)), a vertical tab.
Simply list all characters that you want to be stripped.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
Information may be passed to functions via the argument list, which is a comma-delimited list of variables and / or constants.
PHP supports passing arguments by value (the default), passing by reference, and default argument values.
Variable-length argument lists are supported only in PHP 4 and later; see Variable-length argument lists and the function references for func_num_args(), func_get_arg(), and func_get_args() for more information.
A similar effect can be achieved in PHP 3 by passing an array of arguments to a function:
function takes_array( $input) {echo "$input[0] + $input[1] = ", $input[0]+$input[1];}
By default, function arguments are passed by value (so that if you change the value of the argument within the function, it does not get changed outside of the function).
If you wish to allow a function to modify its arguments, you must pass them by reference.
If you want an argument to a function to always be passed by reference, you can prepend an ampersand () to the argument name in the function definition:
function add_some_extra( $string) {$string .= 'and something extra .';} $str = 'This is a string, '; add_some_extra($str); echo $str; / / outputs'This is a string, and something extra.'
A function may define C++-style default values for scalar arguments as follows:
function makecoffee ($type = "cappuccino") {return "Making a cup of $type.\n";} echo makecoffee (); echo makecoffee ("espresso");
The output from the above snippet is:
Making a cup of cappuccino.
Making a cup of espresso.
The default value must be a constant expression, not (for example) a variable or class member.
Note that when using default arguments, any defaults should be on the right side of any non-default arguments; otherwise, things will not work as expected.
Consider the following code snippet:
function makeyogurt ($type = "acidophilus", $flavour) {return "Making a bowl of $type $flavour.\n";} echo makeyogurt ("raspberry"); / / won't work as expected
The output of the above example is:
Missing argument 2 in call to makeyogurt() in / usr / local / etc / httpd / htdocs / php3test / functest.html on line 41 Making a bowl of raspberry.
Now, compare the above with this:
function makeyogurt ($flavour, $type = "acidophilus") {return "Making a bowl of $type $flavour.\n";} echo makeyogurt ("raspberry"); / / works as expected
The output of this example is:
Making a bowl of acidophilus raspberry.
PHP 4 has support for variable-length argument lists in user-defined functions.
This is really quite easy, using the func_num_args(), func_get_arg(), and func_get_args() functions.
No special syntax is required, and argument lists may still be explicitly provided with function definitions and will behave as normal.
Prev
Home
Next
Functions
Up
Returning values
PHP Manual
Prev
Next
TRUE on success, FALSE on error.
sem_acquire() blocks (if necessary) until the semaphore can be acquired.
A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its max_acquire value to be exceeded.
See also: sem_get() and sem_release().
Prev
Home
Next
Up
PHP Manual
Prev
Next
A positive semaphore identifier on success, or FALSE on error.
sem_get() returns an id that can be used to access the System V semaphore with the given key.
The semaphore is created if necessary using the permission bits specified in perm (defaults to 0666).
Actually this value is set only if the process finds it is the only process currently attached to the semaphore.
A second call to sem_get() for the same key will return a different semaphore identifier, but both identifiers access the same underlying semaphore.
Note:
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE on success, FALSE on error.
sem_release() releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated.
See also: sem_get() and sem_acquire().
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
To make the serialized string into a PHP value again, use unserialize(). serialize() handles all types, except the resource -type.
References inside the array / object you are serialize() ing will also be stored.
This is to allow the object to do any last minute clean-up, etc. prior to being serialized.
Note:
PHP 4 removes that limitation and restores both properties and methods.
Example 1. serialize() example
We use serialize() to store / / it in a database at the end of the request. $conn = odbc_connect ("webdb", "php", "chicken"); $stmt = odbc_prepare ($conn, "UPDATE sessions SET data =?
Bitch, whine and moan. * /}}
See Also: unserialize().
Prev
Home
Next
Up
PHP Manual
Prev
Next
result_id is a valid result id returned by sesam_query().
Returns the number of rows affected by a query associated with result_id.
The sesam_affected_rows() function can only return useful values when used in combination with "immediate "SQL statements (updating operations like INSERT, UPDATE and DELETE) because SESAM does not deliver any "affected rows" information for "select type "queries.
The number returned is the number of affected rows.
See also: sesam_query() and sesam_execimm()
$result = sesam_execimm ("DELETE FROM PHONE WHERE LASTNAME = '".strtoupper ($name) ."'"); if (!$result) {... error...} print sesam_affected_rows ($result). "entries with last name ".$name." deleted.\n "
Prev
Home
Next
SESAM database functions
Up
PHP Manual
Prev
Next
Returns:
TRUE on success, FALSE on errors
sesam_commit() commits any pending updates to the database.
Note that there is no "auto-commit" feature as in other databases, as it could lead to accidental data loss.
Uncommitted data at the end of the current script (or when calling sesam_disconnect()) will be discarded by an implied sesam_rollback() call.
See also: sesam_rollback().
Example 1.
Committing an update to the SESAM database
?php if (sesam_connect ("mycatalog", "myschema", "otto")) {if (!sesam_execimm ("INSERT INTO mytable VALUES (*, 'Small Test', 0, 8, 15 )")) die("insert failed"); if (!sesam_commit()) die("commit failed");}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if a connection to the SESAM database was made, or FALSE on error.
sesam_connect() establishes a connection to an SESAM database handler task.
The connection is always "persistent" in the sense that only the very first invocation will actually load the driver from the configured SESAM OML PLAM library.
Subsequent calls will reuse the driver and will immediately use the given catalog, schema, and user.
When creating a database, the "catalog" name is specified in the SESAM configuration directive / /ADD-SQL-DATABASE-CATALOG-LIST ENTRY-1 = *CATALOG(CATALOG-NAME = catalogname,...)
The "schema" references the desired database schema (see SESAM handbook).
The "user" argument references one of the users which are allowed to access this "catalog "/ "schema" combination.
It appears in the SESAM configuration only.
See also sesam_disconnect().
Example 1.
?php if (!sesam_connect ("mycatalog", "myschema", "otto") die("Unable to connect to SESAM");?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array of status and return codes for the last SQL query / statement / command.
Elements of the array are:
Table 1.
Status information returned by sesam_diagnostic()
5 digit SQL return code (see the SESAM manual for the description of the possible values of SQLSTATE)
number of affected rows in last update / insert / delete (set after "immediate "statements only)
"human readable" error message string (set after errors only)
Set after errors only)
Set after errors only)
In the following example, a syntax error (E SEW42AE ILLEGAL CHARACTER) is displayed by including the offending SQL statement and pointing to the error location:
Example 1.
Displaying SESAM error messages with error position
?php / / Function which prints a formatted error message, / / displaying a pointer to the syntax error in the / / SQL statement function PrintReturncode ($exec_str) {$err = Sesam_Diagnostic(); $colspan=4; / / 4 cols for: sqlstate, errlin, errcol, rowcount if ($err["errlin"] == -1) --$colspan; if ($err["errcol"] == -1) --$colspan; if ($err["rowcount"] == 0) --$colspan; echo "TABLE BORDER \n"; echo" TR TH COLSPAN=".$colspan. "FONT COLOR=red ERROR: / FONT". htmlspecialchars($err["errmsg"]). "/ TH / TR \n"; if ($err["errcol"] = 0) {echo" TR TD COLSPAN=".$colspan. "PRE \n"; $errstmt = $exec_str ."\n"; for ($lin=0; $errstmt != ""; ++$lin) {if ($lin != $err["errlin"]) {/ / $lin is less or greater than errlin if (!($i = strchr ($errstmt, "\n"))) $i =""; $line = substr ($errstmt, 0, strlen($errstmt)-strlen($i)+1); $errstmt = substr($i, 1); if ($line != "\n") print htmlspecialchars ($line);} else {if (! ($i = strchr ($errstmt, "\n"))) $i = ""; $line = substr ($errstmt, 0, strlen ($errstmt)-strlen($i)+1); $errstmt = substr($i, 1); for ($col=0; $col $err["errcol"]; ++$col) echo (substr($line, $col, 1) == "\t")? "\t": "."; echo" FONT COLOR=RED BLINK\\ / BLINK / FONT \n"; print "FONT COLOR=\"#880000\" ".htmlspecialchars($line). "/ FONT"; for ($col=0; $col $err["errcol"]; ++$col) echo (substr ($line, $col, 1) == "\t")? "\t ":" ."; echo "FONT COLOR=RED BLINK / / BLINK / FONT \n";}} echo" / PRE / TD / TR \n";} echo "TR \n"; echo" TD sqlstate= ". $err["sqlstate"]." / TD \n"; if ($err["errlin"] != -1) echo "TD errlin=". $err["errlin"]. "/ TD \n"; if ($err["errcol"] != -1) echo" TD errcol= ". $err["errcol"]." / TD \n"; if ($err["rowcount"] != 0) echo "TD rowcount=". $err["rowcount"]. "/ TD \n"; echo" / TR \n"; echo "/ TABLE \n";} if (!sesam_connect ("mycatalog", "phoneno", "otto")) die ("cannot connect"); $stmt = "SELECT * FROM phone\n"." WHERE@ LASTNAME='KRAEMER'\n". "ORDER BY FIRSTNAME"; if (!($result = sesam_query ($stmt))) PrintReturncode ($stmt);?
See also: sesam_errormsg() for simple access to the error string only
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns: always TRUE.
sesam_disconnect() closes the logical link to a SESAM database (without actually disconnecting and unloading the driver).
Note that this isn' t usually necessary, as the open connection is automatically closed at the end of the script's execution.
Uncommitted data will be discarded, because an implicit sesam_rollback() is executed.
sesam_disconnect() will not close the persistent link, it will only invalidate the currently defined "catalog ", "schema" and "user "triple, so that any sesam function called after sesam_disconnect() will fail.
See also: sesam_connect().
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the SESAM error message associated with the most recent SESAM error.
if (!sesam_execimm ($stmt)) printf ("%s br \n", sesam_errormsg());
See also: sesam_diagnostic() for the full set of SESAM SQL status information
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
A SESAM "result identifier" on success, or FALSE on error.
sesam_execimm() executes an "immediate "statement (i.e., a statement like UPDATE, INSERT or DELETE which returns no result, and has no INPUT or OUTPUT variables). "select type" queries can not be used with sesam_execimm().
Sets the affected_rows value for retrieval by the sesam_affected_rows() function.
Use sesam_execimm() only if you know beforehand what type of statement will be executed.
An attempt to use SELECT type queries with sesam_execimm() will return $err["sqlstate"] == "42SBW ".
The returned "result identifier" can not be used for retrieving anything but the sesam_affected_rows(); it is only returned for symmetry with the sesam_query() function.
$stmt = "INSERT INTO mytable VALUES ('one', 'two')"; $result = sesam_execimm ($stmt); $err = sesam_diagnostic(); print ("sqlstate = ".$err["sqlstate"] ."\n". "Affected rows = ".$err["rowcount"]." == ". sesam_affected_rows($result) ."\n");
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
sesam_fetch_array() is an alternative version of sesam_fetch_row().
Instead of storing the data in the numeric indices of the result array, it stores the data in associative indices, using the field names as keys.
result_id is a valid result id returned by sesam_query() (select type queries only!).
For the valid values of the optional whence and offset parameters, see the sesam_fetch_row() function for details.
sesam_fetch_array() fetches one row of data from the result associated with the specified result identifier.
The row is returned as an associative array.
Each result column is stored with an associative index equal to its column (aka. field) name.
The column names are converted to lower case.
Columns without a field name (e.g., results of arithmetic operations) and empty fields are not stored in the array.
Also, if two or more columns of the result have the same column names, the later column will take precedence.
In this situation, either call sesam_fetch_row() or make an alias for the column.
A special handling allows fetching "multiple field" columns (which would otherwise all have the same column names).
For each column of a "multiple field", the index name is constructed by appending the string "(n)" where n is the sub-index of the multiple field column, ranging from 1 to its declared repetition factor.
The indices are NOT zero based, in order to match the nomenclature used in the respective query syntax.
For a column declared as:
Subsequent calls to sesam_fetch_array() would return the next (or prior, or n'th next / prior, depending on the scroll attributes) row in the result set, or FALSE if there are no more rows.
Example 1.
SESAM fetch array
?php $result = sesam_query ("SELECT * FROM phone\n". "WHERE LASTNAME='".strtoupper($name) ."'\n"." ORDER BY FIRSTNAME", 1); if (!$result) {... error...} / / print the table: print "TABLE BORDER \n"; while (($row = sesam_fetch_array ($result)) count ($row) 0) {print" TR \n"; print "TD ".htmlspecialchars ($row["firstname"])." / TD \n"; print "TD ".htmlspecialchars ($row["lastname"])." / TD \n"; print "TD ".htmlspecialchars ($row["phoneno"])." / TD \n"; print "/ TR \n";} print" / TABLE \n"; sesam_free_result ($result);?
See also: sesam_fetch_row() which returns an indexed array.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a mixed array with the query result entries, optionally limited to a maximum of max_rows rows.
Note that both row and column indexes are zero-based.
Table 1.
Mixed result set returned by sesam_fetch_result()
number of columns in result set (or zero if this was an "immediate "query)
number of rows in result set (between zero and max_rows)
TRUE if the number of rows was at least max_rows, FALSE otherwise.
Note that even when this is TRUE, the next sesam_fetch_result() call may return zero rows because there are no more result entries.
result data for all the fields at row( row) and column (col), (where the integer index row is between 0 and $arr["rows"]-1, and col is between 0 and $arr["count"]-1).
Fields may be empty, so you must check for the existence of a field by using the php isset() function.
The type of the returned fields depend on the respective SQL type declared for its column (see SESAM overview for the conversions applied).
SESAM "multiple fields" are "inlined "and treated like a sequence of columns.
See also: sesam_fetch_row(), and sesam_field_array() to check for "multiple fields ".
See the description of the sesam_query() function for a complete example using sesam_fetch_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
The number of columns in the result set is returned in an associative array element $array[ "count"].
Because some of the result columns may be empty, the count() function can not be used on the result row returned by sesam_fetch_row().
result_id is a valid result id returned by sesam_query() (select type queries only!).
whence is an optional parameter for a fetch operation on "scrollable" cursors, which can be set to the following predefined constants:
Table 1.
Valid values for "whence" parameter
read sequentially (after fetch, the internal default is set to SESAM_SEEK_NEXT)
read sequentially backwards (after fetch, the internal default is set to SESAM_SEEK_PRIOR)
rewind to first row (after fetch, the default is set to SESAM_SEEK_NEXT)
seek to last row (after fetch, the default is set to SESAM_SEEK_PRIOR)
After fetch, the internal default is set to SESAM_SEEK_ABSOLUTE, and the internal offset value is auto-incremented)
seek relative to current scroll position, where offset can be a positive or negative offset value.
When using "scrollable" cursors, the cursor can be freely positioned on the result set.
If the whence parameter is omitted, the global default values for the scrolling type (initialized to:
SESAM_SEEK_NEXT, and settable by sesam_seek_row()) are used.
If whence is supplied, its value replaces the global default.
offset is an optional parameter which is only evaluated (and required) if whence is either SESAM_SEEK_RELATIVE or SESAM_SEEK_ABSOLUTE.
This parameter is only valid for "scrollable" cursors.
sesam_fetch_row() fetches one row of data from the result associated with the specified result identifier.
The row is returned as an array (indexed by values between 0 and $array["count"]-1).
Fields may be empty, so you must check for the existence of a field by using the php isset() function.
The type of the returned fields depend on the respective SQL type declared for its column (see SESAM overview for the conversions applied).
SESAM "multiple fields" are "inlined "and treated like a sequence of columns.
Subsequent calls to sesam_fetch_row() would return the next (or prior, or n'th next / prior, depending on the scroll attributes) row in the result set, or FALSE if there are no more rows.
Example 1.
?php $result = sesam_query ("SELECT * FROM phone\n". "WHERE LASTNAME='".strtoupper($name) ."'\n"." ORDER BY FIRSTNAME", 1); if (!$result) {... error...} / / print the table in backward order print "TABLE BORDER \n"; $row = sesam_fetch_row ($result, SESAM_SEEK_LAST); while (is_array ($row)) {print" TR \n"; for ($col = 0; $col $row["count"]; ++$col) {print "TD ".htmlspecialchars ($row[$col])." / TD \n";} print "/ TR \n"; / / use implied SESAM_SEEK_PRIOR $row = sesam_fetch_row ($result);} print" / TABLE \n"; sesam_free_result ($result);?
See also: sesam_fetch_array() which returns an associative array, and sesam_fetch_result() which returns many rows per invocation.
Prev
Home
Next
Up
PHP Manual
Prev
Next
result_id is a valid result id returned by sesam_query().
Returns a mixed associative / indexed array with meta information (column name, type, precision,...) about individual columns of the result after the query associated with result_id.
Table 1.
Mixed result set returned by sesam_field_array()
Total number of columns in result set (or zero if this was an "immediate "query).
SESAM "multiple fields" are "inlined "and treated like the respective number of columns.
column name for column( col), where col is between 0 and $arr["count" ]-1.
The returned value can be the empty string (for dynamically computed columns).
SESAM "multiple fields" are "inlined "and treated like the respective number of columns, each with the same column name.
Usually, the "count" attribute is 1.
This can be used to detect "multiple fields" in the result set.
See the example shown in the sesam_query() description for a sample use of the "count "attribute.
integer
float
string
The SQL "length" attribute of the SQL variable in column (col), where col is between 0 and $arr["count" ]-1.
The "length" attribute is used with "CHARACTER "and "VARCHAR" SQL types to specify the (maximum) length of the string variable.
SESAM "multiple fields" are "inlined "and treated like the respective number of columns, each with the same length attribute.
The "precision" attribute of the SQL variable in column (col), where col is between 0 and $arr["count" ]-1.
The "precision" attribute is used with numeric and time data types.
SESAM "multiple fields" are "inlined "and treated like the respective number of columns, each with the same precision attribute.
The "scale" attribute of the SQL variable in column (col), where col is between 0 and $arr["count" ]-1.
The "scale" attribute is used with numeric data types.
SESAM "multiple fields" are "inlined "and treated like the respective number of columns, each with the same scale attribute.
See the sesam_query() function for an example of the sesam_field_array() use.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the name of a field (i.e., the column name) in the result set, or FALSE on error.
For "immediate" queries, or for dynamic columns, an empty string is returned.
Note:
The column index is zero-based, not one-based as in SESAM.
See also: sesam_field_array().
It provides an easier interface to access the column names and types, and allows for detection of "multiple fields".
Prev
Home
Next
Up
PHP Manual
Prev
Next
Releases resources for the query associated with result_id.
Returns FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
After calling sesam_query() with a "select type "query, this function gives you the number of columns in the result.
Returns an integer describing the total number of columns (aka. fields) in the current result_id result set or FALSE on error.
For "immediate" statements, the value zero is returned.
The SESAM "multiple field" columns count as their respective dimension, i.e., a three-column "multiple field "counts as three columns.
See also: sesam_query() and sesam_field_array() for a way to distinguish between "multiple field "columns and regular columns.
Prev
Home
Next
Up
PHP Manual
Prev
Next
A SESAM "result identifier" on success, or FALSE on error.
A "result_id" resource is used by other functions to retrieve the query results.
sesam_query() sends a query to the currently active database on the server.
It can execute both "immediate" SQL statements and "select type "queries.
If an "immediate" statement is executed, then no cursor is allocated, and any subsequent sesam_fetch_row() or sesam_fetch_result() call will return an empty result (zero columns, indicating end-of-result).
For "select type" statements, a result descriptor and a (scrollable or sequential, depending on the optional boolean scrollable parameter) cursor will be allocated.
If scrollable is omitted, the cursor will be sequential.
When using "scrollable" cursors, the cursor can be freely positioned on the result set.
For each "scrollable" query, there are global default values for the scrolling type (initialized to:
SESAM_SEEK_NEXT) and the scrolling offset which can either be set once by sesam_seek_row() or each time when fetching a row using sesam_fetch_row().
For "immediate" statements, the number of affected rows is saved for retrieval by the sesam_affected_rows() function.
See also: sesam_fetch_row() and sesam_fetch_result().
Example 1.
Show all rows of the "phone" table as a html table
?php if (!sesam_connect ("phonedb", "demo", "otto")) die ("cannot connect"); $result = sesam_query ("select * from phone"); if (!$result) {$err = sesam_diagnostic(); die ($err["errmsg"]);} echo "TABLE BORDER \n"; / / Add title header with column names above the result: if ($cols = sesam_field_array ($result)) {echo" TR TH COLSPAN=".$cols["count"]. "Result: / TH / TR \n"; echo" TR \n"; for ($col = 0; $col $cols["count"]; ++$col) {$colattr = $cols[$col]; / * Span the table head over SESAM's "Multiple Fields": * / if ($colattr["count"] 1) {echo "TH COLSPAN=".$colattr["count"]." ".$colattr["name"]. "(1. .".$colattr["count"] .") / TH \n"; $col += $colattr["count"] - 1;} else echo "TH". $colattr["name"]. "/ TH \n";} echo" / TR \n";} do {/ / Fetch the result in chunks of 100 rows max. $ok = sesam_fetch_result ($result, 100); for ($row=0; $row $ok["rows"]; ++$row) {echo "TR \n"; for ($col = 0; $col $ok["cols"]; ++$col) {if (isset($ok[$col][$row])) echo" TD ". $ok[$col][$row]." / TD \n";} else {echo "TD -empty - / TD \n";}} echo" / TR \n";}} while ($ok["truncated"]) {/ / while there may be more data echo "/ TABLE \n";} / / free result id sesam_free_result($result);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
TRUE on success, FALSE on errors
Also affected are result cursors and result descriptors.
At the end of each script, and as part of the sesam_disconnect() function, an implied sesam_rollback() is executed, discarding any pending changes to the database.
See also: sesam_commit().
Example 1.
Discarding an update to the SESAM database
?php if (sesam_connect ("mycatalog", "myschema", "otto")) {if (sesam_execimm ("INSERT INTO mytable VALUES (*, 'Small Test', 0, 8, 15 )") sesam_execimm ("INSERT INTO othertable VALUES (*, 'Another Test', 1)")) sesam_commit(); else sesam_rollback();}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
result_id is a valid result id (select type queries only, and only if a "scrollable "cursor was requested when calling sesam_query()).
whence sets the global default value for the scrolling type, it specifies the scroll type to use in subsequent fetch operations on "scrollable" cursors, which can be set to the following predefined constants:
Table 1.
read sequentially
read sequentially backwards
fetch first row (after fetch, the default is set to SESAM_SEEK_NEXT)
fetch last row (after fetch, the default is set to SESAM_SEEK_PRIOR)
After fetch, the default is set to SESAM_SEEK_ABSOLUTE, and the offset value is auto-incremented)
fetch relative to current scroll position, where offset can be a positive or negative offset value (this also sets the default "offset "value for subsequent fetches).
offset is an optional parameter which is only evaluated (and required) if whence is either SESAM_SEEK_RELATIVE or SESAM_SEEK_ABSOLUTE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
TRUE if the values are valid, and the settransaction() operation was successful, FALSE otherwise.
sesam_settransaction() overrides the default values for the "isolation level "and "read-only" transaction parameters (which are set in the SESAM configuration file), in order to optimize subsequent queries and guarantee database consistency.
The overridden values are used for the next transaction only.
sesam_settransaction() can only be called before starting a transaction, not after the transaction has been started already.
To simplify the use in php scripts, the following constants have been predefined in php (see SESAM handbook for detailed explanation of the semantics):
Table 1.
Valid values for "Isolation_Level" parameter
Table 2.
Valid values for "Read_Only" parameter
The values set by sesam_settransaction() will override the default setting specified in the SESAM configuration file.
Example 1.
Setting SESAM transaction parameters
?php sesam_settransaction (SESAM_TXISOL_REPEATABLE_READ, SESAM_TXREAD_READONLY);?
Prev
Home
Next
Up
Session handling functions
PHP Manual
Prev
Next
session_cache_expire() returns the current setting of session.cache_expire from php.ini.
If new_cache_expire is given, the current cache expire is replaced with new_cache_expire.
Also see the session.cache_expire configuration directive.
Prev
Home
Next
Session handling functions
Up
PHP Manual
Prev
Next
session_cache_limiter() returns the name of the current cache limiter.
If cache_limiter is specified, the name of the current cache limiter is changed to the new value.
The cache limiter defines which cache control HTTP headers are sent to the client.
These headers determine the rules by which the page content may be cached by the client and intermediate proxies.
Setting the cache limiter to nocache disallows any client / proxy caching.
A value of public permits caching by proxies and the client, whereas private disallows caching by proxies and permits the client to cache the contents.
In private mode, the Expire header sent to the client may cause confusion for some browsers, including Mozilla.
You can avoid this problem by using private_no_expire mode.
The expire header is never sent to the client in this mode.
The cache limiter is reset to the default value stored in session.cache_limiter at request startup time.
Thus, you need to call session_cache_limiter() for every request (and before session_start() is called).
Example 1. session_cache_limiter() example
?php / * set the cache limiter to 'private' * / session_cache_limiter('private'); $cache_limiter = session_cache_limiter(); echo "The cache limiter is now set to $cache_limiter p ";?
Also see the session.cache_limiter configuration directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Voir aussi session_encode()
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_destroy() destroys all of the data associated with the current session.
It does not unset any of the global variables associated with the session, or unset the session cookie.
This function returns TRUE on success and FALSE on failure to destroy the session data.
Example 1.
Destroying a session
?php / / Initialize the session. / / If you are using session_name( "something"), don't forget it now! session_start(); / / Unset all of the session variables. session_unset(); / / Finally, destroy the session. session_destroy();?
Example 2.
Destroying a session with $_SESSION
?php / / Initialize the session. / / If you are using session_name( "something"), don't forget it now! session_start(); / / Unset all of the session variables. $_SESSION = array(); / / Finally, destroy the session. session_destroy();?
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also session_decode()
Prev
Home
Next
Up
PHP Manual
Prev
Next
The session_get_cookie_params() function returns an array with the current session cookie information, the array contains the following items:
"lifetime" - The lifetime of the cookie.
"path" - The path where information is stored.
"domain" - The domain of the cookie.
"secure" - The cookie should only be sent over secure connections. (This item was added in PHP 4.0.4.)
See also the configuration directives session.cookie_lifetime, session.cookie_path, session.cookie_domain, session.cookie_secure, and session_set_cookie_params().
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_id() returns the session id for the current session.
If id is specified, it will replace the current session id. session_id() needs to be called before session_start() for that purpose.
Depending on the session handler, not all characters are allowed within the session id.
For example, the file session handler only allows characters in the range a-z, A-Z and 0-9!
The constant SID can also be used to retrieve the current name and session id as a string suitable for adding to URLs.
Note that SID is only defined if the client didn 't send the right cookie.
See also Session handling.
See also session_start(), session_set_save_handler(), and session.save_handler.
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_is_registered() returns TRUE if there is a global variable with the name name registered in the current session.
Note:
If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less) is used, use isset() to check a variable is registered in $_SESSION.
Caution
If you are using $_SESSION (or $HTTP_SESSION_VARS), do not use session_register(), session_is_registered() and session_unregister().
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_module_name() returns the name of the current session module.
If module is specified, that module will be used instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_name() returns the name of the current session.
If name is specified, the name of the current session is changed to its value.
The session name references the session id in cookies and URLs.
It should contain only alphanumeric characters; it should be short and descriptive (i.e. for users with enabled cookie warnings).
The session name is reset to the default value stored in session.name at request startup time.
Thus, you need to call session_name() for every request (and before session_start() or session_register() are called).
Example 1. session_name() examples
?php / * set the session name to WebsiteID * / $previous_name = session_name( "WebsiteID"); echo "The previous session name was $previous_name p ";?
See also the session.name configuration directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Read in session data without locking the session data.
Changing session data is not possible, but frameset performance will be improved.
Prev
Home
Next
Up
PHP Manual
Prev
Next
For each name, session_register() registers the global variable with that name in the current session.
If you want your script to work regardless of register_globals, you need to use the $_SESSION array.
All $_SESSION entries are automatically registered.
Caution
If you want to register a session variable from within a function, you need to make sure to make it global using the global keyword or the $GLOBALS[] array, or use the special session arrays as noted below.
Caution
If you are using $_SESSION (or $HTTP_SESSION_VARS), do not use session_register(), session_is_registered() and session_unregister().
This function returns TRUE when all of the variables are successfully registered with the session.
If session_start() was not called before this function is called, an implicit call to session_start() with no parameters will be made. $_SESSION does not mimick this behavior and requires session_start() before use.
You can also create a session variable by simply setting the appropriate member of the $_SESSION or $HTTP_SESSION_VARS (PHP 4.1.0) array.
$barney = "A big purple dinosaur ."; session_register("barney"); $_SESSION["zim"] = "An invader from another planet ."; # The old way was to use $HTTP_SESSION_VARS $HTTP_SESSION_VARS["spongebob"] = "He's got square pants .";
Note:
It is currently impossible to register resource variables in a session.
For example, you cannot create a connection to a database and store the connection id as a session variable and expect the connection to still be valid the next time the session is restored.
PHP functions that return a resource are identified by having a return type of resource in their function definition.
A list of functions that return resources are available in the resource types appendix.
For example: $_SESSION[ 'var'] = 'ABC';
See also session_is_registered() and session_unregister().
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_save_path() returns the path of the current directory used to save session data.
If path is specified, the path to which data is saved will be changed. session_save_path() needs to be called before session_start() for that purpose.
Note:
On some operating systems, you may want to specify a path on a filesystem that handles lots of small files efficiently.
For example, on Linux, reiserfs may provide better performance than ext2fs.
See also the session.save_path configuration directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set cookie parameters defined in the php.ini file.
The effect of this function only lasts for the duration of the script.
Note:
The secure parameter was added in PHP 4.0.4.
See also the configuration directives session.cookie_lifetime, session.cookie_path, session.cookie_domain, session.cookie_secure, and session_get_cookie_params().
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session.
Storing the session data in a local database.
Returns TRUE on success or FALSE on failure.
Note:
The "write" handler is not executed until after the output stream is closed.
Thus, output from debugging statements in the "write" handler will never be seen in the browser.
If debugging output is necessary, it is suggested that the debug output be written to a file instead.
Note:
The write handler is not executed if the session contains no data; this applies even if empty session variables are registered.
This differs to the default file-based session save handler, which creates empty session files.
The following example provides file based session storage similar to the PHP sessions default save handler files.
This example could easily be extended to cover database storage using your favorite PHP supported database engine.
Read function must return string value always to make save handler work as expected.
Return empty string if there is no data to read.
Return values from other handlers are converted to boolean expression.
TRUE for success, FALSE for failure.
Example 1. session_set_save_handler() example
?php function open ($save_path, $session_name) {global $sess_save_path, $sess_session_name; $sess_save_path = $save_path; $sess_session_name = $session_name; return(true);} function close() {return(true);} function read ($id) {global $sess_save_path, $sess_session_name; $sess_file = "$sess_save_path / sess_$id"; if ($fp = @fopen($sess_file, "r")) {$sess_data = fread($fp, filesize($sess_file)); return($sess_data);} else {return(""); / / Must return "" here.}} function write ($id, $sess_data) {global $sess_save_path, $sess_session_name; $sess_file = "$sess_save_path / sess_$id"; if ($fp = @fopen($sess_file, "w")) {return(fwrite($fp, $sess_data));} else {return(false);}} function destroy ($id) {global $sess_save_path, $sess_session_name; $sess_file = "$sess_save_path / sess_$id"; return(@unlink($sess_file));} / ********************************************* * WARNING - You will need to implement some * * sort of garbage collection routine here. * ********************************************* / function gc ($maxlifetime) {return true;} session_set_save_handler ("open", "close", "read", "write", "destroy", "gc"); session_start(); / / proceed to use sessions normally?
See also the session.save_handler configuration directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_start() creates a session or resumes the current one based on the current session id that's being passed via a request, such as GET, POST, or a cookie.
If you want to use a named session, you must call session_name() before calling session_start().
This function always returns TRUE.
Note:
If you are using cookie-based sessions, you must call session_start() before anything is output to the browser.
session_start() will register internal output handler for URL rewriting when trans-sid is enabled.
If a user uses ob_gzhandler or like with ob_start(), the order of output handler is important for proper output.
For example, user must register ob_gzhandler before session start.
Note:
Use of zlib.output_compression is recommended rather than ob_gzhandler()
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_unregister() unregisters the global variable named name from the current session.
This function returns TRUE when the variable is successfully unregistered from the session.
Note:
If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less) is used, use unset() to unregister a session variable.
Caution
This function does not unset the corresponding global variable for name, it only prevents the variable from being saved as part of the session.
You must call unset() to remove the corresponding global variable.
Caution
If you are using $_SESSION (or $HTTP_SESSION_VARS), do not use session_register(), session_is_registered() and session_unregister().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The session_unset() function frees all session variables currently registered.
Note:
If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less) is used, use unset() to unregister session variable. i.e. $_SESSION = array();
Prev
Home
Next
Up
PHP Manual
Prev
Next
End the current session and store session data.
Session data is usually stored after your script terminated without the need to call session_write_close(), but as session data is locked to prevent concurrent writes only one script may operate on a session at any time.
When using framesets together with sessions you will experience the frames loading one by one due to this locking.
You can reduce the time needed to load all the frames by ending the session as soon as all changes to session variables are done.
Prev
Home
Next
Up
Shared Memory Functions
PHP Manual
Prev
Next
setcookie() defines a cookie to be sent along with the rest of the HTTP headers.
Like other headers, cookies must be sent before any output from your script (this is a protocol restriction).
This requires that you place calls to this function prior to any output, including html and head tags as well as any whitespace.
If output exists prior to calling this function, setcookie() will fail and return FALSE.
If setcookie() successfully runs, it will return TRUE.
This does not indicate whether the user accepted the cookie.
All the arguments except the name argument are optional.
If only the name argument is present, the cookie by that name will be deleted from the remote client.
You may also replace an argument with an empty string ("") in order to skip that argument.
Because the expire and secure arguments are integers, they cannot be skipped with an empty string, use a zero (0) instead.
The following table explains each parameter of the setcookie() function, be sure to read the Netscape cookie specification for specifics.
Table 1. setcookie() parameters explained
Description
Examples
The name of the cookie.
'cookiename' is called as $_COOKIE['cookiename']
The value of the cookie.
This value is stored on the clients computer; do not store sensitive information.
Assuming the name is' cookiename', this value is retrieved through $_COOKIE['cookiename']
The time the cookie expires.
This is a unix timestamp so is in number of seconds since the epoch.
In otherwords, you' ll most likely set this with the time() function plus the number of seconds before you want it to expire.
Or you might use mktime().
time( )+60*60*24*30 will set the cookie to expire in 30 days.
If not set, the cookie will expire at the end of the session (when the browser closes).
The path on the server in which the cookie will be available on.
If set to '/', the cookie will be available within the entire domain.
If set to '/ foo /', the cookie will only be available within the / foo / directory and all sub-directories such as / foo / bar / of domain.
The default value is the current directory that the cookie is being set in.
The domain that the cookie is available.
To make the cookie available on all subdomains of example.com then you' d set it to '.example.com '.
The. is not required but makes it compatible with more browsers.
Setting it to www.example.com will make the cookie only available in the www subdomain.
Refer to tail matching in the spec for details.
Indicates that the cookie should only be transmitted over a secure HTTPS connection.
When set to 1, the cookie will only be set if a secure connection exists.
The default is 0.
0 or 1
Once the cookies have been set, they can be accessed on the next page load with the $_COOKIE or $HTTP_COOKIE_VARS Once the cookies have been set, they can be accessed on the next page load with the $_COOKIE or $HTTP_COOKIE_VARS arrays.
Note, autoglobals such as $_COOKIE became available in PHP 4.1.0. $HTTP_COOKIE_VARS has existed since PHP 3.
Cookie values also exist in $_REQUEST.
Note:
If the PHP directive register_globals is set to on then cookie values will also be made into variables.
In our examples below, $TextCookie will exist.
It 's recommended to use $_COOKIE.
Common Pitfalls:
Cookies will not become visible until the next loading of a page that the cookie should be visible for.
To test if a cookie was successfully set, check for the cookie on a next loading page before the cookie expires.
Expire time is set via the expire parameter.
A nice way to debug the existence of cookies is by simply calling print_r( $_COOKIE);.
Cookies must be deleted with the same parameters as they were set with.
Cookies names can be set as array names and will be available to your PHP scripts as arrays but seperate cookies are stored on the users system.
Consider explode() or serialize() to set one cookie with multiple names and values.
In PHP 3, multiple calls to setcookie() in the same script will be performed in reverse order.
If you are trying to delete one cookie before inserting another you should put the insert before the delete.
In PHP 4, multiple calls to setcookie() are performed in the order called.
Some examples follow how to send cookies:
Example 1. setcookie() send examples
?php $value = 'something from somewhere'; setcookie ("TestCookie", $value); setcookie ("TestCookie", $value,time()+3600); / * expire in 1 hour * / setcookie ("TestCookie", $value,time()+3600, "/ ~rasmus /", ".example.com", 1);?
Note that the value portion of the cookie will automatically be urlencoded when you send the cookie, and when it is received, it is automatically decoded and assigned to a variable by the same name as the cookie name.
To see the contents of our test cookie in a script, simply use one of the following examples:
?php / / Print an individual cookie echo $_COOKIE[ "TestCookie"]; echo $HTTP_COOKIE_VARS["TestCookie"]; / / Another way to debug / test is to view all cookies print_r($_COOKIE);?
When deleting a cookie you should assure that the expiration date is in the past, to trigger the removal mechanism in your browser.
Examples follow how to delete cookies sent in previous example:
Example 2. setcookie() delete examples
?php / / set the expiration date to one hour ago setcookie ("TestCookie", "", time() - 3600); setcookie ("TestCookie","", time() - 3600, "/ ~rasmus /", ".example.com", 1);?
You may also set array cookies by using array notation in the cookie name.
This has the effect of setting as many cookies as you have array elements, but when the cookie is received by your script, the values are all placed in an array with the cookie 's name:
?php / / set the cookies setcookie ("cookie[three]", "cookiethree"); setcookie ("cookie[two]", "cookietwo"); setcookie ("cookie[one]", "cookieone"); / / after the page reloads, print them out if (isset($_COOKIE['cookie'])) {foreach ($_COOKIE['cookie'] as $name = $value) {echo "$name: $value br / \n";}} / * which prints three: cookiethree two: cookietwo one: cookieone * /?
For more information on cookies, see Netscape 's cookie specification at http: / /www.netscape.com / newsref / std / cookie_spec.html.
Microsoft Internet Explorer 4 with Service Pack 1 applied does not correctly deal with cookies that have their path parameter set.
Netscape Communicator 4.05 and Microsoft Internet Explorer 3.x appear to handle cookies incorrectly when the path and time are not set.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of stream_set_write_buffer().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Category is a named constant (or string) specifying the category of the functions affected by the locale setting:
LC_ALL for all of the below
LC_COLLATE for string comparison, see strcoll()
LC_CTYPE for character classification and conversion, for example strtoupper()
LC_MONETARY for localeconv()
LC_NUMERIC for decimal separator (See also localeconv())
LC_TIME for date and time formatting with strftime()
If locale is the empty string "", the locale names will be set from the values of environment variables with the same names as the above categories, or from "LANG ".
If locale is zero or "0", the locale setting is not affected, only the current setting is returned.
If locale is an array or followed by additional parameters then each array element or parameter is tried to be set as new locale until success.
This is usefull if a locale is known under different names on different systems or for providing a fallback for a possibly not available locale.
Note:
Passing multiple locales is not available before PHP 4.3.0
An invalid category name also causes a warning message.
The return value of setlocale() depends on the system that PHP is running.
It returns exactly what the system setlocale function returns.
?php / * Set locale to Dutch * / setlocale (LC_ALL, 'nl_NL'); / * Output: vrijdag 22 december 1978 * / echo strftime ("%A %e %B %Y", mktime (0, 0, 0, 12, 22, 1978)); / * try different possible locale names for german as of PHP 4.3.0 * / $loc_de = setlocale (LC_ALL, 'de_DE@euro', 'de_DE', 'de', 'ge'); echo "Preferred locale for german on this system is '$loc_de'";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the current active configuration setting of magic_quotes_runtime (0 for off, 1 for on).
See also: get_magic_quotes_gpc() and get_magic_quotes_runtime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Set the number of seconds a script is allowed to run.
If this is reached, the script returns a fatal error.
If seconds is set to zero, no time limit is imposed.
When called, set_time_limit() When called, set_time_limit() restarts the timeout counter from zero.
In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as set_time_limit( 20) is made, the script will run for a total of 45 seconds before timing out.
There is no workaround other than turning off safe mode or changing the time limit in the configuration file.
Note:
The set_time_limit() function and the configuration directive max_execution_time only affect the execution time of the script itself.
Any time spent on activity that happens outside the execution of the script such as system calls using system(), the sleep() function, database queries, etc. is not included when determining the maximum time that the script has been running.
Prev
Home
Next
Up
PHP Manual
Prev
Next
"boolean" (or, since PHP 4.2.0, "bool")
"float" (only possible since PHP 4.2.0, for older versions use the deprecated variant "double")
"array"
"object"
$foo = "5bar"; / / string $bar = true; / / boolean settype($foo, "integer"); / / $foo is now 5 (integer) settype($bar, "string"); / / $bar is now "1" (string)
See also gettype(), type-casting and type-juggling.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
0666).
Memsize and perm will be ignored.
See also: ftok().
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
shm_detach() disconnects from the shared memory given by the shm_identifier created by shm_attach().
shm_detach() always returns TRUE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
shm_get_var() returns the variable with a given variable_key.
The variable is still present in the shared memory.
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
shmop_size() is used to get the size, in bytes of the shared memory block.
shmop_size() takes the shmid, which is the shared memory block identifier created by shmop_open(), the function will return and int, which represents the number of bytes the shared memory block occupies.
Example 1.
Getting the size of the shared memory block
This example will put the size of shared memory block identified by $shm_id into $shm_size.
Prev
Home
Next
Up
PHP Manual
Prev
Next
All variable-types are supported.
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
All data will be destroyed.
This function does not work on Windows systems.
Prev
Home
Next
Up
SESAM database functions
PHP Manual
Prev
Next
Removes a variable with a given variable_key and frees the occupied memory.
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias to highlight_file().
For more information see the documentation there.
See also highlight_string() and highlight_file().
Prev
Home
Next
Up
PHP Manual
Prev
Next
A function may be defined using syntax such as the following:
function foo ($arg_1, $arg_2,..., $arg_n) {echo "Example function.\n"; return $retval;}
Any valid PHP code may appear inside a function, even other functions and class definitions.
In PHP 3, functions must be defined before they are referenced.
Except when a function is conditionally defined such as shown in the two examples below.
Its definition must be processed prior to being called.
Example 13-1.
Conditional functions
?php $makefoo = true; / * We can't call foo() from here since it doesn't exist yet, but we can call bar() * / bar(); if ($makefoo) {function foo () {echo "I don't exist until program execution reaches me.\n";}} / * Now we can safely call foo() since $makefoo evaluated to true * / if ($makefoo) foo(); function bar() {{echo "I exist immediately upon program start.\n";}?
Example 13-2.
Functions within functions
?php function foo() {function bar() {echo "I don't exist until foo() is called.\n";}} / * We can't call bar() yet since it doesn't exist. * / foo(); / * Now we can call bar(), foo()'s processesing has made it accessable. * / bar();?
PHP does not support function overloading, nor is it possible to undefine or redefine previously-declared functions.
PHP 3 does not support variable numbers of arguments to functions, although default arguments are supported (see Default argument values for more information).
PHP 4 supports both: see Variable-length argument lists and the function references for func_num_args(), func_get_arg(), and func_get_args() for more information.
Prev
Home
Next
Up
Function arguments
PHP Manual
Prev
Next
This function shuffles (randomizes the order of the elements in) an array.
You must use srand() to seed this function.
Example 1. shuffle() example
See also arsort(), asort(), ksort(), rsort(), sort(), and usort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This calculates the similarity between two strings as described in Oliver [1993].
Note that this implementation does not use a stack as in Oliver 's pseudo code, but recursive calls which may or may not speed up the whole process.
Note also that the complexity of this algorithm is O( N**3) where N is the length of the longest string.
By passing a reference as third argument, similar_text() will calculate the similarity in percent for you.
It returns the number of matching chars in both strings.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The arg parameter is in radians.
See also asin(), cos(), tan() and deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The sizeof() function is an alias for count().
See also count().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The sleep() function delays program execution for the given number of seconds.
See also usleep() and set_time_limit()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns SNMP object value on success and FALSE on error.
The snmpget() function is used to read the value of an SNMP object specified by the object_id.
SNMP agent is specified by the hostname and the read community is specified by the community parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current value stored in the UCD Library for quick_print. quick_print is off by default.
Above function call would return FALSE if quick_print is off, and TRUE if quick_print is on.
This function is not available when using the Windows SNMP library.
See: snmp_set_quick_print() for a full description of what quick_print does.
Prev
Home
Next
SNMP functions
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the specified SNMP object value, returning TRUE on success and FALSE on error.
The snmpset() function is used to set the value of an SNMP object specified by the object_id.
SNMP agent is specified by the hostname and the read community is specified by the community parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the value of quick_print within the UCD SNMP library.
When this is set (1), the SNMP library will return'quick printed 'values.
This means that just the value will be printed.
When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e.
IpAddress or OID).
Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less.
Setting quick_print is often used when using the information returned rather then displaying it.
The first value printed might be: 'Timeticks: (0) 0:00:00.00', whereas with quick_print enabled, just '0:00:00.00' would be printed.
By default the UCD SNMP library returns verbose values, quick_print is used to return only the value.
Currently strings are still returned with extra quotes, this will be corrected in a later release.
This function is not available when using the Windows SNMP library.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of SNMP object values starting from the object_id as root and FALSE on error.
snmpwalk() function is used to read all the values from an SNMP agent specified by the hostname.
Community specifies the read community for that agent.
A NULL object_id is taken as the root of the SNMP objects tree and all objects under that tree are returned as an array.
If object_id is specified, all the SNMP objects below that object_id are returned.
Above function call would return all the SNMP objects from the SNMP agent running on localhost.
One can step through the values with a loop
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array with object ids and their respective object value starting from the object_id as root and FALSE on error.
snmpwalkoid() function is used to read all object ids and their respective values from an SNMP agent specified by the hostname.
Community specifies the read community for that agent.
A NULL object_id is taken as the root of the SNMP objects tree and all objects under that tree are returned as an array.
If object_id is specified, all the SNMP objects below that object_id are returned.
The existence of snmpwalkoid() and snmpwalk() has historical reasons.
Both functions are provided for backward compatibility.
Above function call would return all the SNMP objects from the SNMP agent running on localhost.
One can step through the values with a loop
for (reset($a); $i = key($a); next($a)) {echo "$i: $a[$i] br \n";}
Prev
Home
Next
Up
Socket functions
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
After the socket socket has been created using socket_create(), bound to a name with socket_bind(), and told to listen for connections with socket_listen(), this function will accept incoming connections on that socket.
Once a successful connection is made, a new socket resource is returned, which may be used for communication.
If there are multiple connections queued on the socket, the first will be used.
If there are no pending connections, socket_accept() will block until a connection becomes present.
If socket has been made non-blocking using socket_set_blocking() or socket_set_nonblock(), FALSE will be returned.
The socket resource returned by socket_accept() may not be used to accept new connections.
The original listening socket socket, however, remains open and may be reused.
Returns a new socket resource on success, or FALSE on error.
The actual error code can be retrieved by calling socket_last_error().
This error code may be passed to socket_strerror() to get a textual explanation of the error.
See also socket_bind(), socket_connect(), socket_listen(), socket_create(), and socket_strerror().
Prev
Home
Next
Socket functions
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
socket_bind() binds the name given in address to the socket described by socket, which must be a valid socket resource created with socket_create().
The address parameter is either an IP address in dotted-quad notation (e.g.
127.0.0.1), if the socket is of the AF_INET family; or the pathname of a Unix-domain socket, if the socket family is AF_UNIX.
The port parameter is only used when connecting to an AF_INET socket, and designates the port on the remote host to which a connection should be made.
Returns TRUE on success or FALSE on failure.
The error code can be retrieved with socket_last_error().
This code may be passed to socket_strerror() to get a textual explanation of the error.
See also socket_connect(), socket_listen(), socket_create(), socket_last_error() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
This function clears the error code on the given socket or the global last socket error.
This function allows explicitely resetting the error code value either of a socket or of the extension global last error code.
This may be useful to detect within a part of the application if an error occured or not.
See also socket_last_error() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
socket_close() closes the socket resource given by socket.
See also socket_bind(), socket_listen(), socket_create() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Initiates a connection using the socket resource socket, which must be a valid socket resource created with socket_create().
The address parameter is either an IP address in dotted-quad notation (e.g.
127.0.0.1), if the socket is of the AF_INET family; or the pathname of a Unix-domain socket, if the socket family is AF_UNIX.
The port parameter is only used when connecting to an AF_INET socket, and designates the port on the remote host to which a connection should be made.
Returns TRUE on success or FALSE on failure.
The error code can be retrieved with socket_last_error().
This code may be passed to socket_strerror() to get a textual explanation of the error.
See also socket_bind(), socket_listen(), socket_create(), socket_last_error() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Domain
TCP and UDP are common protocols of this protocol family.
High efficiency and low overhead make it a great form of IPC (Interprocess Communication).
Table 2.
An out-of-band data transmission mechanism may be supported.
SOCK_DGRAM
The UDP protocol is based on this socket type.
Provides a sequenced, reliable, two-way connection-based data transmission path for datagrams of fixed maximum length; a consumer is required to read an entire packet with each read call.
A common use for this socket type is to perform ICMP requests (like ping, traceroute, etc).
This is most likely not implemented on your operating system.
The proper value can be retrieved by name by using getprotobyname().
Table 3.
The "ping" command (present in most modern operating systems) is an example application of ICMP.
Due to these aspects, UDP requires a minimum amount of protocol overhead.
TCP guarantees that all data packets will be received in the order in which they were sent.
For reliability and performance reasons, the TCP implementation itself decides the appropriate octet boundaries of the underlying datagram communication layer.
socket_create() Returns a socket resource on success, or FALSE on error.
This error code may be passed to socket_strerror() to get a textual explanation of the error.
See also socket_accept(), socket_bind(), socket_connect(), socket_listen(), socket_last_error(), and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
This function is meant to ease the task of creating a new socket which only listens to accept new connections.
socket_create_listen() create a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections.
The backlog parameter defines the maximum length the queue of pending connections may grow to.
SOMAXCONN may be passed as backlog parameter, see socket_listen() for more information.
socket_create_listen() returns a new socket resource on success or FALSE on error.
The error code can be retrieved with socket_last_error().
This code may be passed to socket_strerror() to get a textual explanation of the error.
Note:
If you want to create a socket which only listens on a certain interfaces you need to use socket_create(), socket_bind() and socket_listen().
See also socket_create(), socket_bind(), socket_listen(), socket_last_error() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Note:
This function used to be called socket_getopt() prior to PHP 4.3.0
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
If the given socket is of type AF_INET, socket_getpeername() will return the peers (remote) IP address in dotted-quad notation (e.g.
127.0.0.1) in the address parameter and, if the optional port parameter is present, also the associated port.
If the given socket is of type AF_UNIX, socket_getpeername() will return the UNIX filesystem path (e.g. / var / run / daemon.sock) in the address parameter.
Returns TRUE on success or FALSE on failure. socket_getpeername() may also return FALSE if the socket type is not any of AF_INET or AF_UNIX, in which case the last socket error code is not updated.
See also socket_getpeername(), socket_last_error() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
If the given socket is of type AF_INET, socket_getsockname() will return the local IP address in dotted-quad notation (e.g.
127.0.0.1) in the address parameter and, if the optional port parameter is present, also the associated port.
If the given socket is of type AF_UNIX, socket_getsockname() will return the UNIX filesystem path (e.g. / var / run / daemon.sock) in the address parameter.
Returns TRUE on success or FALSE on failure. socket_getsockname() may also return FALSE if the socket type is not any of AF_INET or AF_UNIX, in which case the last socket error code is not updated.
See also socket_getpeername(), socket_last_error() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of stream_get_meta_data().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
This function returns a socket error code.
If a socket resource is passed to this function, the last error which occured on this particular socket is returned.
If the socket resource is ommited, the error code of the last failed socket function is returned.
The latter is in particular helpful for functions like socket_create() which don't return a socket on failure and socket_select() which can fail for reasons not directly tied to a particular socket.
The error code is suitable to be fed to socket_strerror() which returns a string describing the given error code.
if (false == ($socket = @socket_create(AF_INET, SOCK_STREAM, SOL_TCP))) {die("Couldn't create socket, error code is: ". socket_last_error(). ",error message is:". socket_strerror(socket_last_error()));}
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
After the socket socket has been created using socket_create() and bound to a name with socket_bind(), it may be told to listen for incoming connections on socket.
A maximum of backlog A maximum of backlog incoming connections will be queued for processing.
If a connection request arrives with the queue full the client may receive an error with an indication of ECONNREFUSED, or, if the underlying protocol supports retransmission, the request may be ignored so that retries may succeed.
Note:
The maximum number passed to the backlog parameter highly depends on the underlying platform.
On linux, it is silently truncated to SOMAXCONN.
On win32, if passed SOMAXCONN, the underlying service provider responsible for the socket will set the backlog to a maximum reasonable value.
There is no standard provision to find out the actual backlog value on this platform.
socket_listen() is applicable only to sockets of type SOCK_STREAM or SOCK_SEQPACKET.
Returns TRUE on success or FALSE on failure.
The error code can be retrieved with socket_last_error().
This code may be passed to socket_strerror() to get a textual explanation of the error.
See also socket_accept(), socket_bind(), socket_connect(), socket_create() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
The function socket_read() reads from the socket resource socket created by the socket_create() or socket_accept() functions.
The maximum number of bytes read is specified by the length parameter.
Otherwise you can use \r, \n, or \0 to end reading (depending on the type parameter, see below).
socket_read() returns the data as a string on success, or FALSE on error.
The error code can be retrieved with socket_last_error().
This code may be passed to socket_strerror() to get a textual representation of the error.
Optional type parameter is a named constant:
PHP_BINARY_READ - use the system read() function.
Safe for reading binary data. (Default in PHP = 4.1.0)
PHP_NORMAL_READ - reading stops at \n or \r. (Default in PHP = 4.0.6)
See also socket_accept(), socket_bind(), socket_connect(), socket_listen(), socket_last_error(), socket_strerror() and socket_write().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
The socket_select() accepts arrays of sockets and waits for them to change status.
Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets.
Three independent arrays of socket resources are watched.
The sockets listed in the read array will be watched to see if characters become available for reading (more precisely, to see if a read will not block - in particular, a socket resource is also ready on end-of-file, in which case a socket_read() will return a zero length string).
The sockets listed in the write array will be watched to see if a write will not block.
The sockets listed in the except array will be watched for exceptions.
Warning
On exit, the arrays are modified to indicate which socket resource actually changed status.
You do not need to pass every array to socket_select().
Also do not forget that those arrays are passed by reference and will be modified after socket_select() returns.
/* Prepare the read array * / $read = array( $socket1, $socket2); if (false === ($num_changed_sockets = socket_select($read, $write = NULL, $except = NULL, 0))) {/ * Error handling * / else if ($num_changed_sockets 0) {/ * At least at one of the sockets something interesting happened * /}
Note:
Due a limitation in the current Zend Engine it is not possible to pass a constant modifier like NULL directly as a parameter to a function which expects this parameter to be passed by reference.
Instead use a temporary variable or an expression with the leftmost member being a temporary variable:
The tv_sec and tv_usec together form the timeout The tv_sec and tv_usec together form the timeout parameter.
The timeout is an upper bound on the amount of time elapsed before socket_select() return. tv_sec may be zero, causing socket_select() to return immediately.
This is useful for polling.
If tv_sec is NULL (no timeout), socket_select() can block indefinitely.
On success socket_select() On success socket_select() returns the number of socket resorces contained in the modified arrays, which may be zero if the timeout expires before anything interesting happens.
On error FALSE is returned.
The error code can be retrieved with socket_last_error().
Note:
Be sure to use the === operator when checking for an error.
Since the socket_select() may return 0 the comparison with == would evaluate to TRUE:
if (false === socket_select($r, $w, $e = NULL, 0)) {echo "socket_select() failed, reason: ". socket_strerror(socket_last_error()). "\n";}
Note:
Be aware that some socket implementations need to be handled very carefully.
A few basic rules:
You should always try to use socket_select() without timeout.
Your program should have nothing to do if there is no data available.
Code that depends on timeouts is not usually portable and difficult to debug.
No socket resource must be added to any set if you do not intend to check its result after the socket_select() call, and respond appropriately.
After socket_select() returns, all socket resources in all arrays must be checked.
Any socket resource that is available for writing must be written to, and any socket resource available for reading must be read from.
If you read / write to a socket returns in the arrays be aware that they do not necessarily read / write the full amount of data you have requested.
Be prepared to even only be able to read / write a single byte.
It 's common to most socket implementations that the only exception caught with the except array is out-of-bound data received on a socket.
See also socket_read(), socket_write(), socket_last_error() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias for stream_set_blocking().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Note:
This function used to be called socket_setopt() prior to PHP 4.3.0
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an alias for stream_set_timeout().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
socket_strerror() takes as its errno parameter a socket error code as returned by socket_last_error() and returns the corresponding explanatory text.
This makes it a bit more pleasant to figure out why something didn' t work; for instance, instead of having to track down a system include file to find out what '-111 'means, you just pass it to socket_strerror(), and it tells you what happened.
Example 1. socket_strerror() example
?php if (false == ($socket = @socket_create(AF_INET, SOCK_STREAM, 0))) {echo "socket_create() failed: reason: ". socket_strerror(socket_last_error()). "\n";} if (false == (@socket_bind($socket, '127.0.0.1', 80))) {echo "socket_bind() failed: reason:". socket_strerror(socket_last_error($socket)). "\n";}?
The expected output from the above example (assuming the script is not run with root privileges):
socket_bind() failed: reason:
See also socket_accept(), socket_bind(), socket_connect(), socket_listen(), and socket_create().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
The function socket_write() writes to the socket socket from buffer.
The optional parameter length can specify an alternate length of bytes written to the socket.
If this length is greater then the buffer length, it is silently truncated to the length of the buffer.
Returns the number of bytes successfully written to the socket or FALSE one error.
The error code can be retrieved with socket_last_error().
This code may be passed to socket_strerror() to get a textual explanation of the error.
It 's valid that, depending on the network buffers etc., only a certain amount of data, even one byte, is written though your buffer is greater.
You have to watch out so you don 't unintentionally forget to transmit the rest of your data.
Note:
It is perfectly valid for socket_write() to return zero which means no bytes have been written.
Be sure to use the === operator to check for FALSE in case of an error.
See also socket_accept(), socket_bind(), socket_connect(), socket_listen(), socket_read() and socket_strerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
The old_function statement allows you to declare a function using a syntax identical to PHP / FI2 (except you must replace'function 'with'old_function'.
This is a deprecated feature, and should only be used by the PHP / FI2 - PHP 3 convertor.
Warning
Functions declared as old_function cannot be called from PHP 's internal code.
Among other things, this means you can' t use them in functions such as usort(), array_walk(), and register_shutdown_function().
You can get around this limitation by writing a wrapper function (in normal PHP 3 form) to call the old_function.
Prev
Home
Next
Returning values
Up
Variable functions
PHP Manual
Prev
Next
This function sorts an array.
Elements will be arranged from lowest to highest when this function has completed.
Example 1. sort() example
?php $fruits = array ("lemon", "orange", "banana", "apple"); sort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "fruits[".$key ."] = ".$val ."\n";}?
This example would display:
fruits[ 0] = apple fruits[1] = banana fruits[2] = lemon fruits[3] = orange
The fruits have been sorted in alphabetical order.
The optional second parameter sort_flags may be used to modify the sorting behavior using these values:
Sorting type flags:
SORT_REGULAR - compare items normally
SORT_NUMERIC - compare items numerically
SORT_STRING - compare items as strings
See also arsort(), asort(), ksort(), natsort(), natcasesort(), rsort(), usort(), array_multisort(), and uksort().
Note:
The second parameter was added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Calculates the soundex key of str.
This soundex function returns a string 4 characters long, starting with a letter.
This particular soundex function is one described by Donald Knuth in "The Art Of Computer Programming, vol.
391-392.
Example 1.
Soundex Examples
See also levenshtein(), metaphone(), and similar_text().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the regular expression pattern.
If limit is set, the returned array will contain a maximum of limit elements with the last element containing the whole rest of string.
If an error occurs, split() returns FALSE.
To split off the first four fields from a line from / etc / passwd:
Example 1. split() Example
Note:
If there are n occurrences of pattern, the returned array will contain n +1 items.
For example, if there is no occurrence of pattern, an array with only one element will be returned.
Of course, this is also true if string is empty.
To parse a date which may be delimited with slashes, dots, or hyphens:
Example 2. split() Example
$date = "04 / 30 / 1973"; / / Delimiters may be slash, dot, or hyphen list ($month, $day, $year) = split ('[ /. -]', $date); echo "Month: $month; Day: $day; Year: $year br \n";
Note that pattern is case-sensitive.
Note that if you don' t require the power of regular expressions, it is faster to use explode(), which doesn't incur the overhead of the regular expression engine.
For users looking for a way to emulate Perl' s @chars = split('', $str) behaviour, please see the examples for preg_split().
Please note that pattern is a regular expression.
If you want to split on any of the characters which are considered special by regular expressions, you 'll need to escape them first.
If you think split() (or any other regex function, for that matter) is doing something weird, please read the file regex.7, included in the regex / subdirectory of the PHP distribution.
It' s in manpage format, so you'll want to do something along the lines of man / usr / local / src / regex / regex.7 in order to read it.
See also: preg_split(), spliti(), explode(), implode(), chunk_split(), and wordwrap().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is identical to split() except that this ignores case distinction when matching alphabetic characters.
See also preg_spliti(), split(), explode(), and implode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string produced according to the formatting string format.
The format string is composed of zero or more directives: ordinary characters (excluding%) that are copied directly to the result, and conversion specifications, each of which results in fetching its own parameter.
This applies to both sprintf() and printf().
Each conversion specification consists of a percent sign (%), followed by one or more of these elements, in order:
An optional padding specifier that says what character will be used for padding the results to the right string size.
This may be a space character or a 0 (zero character).
The default is to pad with spaces.
An alternate padding character can be specified by prefixing it with a single quote (').
See the examples below.
An optional alignment specifier that says if the result should be left-justified or right-justified.
The default is right-justified; a - character here will make it left-justified.
An optional number, a width specifier that says how many characters (minimum) this conversion should result in.
An optional precision specifier that says how many decimal digits should be displayed for floating-point numbers.
This option has no effect for other types than float. (Another function useful for formatting numbers is number_format().)
A type specifier that says what type the argument data should be treated as.
Possible types:
% - a literal percent character.
No argument is required.
b - the argument is treated as an integer, and presented as a binary number.
c - the argument is treated as an integer, and presented as the character with that ASCII value.
d - the argument is treated as an integer, and presented as a (signed) decimal number.
u - the argument is treated as an integer, and presented as an unsigned decimal number.
f - the argument is treated as a float, and presented as a floating-point number.
o - the argument is treated as an integer, and presented as an octal number.
s - the argument is treated as and presented as a string.
x - the argument is treated as an integer and presented as a hexadecimal number (with lowercase letters).
X - the argument is treated as an integer and presented as a hexadecimal number (with uppercase letters).
As of PHP version 4.0.6 the format string supports argument numbering / swapping.
Here is an example:
Example 1.
Argument swapping
Example 2.
Argument swapping
Example 3.
Argument swapping
Example 4.
Argument swapping
See also printf(), sscanf(), fscanf(), vsprintf(), and number_format().
Example 5. sprintf(): zero-padded integers
$isodate = sprintf( "%04d-%02d-%02d", $year, $month, $day);
Example 6. sprintf(): formatting currency
$money1 = 68.75; $money2 = 54.35; $money = $money1 + $money2; / / echo $money will output "123.1"; $formatted = sprintf("%01.2f", $money); / / echo $formatted will output "123.10 "
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a valid regular expression which will match string, ignoring case.
This expression is string with each character converted to a bracket expression; this bracket expression contains that character's uppercase and lowercase form if applicable, otherwise it contains the original character twice.
Example 1. sql_regcase() Example
This can be used to achieve case insensitive pattern matching in products which support only case sensitive regular expressions.
Prev
Home
Next
Up
Semaphore, Shared Memory and IPC Functions
PHP Manual
Prev
Next
See also pow().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Seeds the random number generator with seed.
/ / seed with microseconds function make_seed() {list($usec, $sec) = explode( '', microtime()); return (float) $sec + ((float) $usec * 100000);} srand(make_seed()); $randval = rand();
Since PHP 4.2.0 it 's no longer necessary to seed the random number generator before using it.
See also rand(), getrandmax() and mt_srand().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
Values are returned by using the optional return statement.
Any type may be returned, including lists and objects.
This causes the function to end its execution immediately and pass control back to the line from which it was called.
See return() for more information.
function square ($num) {return $num * $num;} echo square (4); / / outputs '16 '.
You can 't return multiple values from a function, but similar results can be obtained by returning a list.
function small_numbers() {return array (0, 1, 2);} list ($zero, $one, $two) = small_numbers();
To return a reference from a function, you have to use the reference operator in both the function declaration and when assigning the returned value to a variable:
function returns_reference() {return $someref;} $newref = returns_reference();
For more information on references, please check out References Explained.
Prev
Home
Next
Function arguments
Up
PHP Manual
Prev
Next
The function sscanf() is the input analog of printf(). sscanf() reads from the string str and interprets it according to the specified format.
If only two parameters were passed to this function, the values parsed will be returned as an array.
Any whitespace in the format string matches any whitespace in the input string.
This means that even a tab \t in the format string can match a single space character in the input string.
Example 1. sscanf() Example
/ / getting the serial number $serial = sscanf( "SN / 2350001" ,"SN / %d"); / / and the date of manufacturing $mandate = "January 01 2000"; list($month, $day, $year) = sscanf($mandate ,"%s %d %d"); echo "Item $serial was manufactured on: $year -".substr($month,0,3) ."-$day\n";
Example 2. sscanf() - using optional parameters
/ / get author info and generate DocBook entry $auth = "24\tLewis Carroll"; $n = sscanf($auth ,"%d\t%s %s", $id, $first, $last); echo" author id='$id 'firstname $first / firstname surname $last / surname / author \n";
See also fscanf(), printf(), and sprintf().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Gathers the statistics of the file named by filename.
Returns an array with the statistics of the file with the following elements:
device
number of links
user id of owner
group id owner
device type if inode device *
size in bytes
time of last access
time of last modification
time of last change
blocksize for filesystem I / O *
number of blocks allocated
Returns FALSE in case of error.
stat() cannot be used on remote files.
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are equal.
Example 1. strcasecmp() example
$var1 = "Hello"; $var2 = "hello"; if (!strcasecmp($var1, $var2)) {echo '$var1 is equal to $var2 in a case-insensitive string comparison';}
See also ereg(), strcmp(), substr(), stristr(), strncasecmp(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias for strstr(), and is identical in every way.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are equal.
Note that this comparison is case sensitive.
See also ereg(), strcasecmp(), substr(), stristr(), strncasecmp(), strncmp(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the length of the initial segment of str1 which does not contain any of the characters in str2.
See also strspn().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See Appendix I for more information about wrappers.
See Appendix I for more information about wrappers and their wrapper data.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. stream_set_timeout() Example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. stream_set_write_buffer() example
Prev
Home
Next
Up
String functions
PHP Manual
Prev
Next
Returns a string formatted according to the given format string using the given timestamp or the current local time if no timestamp is given.
Month and weekday names and other language dependent strings respect the current locale set with setlocale().
The following conversion specifiers are recognized in the format string:
%a - abbreviated weekday name according to the current locale
%A - full weekday name according to the current locale
%B - full month name according to the current locale
%c - preferred date and time representation for the current locale
%C - century number (the year divided by 100 and truncated to an integer, range 00 to 99)
%D - same as %m / %d / %y
%e - day of the month as a decimal number, a single digit is preceded by a space (range '1' to '31')
%g - like %G, but without the century.
%G - The 4-digit year corresponding to the ISO week number (see %V).
%h - same as %b
%H - hour as a decimal number using a 24-hour clock (range 00 to 23)
%I - hour as a decimal number using a 12-hour clock (range 01 to 12)
%j - day of the year as a decimal number (range 001 to 366)
%M - minute as a decimal number
%n - newline character
%p - either `am' or `pm 'according to the given time value, or the corresponding strings for the current locale
%R - time in 24 hour notation
%t - tab character
%T - current time, equal to %H:%M:%S
%u - weekday as a decimal number [1,7], with 1 representing Monday
Warning
%U - week number of the current year as a decimal number, starting with the first Sunday as the first day of the first week
%W - week number of the current year as a decimal number, starting with the first Monday as the first day of the first week
%w - day of the week as a decimal, Sunday being 0
%x - preferred date representation for the current locale without the time
%X - preferred time representation for the current locale without the date
%y - year as a decimal number without a century (range 00 to 99)
%Z - time zone or name or abbreviation
%% - a literal `% 'character
Not all conversion specifiers may be supported by your C library, in which case they will not be supported by PHP' s strftime().
Example 1. strftime() locale examples
setlocale (LC_TIME, "C"); print (strftime ("%A in Finnish is ")); setlocale (LC_TIME, "fi_FI"); print (strftime ("%A, in French ")); setlocale (LC_TIME, "fr_FR"); print (strftime ("%A and in German ")); setlocale (LC_TIME, "de_DE"); print (strftime ("%A.\n"));
Note: %G and %V, which are based on ISO 8601:1988 week numbers can give unexpected (albiet correct) results if the numbering system is not thoroughly understood.
Example 2.
?php / * December 2002 / January 2003 ISOWk M Tu W Thu F Sa Su ---- - --------------------------- - 51 16 17 18 19 20 21 22 52 23 24 25 26 27 28 29 1 30 31 1 2 3 4 5 2 6 7 8 9 10 11 12 3 13 14 15 16 17 18 19 * / / / Outputs:
12 / 28 / 2002 - %V,%G,%Y = 52,2002,2002 print "12 / 28 / 2002 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("12 / 28 / 2002")). "\n"; / / Outputs:
12 / 30 / 2002 - %V,%G,%Y = 1,2003,2002 print "12 / 30 / 2002 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("12 / 30 / 2002")). "\n"; / / Outputs:
1 / 3/2003 - %V,%G,%Y = 1,2003,2003 print "1 / 3/2003 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("1 / 3/2003")). "\n"; / / Outputs:
1 / 10 / 2003 - %V,%G,%Y = 2,2003,2003 print "1 / 10 / 2003 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("1 / 10 / 2003")). "\n"; / * December 2004 / January 2005 ISOWk M Tu W Thu F Sa Su ---- - --------------------------- - 51 13 14 15 16 17 18 19 52 20 21 22 23 24 25 26 53 27 28 29 30 31 1 2 1 3 4 5 6 7 8 9 2 10 11 12 13 14 15 16 * / / / Outputs:
12 / 23 / 2004 - %V,%G,%Y = 52,2004,2004 print "12 / 23 / 2004 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("12 / 23 / 2004")). "\n"; / / Outputs:
12 / 31 / 2004 - %V,%G,%Y = 53,2004,2004 print "12 / 31 / 2004 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("12 / 31 / 2004")). "\n"; / / Outputs:
1 / 3/2005 - %V,%G,%Y = 1,2005,2005 print "1 / 3/2005 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("1 / 3/2005")). "\n";?
See also setlocale() and mktime() and the Open Group specification of strftime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with backslashes stripped off.
Recognizes C-like \n, \r..., octal and hexadecimal representation.
See also addcslashes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with backslashes stripped off. (\ 'becomes' and so on.) Double backslashes are made into a single backslash.
See also addslashes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function tries to return a string with all HTML and PHP tags stripped from a given str.
It errors on the side of caution in case of incomplete or bogus tags.
It uses the same tag stripping state machine as the fgetss() function.
Example 1. strip_tags() example
$string = strip_tags( $string, 'a b i u ');
This function does not modify any attributes on the tags that you allow using allowable_tags, including the style and onmouseover attributes that a mischievous user may abuse when posting text that will be shown to other users.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns all of haystack from the first occurrence of needle to the end. needle and haystack are examined in a case-insensitive manner.
If needle is not found, returns FALSE.
If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
See also strchr(), strrchr(), substr(), and ereg().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the length of string.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The behaviour of this function is similar to strnatcmp(), except that the comparison is not case sensitive.
Martin Pool 's Natural Order String Comparison page.
Similar to other string comparison functions, this one returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are equal.
See also ereg(), strcasecmp(), substr(), stristr(), strcmp(), strncmp(), strncasecmp(), strnatcmp(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a "natural ordering".
An example of the difference between this algorithm and the regular computer string sorting algorithms (used in strcmp()) can be seen below:
$arr1 = $arr2 = array( "img12.png" ,"img10.png" ,"img2.png" ,"img1.png"); echo "Standard string comparison\n"; usort($arr1 ,"strcmp"); print_r($arr1); echo "\nNatural order string comparison\n"; usort($arr2 ,"strnatcmp"); print_r($arr2);
Standard string comparison Array ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Natural order string comparison Array ([0] = img1.png [1] = img2.png [2] = img10.png [3] = img12.png)
Similar to other string comparison functions, this one returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are equal.
Note that this comparison is case sensitive.
See also ereg(), strcasecmp(), substr(), stristr(), strcmp(), strncmp(), strncasecmp(), strnatcasecmp(), strstr(), natsort() and natcasesort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is similar to strcmp(), with the difference that you can specify the (upper limit of the) number of characters (len) from each string to be used in the comparison.
If any of the strings is shorter than len, then the length of that string will be used for the comparison.
Returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are equal.
Note that this comparison is case sensitive.
See also ereg(), strncasecmp(), strcasecmp(), substr(), stristr(), strcmp(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This functions returns the input string padded on the left, the right, or both sides to the specified padding length.
If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.
Optional argument pad_type can be STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH.
If pad_type is not specified it is assumed to be STR_PAD_RIGHT.
If the value of pad_length is negative or less than the length of the input string, no padding takes place.
Example 1. str_pad() example
$input = "Alien"; print str_pad($input, 10); / / produces "Alien" print str_pad($input, 10, "-=", STR_PAD_LEFT); / / produces "-=-=-Alien "print str_pad($input, 10, "_", STR_PAD_BOTH); / / produces "__Alien___"
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the numeric position of the first occurrence of needle in the haystack string.
Unlike the strrpos(), this function can take a full string as the needle parameter and the entire string will be used.
If needle is not found, returns FALSE.
Note:
It is easy to mistake the return values for "character found at position 0" and "character not found ".
Here 's how to detect the difference:
/ / in PHP 4.0b3 and newer: $pos = strpos( $mystring, "b"); if ($pos === false) {/ / note: three equal signs / / not found...} / / in versions older than 4.0b3: $pos = strpos($mystring, "b"); if (!is_integer($pos)) {/ / not found...}
If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
The optional offset parameter allows you to specify which character in haystack to start searching.
The position returned is still relative to the the beginning of haystack.
See also strrpos(), strrchr(), substr(), stristr(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.
Returns FALSE if needle is not found.
If needle contains more than one character, the first is used.
If needle is not a string, it is converted to an integer and applied as the ordinal value of a character.
Example 1. strrchr() example
/ / get last directory in $PATH $dir = substr( strrchr($PATH, ":"), 1); / / get everything after last newline $text = "Line 1\nLine 2\nLine 3"; $last = substr(strrchr($text, 10), 1);
See also strchr(), substr(), stristr(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
If the multiplier is set to 0, the function will return an empty string.
Example 1. str_repeat() example
echo str_repeat( "-=", 10);
This will output "-=-=-=-=-=-=-=-=-=-=".
See also for, str_pad(), and substr_count().
Prev
Home
Next
Up
PHP Manual
Prev
Next
If you don' t need fancy replacing rules, you should always use this function instead of ereg_replace() or preg_replace().
If subject is an array, then the search and replace is performed with every entry of subject, and the return value is an array as well.
If search and replace are arrays, then str_replace() takes a value from each array and uses them to do search and replace on subject.
If search is an array and replace is a string; then this replacement string is used for every value of search.
$bodytag = str_replace( "%body%", "black", "body text=%body% ");
See also ereg_replace(), preg_replace(), and strtr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
php echo strrev( "Hello world !"); / / outputs "!dlrow olleH "?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the numeric position of the last occurrence of needle in the haystack string.
Note that the needle in this case can only be a single character.
If needle is not found, returns FALSE.
It is easy to mistake the return values for "character found at position 0" and "character not found ".
/ / in PHP 4.0b3 and newer: $pos = strrpos( $mystring, "b"); if ($pos === false) {/ / note: three equal signs / / not found...} / / in versions older than 4.0b3: $pos = strrpos($mystring, "b"); if (is_string($pos) !$pos) {/ / not found...}
See also strpos(), strrchr(), substr(), stristr(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. str_shuffle() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the length of the initial segment of str1 which consists entirely of characters in str2.
The line of code:
$var = strspn( "42 is the answer, what is the question.. .", "1234567890");
See also strcspn().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns part of haystack string from the first occurrence of needle to the end of haystack.
If needle is not found, returns FALSE.
Note:
For case-insensitive searches, use stristr().
$email = 'user@example.com'; $domain = strstr($email, '@'); print $domain; / / prints @example.com
If you only want to determine if a particular needle occurs within haystack, use the faster and less memory intensive function strpos() instead.
See also ereg(), preg_match(), strchr(), stristr(), strpos(), strrchr(), and substr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
strtok() splits a string (arg1) into smaller strings (tokens), with each token being delimited by any character from arg2.
That is, if you have a string like "This is an example string" you could tokenize this string into its individual words by using the space character as the token.
Example 1. strtok() example
Note that only the first call to strtok uses the string argument.
To start over, or to tokenize a new string you simply call strtok with the string argument again to initialize it.
The string will be tokenized when any one of the characters in the argument are found.
The old behavior returned an empty string, while the new, correct, behavior simply skips the part of the string:
Old strtok() behavior
Example 3.
$first_token = strtok( '/ something',' / '); $second_token = strtok(' / '); var_dump ($first_token, $second_token); / * Output: string(9) "something "bool(false) * /
Also be careful that your tokens may be equal to "0".
This evaluates to FALSE in conditional expressions.
See also split() and explode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns string with all alphabetic characters converted to lowercase.
Note that 'alphabetic' is determined by the current locale.
This means that in i.e. the default "C" locale, characters such as umlaut-A (Ä) will not be converted.
Example 1. strtolower() example
$str = "Mary Had A Little Lamb and She LOVED It So"; $str = strtolower($str); print $str; # Prints mary had a little lamb and she loved it so
See also strtoupper(), ucfirst(), and ucwords().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function expects to be given a string containing an English date format and will try to parse that format into a UNIX timestamp relative to the timestamp given in now, or the current time if none is supplied.
Upon failure, -1 is returned.
Because strtotime() behaves according to GNU date syntax, have a look at the GNU manual page titled Date Input Formats.
Described there is valid syntax for the time parameter.
Example 1. strtotime() examples
Example 2.
Checking for failure
$str = 'Not Good'; if (($timestamp = strtotime($str)) === -1) {echo "The string ($str) is bogus";} else {echo "$str == ". date('l dS of F Y h:i:s A',$timestamp);}
Note:
The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are the dates that correspond to the minimum and maximum values for a 32-bit signed integer.)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns string with all alphabetic characters converted to uppercase.
Note that 'alphabetic' is determined by the current locale.
For instance, in the default "C" locale characters such as umlaut-a (ä) will not be converted.
Example 1. strtoupper() example
$str = "Mary Had A Little Lamb and She LOVED It So"; $str = strtoupper($str); print $str; # Prints MARY HAD A LITTLE LAMB AND SHE LOVED IT SO
See also strtolower(), ucfirst(), and ucwords().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns a copy of str, translating all occurrences of each character in from to the corresponding character in to and returning the result.
If from and to are different lengths, the extra characters in the longer of the two are ignored.
Example 1. strtr() example
strtr() can be called with only two arguments.
If called with two arguments it behaves in a new way: from then has to be an array that contains string - string pairs that will be replaced in the source string. strtr() will always look for the longest possible match first and will *NOT* try to replace stuff that it has already worked on.
Examples:
$trans = array( "hello "= "hi", "hi" = "hello"); echo strtr("hi all, I said hello", $trans). "\n";
Note:
This optional to and from parameters were added in PHP 4.0.0
See also ereg_replace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
See the documentation on string for more information on converting to string.
You cannot use strval() on arrays or objects.
See also floatval(), intval(), settype() and Type juggling.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Counts the number of words inside string.
If the optional format is not specified, then the return value will be an integer representing the number of words found.
The possible value for the format and the resultant outputs are listed below.
1 - returns an array containing all the words found inside the string.
2 - returns an associative array, where the key is the numeric position of the word inside the string and the value is the actual word itself.
For the purpose of this function, 'word' is defined as a locale dependent string containing alphabetic characters, which also may contain, but not start with "'"and" - "characters.
Prev
Home
Next
Up
PHP Manual
Prev
Next
substr_count() returns the number of times the needle substring occurs in the haystack string.
Example 1. substr_count() example
?php print substr_count( "This is a test", "is"); / / prints out 2?
See also count_chars(), strpos(), substr(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
substr() returns the portion of string specified by the start and length parameters.
If start is non-negative, the returned string will start at the start 'th position in string, counting from zero.
For instance, in the string 'abcdef', the character at position 0 is' a ', the character at position 2 is' c ', and so forth.
Example 1.
Basic substr() usage
?php $rest = substr( "abcdef", 1); / / returns "bcdef "$rest = substr("abcdef", 1, 3); / / returns "bcd" $rest = substr("abcdef", 0, 4); / / returns "abcd "$rest = substr("abcdef", 0, 8); / / returns "abcdef" / / Accessing via curly braces is another option $string = 'abcdef'; echo $string{0}; / / returns a echo $string{3}; / / returns d?
If start is negative, the returned string will start at the start 'th character from the end of string.
Example 2.
Using a negative start
?php $rest = substr( "abcdef", -1); / / returns "f "$rest = substr("abcdef", -2); / / returns "ef" $rest = substr("abcdef", -3, 1); / / returns "d "?
If length is given and is positive, the string returned will contain at most length characters beginning from start (depending on the length of string).
If string is less than start characters long, FALSE will be returned.
If length is given and is negative, then that many characters will be omitted from the end of string (after the start position has been calculated when a start is negative).
If start denotes a position beyond this truncation, an empty string will be returned.
Example 3.
Using a negative length
?php $rest = substr( "abcdef", 0, -1); / / returns "abcde "$rest = substr("abcdef", 2, -1); / / returns "cde" $rest = substr("abcdef", 4, -4); / / returns "" $rest = substr("abcdef", -3, -1); / / returns "de "?
See also strrchr() and ereg().
Prev
Home
Next
Up
PHP Manual
Prev
Next
substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.
The result is returned.
If start is positive, the replacing will begin at the start 'th offset into string.
If start is negative, the replacing will begin at the start 'th character from the end of string.
If length is given and is positive, it represents the length of the portion of string which is to be replaced.
If it is negative, it represents the number of characters from the end of string at which to stop replacing.
If it is not given, then it will default to strlen( string); i.e. end the replacing at the end of string.
Example 1. substr_replace() example
?php $var = 'ABCDEFGH: / MNRPQR /'; echo "Original: $var hr \n"; / * These two examples replace all of $var with'bob'. * / echo substr_replace($var, 'bob', 0). "br \n"; echo substr_replace($var, 'bob', 0, strlen($var))." br \n"; / * Insert'bob 'right at the beginning of $var. * / echo substr_replace($var, 'bob', 0, 0). "br \n"; / * These next two replace'MNRPQR' in $var with'bob'. * / echo substr_replace($var, 'bob', 10, -1)." br \n"; echo substr_replace($var, 'bob', -7, -1). "br \n"; / * Delete'MNRPQR 'from $var. * / echo substr_replace($var, '', 10, -1)." br \n";?
See also str_replace() and substr().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
PHP supports the concept of variable functions.
This means that if a variable name has parentheses appended to it, PHP will look for a function with the same name as whatever the variable evaluates to, and will attempt to execute it.
Among other things, this can be used to implement callbacks, function tables, and so forth.
You need to use your own wrapper function to utilize any of these constructs as variable functions.
Example 13-3.
Variable function example
?php function foo() {echo "In foo() br \n";} function bar($arg = '') {echo "In bar(); argument was '$arg'. br \n";} / / This is a wrapper function around echo function echoit($string) {echo $string;} $func = 'foo'; $func(); / / This calls foo() $func = 'bar'; $func('test'); / / This calls bar() $func = 'echoit'; $func('test'); / / This calls echoit()?
You can also call an object 's method by using the variable functions feature.
Example 13-4.
Variable method example
?php class Foo {function Var() {$name = 'Bar'; $this - $name(); / / This calls the Bar() method} function Bar() {echo "This is Bar";}} $foo = new Foo(); $funcname = "Var"; $foo - $varname(); / / This calls $foo - Var()?
See also call_user_func(), variable variables and function_exists().
Prev
Home
Next
Up
Classes and Objects
PHP Manual
Prev
Next
Prev
Home
Next
Shockwave Flash functions
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfaction() example
Example 2. swfaction() example
Example 3. swfaction() example
Example 4. swfaction() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
swf_actionplay
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. swf_addbuttonrecord() function example
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_addcolor() function sets the global add color to the rgba color specified.
This color is then used (implicitly) by the swf_placeobject(), swf_modifyobject() and the swf_addbuttonrecord() functions.
The color of the object will be add by the rgba values when the object is written to the screen.
Note:
The rgba values can be either positive or negative.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Example 1.
Example 2. swfbitmap() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfbutton() example
Example 2. swfbutton - addaction() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creating a simple flash file based on user input and outputting it and saving it in a database
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfdisplayitem - multcolor() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfdisplayitem - rotateto() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfdisplayitem - setname() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_getframe() function gets the number of the current frame.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfgradient() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Label the current frame with the name given by the name parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfmorph() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfmovie - streammp3() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_mulcolor() function sets the global multiply color to the rgba color specified.
This color is then used (implicitly) by the swf_placeobject(), swf_modifyobject() and the swf_addbuttonrecord() functions.
The color of the object will be multiplied by the rgba values when the object is written to the screen.
Note:
The rgba values can be either positive or negative.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_openfile() function opens a new file named filename with a width of width and a height of height a frame rate of framerate and background with a red color of r a green color of g and a blue color of b.
The swf_openfile() must be the first function you call, otherwise your script will cause a segfault.
If you want to send your output to the screen make the filename: "php: / /stdout" (support for this is in 4.0.1 and up).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_ortho() function defines a orthographic mapping of user coordinates onto the current viewport.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_setframe() changes the active frame to the frame specified by framenumber.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfshape - addfill() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_shapecurveto() function draws a quadratic bezier curve from the current location, though the x coordinate given by x1 and the y coordinate given by y1 to the x coordinate given by x2 and the y coordinate given by y2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfshape() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfshape - setline() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The swf_showframe function will output the current frame.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfsprite() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
Miscellaneous functions
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swftext() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
SNMP functions
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
symlink() creates a symbolic link from the existing target with the specified name link.
See also link() to create hard links, and readlink() along with linkinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
syslog() generates a log message that will be distributed by the system logger. priority is a combination of the facility and the level, values for which are given in the next section.
The remaining argument is the message to send, except that the two characters %m will be replaced by the error message string (strerror) corresponding to the present value of errno.
Table 1. syslog() Priorities (in descending order)
Constant
Description
system is unusable
action must be taken immediately
critical conditions
error conditions
warning conditions
normal, but significant, condition
informational message
debug-level message
Example 1.
Using syslog()
On Windows NT, the syslog service is emulated using the Event Log.
Use of LOG_LOCAL0 through LOG_LOCAL7 for the facility parameter of openlog() is not available in Windows.
See also define_syslog_variables(), openlog() and closelog().
Prev
Home
Next
Up
PHP Manual
Prev
Next
system() is just like the C version of the function in that it executes the given command and outputs the result.
If a variable is provided as the second argument, then the return status code of the executed command will be written to this variable.
If you are going to allow data coming from user input to be passed to this function, then you should be using escapeshellarg() or escapeshellcmd() to make sure that users cannot trick the system into executing arbitrary commands.
If you start a program using this function and want to leave it running in the background, you have to make sure that the output of that program is redirected to a file or some other output stream or else PHP will hang until the execution of the program ends.
The system() call also tries to automatically flush the web server's output buffer after each line of output if PHP is running as a server module.
Returns the last line of the command output on success, and FALSE on failure.
If you need to execute a command and have all the data from the command passed directly back without any interference, use the passthru() function.
See also exec(), passthru(), popen(), escapeshellcmd(), and the backtick operator.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The arg parameter is in radians.
See also atan(), sin(), cos() and deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates a file with a unique filename in the specified directory.
If the directory does not exist, tempnam() may generate a file in the system's temporary directory, and return the name of that.
Prior to PHP 4.0.6, the behaviour of the tempnam() function was system dependent.
Consult your system documentation on the tempnam( 3) function if in doubt.
Returns the new temporary filename, or the FALSE string on failure.
Example 1. tempnam() example
$tmpfname = tempnam ("/ tmp", "FOO"); $handle = fopen($tmpfname, "w"); fwrite($handle, "writing to tempfile"); fclose($handle); / / do here something unlink($tmpfname);
Note:
This function 's behavior changed in 4.0.3.
The temporary file is also created to avoid a race condition where the file might appear in the filesystem between the time the string was generated and before the the script gets around to creating the file.
Note, that you need to remove the file in case you need it no more, it is not done automatically.
See also tmpfile() and unlink().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sets the domain to search within when calls are made to gettext(), usually the named after an application.
The previous default domain is returned.
Call it with NULL as parameter to get the current setting without changing it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).
See also date().
Prev
Home
Next
Up
dBase functions
PHP Manual
Prev
Next
Creates a temporary file with an unique name in write mode, returning a file handle similar to the one returned by fopen().
The file is automatically removed when closed (using fclose()), or when the script ends.
For details, consult your system documentation on the tmpfile( 3) function, as well as the stdio.h header file.
Example 1. tmpfile() example
$temp = tmpfile(); fwrite($temp, "writing to tempfile"); fclose($temp); / / this removes the file
See also tempnam().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
URL Functions
PHP Manual
Prev
Next
Attempts to set the access and modification time of the file named by filename to the value given by time.
If the option time is not given, uses the present time.
This is equivalent to what utime (sometimes referred to as utimes) does.
If the third option atime is present, the access time of the given filename is set to the value of atime.
Note that the access time is always modified, regardless of the number of parameters.
If the file does not exist, it is created.
Returns TRUE on success or FALSE on failure.
Example 1. touch() example
if (touch ($FileName)) {print "$FileName modification time has been changed to todays date and time";} else {print "Sorry Could Not change modification time of $FileName";}
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Without the second parameter, trim() will strip these characters:
"\r" (ASCII 13 (0x0D)), a carriage return.
You can also specify the characters you want to strip, by means of the charlist You can also specify the characters you want to strip, by means of the charlist parameter.
With.. you can specify a range of characters.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.
This is used mainly when sorting associative arrays where the actual element order is significant.
The comparison function is user-defined.
Note:
Please see usort() and uksort() for examples of user-defined comparison functions.
See also usort(), uksort(), sort(), asort(), arsort(), ksort(), and rsort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with the first character of str capitalized, if that character is alphabetic.
Note that 'alphabetic' is determined by the current locale.
For instance, in the default "C" locale characters such as umlaut-a (ä) will not be converted.
Example 1. ucfirst() example
$foo = 'hello world !'; $foo = ucfirst($foo); / / Hello world! $bar = 'HELLO WORLD !'; $bar = ucfirst($bar); / / HELLO WORLD! $bar = ucfirst(strtolower($bar)); / / Hello world!
See also strtolower(), strtoupper(), and ucwords().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with the first character of each word in str capitalized, if that character is alphabetic.
Example 1. ucwords() example
The definition of a word is any string of characters that is immediately after a whitespace (These are: space, form-feed, newline, carriage return, horizontal tab, and vertical tab).
See also strtoupper(), strtolower() and ucfirst().
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_add_search_limit() returns TRUE on success, FALSE on error.
Adds search restrictions.
agent - a link to Agent, received after call to udm_alloc_agent().
var - defines parameter, indicating limit.
val - defines value of the current parameter.
Possible var values:
It supports SQL% and _ LIKE wildcards, where% matches any number of characters, even zero characters, and _ matches exactly one character.
E.g. http: / /my.domain.__ / catalog may stand for http: / /my.domain.ru / catalog and http: / /my.domain.ua / catalog.
UDM_LIMIT_TAG - defines site TAG limitations.
In indexer-conf you can assign specific TAGs to various sites and parts of a site.
Tags in mnoGoSearch 3.1.x are lines, that may contain metasymbols% and _.
Metasymbols allow searching among groups of tags.
E.g. there are links with tags ABCD and ABCE, and search restriction is by ABC_ - the search will be made among both of the tags.
UDM_LIMIT_LANG - defines document language limitations.
Categories are similar to tag feature, but nested.
You have to use two characters for each level.
Use a hex number going from 0-F or a 36 base number going from 0-Z.
If it has a subcategory like 'Ford', then it would be 01 (the parent category) and then'Ford' which we will give 01.
If 'Auto' had another subcategory named'VW', then it's id would be 01 because it belongs to the'Ford 'category and then 02 because it's the next category.
So it 's id would be 0102.
If VW had a sub category called 'Engine' then it's id would start at 01 again and it would get the'VW 'id 02 and'Auto' id of 01, making it 010201.
If you want to search for sites under that category then you pass it cat=010201 in the url.
UDM_LIMIT_DATE - defines limitation by date document was modified.
Format of parameter value: a string with first character or, then with no space - date in unixtime format, for example:
If, then smaller.
Prev
Home
Next
mnoGoSearch Functions
Up
PHP Manual
Prev
Next
udm_alloc_agent() returns mnogosearch agent identifier on success, FALSE on error.
This function creates a session with database parameters.
Do not matter for built-in text files support.
DBAddr DBType :[ / /[DBUser[:DBPass]@]DBHost[:DBPort]] / DBName / Currently supported DBType values are: mysql, pgsql, msql, solid, mssql, oracle, ibase.
Actually, it does not matter for native libraries support.
If your database type is not supported, you may use "unknown" instead.
When "single" is specified, all words are stored in the same table.
If "multi" is selected, words will be located in different tables depending of their lengths. "multi "mode is usually faster but requires more tables in database.
If "crc" mode is selected, mnoGoSearch will store 32 bit integer word IDs calculated by CRC32 algorythm instead of words.
This mode requres less disk space and it is faster comparing with "single" and "multi "modes. "crc-multi" uses the same storage structure with the "crc "mode, but also stores words in different tables depending on words lengths like "multi" mode.
Note:
In fact this function does not open connection to database and thus does not check entered login and password.
Actual connection to database and login / password verification is done by udm_find().
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_api_version() returns mnoGoSearch API version number.
E.g. if mnoGoSearch 3.1.10 API is used, this function will return 30110.
This function allows user to identify which API functions are available, e.g. udm_get_doc_count() function is only available in mnoGoSearch 3.1.11 or later.
Example:
if (udm_api_version() = 30111) {print "Total number of urls in database: ".udm_get_doc_count($udm). "br \n";}
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_cat_list() returns array listing all categories of the same level as current category in the categories tree.
The function can be useful for developing categories tree browser.
Returns array with the following format:
The array consists of pairs.
Elements with even index numbers contain category paths, odd elements contain corresponding category names.
$array[ 0] will contain '020300 '$array[1] will contain'Audi' $array[2] will contain '020301 '$array[3] will contain'BMW' $array[4] will contain '020302 '$array[5] will contain'Opel'... etc.
Following is an example of displaying links of the current level in format:
?php $cat_list_arr = udm_cat_list( $udm_agent,$cat); $cat_list = ''; for ($i=0; $i count($cat_list_arr); $i+=2) {$path = $cat_list_arr[$i]; $name = $cat_list_arr[$i+1]; $cat_list .= "a href=\"$PHP_SELF?cat=$path\" $name / a br ";}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_cat_path() returns array describing path in the categories tree from the tree root to the current category.
agent - agent link identifier.
category - current category - the one to get path to.
Returns array with the following format:
The array consists of pairs.
Elements with even index numbers contain category paths, odd elements contain corresponding category names.
For example, the call $array=udm_cat_path( $agent, '02031D'); may return the following array:
$array[ 0] will contain '' $array[1] will contain'Root '$array[2] will contain '02' $array[3] will contain'Sport '$array[4] will contain '0203' $array[5] will contain'Auto '$array[4] will contain '02031D' $array[5] will contain'Ferrari '
Example 1.
Specifying path to the current category in the following format: 'Root Sport Auto Ferrari'
?php $cat_path_arr = udm_cat_path( $udm_agent,$cat); $cat_path = ''; for ($i=0; $i count($cat_path_arr); $i+=2) {$path = $cat_path_arr[$i]; $name = $cat_path_arr[$i+1]; $cat_path .= "a href=\"$PHP_SELF?cat=$path\" $name / a ";}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_clear_search_limits() resets defined search limitations and returns TRUE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_errno() returns mnoGoSearch error number, zero if no error.
agent - link to agent identifier, received after call to udm_alloc_agent().
Receiving numeric agent error code.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_error() returns mnoGoSearch error message, empty string if no error.
agent - link to agent identifier, received after call to udm_alloc_agent().
Receiving agent error message.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_find() returns result link identifier on success, FALSE on error.
The search itself.
The first argument - session, the next one - query itself.
To find something just type words you want to find and press SUBMIT button.
For example, "mysql odbc".
You should not use quotes "in query, they are written here only to divide a query from other text. mnoGoSearch will find all documents that contain word "mysql" and / or word "odbc ".
Best documents having bigger weights will be displayed first.
If you use search mode ALL, search will return documents that contain both (or more) words you entered.
In case you use mode ANY, the search will return list of documents that contain any of the words you entered.
If you want more advanced results you may use query language.
You should select "bool" match mode in the search from.
mnoGoSearch understands the following boolean operators:
- logical AND.
For example, "mysql odbc". mnoGoSearch will find any URLs that contain both "mysql" and "odbc ".
_BAR_ - logical OR.
For example "mysql_BAR_odbc". mnoGoSearch will find any URLs, that contain word "mysql" or word "odbc ".
~ - logical NOT.
For example "mysql ~odbc". mnoGoSearch will find URLs that contain word "mysql" and do not contain word "odbc "at the same time.
Note that ~ just excludes given word from results.
Query "~odbc" will find nothing!
For example "(mysql _BAR_ msql) ~postgres".
Query language is simple and powerful at the same time.
Just consider query as usual boolean expression.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_free_agent() returns TRUE on success, FALSE on error.
agent - link to agent identifier, received ` after call to udm_alloc_agent().
Freeing up memory allocated for agent session.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_free_ispell_data() always returns TRUE.
agent - agent link identifier, received after call to udm_alloc_agent().
Note:
This function is supported beginning from version 3.1.12 of mnoGoSearch and it does not do anything in previous versions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_free_res() returns TRUE on success, FALSE on error.
res - a link to result identifier, received after call to udm_find().
Freeing up memory allocated for results.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_get_doc_count() returns number of documents in database.
agent - link to agent identifier, received after call to udm_alloc_agent().
Note:
This function is supported only in mnoGoSearch 3.1.11 or later.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_get_res_field() returns result field value on success, FALSE on error.
res - a link to result identifier, received after call to udm_find().
row - the number of the link on the current page.
May have values from 0 to UDM_PARAM_NUM_ROWS-1.
field - field identifier, may have the following values:
UDM_FIELD_URL - document URL field
UDM_FIELD_CONTENT - document Content-type field (for example, text / html).
Use udm_cat_path() to get full path to current category from the categories tree root. (This parameter is available only in PHP 4.0.6 or later).
UDM_FIELD_TITLE - document title field.
UDM_FIELD_KEYWORDS - document keywords field (from META KEYWORDS tag).
UDM_FIELD_DESC - document description field (from META DESCRIPTION tag).
UDM_FIELD_TEXT - document body text (the first couple of lines to give an idea of what the document is about).
UDM_FIELD_SIZE - document size.
UDM_FIELD_URLID - unique URL ID of the link.
UDM_FIELD_RATING - page rating (as calculated by mnoGoSearch).
UDM_FIELD_MODIFIED - last-modified field in unixtime format.
UDM_FIELD_ORDER - the number of the current document in set of found documents.
UDM_FIELD_CRC - document CRC.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_get_res_param() returns result parameter value on success, FALSE on error.
res - a link to result identifier, received after call to udm_find().
param - parameter identifier, may have the following values:
It is equal to UDM_PARAM_PAGE_SIZE for all search pages, on the last page - the rest of links.
UDM_PARAM_FOUND - total number of results matching the query.
UDM_PARAM_WORDINFO - information on the words found.
E.g. search for "a good book" will return "a: stopword, good:5637, book:
120 "
UDM_PARAM_SEARCHTIME - search time in seconds.
UDM_PARAM_FIRST_DOC - the number of the first document displayed on current page.
UDM_PARAM_LAST_DOC - the number of the last document displayed on current page.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_load_ispell_data() loads ispell data.
Returns TRUE on success, FALSE on error.
agent - agent link identifier, received after call to udm_alloc_agent().
var - parameter, indicating the source for ispell data.
May have the following values:
After using this function to free memory allocated for ispell data, please use udm_free_ispell_data(), even if you use UDM_ISPELL_TYPE_SERVER mode.
The fastest mode is UDM_ISPELL_TYPE_SERVER.
UDM_ISPELL_TYPE_TEXT is slower and UDM_ISPELL_TYPE_DB is the slowest.
It is planned to speed up DB mode in future versions and it is going to be faster than TEXT mode.
UDM_ISPELL_TYPE_DB - indicates that ispell data should be loaded from SQL.
In this case, parameters val1 and val2 are ignored and should be left blank. flag should be equal to 1.
In case of loading ispell data from files there may be several calls to udm_load_ispell_data(), and there is no sense to sort data after every call, but only after the last one.
Since in db mode all the data is loaded by one call, this parameter should have the value 1.
In this mode in case of error, e.g. if ispell tables are absent, the function will return FALSE and code and error message will be accessible through udm_error() and udm_errno().
Example:
if (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_DB ,'' ,'',1)) {printf("Error #%d: '%s'\n", udm_errno($udm), udm_error($udm)); exit;}
UDM_ISPELL_TYPE_AFFIX - indicates that ispell data should be loaded from file and initiates loading affixes file.
In this case val1 defines double letter language code for which affixes are loaded, and val2 - file path.
Please note, that if a relative path entered, the module looks for the file not in UDM_CONF_DIR, but in relation to current path, i.e. to the path where the script is executed.
In case of error in this mode, e.g. if file is absent, the function will return FALSE, and an error message will be displayed.
Error message text cannot be accessed through udm_error() and udm_errno(), since those functions can only return messages associated with SQL.
Please, see flag parameter description in UDM_ISPELL_TYPE_DB.
Example:
UDM_ISPELL_TYPE_SPELL - indicates that ispell data should be loaded from file and initiates loading of ispell dictionary file.
In this case val1 defines double letter language code for which affixes are loaded, and val2 - file path.
Please note, that if a relative path entered, the module looks for the file not in UDM_CONF_DIR, but in relation to current path, i.e. to the path where the script is executed.
In case of error in this mode, e.g. if file is absent, the function will return FALSE, and an error message will be displayed.
Error message text cannot be accessed through udm_error() and udm_errno(), since those functions can only return messages associated with SQL.
Please, see flag parameter description in UDM_ISPELL_TYPE_DB.
UDM_ISPELL_TYPE_SERVER - enables spell server support. val1 parameter indicates address of the host running spell server. val2 ` is not used yet, but in future releases it is going to indicate number of port used by spell server. flag parameter in this case is not needed since ispell data is stored on spellserver already sorted.
With clients server communicates in two ways: to indexer all the data is transferred (so that indexer starts faster), from search.cgi server receives word to normalize and then passes over to client (search.cgi) list of normalized word forms.
udm_load_ispell_data() udm_load_ispell_data() function in UDM_ISPELL_TYPE_SERVER mode does not actually load ispell data, but only defines server address.
In fact, server is automatically used by udm_find() function when performing search.
In case of errors, e.g. if spellserver is not running or invalid host indicated, there are no messages returned and ispell conversion does not work.
Note:
This function is available in mnoGoSearch 3.1.12 or later.
Example:
if (!udm_load_ispell_data($udm,UDM_ISPELL_TYPE_SERVER ,'' ,'',1)) {printf("Error loading ispell data from server br \n"); exit;}
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
udm_set_agent_param() returns TRUE on success, FALSE on error.
Defines mnoGoSearch session parameters.
The following parameters and their values are available:
UDM_PARAM_PAGE_NUM - used to choose search results page number (results are returned by pages beginning from 0, with UDM_PARAM_PAGE_SIZE results per page).
UDM_PARAM_PAGE_SIZE - number of search results displayed on one page.
UDM_PARAM_SEARCH_MODE - search mode.
The following values available:
UDM_MODE_ALL - search for all words; UDM_MODE_ANY - search for any word; UDM_MODE_PHRASE - phrase search; UDM_MODE_BOOL - boolean search.
See udm_find() for details on boolean search.
UDM_PARAM_CACHE_MODE - turns on or off search result cache mode.
When enabled, the search engine will store search results to disk.
In case a similar search is performed later, the engine will take results from the cache for faster performance.
Available values:
UDM_PARAM_TRACK_MODE - turns on or off trackquery mode.
Since version 3.1.2 mnoGoSearch has a query tracking support.
Note that tracking is implemented in SQL version only and not available in built-in database.
To use tracking, you have to create tables for tracking support.
When doing a search, front-end uses those tables to store query words, a number of found documents and current UNIX timestamp in seconds.
Available values:
UDM_PARAM_PHRASE_MODE - defines whether index database using phrases ("phrase "parameter in indexer.conf).
Possible values:
UDM_PHRASE_ENABLED and UDM_PHRASE_DISABLED.
Please note, that if phrase search is enabled (UDM_PHRASE_ENABLED), it is still possible to do search in any mode (ANY, ALL, BOOL or PHRASE).
In 3.1.10 version of mnoGoSearch phrase search is supported only in sql and built-in database modes, while beginning with 3.1.11 phrases are supported in cachemode as well.
Examples of phrase search:
"Arizona desert" - This query returns all indexed documents that contain "Arizona desert "as a phrase.
UDM_PARAM_CHARSET - defines local charset.
Available values: set of charsets supported by mnoGoSearch, e.g. koi8-r, cp1251,...
UDM_PARAM_STOPFILE - Defines name and path to stopwords file. (There is a small difference with mnoGoSearch - while in mnoGoSearch if relative path or no path entered, it looks for this file in relation to UDM_CONF_DIR, the module looks for the file in relation to current path, i.e. to the path where the php script is executed.)
You may use several StopwordTable commands.
This command has no effect when compiled without SQL database support.
UDM_PARAM_WEIGHT_FACTOR - represents weight factors for specific document parts.
Currently body, title, keywords, description, url are supported.
To activate this feature please use degrees of 2 in *Weight commands of the indexer.conf.
Let 's imagine that we have these weights:
As far as indexer uses bit OR operation for word weights when some word presents several time in the same document, it is possible at search time to detect word appearance in different document parts.
Word which appears only in the body will have 00000010 argegate weight (in binary notation).
Word used in all document parts will have 00011111 aggregate weight.
This parameter 's value is a string of hex digits ABCDE.
Each digit is a factor for corresponding bit in word weight.
For the given above weights configuration:
E is a factor for weight 1 (URL Weight bit) D is a factor for weight 2 (BodyWeight bit) C is a factor for weight 4 (TitleWeight bit) B is a factor for weight 8 (KeywordWeight bit) A is a factor for weight 16 (DescWeight bit)
Examples:
UDM_PARAM_WEIGHT_FACTOR=00001 will search through URLs only.
UDM_PARAM_WEIGHT_FACTOR=00100 will search through Titles only.
UDM_PARAM_WEIGHT_FACTOR=11100 will search through Title,Keywords,Description but not through URL and Body.
UDM_PARAM_WEIGHT_FACTOR=F9421 will search through:
If UDM_PARAM_WEIGHT_FACTOR variable is ommited, original weight value is taken to sort results.
UDM_PARAM_WORD_MATCH - word match.
You may use this parameter to choose word match type.
This feature works only in "single" and "multi "modes using SQL based and built-in database.
It does not work in cachemode and other modes since they use word CRC and do not support substring search.
UDM_MATCH_BEGIN - word beginning match;
UDM_MATCH_END - word ending match;
UDM_MATCH_SUBSTR - word substring match.
UDM_PARAM_MIN_WORD_LEN - defines minimal word length.
Any word shorter this limit is considered to be a stopword.
Please note that this parameter value is inclusive, i.e. if UDM_PARAM_MIN_WORD_LEN=3, a word 3 characters long will not be considered a stopword, while a word 2 characters long will be.
UDM_PARAM_ISPELL_PREFIXES - Possible values:
UDM_PREFIXES_ENABLED and UDM_PREFIXES_DISABLED, that respectively enable or disable using prefixes.
Only suffixes are supported by default.
Prefixes usually change word meanings, for example if somebody is searching for the word "tested" one hardly wants "untested "to be found.
Prefixes support may also be found useful for site 's spelling checking purposes.
In order to enable ispell, you have to load ispell data with udm_load_ispell_data().
Possible values:
The corsswords feature allows to assign words between a href=" xxx "and / a also to a document this link leads to.
It works in SQL database mode and is not supported in built-in database and Cachemode.
Note:
Crosswords are supported only in mnoGoSearch 3.1.11 or later.
UDM_PARAM_VARDIR - specifies a custom path to directory where indexer stores data when using built-in database and in cache mode.
Can have only string values.
UDM_PARAM_VARDIR - specifies a custom path to directory where indexer stores data when using built-in database and in cache mode.
By default / var directory of mnoGoSearch installation is used.
Can have only string values.
The parameter is available in PHP 4.1.0 or later.
Prev
Home
Next
Up
mSQL functions
PHP Manual
Prev
Next
This function will sort the keys of an array using a user-supplied comparison function.
If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.
Example 1. uksort() example
1;} $a = array (4 = "four", 3 = "three", 20 = "twenty", 10 = "ten"); uksort ($a, "cmp"); while (list ($key, $value) = each ($a)) {echo "$key: $value\n";}
This example would display:
20: twenty 10: ten 4: four 3: three
See also usort(), uasort(), sort(), asort(), arsort(), ksort(), natsort(), and rsort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
umask() sets PHP's umask to mask 0777 and returns the old umask.
When PHP is being used as a server module, the umask is restored when each request is finished.
umask() without arguments simply returns the current umask.
Prev
Home
Next
Up
PHP Manual
Prev
Next
uniqid() returns a prefixed unique identifier based on the current time in microseconds.
The prefix can be useful for instance if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond.
Prefix can be up to 114 characters long.
If the optional lcg parameter is TRUE, uniqid() will add additional "combined LCG "entropy at the end of the return value, which should make the results more unique.
With an empty prefix, the returned string will be 13 characters long.
If lcg is TRUE, it will be 23 characters.
Note:
The lcg parameter is only available in PHP 4 and PHP 3.0.13 and later.
If you need a unique identifier or token and you intend to give out that token to the user via the network (i.e. session cookies), it is recommended that you use something along the lines of
$token = md5( uniqid("")); / / no prefix $better_token = md5(uniqid(rand(),1)); / / better, difficult to guess
This will create a 32 character identifier (a 128 bit hex number) that is extremely difficult to predict.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Return the Julian Day for a UNIX timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given.
See also jdtounix().
Prev
Home
Next
JulianToJD
Up
CCVS API Functions
PHP Manual
Prev
Next
Deletes filename.
Similar to the Unix C unlink() function.
Returns TRUE on success or FALSE on failure.
See also rmdir() for removing directories.
Prev
Home
Next
Up
Forms Data Format functions
PHP Manual
Prev
Next
unpack() from binary string into array according to format.
Returns array containing unpacked elements of binary string.
unpack() works slightly different from Perl as the unpacked data is stored in an associative array.
To accomplish this you have to name the different format codes and separate them by a slash /.
Example 1. unpack() format string
The resulting array will contain the entries "chars1", "chars2" and "int ".
For an explanation of the format codes see also: pack()
Note that PHP internally stores integral values as signed.
If you unpack a large unsigned long and it is of the same size as PHP internally stored values the result will be a negative number even though unsigned unpacking was specified.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Gettext
PHP Manual
Prev
Next
In case the passed string is not unserializeable, FALSE is returned.
To disable this feature just empty this setting.
Note:
Example 1. unserialize_callback_func example
In PHP 3, methods are not preserved when unserializing a serialized object.
Please see the Serializing Objects section of Classes and Objects or more information.
?php / / Here, we use unserialize() to load session data to the / / $session_data array from the string selected from a database. / / This example complements the one described with serialize(). $conn = odbc_connect ("webdb", "php", "chicken"); $stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?"); $sqldata = array ($PHP_AUTH_USER); if (!odbc_execute ($stmt, $sqldata) _BAR_ _BAR_ !odbc_fetch_into ($stmt, $tmp)) {/ / if the execute or fetch fails, initialize to empty array $session_data = array();} else {/ / we should now have the serialized data in $tmp[0]. $session_data = unserialize ($tmp[0]); if (!is_array ($session_data)) {/ / something went wrong, initialize to empty array $session_data = array();}}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
The variable in the calling environment will retain the same value as before unset() was called.
function foo( $bar) {unset($bar); $bar = "blah";} $bar = 'something'; echo "$bar\n"; foo($bar); echo "$bar\n";
function foo() {static $a; $a++; echo "$a\n"; unset($a);} foo(); foo(); foo();
function foo() {unset($GLOBALS['bar']);} $bar = "something"; foo();
Prev
Home
Next
Up
PHP Manual
Prev
Next
Decodes any% ## encoding in the given string.
The decoded string is returned.
Example 1. urldecode() example
$a = explode( '', $QUERY_STRING); $i = 0; while ($i count($a)) {$b = split('=', $a[$i]); echo'Value for parameter ', htmlspecialchars(urldecode($b[0])),' is', htmlspecialchars(urldecode($b[1])), "br / \n"; $i++;}
See also urlencode(), rawurlencode(), rawurldecode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is convenient when encoding a string to be used in a query part of an URL, as a convenient way to pass variables to the next page:
Things like amp, copy and pound are parsed by the browser and the actual entity is used instead of the desired variable name.
The reference is here: http: / /www.w3.org / TR / html4 / appendix / notes.html#h-B.2.2 The reference is here: http: / /www.w3.org / TR / html4 / appendix / notes.html#h-B.2.2 PHP supports changing the argument separator to the W3C-suggested semi-colon through the arg_separator .ini directive.
A more portable way around this is to use amp; instead of as the separator.
Leave it as, but simply encode your URLs using htmlentities() (urlencode($data)).
echo 'a href="mycgi?foo=', htmlentities(urlencode($userinput)),' "';
See also urldecode(), htmlentities(), rawurldecode(), rawurlencode().
Prev
Home
Next
Up
Variable Functions
PHP Manual
Prev
Next
Prev
Home
Next
Up
FrontBase Functions
PHP Manual
Prev
Next
A microsecond is one millionth of a second.
See also sleep() and set_time_limit().
Note:
This function does not work on Windows systems.
Prev
Home
Next
Up
mnoGoSearch Functions
PHP Manual
Prev
Next
This function will sort an array by its values using a user-supplied comparison function.
If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.
The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note:
If two members compare as equal, their order in the sorted array is undefined.
Up to PHP 4.0.6 the user defined functions would keep the original order for those elements, but with the new sort algorithm intruduced with 4.1.0 this is no longer the case as there is no solution to do so in an efficient way.
Example 1. usort() example
This example would display:
Note:
Obviously in this trivial case the rsort() function would be more appropriate.
Example 2. usort() example using multi-dimensional array
function cmp ($a, $b) {return strcmp($a["fruit"], $b["fruit"]);} $fruits[0]["fruit"] = "lemons"; $fruits[1]["fruit"] = "apples"; $fruits[2]["fruit"] = "grapes"; usort($fruits, "cmp"); while (list ($key, $value) = each ($fruits)) {echo "\$fruits[$key]: ". $value["fruit"]. "\n";}
When sorting a multi-dimensional array, $a and $b contain references to the first index of the array.
This example would display:
$fruits[ 0]: apples $fruits[1]: grapes $fruits[2]: lemons
Example 3. usort() example using a member function of an object
class TestObj {var $name; function TestObj($name) {$this - name = $name;} / * This is the static comparing function: * / function cmp_obj($a, $b) {$al = strtolower($a - name); $bl = strtolower($b - name); if ($al == $bl) return 0; return ($al $bl)? +1: -1;}} $a[] = new TestObj("c"); $a[] = new TestObj("b"); $a[] = new TestObj("d"); uasort($a, array ("TestObj", "cmp_obj")); foreach ($a as $item) {print $item - name ."\n";}
This example would display:
See also uasort(), uksort(), sort(), asort(), arsort(), ksort(), natsort(), and rsort().
Prev
Home
Next
Up
Aspell functions [deprecated]
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Arrays are explored recursively with values indented to show structure.
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Example 1. var_dump() example
pre ?php $a = array (1, 2, array ("a", "b", "c")); var_dump ($a); / * output: array(3) {[0]= int(1) [1]= int(2) [2]= array(3) {[0]= string(1) "a "[1]= string(1) "b" [2]= string(1) "c "}} * / $b = 3.1; $c = TRUE; var_dump($b,$c); / * output: float(3.1) bool(true) * /? / pre
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. version_compare() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
virtual() is an Apache-specific function which is equivalent to !--#include virtual...- - in mod_include.
It performs an Apache sub-request.
It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache.
At the minimum that means it must generate a Content-type header.
For PHP files, you need to use include() or require(); virtual() cannot be used to include a document which is itself a PHP file.
To run the sub-request, all buffers are terminated and flushed to the browser, pending headers are sent too.
Prev
Home
Next
Up
Array Functions
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
WDDX Functions
PHP Manual
Prev
Next
wddx_add_vars() is used to serialize passed variables and add the result to the packet specified by the packet_id.
The variables to be serialized are specified in exactly the same way as wddx_serialize_vars().
Prev
Home
Next
WDDX Functions
Up
PHP Manual
Prev
Next
wddx_deserialize() takes a packet string and deserializes it.
Note that structures are deserialized into associative arrays.
Prev
Home
Next
Up
PHP Manual
Prev
Next
wddx_packet_end() ends the WDDX packet specified by the packet_id and returns the string with the packet.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Use wddx_packet_start() to start a new WDDX packet for incremental addition of variables.
It takes an optional comment It takes an optional comment string and returns a packet ID for use in later functions.
It automatically creates a structure definition inside the packet to contain the variables.
Prev
Home
Next
Up
PHP Manual
Prev
Next
wddx_serialize_value() is used to create a WDDX packet from a single given value.
It takes the value contained in var, and an optional comment string that appears in the packet header, and returns the WDDX packet.
Prev
Home
Next
Up
PHP Manual
Prev
Next
wddx_serialize_vars() is used to create a WDDX packet with a structure that contains the serialized representation of the passed variables.
wddx_serialize_vars() takes a variable number of arguments, each of which can be either a string naming a variable or an array containing strings naming the variables or another array, etc.
Example 1. wddx_serialize_vars() example
The above example will produce:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with str wrapped at the column number specified by the (optional) width parameter.
The line is broken using the (optional) break parameter.
wordwrap() will automatically wrap at column 75 and break using '\n '(newline) if width or break are not given.
If the cut is set to 1, the string is always wrapped at the specified width.
So if you have a word that is larger than the given width, it is broken apart. (See second example).
Note:
The optional cut parameter was added in PHP 4.0.3
Example 1. wordwrap() example
$text = "The quick brown fox jumped over the lazy dog ."; $newtext = wordwrap ($text, 20); echo "$newtext\n";
This example would display:
The quick brown fox jumped over the lazy dog.
Example 2. wordwrap() example
$text = "A very long woooooooooooord ."; $newtext = wordwrap ($text, 8, "\n", 1); echo "$newtext\n";
This example would display:
A very long wooooooo ooooord.
See also nl2br().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. moldb.xml - small database of molecular information
Example 2. parsemoldb.php - parses moldb.xml into and array of molecular objects
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
XSLT functions
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
.NET functions
PHP Manual
Prev
Next
Create and return a new XSLT processor resource for manipulation by the other XSLT functions.
Prev
Home
Next
XSLT functions
Up
PHP Manual
Prev
Next
Return an error code describing the last error that occured on the passed XSLT processor.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
?php $xh = xslt_create(); $result = xslt_process($xh, 'dog.xml', 'pets.xsl'); if (!$result) {die(sprintf("Cannot process XSLT document [%d]: %s", xslt_errno($xh), xslt_error($xh)));} print($result); xslt_free($xh);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Free the XSLT processor identified by the given handle.
Prev
Home
Next
Up
xslt_process
PHP Manual
Prev
Next
In these cases you 'll have the XML and / or XSLT data in a variable - - and in production applications the overhead of dumping these to file may be too much.
These parameters can then be accessed within your XSL files using the xsl:param name=" parameter_name "instruction.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
xslt_process
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
SAX handlers should be a two dimensional array with the format (all top level elements are optional):
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
YP / NIS Functions
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
YP / NIS Functions
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
yp_first() returns the first key-value pair from the named map in the named domain, otherwise FALSE.
Example 1.
Example for the NIS first
Prev
Home
Next
Up
PHP Manual
Prev
Next
yp_get_default_domain() returns the default domain of the node or FALSE.
Can be used as the domain parameter for successive NIS calls.
A NIS domain can be described a group of NIS maps.
Every host that needs to look up information binds itself to a certain domain.
Refer to the documents mentioned at the beginning for more detailed information.
Example 1.
Example for the default domain
Prev
Home
Next
Up
PHP Manual
Prev
Next
yp_master() returns the machine name of the master NIS server for a map.
Example 1.
Example for the NIS master
See also yp-get-default-domain().
Prev
Home
Next
Up
PHP Manual
Prev
Next
yp_match() returns the value associated with the passed key out of the specified map or FALSE.
This key must be exact.
Example 1.
Example for NIS match
In this case this could be: joe:##joe:11111:100:Joe User: / home / j/joe: / usr / local / bin / bash
Prev
Home
Next
Up
PHP Manual
Prev
Next
yp_next() returns the next key-value pair in the named map after the specified key or FALSE.
Example 1.
Example for NIS next
?php $entry = yp_next ($domain, "passwd.byname", "joe"); if (!$entry) {echo "No more entries found\n"; !- - echo yp_errno(). ":". yp_err_string(); - -} $key = key ($entry); echo "The next entry after joe has key ". $key." and value ". $entry[$key];?
See also yp-get-default-domain().
Prev
Home
Next
Up
PHP Manual
Prev
Next
yp_order() returns the order number for a map or FALSE.
Example 1.
Example for the NIS order
Prev
Home
Next
Up
Zip File Functions (Read Only Access)
PHP Manual
Prev
Next
Note:
This functionality was added in PHP 4.0.0.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing the version of the currently running PHP parser.
Example 1. zend_version() Example
/ / prints e.g. 'Zend engine version:
1.0.4' echo "Zend engine version: ". zend_version();
See also phpinfo(), phpcredits(), php_logo_guid(), and phpversion().
Prev
Home
Next
Up
POSIX functions
PHP Manual
Prev
Next
Closes a zip file archive.
The parameter zip must be a zip archive previously opened by zip_open().
This function has no return value.
See also zip_open() and zip_read().
Prev
Home
Next
Zip File Functions (Read Only Access)
Up
PHP Manual
Prev
Next
Closes a directory entry specified by zip_entry.
The parameter zip_entry must be a valid directory entry opened by zip_entry_open().
This function has no return value.
See also zip_entry_open() and zip_entry_read().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the compressed size of the directory entry specified by zip_entry.
The parameter zip_entry is a valid directory entry returned by zip_read().
See also zip_open() and zip_read().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the compression method of the directory entry specified by zip_entry.
The parameter zip_entry is a valid directory entry returned by zip_read().
See also zip_open() and zip_read().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the actual size of the directory entry specified by zip_entry.
The parameter zip_entry is a valid directory entry returned by zip_read().
See also zip_open() and zip_read().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the name of the directory entry specified by zip_entry.
The parameter zip_entry is a valid directory entry returned by zip_read().
See also zip_open() and zip_read().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Opens a directory entry in a zip file for reading.
The parameter zip is a valid resource handle returned by zip_open().
The parameter zip_entry is a directory entry resource returned by zip_read().
The optional parameter mode can be any of the modes specified in the documentaion for fopen().
Note:
Currently, mode is ignored and is always "rb".
This is due to the fact that zip support in PHP is read only access.
Please see fopen() for an explanation of various modes, including "rb ".
Returns TRUE on success or FALSE on failure.
Note:
Unlike fopen() and other similar functions, the return value of zip_entry_open() only indicates the result of the operation and is not needed for reading or closing the directory entry.
See also zip_entry_read() and zip_entry_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Reads up to length Reads up to length bytes from an open directory entry.
If length is not specified, then zip_entry_read() will attempt to read 1024 bytes.
The parameter zip_entry is a valid directory entry returned by zip_read().
Note:
The length parameter should be the uncompressed length you wish to read.
Returns the data read, or FALSE if the end of the file is reached.
See also zip_entry_open(), zip_entry_close() and zip_entry_filesize().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Opens a new zip archive for reading.
The filename parameter is the filename of the zip archive to open.
Returns a resource handle for later use with zip_read() and zip_close() or returns FALSE if filename does not exist.
See also zip_read() and zip_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Reads the next entry in a zip file archive.
The parameter zip must be a zip archive previously opened by zip_open().
Returns a directory entry resource for later use with the zip_entry_.. .() functions.
See also zip_open(), zip_close(), zip_entry_open(), and zip_entry_read().
Prev
Home
Next
Up
Zlib Compression Functions
PHP Manual
Prev
Next
Prev
Home
Next
Preface
Introduction
PHP Manual
Prev
Next
Growing to be one of the most prominent languages powering the Web was not an easy task.
Those of you interested in briefly seeing how PHP grew out to what it is today, read on.
PHP succeeds an older product, named PHP / FI.
PHP / FI was created by Rasmus Lerdorf in 1995, initially as a simple set of Perl scripts for tracking accesses to his online resume.
He named this set of scripts' Personal Home Page Tools'.
As more functionality was required, Rasmus wrote a much larger C implementation, which was able to communicate with databases, and enabled users to develop simple dynamic Web applications.
Rasmus chose to release the source code for PHP / FI for everybody to see, so that anybody can use it, as well as fix bugs in it and improve the code.
PHP / FI, which stood for Personal Home Page / Forms Interpreter, included some of the basic functionality of PHP as we know it today.
It had Perl-like variables, automatic interpretation of form variables and HTML embedded syntax.
The syntax itself was similar to that of Perl, albeit much more limited, simple, and somewhat inconsistent.
By 1997, PHP / FI 2.0, the second write-up of the C implementation, had a cult of several thousand users around the world (estimated), with approximately 50,000 domains reporting as having it installed, accounting for about 1% of the domains on the Internet.
While there were several people contributing bits of code to this project, it was still at large a one-man project.
PHP / FI 2.0 was officially released only in November 1997, after spending most of its life in beta releases.
It was shortly afterwards succeeded by the first alphas of PHP 3.0.
PHP 3.0 was the first version that closely resembles PHP as we know it today.
It was created by Andi Gutmans and Zeev Suraski in 1997 as a complete rewrite, after they found PHP / FI 2.0 severely underpowered for developing their own eCommerce application.
In an effort to cooperate and start building upon PHP / FI 's existing user-base, Andi, Rasmus and Zeev decided to cooperate and announce PHP 3.0 as the official successor of PHP / FI 2.0, and development of PHP / FI 2.0 was mostly halted.
One of the biggest strengths of PHP 3.0 was its strong extensibility features.
In addition to providing end users with a solid infrastructure for lots of different databases, protocols and APIs, PHP 3.0 's extensibility features attracted dozens of developers to join in and submit new extension modules.
Arguably, this was the key to PHP 3.0 's tremendous success.
Other key features introduced in PHP 3.0 were the object oriented syntax support and the much more powerful and consistent language syntax.
The whole new language was released under a new name, that removed the implication of limited personal use that the PHP / FI 2.0 name held.
It was named plain 'PHP', with the meaning being a recursive acronym - PHP:
By the end of 1998, PHP grew to an install base of tens of thousands of users (estimated) and hundreds of thousands of Web sites reporting it installed.
At its peak, PHP 3.0 was installed on approximately 10% of the Web servers on the Internet.
PHP 3.0 was officially released in June 1998, after having spent about 9 months in public testing.
By the winter of 1998, shortly after PHP 3.0 was officially released, Andi Gutmans and Zeev Suraski had begun working on a rewrite of PHP 's core.
The design goals were to improve performance of complex applications, and improve the modularity of PHP 's code base.
Such applications were made possible by PHP 3.0 's new features and support for a wide variety of third party databases and APIs, but PHP 3.0 was not designed to handle such complex applications efficiently.
The new engine, dubbed 'Zend Engine' (comprised of their first names, Zeev and Andi), met these design goals successfully, and was first introduced in mid 1999.
PHP 4.0, based on this engine, and coupled with a wide range of additional new features, was officially released in May 2000, almost two years after its predecessor, PHP 3.0.
In addition to the highly improved performance of this version, PHP 4.0 included other key features such as support for many more Web servers, HTTP sessions, output buffering, more secure ways of handling user input and several new language constructs.
PHP 4 is currently the latest released version of PHP.
Work has already begun on modifying and improving the Zend Engine to integrate the features which were designed for PHP 5.0.
Today, PHP is being used by hundreds of thousands of developers (estimated), and several million sites report as having it installed, which accounts for over 20% of the domains on the Internet.
PHP 's development team includes dozens of developers, as well as dozens others working on PHP-related projects such as PEAR and the documentation project.
The future of PHP is mainly driven by it 's core, the Zend Engine.
PHP 5 will include the new Zend Engine 2.0.
To get more information on this engine, see it 's webpage.
Prev
Home
Next
Appendixes
Up
History of PHP related projects
PHP Manual
Prev
Appendix A.
History of PHP and related projects
Next
As PHP grew, it began to be recognized as a world-wide popular development platform.
One of the most interesting ways of seeing this trend was by observing the books about PHP that came out throughout the years.
To the best of our knowledge, the first book dedicated to PHP was' PHP - tvorba interaktivních internetových aplikací '- a Czech book published in April 1999, authored by Jirka Kosek.
Next month followed a German book authored by Egon Schmid, Christian Cartus and Richard Blume.
The first book in English about PHP was published shortly afterwards, and was' Core PHP Programming 'by Leon Atkinson.
Both of these books covered PHP 3.0.
While these books were the first of their kind - they were followed by a large number of books from a host of authors and publishers.
There are over 40 books in English, 50 books in German, and over 20 books in French!
In addition, you can find books about PHP in many other languages, including Spanish, Korean, Japanese and Hebrew.
Clearly, this large number of books, written by different authors, published by many publishers, and their availability in so many languages - are a strong testimony for PHP 's world-wide success.
Prev
Home
Next
History of PHP related projects
Up
Publications about PHP
PHP Manual
Prev
Appendix A.
History of PHP and related projects
Next
To the best of our knowledge, the first article about PHP in a hard-copy magazine was published in the Czech mutation of Computerworld in the spring of 1998, and covered PHP 3.0.
As with books, this was the first in a series of many articles published about PHP in various prominent magazines.
Articles about PHP appeared in Dr.
Dobbs, Linux Enterprise, Linux Magazine and many more.
Articles about migrating ASP-based applications to PHP under Windows even appear on Microsoft 's very own MSDN!
Prev
Home
Next
Books about PHP
Up
PHP Manual
Prev
Appendix A.
History of PHP and related projects
Next
PEAR, the PHP Extension and Application Repository (originally, PHP Extension and Add-on Repository) is PHP's version of foundation classes, and may grow in the future to be one of the key ways to distribute both PHP and C-based PHP extensions among developers.
PEAR was born in discussions held in the PHP Developers' Meeting (PDM) held in January 2000 in Tel Aviv.
It was created by Stig S.
Bakken, and is dedicated to his first-born daughter, Malin Bakken.
Since early 2000, PEAR has grown to be a big, significant project with a large number of developers working on implementing common, reusable functionality for the benefit of the entire PHP community.
PEAR today includes a wide variety of infrastructure foundation classes for database access, content caching, mathematical calculations, eCommerce and much more.
The PHP Quality Assurance Initiative was set up in the summer of 2000 in response to criticism that PHP releases were not being tested well enough for production environments.
The team now consists of a core group of developers with a good understanding of the PHP code base.
These developers spend a lot of their time localizing and fixing bugs within PHP.
In addition there are many other team members who test and provide feedback on these fixes using a wide variety of platforms.
PHP-GTK is the PHP solution for writing client side GUI applications.
Andrei Zmievski remembers the planing and creation process of PHP-GTK:
GUI programming has always been of my interests, and I found that Gtk + is a very nice toolkit, except that programming with it in C is somewhat tedious.
After witnessing PyGtk and GTK-Perl implementations, I decided to see if PHP could be made to interface with Gtk+, even minimally.
Starting in August of 2000, I began to have a bit more free time so that is when I started experimenting.
My main guideline was the PyGtk implementation as it was fairly feature complete and had a nice object-oriented interface.
James Henstridge, the author of PyGtk, provided very helpful advice during those initial stages.
Hand-writing the interfaces to all the Gtk + functions was out of the question, so I seized upon the idea of code-generator, similar to how PyGtk did it.
The code generator is a PHP program that reads a set of .defs file containing the Gtk + classes, constants, and methods information and generates C code that interfaces PHP with them.
What cannot be generated automatically can be written by hand in .overrides file.
Working on the code generator and the infrastructure took some time, because I could spend little time on PHP-GTK during the fall of 2000.
After I showed PHP-GTK to Frank Kromann, he got interested and started helping me out with code generator work and Win32 implementation.
When we wrote the first Hello World program and fired it up, it was extremely exciting.
It took a couple more months to get the project to a presentable condition and the initial version was released on March 1, 2001.
The story promptly hit SlashDot.
Sensing that PHP-GTK might be extensive, I set up separate mailing lists and CVS repositories for it, as well as the gtk.php.net website with the help of Colin Viebrock.
The documentation would also need to be done and James Moore came in to help with that.
Since its release PHP-GTK has been gaining popularity.
We have our own documentation team, the manual keeps improving, people start writing extensions for PHP-GTK, and more and more exciting applications with it.
Prev
Home
Next
History of PHP and related projects
Up
Books about PHP
27-01-2003
Copyright © 1997, 1998, 1999, 2000, 2001, 2002, 2003 the PHP Documentation Group
Next
Preface
PHP Manual
Prev
Chapter 3.
Next
This section contains notes and hints specific to Apache installs of PHP, both for Unix and Windows This section contains notes and hints specific to Apache installs of PHP, both for Unix and Windows versions.
You can select arguments to add to the configure on line 10 below from the Complete list of configure options.
The version numbers have been omitted here, to ensure the instructions are not incorrect.
Example 3-5.
1. gunzip apache_xxx.tar.gz 2. tar -xvf apache_xxx.tar 3. gunzip php-xxx.tar.gz 4. tar -xvf php-xxx.tar 5. cd apache_xxx 6.. / configure --prefix= / www --enable-module=so 7. make 8. make install 9. cd.. / php-xxx 10.. / configure --with-mysql --with-apxs= / www / bin / apxs 11. make 12. make install If you decide to change your configure options after installation you only need to repeat the last three steps.
A recompile of Apache is not needed.
If you prefer this file in another location, use --with-config-file-path= / path in step 10.
Edit your httpd.conf or srm.conf file and check that these lines are present and not commented out:
AddType application / x-httpd-php .php LoadModule php4_module libexec / libphp4.so You can choose any extension you wish here. .php is simply the one we suggest.
You can even include .html, and .php3 can be added for backwards compatibility.
The path on the right hand side of the LoadModule statement must point to the path of the PHP module on your system.
The above statement is correct for the steps shown above.
15.
Use your normal procedure for starting the Apache server. (You must stop and restart the server, not just cause the server to reload by use a HUP or USR1 signal.)
Depending on your Apache install and Unix variant, there are many possible ways to stop and restart the server.
Below are some typical lines used in restarting the server, for different apache / unix installations.
You should replace / path / to / with the path to these applications on your systems.
Several Linux and SysV variants: / etc / rc.d / init.d / httpd restart 2.
Using apachectl scripts: / path / to / apachectl stop / path / to / apachectl start 3. httpdctl and httpsdctl (Using OpenSSL), similar to apachectl: / path / to / httpsdctl stop / path / to / httpsdctl start 4.
Using mod_ssl, or another SSL server, you may want to manually stop and start: / path / to / apachectl stop / path / to / apachectl startssl
Different examples of compiling PHP for apache are as follows:
This will create a libphp4.so shared library that is loaded into Apache using a LoadModule line in Apache 's httpd.conf file.
The PostgreSQL support is embedded into this libphp4.so library.
This will create a libphp4.so shared library for Apache, but it will also create a pgsql.so shared library that is loaded into PHP either by using the extension directive in php.ini file or by loading it explicitly in a script using the dl() function.
Then you compile Apache using --activate-module=src / modules / php4 / libphp4.a and the Apache build system will create libphp4.a and link it statically into the httpd binary.
. / configure --with-apache= / path / to / apache_source --with-pgsql=shared
Same as before, except instead of including PostgreSQL support directly into the final httpd you will get a pgsql.so shared library that you can load into PHP from either the php.ini file or directly using dl().
Building PHP into apache (static method) means that PHP will load and run faster.
Note:
User nobody Group "#-1"
You must NOT use the apxs version that is in the apache sources but the one that is actually installed on your system.
One is to use the CGI binary (php.exe), the other is to use the Apache module DLL.
In either case you need to stop the Apache server, and edit your srm.conf or httpd.conf to configure Apache to work with PHP.
It is worth noting here that now the SAPI module has been made more stable under windows, we recommend it 's use above the CGI binary, since it is more transparent and secure.
Please consult the Apache Docs for further configuration directives.
ScriptAlias / php / "c: / php /"
Action application / x-httpd-php "/ php / php.exe"
By using the CGI setup, your server is open to several possible attacks.
If you would like to use PHP as a module in Apache, be sure to move php4ts.dll to the windows / system (for Windows 9x / Me) or winnt / system32 (for Windows NT / 2000 / XP) directory, overwriting any older file.
Note:
You may find after using the windows installer for Apache that you need to define the AddModule directive for mod_php4.c in the configuration file (httpd.conf).
There are 2 ways you can use the source code highlighting feature, however their ability to work depends on your installation.
If you have configured Apache to use PHP as an ISAPI module, then by adding the following line to your configuration file you can use this feature:
If you chose to configure Apache to use PHP as a CGI binary, you will need to use the show_source() function.
Substitute original_php_script.php with the name of the file you wish to show the source of.
Note:
On Win-Apache all backslashes in a path statement such as "c:\directory\file.ext", must be converted to forward slashes, as "c: / directory / file.ext".
Prev
Home
Next
Servers-CGI / Commandline
Up
Servers-Apache 2.0
PHP Manual
Prev
Next
While setting up the server and PHP on your own, you have two choices for the method of connecting PHP to the server.
Downloading PHP, the source code, and binary distributions for Windows can be found at http: / /www.php.net /.
Prev
Home
Next
What 's next?
Up
Unix / HP-UX installs
PHP Manual
Prev
Chapter 3.
Next
PHP 4 can be built as a Pike module for the Caudium webserver.
Note that this is not supported with PHP 3.
Follow the simple instructions below to install PHP 4 for Caudium.
Example 3-9.
Caudium Installation Instructions
Make sure you have Caudium installed prior to attempting to install PHP 4.
For PHP 4 to work correctly, you will need Pike 7.0.268 or newer.
For the sake of this example we assume that Caudium is installed in / opt / caudium / server /.
3.. / configure --with-caudium= / opt / caudium / server 4. make 5. make install 6.
Restart Caudium if it 's currently running.
Log into the graphical configuration interface and go to the virtual server where you want to add PHP 4 support.
Click Add Module and locate and then add the PHP 4 Script Support module.
If the documentation says that the 'PHP 4 interpreter isn't available', make sure that you restarted the server.
If you did check / opt / caudium / logs / debug / default.1 for any errors related to filename PHP4.so / filename.
Also make sure that filename caudium / server / lib / [pike-version] / PHP4.so / filename is present.
Configure the PHP Script Support module if needed.
You can of course compile your Caudium module with support for the various extensions available in PHP 4.
See the complete list of configure options for an exhaustive rundown.
Note:
Otherwise there might be conflicts if your Pike already has MySQL support.
You do this by specifying a MySQL install directory the --with-mysql option.
Prev
Home
Next
Servers-Apache 2.0
Up
Servers-fhttpd
PHP Manual
Prev
Chapter 3.
Next
The default is to build PHP as a CGI program.
This creates a commandline interpreter, which can be used for CGI processing, or for non-web-related PHP scripting.
However, the CGI version enables Apache users to run different PHP-enabled pages under different user-ids.
As of PHP 4.3.0, some important additions have happened to PHP.
A new SAPI named CLI also exists and it has the same name as the CGI binary.
For further details please read that section of the manual.
It is always a good idea to test your build.
If you have built PHP 3 as a CGI program, you may benchmark your build by typing make bench.
This is because the set_time_limit() can not be used in safe mode.
Some server supplied enviroment variables are not defined in the current CGI / 1.1 specification.
AUTH_TYPE, CONTENT_LENGTH, CONTENT_TYPE, GATEWAY_INTERFACE, PATH_INFO, PATH_TRANSLATED, QUERY_STRING, REMOTE_ADDR, REMOTE_HOST, REMOTE_IDENT, REMOTE_USER, REQUEST_METHOD, SCRIPT_NAME, SERVER_NAME, SERVER_PORT, SERVER_PROTOCOL and SERVER_SOFTWARE
Prev
Home
Next
Installation on Windows systems
Up
Servers-Apache
PHP Manual
Prev
Chapter 3.
Next
Note:
These are only used at compile time.
If you want to alter PHP 's runtime configuration, please see the chapter on Configuration.
The following is a complete list of options supported by PHP 4 configure scripts (as of 4.1.0), used when compiling in Unix-like environments.
Some are available in PHP 3, some in PHP 4, and some in both.
This is not noted yet.
There are general configuration options for the configure script, consult the appropriate manual pages for GNU autoconf or use the command configure --help for a full, up-to-date list.
Database
Graphics
Miscellaneous
PHP Behaviour
Server
Note:
These options are only used in PHP 4 as of PHP 4.1.0.
Some are available in older versions of PHP 4, some even in PHP 3, some only in PHP 4.1.0.
If you want to compile an older version, some options will probably not be available.
Include dbplus support.
Include Adabas D support.
DIR is the Adabas base install directory, defaults to / usr / local.
Include SAP DB support.
DIR is SAP DB base install directory, defaults to / usr / local.
Include Solid support.
DIR is the Solid base install directory, defaults to / usr / local / solid.
Include IBM DB2 support.
DIR is the DB2 base install directory, defaults to / home / db2inst1 / sqllib.
Include Empress support.
DIR is the Empress base install directory, defaults to $EMPRESSPATH.
From PHP4, this option only supports Empress Version 8.60 and above.
Include Empress Local Access support.
DIR is the Empress base install directory, defaults to $EMPRESSPATH.
From PHP4, this option only supports Empress Version 8.60 and above.
Include Birdstep support.
DIR is the Birdstep base install directory, defaults to / usr / local / birdstep.
Include a user defined ODBC support.
The DIR is ODBC install base directory, which defaults to / usr / local.
Make sure to define CUSTOM_ODBC_LIBS and have some odbc.h in your include dirs.
E.g., you should define following for Sybase SQL Anywhere 5.5.00 on QNX, prior to run configure script:
CPPFLAGS=" -DODBC_QNX -DSQLANY_BUG "LDFLAGS=-lunix CUSTOM_ODBC_LIBS="-ldblib -lodbc".
Include iODBC support.
DIR is the iODBC base install directory, defaults to / usr / local.
Include Easysoft OOB support.
DIR is the OOB base install directory, defaults to / usr / local / easysoft / oob / client.
Include unixODBC support.
DIR is the unixODBC base install directory, defaults to / usr / local.
Include OpenLink ODBC support.
DIR is the OpenLink base install directory, defaults to / usr / local.
This is the same as iODBC.
Include DBMaker support.
DIR is the DBMaker base install directory, defaults to where the latest version of DBMaker is installed (such as / home / dbmaker / 3.6).
Disable unified ODBC support.
Only applicable if iODBC, Adabas, Solid, Velocis or a custom ODBC interface is enabled.
PHP 3 only!
Disable GD support.
PHP 3 only!
The imagick extension has been moved to PECL in PEAR and can be found here.
Install instructions for PHP 4 can be found on the PEAR site.
Simply doing --with-imagick is only supported in PHP 3 unless you follow the instructions found on the PEAR site.
Include ming support.
Enable the security check for internal server redirects.
You should use this if you are running the CGI version with Apache.
If this is enabled, the PHP CGI binary can safely be placed outside of the web tree and people will not be able to circumvent .htaccess security.
Build PHP as FastCGI application.
Compile with debugging symbols.
Sets how installed files will be laid out.
Type is one of PHP (default) or GNU.
Install PEAR in DIR (default PREFIX / lib / php).
Do not install PEAR.
Enable PHP 's own SIGCHLD handler.
Disable passing additional runtime library search paths.
Enable explicitly linking against libgcc.
Include experimental php streams.
Do not use unless you are testing the code!
Define the location of zlib install directory.
Include ASPELL support.
Include CCVS support.
Include CyberCash support.
DIR is the CyberCash MCK install directory.
Include ICAP support.
Path to the ircg-config script.
Include ircg support.
Enable mailparse support.
Include muscat support.
Enable CORBA support via Satellite (EXPERIMENTAL) DIR is the base directory for ORBit.
Enable transparent session id propagation.
Use system regex library (deprecated).
Include vpopmail support.
Use POSIX threads (default).
Build shared libraries [default=yes].
Build static libraries [default=yes].
Optimize for fast installation [default=yes].
Assume the C compiler uses GNU ld [default=no].
Avoid locking (might break parallel builds).
Try to use only PIC / non-PIC objects [default=use both].
Compile with memory limit support.
Disable the URL-aware fopen wrapper that allows accessing files via HTTP or FTP.
Export only required symbols.
See INSTALL for more information.
Include IMSp support (DIR is IMSP's include dir and libimsp.a dir).
PHP 3 only!
Include Cybercash MCK support.
DIR is the cybercash mck build directory, defaults to / usr / src / mck-3.2.0.3-linux for help look in extra / cyberlib.
PHP 3 only!
Include DAV support through Apache' s mod_dav, DIR is mod_dav's installation directory (Apache module version only!) PHP 3 only!
Compile with remote debugging functions.
PHP 3 only!
Take advantage of versioning and scoping provided by Solaris 2.x and Linux.
PHP 3 only!
Enable make rules and dependencies not useful (and sometimes confusing) to the casual installer.
Sets the path in which to look for php.ini, defaults to PREFIX / lib.
Enable safe mode by default.
Only allow executables in DIR when in safe mode defaults to / usr / local / php / bin.
Enable magic quotes by default.
Disable the short-form? start tag by default.
Specify path to the installed AOLserver.
Build shared Apache module.
FILE is the optional pathname to the Apache apxs tool; defaults to apxs.
Make sure you specify the version of apxs that is actually installed on your system and NOT the one that is in the apache source tarball.
Build Apache module.
DIR is the top-level Apache build directory, defaults to / usr / local / apache.
Enable transfer tables for mod_charset (Rus Apache).
Build shared Apache 2.0 module.
FILE is the optional pathname to the Apache apxs tool; defaults to apxs.
Build fhttpd module.
DIR is the fhttpd sources directory, defaults to / usr / local / src / fhttpd.
Build PHP as an ISAPI module for use with Zeus.
Specify path to the installed Netscape Server.
No information yet.
Build PHP as a module for use with Pi3Web.
Build PHP as a Pike module.
DIR is the base Roxen directory, normally / usr / local / roxen / server.
Build the Roxen module using Zend Thread Safety.
Include servlet support.
DIR is the base install directory for the JSDK.
This SAPI prereqs the java extension must be built as a shared dl.
Build PHP as thttpd module.
Build PHP as a TUX module (Linux only).
Prev
Home
Next
Problems?
Up
Configuration
PHP Manual
Prev
Chapter 3.
Next
To build PHP as an fhttpd module, answer "yes" to "Build as an fhttpd module? "(the --with-fhttpd = DIR To build PHP as an fhttpd module, answer "yes" to "Build as an fhttpd module? "(the --with-fhttpd = DIR option to configure) and specify the fhttpd source base directory.
The default directory is / usr / local / src / fhttpd.
If you are running fhttpd, building PHP as a module will give better performance, more control and remote execution capability.
Prev
Home
Next
Servers-Caudium
Up
Servers-IIS / PWS
PHP Manual
Prev
Chapter 3.
Next
This section contains notes and hints specific to installing PHP on HP-UX systems.
Example 3-1.
Installation Instructions for HP-UX 10
From: paul_mckay@clearwater-it.co.uk 04-Jan-2001 09:49 (These tips are for PHP 4.0.4 and Apache v1.3.9) So you want to install PHP and Apache on a HP-UX 10.20 box?
You need gzip, download a binary distribution from http: / /hpux.connect.org.uk / ftp / hpux / Gnu / gzip-1.2.4a / gzip-1.2.4a-sd-10.20.depot.Z uncompress the file and install using swinstall 2.
You need gcc, download a binary distribution from http: / /gatekeep.cs.utah.edu / ftp / hpux / Gnu / gcc-2.95.2 / gcc-2.95.2-sd-10.20.depot.gz gunzip this file and install gcc using swinstall.
You need the GNU binutils, you can download a binary distribution from http: / /hpux.connect.org.uk / ftp / hpux / Gnu / binutils-2.9.1 / binutils-2.9.1-sd-10.20.depot.gz gunzip and install using swinstall.
5.
You now need flex, you need to download the source from one of the http: / /www.gnu.org mirrors.
It is in the filename non-gnu / filename directory of the ftp site.
Download the file, gunzip, then tar -xvf it.
Go into the newly created flex directory and do a. / configure, then a make, and then a make install If you have errors here, it 's probably because gcc etc. are not in your PATH so add them to your PATH.
Right, now into the hard stuff.
6.
Download the PHP and apache sources.
7. gunzip and tar -xvf them.
We need to hack a couple of files so that they can compile ok.
Firstly the configure file needs to be hacked because it seems to lose track of the fact that you are a hpux machine, there will be a better way of doing this but a cheap and cheerful hack is to put lt_target=hpux10.20 on line 47286 of the configure script.
Next, the Apache GuessOS file needs to be hacked.
Under apache_1.3.9 / src / helpers change line 89 from "echo "hp${HPUXMACH}-hpux${HPUXVER}"; exit 0" to: "echo "hp${HPUXMACH}-hp-hpux${HPUXVER}"; exit 0 "10.
You cannot install PHP as a shared object under HP-UX so you must compile it as a static, just follow the instructions at the Apache page.
PHP and apache should have compiled OK, but Apache won 't start. you need to create a new user for Apache, eg www, or apache.
You then change lines 252 and 253 of the conf / httpd.conf in Apache so that instead of User nobody Group nogroup you have something like User www Group sys This is because you can 't run Apache as nobody under hp-ux.
Apache and PHP should then work.
Hope this helps somebody, Paul Mckay.
Prev
Home
Next
Installation
Up
Unix / Linux installs
PHP Manual
Prev
Chapter 3.
Next
Warning
One to set up the PHP CGI binary, the other is to use the ISAPI module DLL.
Edit the enclosed pws-php4cgi.reg file (look into the SAPI dir) to reflect the location of your php.exe.
Backslashes should be escaped, for example: [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\w3svc\parameters\Script Map] ".php"="c:\\php\\php.exe "Now merge this registery file into your system; you may do this by double-clicking it.
Edit the enclosed pws-php4isapi.reg file (look into the SAPI dir) to reflect the location of your php4isapi.dll.
Backslashes should be escaped, for example: [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\w3svc\parameters\Script Map] ".php"="c:\\php\\sapi\\php4isapi.dll "Now merge this registery file into your system; you may do this by double-clicking it.
To install PHP on an NT / 2000 / XP Server running IIS 4 or newer, follow these instructions.
In either case, you need to start the Microsoft Management Console (may appear as'Internet Services Manager', either in your Windows NT 4.0 Option Pack branch or the Control Panel= Administrative Tools under Windows 2000 / XP).
This means that you will get sensible 404 style error messages instead of cgi errors complaining that php did not output any data.
Prev
Home
Next
Servers-fhttpd
Up
PHP Manual
Prev
Chapter 3.
Next
This section contains notes and hints specific to installing PHP on Linux distributions.
Many Linux distributions have some sort of package installation system, such as RPM.
This can assist in setting up a standard configuration, but if you need to have a different set of features (such as a secure server, or a different database driver), you may need to build PHP and / or your webserver.
If you are unfamiliar with building and compiling your own software, it is worth checking to see whether somebody has already built a packaged version of PHP with the features you need.
Prev
Home
Next
Unix / HP-UX installs
Up
Unix / Mac OS X installs
PHP Manual
Prev
Chapter 3.
Next
This section contains notes and hints specific to installing PHP on Mac OS X Server.
There are a few pre-packaged and pre-compiled versions of PHP for Mac OS X.
This can help in setting up a standard configuration, but if you need to have a different set of features (such as a secure server, or a different database driver), you may need to build PHP and / or your web server yourself.
If you are unfamiliar with building and compiling your own software, it 's worth checking whether somebody has already built a packaged version of PHP with the features you need.
There are two slightly different versions of Mac OS X, client and server.
The following is for OS X Server.
Example 3-2.
Mac OS X server install
Get the latest distributions of Apache and PHP 2.
Untar them, and run the configure program on Apache like so.. / configure --exec-prefix= / usr\ --localstatedir= / var\ --mandir= / usr / share / man\ --libexecdir= / System / Library / Apache / Modules\ --iconsdir= / System / Library / Apache / Icons\ --includedir= / System / Library / Frameworks / Apache.framework / Versions / 1.3 / Headers\ --enable-shared=max\ --enable-module=most\ --target=apache 4.
You may also want to add this line: setenv OPTIM=-O2 If you want the compiler to do some optimization.
Next, go to the PHP 4 source directory and configure it.. / configure --prefix= / usr\ --sysconfdir= / etc\ --localstatedir= / var\ --mandir= / usr / share / man\ --with-xml\ --with-apache= / src / apache_1.3.12 If you have any other additions (MySQL, GD, etc.), be sure to add them here.
For the --with-apache string, put in the path to your apache source directory, for example "/ src / apache_1.3.12".
6. make 7. make install This will add a directory to your Apache source directory under src / modules / php4.
If so, go to the src / modules / php4 directory inside your apache source directory and run this command: ranlib libmodphp4.a Then go back to the root of the apache source directory and run the above configure command again.
That 'll bring the link table up to date.
9. make 10. make install 11. copy and rename the php.ini-dist file to your "bin" directory from your PHP 4 source directory: cp php.ini-dist / usr / local / bin / php.ini or (if your don't have a local directory) cp php.ini-dist / usr / bin / php.ini
Those tips are graciously provided by Marc Liyanage.
The PHP module for the Apache web server included in Mac OS X.
This version includes support for the MySQL and PostgreSQL databases.
NOTE:
Be careful when you do this, you could screw up your Apache web server!
Do this to install:
Open a terminal window
Type "wget http: / /www.diax.ch / users / liyanage / software / macosx / libphp4.so.gz", wait for download to finish
Type "gunzip libphp4.so.gz"
Type "sudo apxs -i -a -n php4 libphp4.so"
#AddType application / x-httpd-php .php #AddType application / x-httpd-php-source .phps
Finally, type "sudo apachectl graceful" to restart the web server.
PHP should now be up and running.
Into that file, write this line: "?php phpinfo()?".
Now open up 127.0.0.1 / ~your_username / test.php in your web browser.
You should see a status table with information about the PHP module.
Prev
Home
Next
Unix / Linux installs
Up
Unix / OpenBSD installs
PHP Manual
Prev
Chapter 3.
Next
Example 3-10.
Example 3-11.
Example 3-12.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Next
You need to complete the following steps to make PHP work with OmniHTTPd.
Important for CGI users:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Next
Using binary packages to install PHP on OpenBSD is the recommended and simplest method.
The files you need can be found on your OpenBSD CD or on the FTP site.
The main package you need to install is php4-core-4.2.3.tgz, which contains the basic engine (plus gettext and iconv).
You need to use the phpxs command to activate and deactivate these modules in your php.ini file.
OpenBSD Package Install Example
Read the packages( 7) manual page for more information about binary packages on OpenBSD.
You can also compile up PHP from source using the ports tree.
The PHP4 port is split into three sub-directories: core, extensions and pear.
The extensions directory generates sub-packages for all of the supported PHP modules.
For example, to skip building the imap module, set the FLAVOR to no_imap.
Since it is hard to generate binary packages using this method, it is now deprecated.
If you have any comments about this, the current maintainer for the port is Anil Madhavapeddy.
Prev
Home
Next
Unix / Mac OS X installs
Up
Unix / Solaris installs
PHP Manual
Prev
Chapter 3.
Next
If you choose the CGI executable file, enter 'wwwserver / shellcgi', if you choose the ISAPI module, enter'wwwserver / isapi' (both without quotes).
Prev
Home
Next
Up
Servers-Sambar
PHP Manual
Prev
Chapter 3.
Next
The PHP CGI binaries are compatible with almost all webservers supporting the CGI standard.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Next
The most common ones are listed in the PHP FAQ, part of this manual.
Read the How to report a bug document before submitting any bug reports!
Prev
Home
Next
Up
Complete list of configure options
PHP Manual
Prev
Chapter 3.
Next
This section contains notes and hints specific to installing PHP on Solaris systems.
Solaris installs often lack C compilers and their related tools.
The required software is as follows:
gcc (recommended, other C compilers may work)
You can simplify the Solaris install process by using pkgadd to install most of your needed components.
Prev
Home
Next
Unix / OpenBSD installs
Up
Installation on UNIX systems
PHP Manual
Prev
Chapter 3.
Next
This section will guide you through the general configuration and installation of PHP on Unix systems.
Be sure to investigate any sections specific to your platform or web server before you begin the process.
Prerequisite knowledge and software:
Basic UNIX skills (being able to operate "make "and a C compiler, if compiling)
An ANSI C compiler (if compiling)
flex (for compiling)
bison (for compiling)
A web server
Any module specific components (such as gd, pdf libs, etc.)
There are several ways to install PHP for the Unix platform, either with a compile and configure process, or through various pre-packaged methods.
This documentation is mainly focused around the process of compiling and configuring PHP.
The initial PHP setup and configuration process is controlled by the use of the commandline options of the configure script.
This page outlines the usage of the most common options, but there are many others to play with.
Check out the Complete list of configure options for an exhaustive rundown.
There are several ways to install PHP:
As an Apache module
As an fhttpd module
For use with AOLServer, NSAPI, phttpd, Pi3Web, Roxen, thttpd, or Zeus.
As a CGI executable
PHP can be compiled in a number of different ways, but one of the most popular is as an Apache module.
The following is a quick installation overview.
Example 3-4.
Quick Installation Instructions for PHP 4 (Apache Module Version)
Edit your httpd.conf or srm.conf file and add:
Use your normal procedure for restarting the Apache server. (You must stop and restart the server, not just cause the server to reload by use a HUP or USR1 signal.)
When PHP is configured, you are ready to build the CGI executable.
The command make should take care of this.
If it fails and you can 't figure out why, see the Problems section.
Prev
Home
Next
Up
Installation on Windows systems
PHP Manual
Prev
Chapter 3.
Next
This section applies to Windows 95 / 98 / Me and Windows NT / 2000 / XP.
Do not expect PHP to work on 16 bit platforms such as Windows 3.1.
Sometimes we refer to the supported Windows platforms as Win32.
There are two main ways to install PHP for Windows: either manually or by using the InstallShield installer.
If you have Microsoft Visual Studio, you can also build PHP from the original source code.
Once you have PHP installed on your Windows system, you may also want to load various extensions for added functionality.
The Windows PHP installer available from the downloads page at http: / /www.php.net / downloads.php, this installs the CGI version of PHP and, for IIS, PWS, and Xitami, configures the web server as well.
Also note, that while the InstallShield installer is an easy way to make PHP work, it is restricted in many aspects, as automatic setup of extensions for example is not supported.
The whole set of supported extensions is only available by downloading the zip binary distribution.
Install your selected HTTP server on your system and make sure that it works.
Run the executable installer and follow the instructions provided by the installation wizard.
Two types of installation are supported - standard, which provides sensible defaults for all the settings it can, and advanced, which asks questions as it goes along.
The installation wizard gathers enough information to set up the php.ini file and configure the web server to use PHP.
For IIS and also PWS on NT Workstation, a list of all the nodes on the server with script map settings is displayed, and you can choose those nodes to which you wish to add the PHP script mappings.
Once the installation has completed the installer will inform you if you need to restart your system, restart the server, or just start using PHP.
Warning
Be aware, that this setup of PHP is not secure.
If you would like to have a secure PHP setup, you 'd better go on the manual way, and set every option carefully.
This automatically working setup gives you an instantly working PHP installation, but it is not meant to be used on online servers.
This install guide will help you manually install and configure PHP on your Windows webserver.
You need to download the zip binary distribution from the downloads page at http: / /www.php.net / downloads.php.
The original version of this guide was compiled by Bob Silva, and can be found at http: / /www.umesd.k12.or.us / php / win32install.html.
This guide provides manual installation support for:
Personal Web Server 3 and 4 or newer
Internet Information Server 3 and 4 or newer
OmniHTTPd 2.0b1 and up
PHP 4 for Windows comes in two flavours - a CGI executable (php.exe), and several SAPI modules (for example: php4isapi.dll).
There is also a CLI version which is further described in the commandline chapter.
Warning
The SAPI modules have been significantly improved in the 4.1 release, however, you may find that you encounter possible server errors or other server modules such as ASP failing, in older systems.
For the ISAPI module, an ISAPI 4.0 compliant Web server is required (tested on IIS 4.0, PWS 4.0 and IIS 5.0).
IIS 3.0 is NOT IIS 3.0 is NOT supported.
You should download and install the Windows NT 4.0 Option Pack with IIS 4.0 if you want native PHP support.
Extract the distribution file to a directory of your choice. c:\php\ is a good start.
Some web servers will crash if you do.
The precise DLLs involved depend on which web server you use and whether you want to run PHP as a CGI or as a server module. php4ts.dll is always used.
ISAPI or Apache) then you will need the relevant DLL from the sapi folder.
If you are using any PHP extension DLLs then you will need those as well.
To make sure that the DLLs can be found, you can either copy them to the system directory (e.g. winnt / system32 or windows / system) or you can make sure that they live in the same directory as the main PHP executable or DLL your web server will use (e.g. php.exe, php4apache.dll).
The PHP binary, the SAPI modules, and some extensions rely on external DLLs for execution.
Make sure that these DLLs in the distribution exist in a directory that is in the Windows PATH.
For example, if you enable php_oci8.dll in php.ini then you 'll want to make sure the Oracle home directory can be seen in PATH so PHP can find oci.dll.
c:\windows\system for Windows 9x / ME
c:\winnt\system32 for Windows NT / 2000
php4ts.dll, if it already exists there, overwrite it
The files in your distribution' s'dlls' directory.
If you have them already installed on your system, overwrite them only if something doesn' t work correctly (Before overwriting them, it is a good idea to make a backup of them, or move them to another folder - just in case something goes wrong).
Download the latest version of the Microsoft Data Access Components (MDAC) for your platform, especially if you use Microsoft Windows 9x / NT4.
MDAC is available at http: / /www.microsoft.com / data /.
Copy your chosen ini file (see below) to your '%WINDOWS% 'directory on Windows 9x / Me or to your '%SYSTEMROOT%' directory under Windows NT / 2000 / XP and rename it to php.ini.
Your '%WINDOWS%' or '%SYSTEMROOT% 'directory is typically:
c:\windows for Windows 9x / ME / XP
c:\winnt or c:\winnt40 for NT / 2000 servers
There are two ini files distributed in the zip file, php.ini-dist and php.ini-optimized.
The best is to study all the ini settings and set every element manually yourself.
If you would like to achieve the best security, then this is the way for you, although PHP works fine with these default ini files.
Edit your new php.ini file:
Please do not forget the last backslash. ex: c:\php\extensions\
If you are using OmniHTTPd, do not follow the next step.
Set the 'doc_root' to point to your webservers document_root.
For example: c:\apache\htdocs or c:\webroot
Choose which extensions you would like to load when PHP starts.
Note that on a new installation it is advisable to first get PHP working and tested without any extensions before enabling them in php.ini.
On PWS and IIS, you can set the browscap.ini to point to: c:\windows\system\inetsrv\browscap.ini on Windows 9x / Me, c:\winnt\system32\inetsrv\browscap.ini on NT / 2000, and c:\windows\system32\inetsrv\browscap.ini on XP.
Note that the mibs Note that the mibs directory supplied with the Windows distribution contains support files for SNMP.
This directory should be moved to DRIVE:\usr\mibs (DRIVE being the drive where PHP is installed.)
If you' re using NTFS on Windows NT, 2000 or XP, make sure that the user running the webserver has read permissions to your php.ini (e.g. make it readable by Everyone).
Start PWS Web Manager
Select the "execute "-Checkbox
Before getting started, it is worthwhile answering the question: "Why is building on Windows so hard?" Two reasons come to mind:
Windows does not (yet) enjoy a large community of developers who are willing to freely share their source.
As a direct result, the necessary investment in infrastructure required to support such development hasn 't been made.
Don 't be surprised if some of this heritage shows through from time to time.
So sit back and try follow the instructions below as faithfully as you can.
To compile and build PHP To compile and build PHP you need a Microsoft Development Environment.
To extract the downloaded files you need a extraction utilitiy (e.g.:
If you don 't already have an unzip utility, you can get a free version from InfoZip.
Before you get started, you have to download...
..the win32 buildtools from the PHP site at http: / /www.php.net / extra / win32build.zip.
..the source code for the DNS name resolver used by PHP from http: / /www.php.net / extra / bindlib_w32.zip.
This is a replacement for the resolv.lib library included in win32build.zip.
If you plan to compile PHP as a Apache module you will also need the Apache sources.
Finally, you are going to need the source to PHP 4 itself.
After downloading the required packages you have to extract them in a proper place.
Create a working directory where all files end up after extracting, e.g: c:\work.
Create the directory win32build under your working directory (c:\work) and unzip win32build.zip into it.
Create the directory bindlib_w32 under your working directory (c:\work) and unzip bindlib_w32.zip into it.
Extract the downloaded PHP source code into your working directory (c:\work).
+--c:\work _BAR_ _BAR_ _BAR_ +--bindlib_w32 _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--arpa _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--conf _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--... _BAR_ _BAR_ _BAR_ +--php-4.x.x _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--build _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--... _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--win32 _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--... _BAR_ _BAR_ _BAR_ +--win32build _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--bin _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--include _BAR_ _BAR_ _BAR_ _BAR_ _BAR_ +--lib
Note:
Cygwin users may omit the last step.
A properly installed Cygwin environment provides the mandatory files bison.simple and bison.exe.
The next step is to configure MVC + + to prepare for compiling.
Launch Microsoft Visual C++, and from the menu select Tools = Options.
In the dialog, select the directories tab.
Sequentially change the dropdown to Executables, Includes, and Library files.
Your entries should look like this:
Executable files: c:\work\win32build\bin, Cygwin users: cygwin\bin
Include files: c:\work\win32build\include
Library files: c:\work\win32build\lib
You must build the resolv.lib library.
Decide whether you want to have debug symbols available (bindlib - Win32 Debug) or not (bindlib - Win32 Release).
For GUI users, launch VC++, and then select File = Open Workspace, navigate to c:\work\bindlib_w32 and select bindlib.dsw.
Then select Build= Set Active Configuration and select the desired configuration.
Finally select Build= Rebuild All.
For command line users, make sure that you either have the C+ + environment variables registered, or have run vcvars.bat, and then execute one of the following commands:
msdev bindlib.dsp / MAKE "bindlib - Win32 Release"
The best way to get started is to build the CGI version.
For GUI users, launch VC++, and then select File = Open Workspace and select c:\work\php-4.x.x\win32\php4ts.dsw.
Then select Build= Set Active Configuration and select the desired configuration, either php4ts - Win32 Debug_TS or php4ts - Win32 Release_TS.
Finally select Build= Rebuild All.
For command line users, make sure that you either have the C+ + environment variables registered, or have run vcvars.bat, and then execute one of the following commands from the c:\work\php-4.x.x\win32 directory:
At this point, you should have a usable php.exe in either your c:\work\php-4.x.x.\Debug_TS or Release_TS subdirectories.
It is possible to do minor customization to the build process by editing the main / config.win32.h.in file.
For example you can change the builtin extensions, the location of php.ini and
Next you may want to build the CLI version which is designed to use PHP from the command line.
The steps are the same as for building the CGI version, except you have to select the php4ts_cli - Win32 Debug_TS or php4ts_cli - Win32 Release_TS The steps are the same as for building the CGI version, except you have to select the php4ts_cli - Win32 Debug_TS or php4ts_cli - Win32 Release_TS project file.
Note:
For more information about PEAR and the installer read the documantation at the PEAR website.
In order to build the SAPI module (php4isapi.dll for integrating PHP with Microsoft IIS, set your active configuration to php4isapi-whatever-config and build the desired dll.
After installing PHP and a webserver on Windows, you will probably want to install some extensions for added functionality.
The following table describes some of the extensions available.
You can choose which extensions you would like to load when PHP starts by uncommenting the: 'extension=php_*.dll' lines in php.ini.
You can also load a module dynamically in your script using dl().
This prevents confusion between PHP extensions and their supporting libraries.
Note:
In PHP 4.0.6 BCMath, Calendar, COM, FTP, MySQL, ODBC, PCRE, Session, WDDX and XML support is built in.
You don 't need to load any additional extensions in order to use these functions.
See your distributions README.txt or install.txt for a list of built in modules.
Note:
Couple of them can be found in the distribution package, in the 'dlls' folder but some, for example Oracle (php_oci8.dll) require DLLs which are not bundled with the distribution package.
c:\windows\system for Windows 9x / Me
c:\winnt\system32 for Windows NT / 2000
c:\windows\system32 for Windows XP
Table 3-1.
PHP Extensions
Extension
Description
Notes
None
Calendar conversion functions
Built in since PHP 4.0.3
None
php_crack.dll
Crypt functions
unknown
ctype family functions
None
CURL, Client URL library functions
Requires: libeay32.dll, ssleay32.dll (bundled)
Cybercash payment functions
None
DBM functions
Deprecated.
php_dba.dll
DataBase (dbm-style) Abstraction layer functions
None
dBase functions
None
Berkeley DB2 library
unknown
DOM XML functions
Requires: libxml2.dll (bundled)
.NET functions
None
Read EXIF headers from JPEG
None
FrontBase functions
None
Forms Data Format functions.
Requires: fdftk.dll (bundled)
filePro functions
Read-only access
FTP functions
Built-in since PHP 4.0.3
None
php_gd2.dll
php_gettext.dll
Requires: gnu_gettext.dll (bundled)
HyperWave functions
None
ICONV characterset conversion
Requires: iconv-1.3.dll (bundled)
Informix functions
Informix libraries
IIS management functions
None
IMAP POP3 and NNTP functions
Ingres II functions
Ingres II libraries
InterBase functions
Requires: gds32.dll (bundled)
Java extension
Requires: jvm.dll (bundled)
LDAP functions
Requires: libsasl.dll (bundled)
Mhash Functions
None
Ming functions for Flash
None
mSQL functions
Requires: msql.dll (bundled)
mSQL 1 client
unknown
mSQL 2 client
unknown
MSSQL functions
Requires: ntwdblib.dll (bundled)
MySQL functions
Built-in in PHP 4
Netscape mail functions
unknown
Oracle functions
unknown
Oracle 8 functions
Oracle 8 client libraries
OpenSSL functions
Requires: libeay32.dll (bundled)
Oracle functions
Oracle 7 client libraries
PDF functions
None
PostgreSQL functions
None
Printer functions
None
php_xslt.dll
XSLT functions
Requires: sablot.dll (bundled)
SNMP get and walk functions
NT only!
Sybase functions
Sybase client libraries
YAZ functions
None
ZLib compression functions
None
Prev
Home
Next
Installation on UNIX systems
Up
Servers-CGI / Commandline
PHP Manual
Prev
Chapter 3.
Next
Prev
Home
Next
Servers-Sambar
Up
PHP Manual
Prev
Next
PHP (recursive acronym for "PHP:
Hypertext Preprocessor") is a widely-used Open Source general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.
Simple answer, but what does that mean?
An example:
Example 1-1.
An introductory example
html head title Example / title / head body ?php echo "Hi, I'm a PHP script !";? / body / html
Notice how this is different from a script written in other languages like Perl or C - - instead of writing a program with lots of commands to output HTML, you write an HTML script with some embedded code to do something (in this case, output some text).
The PHP code is enclosed in special start and end tags that allow you to jump into and out of "PHP mode".
What distinguishes PHP from something like client-side JavaScript is that the code is executed on the server.
If you were to have a script similar to the above on your server, the client would receive the results of running that script, with no way of determining what the underlying code may be.
You can even configure your web server to process all your HTML files with PHP, and then there 's really no way that users can tell what you have up your sleeve.
The best things in using PHP are that it is extremely simple for a newcomer, but offers many advanced features for a professional programmer.
Don' t be afraid reading the long list of PHP's features.
You can jump in, in a short time, and start writing simple scripts in a few hours.
Although PHP 's development is focused on server-side scripting, you can do much more with it.
Read on, and see more in the What can PHP do? section.
Prev
Home
Next
Getting Started
Up
What can PHP do?
PHP Manual
Prev
Chapter 1.
Introduction
Next
Anything.
PHP is mainly focused on server-side scripting, so you can do anything any other CGI program can do, such as collect form data, generate dynamic page content, or send and receive cookies.
But PHP can do much more.
There are three main fields where PHP scripts are used.
Server-side scripting.
This is the most traditional and main target field for PHP.
You need three things to make this work.
The PHP parser (CGI or server module), a webserver and a web browser.
You need to run the webserver, with a connected PHP installation.
You can access the PHP program output with a web browser, viewing the PHP page through the server.
See the installation instructions section for more information.
Command line scripting.
You can make a PHP script to run it without any server or browser.
You only need the PHP parser to use it this way.
This type of usage is ideal for scripts regularly executed using cron (on *nix or Linux) or Task Scheduler (on Windows).
These scripts can also be used for simple text processing tasks.
See the section about Command line usage of PHP for more information.
Writing client-side GUI applications.
PHP is probably not the very best language to write windowing applications, but if you know PHP very well, and would like to use some advanced PHP features in your client-side applications you can also use PHP-GTK to write such programs.
You also have the ability to write cross-platform applications this way.
PHP-GTK is an extension to PHP, not available in the main distribution.
If you are interested in PHP-GTK, visit it 's own website.
PHP can be used on all major operating systems, including Linux, many Unix variants (including HP-UX, Solaris and OpenBSD), Microsoft Windows, Mac OS X, RISC OS, and probably others.
PHP has also support for most of the web servers today.
This includes Apache, Microsoft Internet Information Server, Personal Web Server, Netscape and iPlanet servers, Oreilly Website Pro server, Caudium, Xitami, OmniHTTPd, and many others.
For the majority of the servers PHP has a module, for the others supporting the CGI standard, PHP can work as a CGI processor.
So with PHP, you have the freedom of choosing an operating system and a web server.
Furthermore, you also have the choice of using procedural programming or object oriented programming, or a mixture of them.
Although not every standard OOP feature is realized in the current version of PHP, many code libraries and large applications (including the PEAR library) are written only using OOP code.
With PHP you are not limited to output HTML.
PHP' s abilities includes outputting images, PDF files and even Flash movies (using libswf and Ming) generated on the fly.
You can also output easily any text, such as XHTML and any other XML file.
PHP can autogenerate these files, and save them in the file system, instead of printing it out, forming a server-side cache for your dynamic content.
One of the strongest and most significant feature in PHP is its support for a wide range of databases.
Writing a database-enabled web page is incredibly simple.
The following databases are currently supported:
Oracle (OCI7 and OCI8)
FilePro (read-only)
PHP also has support for talking to other services using protocols such as LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (on Windows) and countless others.
You can also open raw network sockets and interact using any other protocol.
PHP has support for the WDDX complex data exchange between virtually all Web programming languages.
Talking about interconnection, PHP has support for instantiation of Java objects and using them transparently as PHP objects.
You can also use our CORBA extension to access remote objects.
PHP has extremely useful text processing features, from the POSIX Extended or Perl regular expressions to parsing XML documents.
For parsing and accessing XML documents, we support the SAX and DOM standards.
You can use our XSLT extension to transform XML documents.
While using PHP in the ecommerce field, you 'll find the Cybercash payment, CyberMUT, VeriSign Payflow Pro and CCVS functions useful for your online payment programs.
At last but not least, we have many other interesting extensions, the mnoGoSearch search engine functions, the IRC Gateway functions, many compression utilities (gzip, bz2), calendar conversion, translation...
As you can see this page is not enough to list all the features and benefits PHP can offer.
Read on in the sections about installing PHP, and see the function reference part for explanation of the extensions mentioned here.
Prev
Home
Next
Introduction
Up
A simple tutorial
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Often you need classes with similar variables and functions to another existing class.
In fact, it is good practice to define a generic class which can be used in all your projects and adapt this class for the needs of each of your specific projects.
To facilitate this, classes can be extensions of other classes.
The extended or derived class has all variables and functions of the base class (this is called'inheritance 'despite the fact that nobody died) and what you add in the extended definition.
It is not possible to substract from a class, that is, to undefine any existing functions or variables.
An extended class is always dependent on a single base class, that is, multiple inheritance is not supported.
Classes are extended using the keyword 'extends'.
This defines a class Named_Cart that has all variables and functions of Cart plus an additional variable $owner and an additional function set_owner().
You create a named cart the usual way and can now set and get the carts owner.
You can still use normal cart functions on named carts:
$ncart = new Named_Cart; / / Create a named cart $ncart - set_owner("kris"); / / Name that cart print $ncart - owner; / / print the cart owners name $ncart - add_item("10", 1); / / (inherited functionality from cart)
This is also called a "parent-child" relationship.
You create a class, parent, and use extends to create a new class based on the parent class: the child class.
You can even use this new child class and create another class based on this child class.
Note:
Classes must be defined before they are used!
If you want the class Named_Cart to extend the class Cart, you will have to define the class Cart first.
If you want to create another class called Yellow_named_cart based on the class Named_Cart you have to define Named_Cart If you want to create another class called Yellow_named_cart based on the class Named_Cart you have to define Named_Cart first.
To make it short: the order in which the classes are defined is important.
Prev
Home
Next
Classes and Objects
Up
Constructors
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Caution
The following is valid for PHP 4 only.
Sometimes it is useful to refer to functions and variables in base classes or to refer to functions in classes that have not yet any instances.
The:: operator is being used for this.
class A {function example() {echo "I am the original function A::example(). br \n";}} class B extends A {function example() {echo "I am the redefined function B::example(). br \n"; A::example();}} / / there is no object of class A. / / this will print / / I am the original function A::example(). br A::example(); / / create an object of class B. $b = new B; / / this will print / / I am the redefined function B::example(). br / / I am the original function A::example(). br $b - example();
The above example calls the function example() in class A, but there is no object of class A, so that we cannot write $a - example() or similar.
Instead we call example() as a'class function ', that is, as a function of the class itself, not any object of that class.
There are class functions, but there are no class variables.
In fact, there is no object at all at the time of the call.
Thus, a class function may not use any object variables (but it can use local and global variables), and it may no use $this at all.
In the above example, class B redefines the function example().
The original definition in class A is shadowed and no longer available, unless you are refering specifically to the implementation of example() in class A using the ::-operator.
Write A::example() to do this (in fact, you should be writing parent::example(), as shown in the next section).
In this context, there is a current object and it may have object variables.
Thus, when used from WITHIN an object function, you may use $this and object variables.
Prev
Home
Next
Constructors
Up
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
You may find yourself writing code that refers to variables and functions in base classes.
This is particularly true if your derived class is a refinement or specialisation of code in your base class.
Instead of using the literal name of the base class in your code, you should be using the special name parent, which refers to the name of your base class as given in the extends Instead of using the literal name of the base class in your code, you should be using the special name parent, which refers to the name of your base class as given in the extends declaration of your class.
By doing this, you avoid using the name of your base class in more than one place.
Should your inheritance tree change during implementation, the change is easily made by simply changing the extends declaration of your class.
class A {function example() {echo "I am A::example() and provide basic functionality. br \n";}} class B extends A {function example() {echo "I am B::example() and provide additional functionality. br \n"; parent::example();}} $b = new B; / / This will call B::example(), which will in turn call A::example(). $b - example();
Prev
Home
Next
Up
Serializing objects - objects in sessions
PHP Manual
Prev
Next
Prev
Home
Next
Keeping Current
Basic syntax
PHP Manual
Prev
Chapter 6.
Basic syntax
Next
PHP supports' C', 'C++ 'and Unix shell-style comments.
For example:
?php echo "This is a test"; / / This is a one-line c+ + style comment / * This is a multi line comment yet another line of comment * / echo "This is yet another test"; echo "One Final Test"; # This is shell-style style comment?
The "one-line" comment styles actually only comment to the end of the line or the current block of PHP code, whichever comes first.
h1 This is an ?php # echo "simple";? example. / h1 p The header above will say'This is an example '.
You should be careful not to nest 'C' style comments, which can happen when commenting out large blocks.
?php / * echo "This is a test"; / * This comment will cause a problem * / * /?
The one-line comment styles actually only comment to the end of the line or the current block of PHP code, whichever comes first.
WILL be printed:? skips out of the PHP mode and returns to HTML mode, and / / cannot influence that.
Prev
Home
Next
Instruction separation
Up
Types
PHP Manual
Prev
Next
When PHP parses a file, it simply passes the text of the file through until it encounters one of the special tags which tell it to start interpreting the text as PHP code.
The parser then executes all the code it finds, up until it runs into a PHP closing tag, which tells the parser to just start passing the text through again.
This is the mechanism which allows you to embed PHP code inside HTML: everything outside the PHP tags is left utterly alone, while everything inside is parsed as code.
There are four sets of tags which can be used to denote blocks of PHP code.
Of these, only two (?php...? and script language="php "... / script) are always available; the others can be turned on or off from the php.ini Of these, only two (?php...? and script language="php"... / script) are always available; the others can be turned on or off from the php.ini configuration file.
While the short-form tags and ASP-style tags may be convenient, they are not as portable as the longer versions.
Also, if you intend to embed PHP code in XML or XHTML, you will need to use the ?php...? form to conform to the XML.
The tags supported by PHP are:
Example 6-1.
Ways of escaping from HTML
1. ?php echo( "if you want to serve XHTML or XML documents, do like this\n");?
2.? echo ("this is the simplest, an SGML processing instruction\n");? ?= expression?
This is a shortcut for "? echo expression?" 3. script language="php "echo ("some editors (like FrontPage) don't like processing instructions"); / script 4.% echo ("You may optionally use ASP-style tags");% %= $variable; # This is a shortcut for"% echo... "%
The first way, ?php...?, is the preferred method, as it allows the use of PHP in XML-conformant code such as XHTML.
The second way is not available always.
Short tags are available only when they have been enabled.
This can be done via the short_tags() function (PHP 3 only), by enabling the short_open_tag configuration setting in the PHP config file, or by compiling PHP with the --enable-short-tags option to configure.
Even if it is enabled by default in php.ini-dist, use of short tags are discouraged.
The fourth way is only available if ASP-style tags have been enabled using the asp_tags configuration setting.
Note:
Support for ASP-style tags was added in 3.0.4.
Note:
Using short tags should be avoided when developing applications or libraries that are meant for redistribution, or deployment on PHP servers which are not under your control, because short tags may not be supported on the target server.
For portable, redistributable code, be sure not to use short tags.
The closing tag for the block will include the immediately trailing newline if one is present.
Also, the closing tag automatically implies a semicolon; you do not need to have a semicolon terminating the last line of a PHP block.
PHP allows you to use structures like this:
Example 6-2.
Advanced escaping
?php if ($expression) {? strong This is true. / strong ?php} else {? strong This is false. / strong ?php}?
Prev
Home
Next
Language Reference
Up
Instruction separation
PHP Manual
Prev
Chapter 6.
Basic syntax
Next
Instructions are separated the same as in C or Perl - terminate each statement with a semicolon.
The closing tag (?) also implies the end of the statement, so the following are equivalent:
?php echo "This is a test";? ?php echo "This is a test"?
Prev
Home
Next
Basic syntax
Up
Comments
PHP Manual
Prev
Next
A constant is a identifier (name) for a simple value.
A constant is case-sensitive by default.
By convention constant identifiers are always uppercase.
The name of a constant follows the same rules as any label in PHP.
A valid constant name starts with a letter or underscore, followed by any number of letters, numbers, or underscores.
As a regular expression, it would be expressed thus: [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff ]*
Note:
For our purposes here, a letter is a-z, A-Z, and the ASCII characters from 127 through 255 (0x7f-0xff).
The scope of a constant is global--you can access it anywhere in your script without regard to scope.
You can define a constant by using the define() -function.
Once a constant is defined, it can never be changed or undefined.
Only scalar data (boolean, integer, float and string) can be contained in constants.
You can get the value of a constant by simply specifying its name.
Unlike with variables, you should not prepend a constant with a $.
You can also use the function constant(), to read a constant's value, if you are to obtain the constant's name dynamically.
Use get_defined_constants() to get a list of all defined constants.
Note:
Constants and (global) variables are in a different namespace.
This implies that for example TRUE and $TRUE are generally different.
If you use an undefined constant, PHP assumes that you mean the name of the constant itself.
A notice will be issued when this happens.
Use the defined() -function if you want to know if a constant is set.
These are the differences between constants and variables:
Constants do not have a dollar sign ($) before them;
Constants may only be defined using the define() function, not by simple assignment;
Constants may be defined and accessed anywhere without regard to variable scoping rules;
Constants may not be redefined or undefined once they have been set; and
Constants may only evaluate to scalar values.
Example 9-1.
Defining Constants
?php define( "CONSTANT", "Hello world ."); echo CONSTANT; / / outputs "Hello world. "echo Constant; / / outputs "Constant" and issues a notice.?
Prev
Home
Next
Variables from outside PHP
Up
Predefined constants
PHP Manual
Prev
Chapter 9.
Constants
Next
PHP provides a large number of predefined constants to any script which it runs.
Many of these constants, however, are created by various extensions, and will only be present when those extensions are available, either via dynamic loading or because they have been compiled in.
There are four magical constants that change depending on where they 're used.
For example, the value of __LINE__ depends on the line that it 's used on in your script.
These special constants are case-insensitive and are as follows:
Table 9-1.
A few "magical" PHP "constants "
Description
The current line number of the file.
The full path and filename of the file.
The function name.
This was added in PHP 4.3.0
The class name.
This was added in PHP 4.3.0
A list of predefined constants is available in the section Reserved predefined constants.
Prev
Home
Next
Constants
Up
Expressions
PHP Manual
Prev
Next
Expressions are the most important building stones of PHP.
In PHP, almost anything you write is an expression.
The simplest yet most accurate way to define an expression is "anything that has a value".
The most basic forms of expressions are constants and variables.
When you type "$a = 5", you're assigning '5 'into $a. '5', obviously, has the value 5, or in other words '5' is an expression with the value of 5 (in this case, '5 'is an integer constant).
After this assignment, you' d expect $a's value to be 5 as well, so if you wrote $b = $a, you'd expect it to behave just as if you wrote $b = 5.
In other words, $a is an expression with the value of 5 as well.
If everything works right, this is exactly what will happen.
For instance, consider the following function:
Assuming you' re familiar with the concept of functions (if you're not, take a look at the chapter about functions), you'd assume that typing $c = foo() is essentially just like writing $c = 5, and you're right.
Functions are expressions with the value of their return value.
Since foo() returns 5, the value of the expression'foo() 'is 5.
Usually functions don 't just return a static value but compute something.
Of course, values in PHP don' t have to be integers, and very often they aren't.
PHP supports three scalar value types: integer values, floating point values and string values (scalar values are values that you can't'break 'into smaller pieces, unlike arrays, for instance).
PHP also supports two composite (non-scalar) types: arrays and objects.
Each of these value types can be assigned into variables or returned from functions.
So far, users of PHP / FI 2 shouldn 't feel any change.
However, PHP takes expressions much further, in the same way many other languages do.
PHP is an expression-oriented language, in the sense that almost everything is an expression.
Consider the example we' ve already dealt with, '$a = 5 '.
It' s easy to see that there are two values involved here, the value of the integer constant '5 ', and the value of $a which is being updated to 5 as well.
But the truth is that there' s one additional value involved here, and that's the value of the assignment itself.
The assignment itself evaluates to the assigned value, in this case 5.
In practice, it means that '$a = 5', regardless of what it does, is an expression with the value 5.
Thus, writing something like '$b = ($a = 5)' is like writing '$a = 5; $b = 5; '(a semicolon marks the end of a statement).
Since assignments are parsed in a right to left order, you can also write '$b = $a = 5'.
Another good example of expression orientation is pre - and post-increment and decrement.
Users of PHP / FI 2 and many other languages may be familiar with the notation of variable+ + and variable--.
These are increment and decrement operators.
In PHP / FI 2, the statement '$a++' has no value (is not an expression), and thus you can't assign it or use it in any way.
PHP enhances the increment / decrement capabilities by making these expressions as well, like in C.
In PHP, like in C, there are two types of increment - pre-increment and post-increment.
Both pre-increment and post-increment essentially increment the variable, and the effect on the variable is idential.
The difference is with the value of the increment expression.
Pre-increment, which is written '++$variable', evaluates to the incremented value (PHP increments the variable before reading its value, thus the name'pre-increment').
Post-increment, which is written '$variable++' evaluates to the original value of $variable, before it was incremented (PHP increments the variable after reading its value, thus the name'post-increment').
A very common type of expressions are comparison expressions.
These expressions evaluate to either 0 or 1, meaning FALSE or TRUE (respectively).
PHP supports (bigger than), = (bigger than or equal to), == (equal), != (not equal), (smaller than) and = (smaller than or equal to).
These expressions are most commonly used inside conditional execution, such as if statements.
The last example of expressions we 'll deal with here is combined operator-assignment expressions.
You already know that if you want to increment $a by 1, you can simply write '$a++' or '++$a '.
But what if you want to add more than one to it, for instance 3?
You could write '$a++' multiple times, but this is obviously not a very efficient or comfortable way.
A much more common practice is to write '$a = $a + 3'. '$a + 3' evaluates to the value of $a plus 3, and is assigned back into $a, which results in incrementing $a by 3.
In PHP, as in several other languages like C, you can write this in a shorter way, which with time would become clearer and quicker to understand as well.
Adding 3 to the current value of $a can be written '$a += 3'.
This means exactly "take the value of $a, add 3 to it, and assign it back into $a".
In addition to being shorter and clearer, this also results in faster execution.
The value of '$a += 3', like the value of a regular assignment, is the assigned value.
Notice that it is NOT 3, but the combined value of $a plus 3 (this is the value that's assigned into $a).
Any two-place operator can be used in this operator-assignment mode, for example '$a -= 5' (subtract 5 from the value of $a), '$b *= 7 '(multiply the value of $b by 7), etc.
There is one more expression that may seem odd if you haven 't seen it in other languages, the ternary conditional operator:
$first? $second: $third
The following example should help you understand pre - and post-increment and expressions in general a bit better:
function double( $i) {return $i*2;} $b = $a = 5; / * assign the value five into the variable $a and $b * / $c = $a++; / * post-increment, assign original value of $a (5) to $c * / $e = $d = ++$b; / * pre-increment, assign the incremented value of $b (6) to $d and $e * / / * at this point, both $d and $e are equal to 6 * / $f = double($d++); / * assign twice the value of $d emphasis before / emphasis the increment, 2*6 = 12 to $f * / $g = double(++$e); / * assign twice the value of $e emphasis after / emphasis the increment, 2*7 = 14 to $g * / $h = $g += 10; / * first, $g is incremented by 10 and ends with the value of 24. the value of the assignment (24) is then assigned into $h, and $h ends with the value of 24 as well. * /
In the beginning of the chapter we said that we 'll be describing the various statement types, and as promised, expressions can be statements.
However, not every expression is a statement.
In this case, a statement has the form of 'expr' ';' that is, an expression followed by a semicolon.
In '$b=$a=5 ;', $a=5 is a valid expression, but it's not a statement by itself. '$b=$a=5;' however is a valid statement.
One last thing worth mentioning is the truth value of expressions.
In many events, mainly in conditional execution and loops, you 're not interested in the specific value of the expression, but only care about whether it means TRUE or FALSE.
The constants TRUE and FALSE The constants TRUE and FALSE (case-insensitive) are the two possible boolean values.
When necessary, an expression is automatically converted to boolean.
See the section about type-casting for details about how.
PHP provides a full and powerful implementation of expressions, and documenting it entirely goes beyond the scope of this manual.
The above examples should give you a good idea about what expressions are and how you can construct useful expressions.
Throughout the rest of this manual we 'll write expr to indicate any valid PHP expression.
Prev
Home
Next
Predefined constants
Up
Operators
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Caution
In PHP 3 and PHP 4 constructors behave differently.
The PHP 4 semantics are strongly preferred.
Constructors are functions in a class that are automatically called when you create a new instance of a class with new.
In PHP 3, a function becomes a constructor when it has the same name as the class.
In PHP 4, a function becomes a constructor, when it has the same name as the class it is defined in - the difference is subtle, but crucial (see below).
/ / Works in PHP 3 and PHP 4. class Auto_Cart extends Cart {function Auto_Cart() {$this - add_item ("10", 1);}}
This defines a class Auto_Cart that is a Cart plus a constructor which initializes the cart with one item of article number "10" each time a new Auto_Cart is being made with "new ".
Constructors can take arguments and these arguments can be optional, which makes them much more useful.
To be able to still use the class without parameters, all parameters to constructors should be made optional by providing default values.
/ / Works in PHP 3 and PHP 4. class Constructor_Cart extends Cart {function Constructor_Cart($item = "10", $num = 1) {$this - add_item ($item, $num);}} / / Shop the same old boring stuff. $default_cart = new Constructor_Cart; / / Shop for real... $different_cart = new Constructor_Cart("20", 17);
You also can use the @ operator to mute errors occuring in the constructor, e.g. @new.
Caution
In PHP 3, derived classes and constructors have a number of limitations.
The following examples should be read carefully to understand these limitations.
class A {function A() {echo "I am the constructor of A. br \n";}} class B extends A {function C() {echo "I am a regular function. br \n";}} / / no constructor is being called in PHP 3. $b = new B;
In PHP 3, no constructor is being called in the above example.
The rule in PHP 3 is: 'A constructor is a function of the same name as the class.'.
Nothing happens.
This is fixed in PHP 4 by introducing another rule:
If a class has no constructor, the constructor of the base class is being called, if it exists.
The above example would have printed 'I am the constructor of A. br' in PHP 4.
class A {function A() {echo "I am the constructor of A. br \n";} function B() {echo "I am a regular function named B in class A. br \n"; echo "I am not a constructor in A. br \n";}} class B extends A {function C() {echo "I am a regular function. br \n";}} / / This will call B() as a constructor. $b = new B;
In PHP 3, the function B() in class A will suddenly become a constructor in class B, although it was never intended to be.
The rule in PHP 3 is: 'A constructor is a function of the same name as the class.'.
PHP 3 does not care if the function is being defined in class B, or if it has been inherited.
This is fixed in PHP 4 by modifying the rule to: 'A constructor is a function of the same name as the class it is being defined in.'.
Thus in PHP 4, the class B would have no constructor function of its own and the constructor of the base class would have been called, printing 'I am the constructor of A. br'.
Caution
Neither PHP 3 nor PHP 4 call constructors of the base class automatically from a constructor of a derived class.
It is your responsibility to propagate the call to constructors upstream where appropriate.
Note:
There are no destructors in PHP 3 or PHP 4.
You may use register_shutdown_function() instead to simulate most effects of destructors.
Destructors are functions that are called automatically when an object is destroyed, either with unset() or by simply going out of scope.
There are no destructors in PHP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
A class is a collection of variables and functions working with these variables.
A class is defined using the following syntax:
?php class Cart {var $items; / / Items in our shopping cart / / Add $num articles of $artnr to the cart function add_item ($artnr, $num) {$this - items[$artnr] += $num;} / / Take $num articles of $artnr out of the cart function remove_item ($artnr, $num) {if ($this - items[$artnr] $num) {$this - items[$artnr] -= $num; return true;} else {return false;}}}?
This defines a class named Cart that consists of an associative array of articles in the cart and two functions to add and remove items from this cart.
Caution
The following cautionary notes are valid for PHP 4.
The name stdClass is used interally by Zend and is reserved.
You cannot have a class named stdClass in PHP.
The function names __sleep and __wakeup The function names __sleep and __wakeup are magical in PHP classes.
You cannot have functions with these names in any of your classes unless you want the magic functionality associated with them.
See below for more information.
PHP reserves all function names starting with __ as magical.
It is recommended that you do not use function names with __ in PHP unless you want some documented magic functionality.
Note:
In PHP 4, only constant initializers for var variables are allowed.
To initialize variables with non-constant values, you need an initialization function which is called automatically when an object is being constructed from the class.
Such a function is called a constructor (see below).
?php / * None of these will work in PHP 4. * / class Cart {var $todays_date = date("Y-m-d"); var $name = $firstname; var $owner = 'Fred '. 'Jones'; var $items = array("VCR", "TV");} / * This is how it should be done. * / class Cart {var $todays_date; var $name; var $owner; var $items; function Cart() {$this - todays_date = date("Y-m-d"); $this - name = $GLOBALS['firstname']; / * etc... * /}}?
Classes are types, that is, they are blueprints for actual variables.
You have to create a variable of the desired type with the new operator.
This creates the objects $cart and $another_cart, both of the class Cart.
The function add_item() of the $cart object is being called to add 1 item of article number 10 to the $cart.
3 items of article number 0815 are being added to $another_cart.
Both, $cart and $another_cart, have functions add_item(), remove_item() and a variable items.
These are distinct functions and variables.
You can think of the objects as something similar to directories in a filesystem.
In a filesystem you can have two different files README.TXT, as long as they are in different directories.
Just like with directories where you 'll have to type the full pathname in order to reach each file from the toplevel directory, you have to specify the complete name of the function you want to call:
In PHP terms, the toplevel directory would be the global namespace, and the pathname separator would be -.
Thus, the names $cart - items and $another_cart - items name two different variables.
Note that the variable is named $cart - items, not $cart - $items, that is, a variable name in PHP has only a single dollar sign.
/ / correct, single $$cart - items = array( "10 "= 1); / / invalid, because $cart - $items becomes $cart -" "$cart - $items = array("10" = 1); / / correct, but may or may not be what was intended: / / $cart - $myvar becomes $cart - items $myvar = 'items'; $cart - $myvar = array("10 "= 1);
Within a class definition, you do not know under which name the object will be accessible in your program: at the time the Cart class was written, it was unknown that the object will be named $cart or $another_cart later.
Thus, you cannot write $cart - items within the Cart class itself.
Instead, in order to be able to access it' s own functions and variables from within a class, one can use the pseudo-variable $this which can be read as'my own 'or'current object'.
Thus, '$this - items[$artnr] += $num' can be read as'add $num to the $artnr counter of my own items array 'or'add $num to the $artnr counter of the items array within the current object'.
Note:
There are some nice functions to handle classes and objects.
You might want to take a look at the Class / Object Functions
Prev
Home
Next
Variable functions
Up
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
serialize() checks if your class has a function with the magic name __sleep.
If so, that function is being run prior to any serialization.
It can clean up the object and is supposed to return an array with the names of all variables of that object that should be serialized.
The intended use of __sleep is to close any database connections that object may have, committing pending data or perform similar cleanup tasks.
Also, the function is useful if you have very large objects which need not be saved completely.
Conversely, unserialize() checks for the presence of a function with the magic name __wakeup.
If present, this function can reconstruct any resources that object may have.
The intended use of __wakeup is to reestablish any database connections that may have been lost during serialization and perform other reinitialization tasks.
Prev
Home
Next
Serializing objects - objects in sessions
Up
References inside the constructor
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Creating references within the constructor can lead to confusing results.
This tutorial-like section helps you to avoid problems.
class Foo {function Foo($name) {/ / create a reference inside the global array $globalref global $globalref; $globalref[] = $this; / / set name to passed value $this - setName($name); / / and put it out $this - echoName();} function echoName() {echo "br ",$this - name;} function setName($name) {$this - name = $name;}}
Let us check out if there is a difference between $bar1 which has been created using the copy = operator and $bar2 which has been created using the reference = operator...
$bar1 = new Foo( 'set in constructor'); $bar1 - echoName(); $globalref[0] - echoName(); / * output: set in constructor set in constructor set in constructor * / $bar2 = new Foo('set in constructor'); $bar2 - echoName(); $globalref[1] - echoName(); / * output: set in constructor set in constructor set in constructor * /
Apparently there is no difference, but in fact there is a very significant one: $bar1 and $globalref[ 0] are _NOT_ referenced, they are NOT the same variable.
This is because "new" does not return a reference by default, instead it returns a copy.
Note:
There is no performance loss (since PHP 4 and up use reference counting) returning copies instead of references.
On the contrary it is most often better to simply work with copies instead of references, because creating references takes some time where creating copies virtually takes no time (unless none of them is a large array or object and one of them gets changed and the other(s) one(s) subsequently, then it would be wise to use references to change them all concurrently).
/ / now we will change the name. what do you expect? / / you could expect that both $bar1 and $globalref[ 0] change their names... $bar1 - setName('set from outside'); / / as mentioned before this is not the case. $bar1 - echoName(); $globalref[0] - echoName(); / * output: set from outside set in constructor * / / / let us see what is different with $bar2 and $globalref[1] $bar2 - setName('set from outside'); / / luckily they are not only equal, they are the same variable / / thus $bar2 - name and $globalref[1] - name are the same too $bar2 - echoName(); $globalref[1] - echoName(); / * output: set from outside set from outside * /
Another final example, try to understand it.
class A {function A($i) {$this - value = $i; / / try to figure out why we do not need a reference here $this - b = new B($this);} function createRef() {$this - c = new B($this);} function echoValue() {echo "br" ,"class ",get_class($this) ,': ',$this - value;}} class B {function B ($a) {$this - a = $a;} function echoValue() {echo "br" ,"class ",get_class($this) ,': ',$this - a - value;}} / / try to undestand why using a simple copy here would yield / / in an undesired result in the *-marked line $a = new A(10); $a - createRef(); $a - echoValue(); $a - b - echoValue(); $a - c - echoValue(); $a - value = 11; $a - echoValue(); $a - b - echoValue(); / / * $a - c - echoValue(); / * output: class A:
Prev
Home
Next
The magic functions __sleep and __wakeup
Up
References Explained
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Note:
In PHP 3, objects will lose their class association throughout the process of serialization and unserialization.
The resulting variable is of type object, but has no class and no methods, thus it is pretty useless (it has become just like an array with a funny syntax).
Caution
The following information is valid for PHP 4 only.
serialize() returns a string containing a byte-stream representation of any value that can be stored in PHP. unserialize() can use this string to recreate the original variable values.
Using serialize to save an object will save all variables in an object.
The functions in an object will not be saved, only the name of the class.
In order to be able to unserialize() an object, the class of that object needs to be defined.
That is, if you have an object $a of class A on page1.php and serialize this, you 'll get a string that refers to class A and contains all values of variabled contained in $a.
If you want to be able to unserialize this on page2.php, recreating $a of class A, the definition of class A must be present in page2.php.
This can be done for example by storing the class defintion of class A in an include file and including this file in both page1.php and page2.php.
classa.inc: class A {var $one = 1; function show_one() {echo $this - one;}} page1.php: include("classa.inc"); $a = new A; $s = serialize($a); / / store $s somewhere where page2.php can find it. $fp = fopen("store", "w"); fputs($fp, $s); fclose($fp); page2.php: / / this is needed for the unserialize to work properly. include("classa.inc"); $s = implode("", @file("store")); $a = unserialize($s); / / now use the function show_one() of the $a object. $a - show_one();
If you are using sessions and use session_register() to register objects, these objects are serialized automatically at the end of each PHP page, and are unserialized automatically on each of the following pages.
This basically means that these objects can show up on any of your pages once they become part of your session.
It is strongly recommended that you include the class definitions of all such registered objects on all of your pages, even if you do not actually use these classes on all of your pages.
If you don 't and an object is being unserialized without its class definition being present, it will lose its class association and become an object of class stdClass without any functions available at all, that is, it will become quite useless.
So if in the example above $a became part of a session by running session_register( "a"), you should include the file classa.inc on all of your pages, not only page1.php and page2.php.
Prev
Home
Next
Up
The magic functions __sleep and __wakeup
PHP Manual
Prev
Chapter 11.
Operators
Next
Remember basic arithmetic from school?
These work just like those.
Table 11-2.
Arithmetic Operators
Example
Result
Sum of $a and $b.
Subtraction
Difference of $a and $b.
Multiplication
Product of $a and $b.
Quotient of $a and $b.
Remainder of $a divided by $b.
The division operator ("/") returns a float value anytime, even if the two operands are integers (or strings that get converted to integers).
Prev
Home
Next
Operators
Up
Assignment Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
The only array operator in PHP is the + operator.
It appends the right handed array to the left handed, whereas duplicated keys are NOT overwritten.
$a = array( "a "= "apple", "b" = "banana"); $b = array("a "= "pear", "b" = "strawberry", "c "= "cherry"); $c = $a + $b; var_dump($c);
array( 3) {["a"]= string(5) "apple "["b"]= string(6) "banana" ["c"]= string(6) "cherry "}
Prev
Home
Next
String Operators
Up
Control Structures
PHP Manual
Prev
Chapter 11.
Operators
Next
The basic assignment operator is "=".
Your first inclination might be to think of this as "equal to".
Don 't.
It really means that the the left operand gets set to the value of the expression on the rights (that is, "gets set to").
The value of an assignment expression is the value assigned.
That is, the value of "$a = 3" is 3.
This allows you to do some tricky things:
$a = ($b = 4) + 5; / / $a is equal to 9 now, and $b has been set to 4.
In addition to the basic assignment operator, there are "combined operators" for all of the binary arithmetic and string operators that allow you to use a value in an expression and then set its value to the result of that expression.
For example:
$a = 3; $a += 5; / / sets $a to 8, as if we had said: $a = $a + 5; $b = "Hello "; $b .= "There !"; / / sets $b to "Hello There !", just like $b = $b. "There !";
Note that the assignment copies the original variable to the new one (assignment by value), so changes to one will not affect the other.
This may also have relevance if you need to copy something like a large array inside a tight loop.
PHP 4 supports assignment by reference, using the $var = $othervar; syntax, but this is not possible in PHP 3. 'Assignment by reference 'means that both variables end up pointing at the same data, and nothing is copied anywhere.
To learn more about references, please read References explained.
Prev
Home
Next
Arithmetic Operators
Up
Bitwise Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
Bitwise operators allow you to turn specific bits within an integer on or off.
If both the left - and right-hand parameters are strings, the bitwise operator will operate on the characters in this string.
?php echo 12 ^ 9; / / Outputs '5 'echo "12 "^ "9"; / / Outputs the Backspace character (ascii 8) / / ('1' (ascii 49)) ^ ('9 '(ascii 57)) = #8 echo "hallo" ^ "hello"; / / Outputs the ascii values #0 #4 #0 #0 #0 / / 'a' ^ 'e '= #4?
Table 11-3.
Bitwise Operators
Example
Result
And
Bits that are set in both $a and $b are set.
Or
Bits that are set in either $a or $b are set.
Xor
Bits that are set in $a or $b but not both are set.
Not
Bits that are set in $a are not set, and vice versa.
Shift left
Shift the bits of $a $b steps to the left (each step means "multiply by two")
Shift right
Shift the bits of $a $b steps to the right (each step means "divide by two")
Prev
Home
Next
Assignment Operators
Up
Comparison Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
Comparison operators, as their name implies, allow you to compare two values.
Table 11-4.
Comparison Operators
Example
Result
Equal
TRUE if $a is equal to $b.
Identical
TRUE if $a is equal to $b, and they are of the same type. (PHP 4 only)
Not equal
TRUE if $a is not equal to $b.
Not equal
TRUE if $a is not equal to $b.
Not identical
TRUE if $a is not equal to $b, or they are not of the same type. (PHP 4 only)
Less than
TRUE if $a is strictly less than $b.
Greater than
TRUE if $a is strictly greater than $b.
Less than or equal to
TRUE if $a is less than or equal to $b.
Greater than or equal to
TRUE if $a is greater than or equal to $b.
Another conditional operator is the "?:" (or ternary) operator, which operates as in C and many other languages.
(expr1)? (expr2): (expr3);
Prev
Home
Next
Bitwise Operators
Up
Error Control Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
PHP supports one error control operator: the at sign (@).
When prepended to an expression in PHP, any error messages that might be generated by that expression will be ignored.
If the track_errors feature is enabled, any error message generated by the expression will be saved in the variable $php_errormsg.
This variable will be overwritten on each error, so check early if you want to use it.
?php / * Intentional file error * / $my_file = @file ('non_existent_file') or die ("Failed opening file: error was '$php_errormsg'"); / / this works for any expression, not just functions: $value = @$cache[$key]; / / will not issue a notice if the index $key doesn't exist.?
Note:
The @-operator works only on expressions.
A simple rule of thumb is: if you can take the value of something, you can prepend the @ operator to it.
For instance, you can prepend it to variables, function and include() calls, constants, and so forth.
You cannot prepend it to function or class definitions, or conditional structures such as if and foreach, and so forth.
See also error_reporting().
Note:
The "@" error-control operator prefix will not disable messages that are the result of parse errors.
Warning
Currently the "@" error-control operator prefix will even disable error reporting for critical errors that will terminate script execution.
Among other things, this means that if you use "@" to suppress errors from a certain function and either it isn't available or has been mistyped, the script will die right there with no indication as to why.
Prev
Home
Next
Comparison Operators
Up
Execution Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
PHP supports one execution operator: backticks (``).
Note that these are not single-quotes!
PHP will attempt to execute the contents of the backticks as a shell command; the output will be returned (i.e., it won't simply be dumped to output; it can be assigned to a variable).
Note:
The backtick operator is disabled when safe mode is enabled or shell_exec() is disabled.
See also escapeshellcmd(), exec(), passthru(), popen(), shell_exec(), and system().
Prev
Home
Next
Error Control Operators
Up
Incrementing / Decrementing Operators
PHP Manual
Prev
Next
The precedence of an operator specifies how "tightly" it binds two expressions together.
For example, in the expression 1 + 5 * 3, the answer is 16 and not 18 because the multiplication ("*") operator has a higher precedence than the addition ("+") operator.
Parentheses may be used to force precedence, if necessary.
For instance: (1 + 5) * 3 evaluates to 18.
The following table lists the precedence of operators with the lowest-precedence operators listed first.
Table 11-1.
Operator Precedence
Operators
left
left
left
left
right
left
left
left
left
left
left
left
non-associative
== != === !==
non-associative
left
left
left
right
right
non-associative
Note:
Although! has a higher precedence than =, PHP will still allow expressions similar to the following: if (!$a = foo()), in which case the output from foo() is put into $a.
Prev
Home
Next
Expressions
Up
Arithmetic Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
PHP supports C-style pre - and post-increment and decrement operators.
Table 11-5.
Increment / decrement Operators
Example
Effect
Pre-increment
Increments $a by one, then returns $a.
Post-increment
Returns $a, then increments $a by one.
Pre-decrement
Decrements $a by one, then returns $a.
Post-decrement
Returns $a, then decrements $a by one.
Here 's a simple example script:
?php echo "h3 Postincrement / h3"; $a = 5; echo "Should be 5: ". $a+ +." br / \n"; echo "Should be 6: ". $a." br / \n"; echo "h3 Preincrement / h3"; $a = 5; echo "Should be 6: ". ++$a." br / \n"; echo "Should be 6: ". $a." br / \n"; echo "h3 Postdecrement / h3"; $a = 5; echo "Should be 5: ". $a- -." br / \n"; echo "Should be 4: ". $a." br / \n"; echo "h3 Predecrement / h3"; $a = 5; echo "Should be 4: ". --$a." br / \n"; echo "Should be 4: ". $a." br / \n";?
Prev
Home
Next
Execution Operators
Up
Logical Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
Table 11-6.
Logical Operators
Example
Result
And
TRUE if both $a and $b are TRUE.
Or
TRUE if either $a or $b is TRUE.
Xor
TRUE if either $a or $b is TRUE, but not both.
Not
TRUE if $a is not TRUE.
And
TRUE if both $a and $b are TRUE.
Or
TRUE if either $a or $b is TRUE.
The reason for the two different variations of "and" and "or "operators is that they operate at different precedences. (See Operator Precedence.)
Prev
Home
Next
Incrementing / Decrementing Operators
Up
String Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
There are two string operators.
The first is the concatenation operator ('.'), which returns the concatenation of its right and left arguments.
The second is the concatenating assignment operator ('.='), which appends the argument on the right side to the argument on the left side.
Please read Assignment Operators for more information.
$a = "Hello"; $b = $a. "World !"; / / now $b contains "Hello World! "$a = "Hello"; $a .= "World !"; / / now $a contains "Hello World! "
Prev
Home
Next
Logical Operators
Up
Array Operators
PHP Manual
Prev
Chapter 15.
References Explained
Next
As said before, references aren 't pointers.
That means, the following construct won 't do what you expect:
What happens is that $var in foo will be bound with $bar in caller, but then it will be re-bound with $GLOBALS[ "baz"].
There' s no way to bind $bar in the calling scope to something else using the reference mechanism, since $bar is not available in the function foo (it is represented by $var, but $var has only variable contents and not name-to-value binding in the calling symbol table).
Prev
Home
Next
What References Do
Up
Passing by Reference
PHP Manual
Prev
Next
References in PHP are a means to access the same variable content by different names.
They are not like C pointers, they are symbol table aliases.
Note that in PHP, variable name and variable content are different, so the same content can have different names.
The most close analogy is with Unix filenames and files - variable names are directory entries, while variable contents is the file itself.
References can be thought of as hardlinking in Unix filesystem.
Prev
Home
Next
References inside the constructor
Up
What References Do
PHP Manual
Prev
Chapter 15.
References Explained
Next
Returning by-reference is useful when you want to use a function to find which variable a reference should be bound to.
When returning references, use this syntax:
Note:
Unlike parameter passing, here you have to use in both places - to indicate that you return by-reference, not a copy as usual, and to indicate that reference binding, rather than usual assignment, should be done for $foo.
Prev
Home
Next
Passing by Reference
Up
Unsetting References
PHP Manual
Prev
Chapter 15.
References Explained
Next
Some constructs, like passing and returning by-reference, are mentioned above.
That means, this is the same as:
That means, for example, that unsetting $var won 't unset global variable.
In an object method, $this is always reference to the caller object.
Prev
Home
Next
Unsetting References
Up
PHP Manual
Prev
Chapter 15.
References Explained
Next
When you unset the reference, you just break the binding between variable name and variable content.
This does not mean that variable content will be destroyed.
For example:
Again, it might be useful to think about this as analogous to Unix unlink call.
Prev
Home
Next
Returning References
Up
Spotting References
PHP Manual
Prev
Chapter 15.
References Explained
Next
Meaning, when you do:
The same syntax can be used with functions, that return references, and with new operator (in PHP 4.0.4 and later):
$bar = new fooclass(); $foo = find_var ($bar);
Not using the operator causes a copy of the object to be made.
If you use $this in the class it will operate on the current instance of the class.
The assignment without will copy the instance (i.e. the object) and $this will operate on the copy, which is not always what is desired.
Usually you want to have a single instance to work with, due to performance and memory consumption issues.
While you can use the @ operator to mute any errors in the constructor when using it as @new, this does not work when using the new While you can use the @ operator to mute any errors in the constructor when using it as @new, this does not work when using the new statement.
The second thing references do is to pass variables by-reference.
Example:
The third thing reference can do is return by reference.
Prev
Home
Next
References Explained
Up
What References Are Not
PHP Manual
Prev
Chapter 7.
Types
Next
An array in PHP is actually an ordered map.
A map is a type that maps values to keys.
Because you can have another PHP-array as a value, you can also quite easily simulate trees.
Explanation of those structures is beyond the scope of this manual, but you 'll find at least one example for each of those structures.
An array can be created by the array() An array can be created by the array() language-construct.
It takes a certain number of comma-separated key = value pairs.
array( [key =] value,...) / / key is either string or nonnegative integer / / value can be anything
?php $arr = array( "foo "= "bar", 12 = true); echo $arr["foo"]; / / bar echo $arr[12]; / / 1?
A key is either an integer or a string.
There are no different indexed and associative array types in PHP, there is only one array type, which can both contain integer and string indices.
A value can be of any PHP type.
?php $arr = array( "somearray "= array(6 = 5, 13 = 9, "a" = 42)); echo $arr["somearray"][6]; / / 5 echo $arr["somearray"][13]; / / 9 echo $arr["somearray"]["a"]; / / 42?
If you omit a key, the maximum of the integer-indices is taken, and the new key will be that maximum + 1.
As integers can be negative, this is also true for negative indices.
Having e.g. the highest index being -6 will result in -5 being the new key.
If no integer-indices exist yet, the key will be 0 (zero).
If you specify a key that already has a value assigned to it, that value will be overwritten.
?php / / This array is the same as... array( 5 = 43, 32, 56, "b "= 12); / / ...this array array(5 = 43, 6 = 32, 7 = 56, "b" = 12);?
Using TRUE as a key will evalute to integer 1 Using TRUE as a key will evalute to integer 1 as key.
Using NULL as a key will evaluate to an empty string.
Using an emptry string as key will create (or overwrite) a key with an empty string and its value, it is not the same as using empty brackets.
You cannot use arrays or objects as keys.
You can also modify an existing array, by explicitly setting values in it.
This is done by assigning values to the array while specifying the key in brackets.
You can also omit the key, add an empty pair of brackets ("[]") to the variable-name in that case.
$arr[ key] = value; $arr[] = value; / / key is either string or nonnegative integer / / value can be anything
?php $arr = array( 5 = 1, 12 = 2); $arr[] = 56; / / This is the same as $arr[13] = 56; / / at this point of the script $arr["x"] = 42; / / This adds a new element to / / the array with key "x "unset($arr[5]); / / This removes the element from the array unset($arr); / / This deletes the whole array?
There are quite some useful function for working with arrays, see the array functions section.
The unset() function allows unsetting keys of an array.
Be aware that the array will NOT be reindexed.
If you only use "usual integer indices" (starting from zero, increasing by one), you can achive the reindex effect by using array_values().
?php $a = array( 1 = 'one', 2 = 'two', 3 = 'three'); unset($a[2]); / * will produce an array that would have been defined as $a = array(1 = 'one', 3 = 'three'); and NOT $a = array(1 = 'one', 2 = 'three'); * / $b = array_values($a); / / Now b is array(1 = 'one', 2 = 'three')?
The foreach control structure exists specifically for arrays.
It provides an easy way to traverse an array.
You should always use quotes around an associative array index.
But why is $foo[ bar] wrong?
You might have seen the following syntax in old scripts:
?php $foo[ bar] = 'enemy'; echo $foo[bar]; / / etc?
More examples to demonstrate this fact:
?php / / Let' s show all errors error_reporting(E_ALL); $arr = array('fruit '= 'apple', 'veggie' = 'carrot'); / / Correct print $arr['fruit']; / / apple print $arr['veggie']; / / carrot / / Incorrect.
Use of undefined constant fruit - assumed 'fruit' in... print $arr[fruit]; / / apple / / Let's define a constant to demonstrate what's going on.
We / / will assign value 'veggie' to a constant named fruit. define('fruit' ,'veggie'); / / Notice the difference now print $arr['fruit']; / / apple print $arr[fruit]; / / carrot / / The following is okay as it's inside a string.
When you turn error_reporting() up to show E_NOTICE level errors (such as setting it to E_ALL) then you will see these errors.
As stated in the syntax section, there must be an expression between the square brackets ('[' and ']').
?php echo $arr[ somefunc($bar)];?
?php $error_descriptions[ E_ERROR] = "A fatal error has occured"; $error_descriptions[E_WARNING] = "PHP issued a warning"; $error_descriptions[E_NOTICE] = "This is just an informal notice";?
?php $error_descriptions[ 1] = "A fatal error has occured"; $error_descriptions[2] = "PHP issued a warning"; $error_descriptions[8] = "This is just an informal notice";?
It works, because bar is due to its syntax expected to be a constant expression.
However, in this case no constant with the name bar exists.
At some point in the future, the PHP team might want to add another constant or keyword, or you may introduce another constant into your application, and then you get in trouble.
For example, you already cannot use the words empty and default this way, since they are special reserved keywords.
To reiterate, inside a double-quoted string, it' s valid to not surround array indexes with quotes so "$foo[bar] "is valid.
See the above examples for details on why as well as the section on variable parsing in strings.
If you convert an object If you convert an object to an array, you get the properties (member variables) of that object as the array's elements.
The keys are the member variable names.
If you convert a NULL value to an array, you get an empty array.
?php / / this $a = array( 'color '= 'red', 'taste' = 'sweet', 'shape '= 'round', 'name' = 'apple', 4 / / key will be 0); / / is completely equivalent with $a['color'] = 'red'; $a['taste'] = 'sweet'; $a['shape'] = 'round'; $a['name'] = 'apple'; $a[] = 4; / / key will be 0 $b[] = 'a'; $b[] = 'b'; $b[] = 'c'; / / will result in the array array(0 = 'a ', 1 = 'b', 2 = 'c'), / / or simply array('a', 'b', 'c')?
Using array()
?php / / Array as (property -)map $map = array ('version '= 4, 'OS' = 'Linux', 'lang '= 'english', 'short_tags' = true); / / strictly numerical keys $array = array (7, 8, 0, 156, -10); / / this is the same as array(0 = 7, 1 = 8,...) $switching = array (10, / / key = 0 5 = 6, 3 = 7, 'a '= 4, 11, / / key = 6 (maximum of integer-indices was 5) '8' = 2, / / key = 8 (integer!) '02 '= 77, / / key = '02' 0 = 12 / / the value 10 will be overwritten by 12); / / empty array $empty = array();?
Example 7-5.
Collection
?php $colors = array( 'red', 'blue', 'green', 'yellow'); foreach ($colors as $color) {echo "Do you like $color?\n";} / * output:
Do you like red?
Do you like blue?
Do you like green?
Do you like yellow? * /?
Note that it is currently not possible to change the values of the array directly in such a loop.
A workaround is the following:
Example 7-6.
Collection
?php foreach ($colors as $key = $color) {/ / won't work: / /$color = strtoupper($color); / / works: $colors[$key] = strtoupper($color);} print_r($colors); / * output:
Array ([0] = RED [1] = BLUE [2] = GREEN [3] = YELLOW) * /?
This example creates a one-based array.
Example 7-7.
One-based index
?php $firstquarter = array( 1 = 'January', 'February', 'March'); print_r($firstquarter); / * output:
Array ([1] = 'January '[2] = 'February' [3] = 'March ') * /
Example 7-8.
Filling an array
/ / fill an array with all items from a directory $handle = opendir( '.'); while ($file = readdir($handle)) {$files[] = $file;} closedir($handle);?
Arrays are ordered.
See the array functions section for more information.
You can count the number of items in an array using the count() function.
Example 7-9.
Sorting array
?php sort( $files); print_r($files);?
Because the value of an array can be everything, it can also be another array.
Example 7-10.
Recursive and multi-dimensional arrays
You should be aware, that array assignment always involves value copying.
?php $arr1 = array( 2, 3); $arr2 = $arr1; $arr2[] = 4; / / $arr2 is changed, / / $arr1 is still array(2,3) $arr3 = $arr1; $arr3[] = 4; / / now $arr1 and $arr3 are the same?
Prev
Home
Next
Strings
Up
Objects
PHP Manual
Prev
Chapter 7.
Types
Next
This is the easiest type.
A boolean A boolean expresses a truth value.
It can be either TRUE or FALSE.
Note:
The boolean type was introduced in PHP 4.
To specify a boolean literal, use either the keyword TRUE or FALSE.
Both are case-insensitive.
?php $foo = True; / / assign the value TRUE to $foo?
Usually you use some kind of operator which returns a boolean value, and then pass it on to a control structure.
?php / / == is an operator which test / / equality and returns a boolean if ($action == "show_version") {echo "The version is 1.23";} / / this is not necessary... if ($show_separators == TRUE) {echo "hr \n";} / / ...because you can simply type if ($show_separators) {echo" hr \n";}?
To explicitly convert a value to boolean, use either the (bool) or the (boolean) cast.
However, in most cases you do not need to use the cast, since a value will be automatically converted if an operator, function or control structure requires a boolean argument.
See also Type Juggling.
When converting to boolean, the following values are considered FALSE:
the boolean FALSE itself
the integer 0 (zero)
the float 0.0 (zero)
the empty string, and the string "0"
an array with zero elements
an object with zero member variables
the special type NULL (including unset variables)
Warning
-1 is considered TRUE, like any other non-zero (whether negative or positive) number!
?php echo gettype( (bool) ""); / / bool(false) echo gettype((bool) 1); / / bool(true) echo gettype((bool) -2); / / bool(true) echo gettype((bool) "foo"); / / bool(true) echo gettype((bool) 2.3e5); / / bool(true) echo gettype((bool) array(12)); / / bool(true) echo gettype((bool) array()); / / bool(false)?
Prev
Home
Next
Types
Integers
PHP Manual
Prev
Chapter 7.
Types
Next
Floating point numbers (AKA "floats", "doubles "or "real numbers") can be specified using any of the following syntaxes:
?php $a = 1.234; $b = 1.2e3; $c = 7E-10;?
LNUM [0-9] + DNUM ([0-9]*[\ .]{LNUM}) _BAR_ ({LNUM}[\ .][0-9]*) EXPONENT_DNUM (({LNUM} _BAR_ {DNUM}) [eE][+ -]? {LNUM})
It is quite usual that simple decimal fractions like 0.1 or 0.7 cannot be converted into their internal binary counterparts without a little loss of precision.
This can lead to confusing results: for example, floor( (0.1+0.7)*10) will usually return 7 instead of the expected 8 as the result of the internal representation really being something like 7.9999999999....
For instance, 1 / 3 in decimal form becomes 0.3333333....
So never trust floating number results to the last digit and never compare floating point numbers for equality.
For information on when and how strings are converted to floats, see the section titled String conversion to numbers.
See the Converting to integer section for more information.
Prev
Home
Next
Integers
Up
Strings
PHP Manual
Prev
Next
PHP supports eight primitive types.
Four scalar types:
boolean
integer
floating-point number (float)
string
array
object
resource
mixed
callback
The type of a variable is usually not set by the programmer; rather, it is decided at runtime by PHP depending on the context in which that variable is used.
If you want to check out the type and value of a certain expression, use var_dump().
Note:
If you simply want a human-readable representation of the type for debugging, use gettype().
Some examples:
?php $bool = TRUE; / / a boolean $str = "foo"; / / a string $int = 12; / / an integer echo gettype($bool); / / prints out "boolean "echo gettype($str); / / prints out "string" / / If this is an integer, increment it by four if (is_int($int)) {$int += 4;} / / If $bool is a string, print it out / / (does not print out anything) if (is_string($bool)) {echo "String: $bool";}?
If you would like to force a variable to be converted to a certain type, you may either cast the variable or use the settype() function on it.
Note that a variable may be evaluated with different values in certain situations, depending on what type it is at the time.
For more information, see the section on Type Juggling.
Prev
Home
Next
Comments
Up
Booleans
PHP Manual
Prev
Chapter 7.
Types
Next
An integer is a number of the set Z = {..., -2, -1, 0, 1, 2,...}.
See also:
Arbitrary length integers and Floating point numbers
Integers can be specified in decimal (10-based), hexadecimal (16-based) or octal (8-based) notation, optionally preceded by a sign (- or +).
If you use the octal notation, you must precede the number with a 0 (zero), to use hexadecimal notation precede the number with 0x.
Example 7-1.
Integer literals
?php decimal: [1-9][0-9]* _BAR_ 0 hexadecimal:
If you specify a number beyond the bounds of the integer type, it will be interpreted as a float If you specify a number beyond the bounds of the integer type, it will be interpreted as a float instead.
Also, if you perform an operation that results in a number beyond the bounds of the integer type, a float will be returned instead.
?php $large_number = 2147483647; var_dump($large_number); / / output: int(2147483647) $large_number = 2147483648; var_dump($large_number); / / output: float(2147483648) / / this goes also for hexadecimal specified integers: var_dump (0x80000000); / / output: float(2147483648) $million = 1000000; $large_number = 50000 * $million; var_dump($large_number); / / output: float(50000000000)?
Warning
Unfortunately, there was a bug in PHP so that this does not always work correctly when there are negative numbers involved.
For example: when you do -50000 * $million, the result will be -429496728.
However, when both operands are positive there is no problem.
This is solved in PHP 4.1.0.
1 / 2 yields the float 0.5.
You can cast the value to an integer to always round it downwards, or you can use the round() function.
?php var_dump( 25 / 7); / / float(3.5714285714286) var_dump((int) (25 / 7)); / / int(3) var_dump(round(25 / 7)); / / float(4)?
To explicitly convert a value to integer, use either the (int) or the (integer) cast.
You can also convert a value to integer with the function intval().
See also type-juggling.
FALSE will yield 0 (zero), and TRUE will yield 1 (one).
When converting from float to integer, the number will be rounded towards zero.
If the float is beyond the boundaries of integer (usually + / - 2.15e+9 = 2^31), the result is undefined, since the float hasn't got enough precision to give an exact integer result.
No warning, not even a notice will be issued in this case!
Warning
Never cast an unknown fraction to integer, as this can sometimes lead to unexpected results.
?php echo (int) ((0.1+0.7) * 10); / / echoes 7!?
See String conversion to numbers
Caution
Behaviour of converting to integer is undefined for other types.
Currently, the behaviour is the same as if the value was first converted to boolean.
However, do not rely on this behaviour, as it can change without notice.
Prev
Home
Next
Booleans
Up
Floating point numbers
PHP Manual
Prev
Chapter 7.
Types
Next
The special NULL value represents that a variable has no value.
NULL is the only possible value of type NULL.
Note:
The null type was introduced in PHP 4
A variable is considered to be NULL if
it has been assigned the constant NULL.
it has not been set to any value yet.
it has been unset().
There is only one value of type NULL, and that is the case-insensitive keyword NULL.
?php $var = NULL;?
See also is_null() and unset().
Prev
Home
Next
Up
Pseudo-types used in this documentation
PHP Manual
Prev
Chapter 7.
Types
Next
?php class foo {function do_foo() {echo "Doing foo .";}} $bar = new foo; $bar - do_foo();?
?php $obj = (object) 'ciao'; echo $obj - gt;scalar; / / outputs'ciao '?
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 7.
Types
Next
A resource is a special variable, holding a reference to an external resource.
Resources are created and used by special functions.
See the appendix for a listing of all these functions and the corresponding resource types.
Note:
The resource type was introduced in PHP 4
As resource types hold special handlers to opened files, database connections, image canvas areas and the like, you cannot convert any value to a resource.
Due to the reference-counting system introduced with PHP4' s Zend-engine, it is automatically detected when a resource is no longer referred to (just like Java).
For this reason, it is rarely ever necessary to free the memory manually by using some free_result function.
Note:
Persistent database links are special, they are not destroyed by the garbage collector.
See also the section about persistent connections.
Prev
Home
Next
Objects
Up
PHP Manual
Prev
Chapter 7.
Types
Next
A string is series of characters.
In PHP, a character is the same as a byte, that is, there are exactly 256 different characters possible.
This also implies that PHP has no native support of Unicode.
See utf8_encode() and utf8_decode() for some Unicode support.
It is no problem for a string to become very large.
There is no practical bound to the size of strings imposed by PHP, so there is no reason at all to worry about long strings.
A string literal can be specified in three different ways.
double quoted
heredoc syntax
The easiest way to specify a simple string is to enclose it in single quotes (the character ').
To specify a literal single quote, you will need to escape it with a backslash (\), like in many other languages.
If a backslash needs to occur before a single quote or at the end of the string, you need to double it.
Note that if you try to escape any other character, the backslash will also be printed!
So usually there is no need to escape the backslash itself.
Note:
In PHP 3, a warning will be issued at the E_NOTICE level when this happens.
Note:
Unlike the two other syntaxes, variables will not be expanded when they occur in single quoted strings.
You deleted C:\*.*? echo 'You deleted C:\\*.* ?'; / / Outputs:
You deleted C:\*.*? echo 'You deleted C:\*.* ?'; / / Outputs:
Variables do not $expand $either echo 'Variables do not $expand $either';?
Table 7-1.
Escaped characters
sequence
linefeed (LF or 0x0A (10) in ASCII)
carriage return (CR or 0x0D (13) in ASCII)
horizontal tab (HT or 0x09 (9) in ASCII)
backslash
dollar sign
double-quote
the sequence of characters matching the regular expression is a character in octal notation
the sequence of characters matching the regular expression is a character in hexadecimal notation
Again, if you try to escape any other character, the backslash will be printed too!
See string parsing for details.
Another way to delimit strings is by using heredoc syntax ("").
One should provide an identifier after, then the string, and then the same identifier to close the quotation.
The closing identifier must begin in the first column of the line.
Warning
It is very important to note that the line with the closing identifier contains no other characters, except possibly a semicolon (;).
That means especially that the identifier may not be indented, and there may not be any spaces or tabs after or before the semicolon.
This is \r on Macintosh for example.
If this rule is broken and the closing identifier is not "clean" then it's not considered to be a closing identifier and PHP will continue looking for one.
If in this case a proper closing identifier is not found then a parse error will result with the line number being at the end of the script.
This means that you do not need to escape quotes in your here docs, but you can still use the escape codes listed above.
Variables are expanded, but the same care must be taken when expressing complex variables inside a here doc as with strings.
Example 7-2.
Heredoc string quoting example
?php $str = EOD Example of string spanning multiple lines using heredoc syntax.
EOD; / * More complex example, with variables. * / class foo {var $foo; var $bar; function foo() {$this - foo = 'Foo'; $this - bar = array('Bar1', 'Bar2', 'Bar3');}} $foo = new foo(); $name = 'MyName'; echo EOT My name is "$name ".
I am printing some $foo - foo.
Now, I am printing some {$foo - bar[1]}.
This should print a capital 'A': \x41 EOT;?
Note:
Heredoc support was added in PHP 4.
There are two types of syntax, a simple one and a complex one.
The simple syntax is the most common and convenient, it provides a way to parse a variable, an array value, or an object property.
The complex syntax was introduced in PHP 4, and can be recognised by the curly braces surrounding the expression.
If a dollar sign ($) is encountered, the parser will greedily take as much tokens as possible to form a valid variable name.
Enclose the variable name in curly braces if you want to explicitly specify the end of the name.
Similarly, you can also have an array index or an object property parsed.
For object properties the same rules apply as to simple variables, though with object properties there doesn 't exist a trick like the one with variables.
This results in a parse error. echo "A banana is $fruits['banana'] ."; / / Works echo "A banana is". $fruits['banana']. "."; / / Works echo "This square is $square - width meters broad ."; / / Won't work.
For anything more complex, you should use the complex syntax.
In fact, you can include any value that is in the namespace in strings with this syntax.
Since you can' t escape '{', this syntax will only be recognised when the $is immediately following the {. (Use "{\$ "or "\{$" to get a literal "{$").
?php / / Let' s show all errors error_reporting(E_ALL); $great = 'fantastic'; / / Won't work, outputs:
This is {fantastic} echo "This is {$great}"; / / Works, outputs:
This is fantastic echo "This is {$great}"; echo "This is ${great}"; / / Works echo "This square is {$square - width}00 centimeters broad ."; / / Works echo "This works: {$arr[4][3]}"; / / This is wrong for the same reason as $foo[bar] is wrong / / outside a string.
In otherwords, it will still work but / / because PHP first looks for a constant named foo, it will / / throw an error of level E_NOTICE (undefined constant). echo "This is wrong: {$arr[foo][3]}"; / / Works.
Characters within strings may be accessed by specifying the zero-based offset of the desired character after the string in curly braces.
For backwards compatibility, you can still use array-braces for the same purpose.
Example 7-3.
?php / / Get the first character of a string $str = 'This is a test .'; $first = $str{0}; / / Get the third character of a string $third = $str{2}; / / Get the last character of a string. $str = 'This is still a test .'; $last = $str{strlen($str)-1};?
Note that the '+' (addition) operator will not work for this.
Please see String operators for more information.
There are a lot of useful functions for string modification.
See the string functions section for general functions, the regular expression functions for advanced find replacing (in two tastes:
Perl and POSIX extended).
Finally, if you still didn' t find what you're looking for, see also the character type functions.
String conversion is automatically done in the scope of an expression for you where a string is needed.
Reading the manual sections on Types and Type Juggling will make the following clearer.
A boolean TRUE value is converted to the string "1", the FALSE value is represented as "" (empty string).
An integer or a floating point number (float) is converted to a string representing the number with its digits (including the exponent part for floating point numbers).
Arrays are always converted to the string "Array", so you cannot dump out the contents of an array with echo() or print() to see what is inside them.
See below for tips on dumping / viewing the entire contents.
Objects are always converted to the string "Object".
If you would like to find out the class name of which an object is an instance of, use get_class().
If you would like to get the type of the resource, use get_resource_type().
As you can see above, printing out the arrays, objects or resources does not provide you any useful information about the values themselfs.
You can also convert PHP values to strings to store them permanently.
This method is called serialization, and can be done with the function serialize().
You can also serialize PHP values to XML structures, if you have WDDX support in your PHP setup.
The string will evaluate as a float if it contains any of the characters' .', 'e', or'E '.
Otherwise, it will evaluate as an integer.
If the string starts with valid numeric data, this will be the value used.
Otherwise, the value will be 0 (zero).
Valid numeric data is an optional sign, followed by one or more digits (optionally containing a decimal point), followed by an optional exponent.
?php $foo = 1 + "10.5"; / / $foo is float (11.5) $foo = 1 + "-1.3e3"; / / $foo is float (-1299) $foo = 1 + "bob-1.3e3"; / / $foo is integer (1) $foo = 1 + "bob3"; / / $foo is integer (1) $foo = 1 + "10 Small Pigs"; / / $foo is integer (11) $foo = 4 + "10.2 Little Piggies"; / / $foo is float (14.2) $foo = "10.0 pigs" + 1; / / $foo is float (11) $foo = "10.0 pigs "+ 1.0; / / $foo is float (11)?
For more information on this conversion, see the Unix manual page for strtod( 3).
?php echo "\$foo==$foo; type is". gettype ($foo). "br / \n";?
Do not expect to get the code of one character by converting it to integer (as you would do in C for example).
Use the functions ord() and chr() to convert between charcodes and characters.
Prev
Home
Next
Floating point numbers
Up
PHP Manual
Prev
Chapter 7.
Types
Next
PHP does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which that variable is used.
That is to say, if you assign a string value to variable $var, $var becomes a string.
If you then assign an integer value to $var, it becomes an integer.
An example of PHP' s automatic type conversion is the addition operator '+ '.
If any of the operands is a float, then all operands are evaluated as floats, and the result will be a float.
Otherwise, the operands will be interpreted as integers, and the result will also be an integer.
Note that this does NOT change the types of the operands themselves; the only change is in how the operands are evaluated.
?php $foo = "0"; / / $foo is string (ASCII 48) !- - bad example, no real operator (must be used with variable, modifies it too) $foo++; / / $foo is the string "1" (ASCII 49) - - $foo += 2; / / $foo is now an integer (2) $foo = $foo + 1.3; / / $foo is now a float (3.3) $foo = 5 + "10 Little Piggies"; / / $foo is integer (15) $foo = 5 + "10 Small Pigs"; / / $foo is integer (15) !- - TODO: explain ++ / - - behaviour with strings examples: ++'001 '= '002' ++'abc '= 'abd' ++'xyz '= 'xza' ++'9.9 '= '9.0' ++'-3 '= '-4' - -'9 '= 8 (integer!) - -'5.5' = '5.5 '- -'-9' = -10 (integer) - -'09 '= 8 (integer) - -'abc' = 'abc '- -?
If the last two examples above seem odd, see String conversion to numbers.
If you wish to force a variable to be evaluated as a certain type, see the section on Type casting.
If you wish to change the type of a variable, see settype().
If you would like to test any of the examples in this section, you can use the var_dump() function.
Note:
The behaviour of an automatic conversion to array is currently undefined.
?php $a = "1"; / / $a is a string $a[0] = "f"; / / What about string offsets?
What happens??
Since PHP (for historical reasons) supports indexing into strings via offsets using the same syntax as array indexing, the example above leads to a problem: should $a become an array with its first element being "f", or should "f "become the first character of the string $a?
The current versions of PHP interpret the second assignment as a string offset identification, so $a becomes "f", the result of this automatic conversion however should be considered undefined.
PHP 4 introduced the new curly bracket syntax to access characters in string, use this syntax instead of the one presented above:
?php $a = "abc"; / / $a is a string $a{1} = "f"; / / $a is now "afc"?
Type casting in PHP works much as it does in C: the name of the desired type is written in parentheses before the variable which is to be cast.
?php $foo = 10; / / $foo is an integer $bar = (boolean) $foo; / / $bar is a boolean?
The casts allowed are:
(int), (integer) - cast to integer
(bool), (boolean) - cast to boolean
(string) - cast to string
(object) - cast to object
Note that tabs and spaces are allowed inside the parentheses, so the following are functionally equivalent:
?php $foo = (int) $bar; $foo = (int) $bar;?
Instead of casting a variable to string, you can also enclose the variable in double quotes.
?php $foo = 10; / / $foo is an integer $str = "$foo"; / / $str is a string $fst = (string) $foo; / / $fst is also a string / / This prints out that "they are the same "if ($fst === $str) {echo "they are the same";}?
It may not be obvious exactly what will happen when casting between certain types.
Converting to boolean
Converting to float
Converting to array
Converting to resource
Prev
Home
Next
Pseudo-types used in this documentation
Up
Variables
PHP Manual
Prev
Chapter 8.
Variables
Next
There are many ways to access this information, for example:
Example 8-2.
form action=" foo.php "method="post" Name: input type="text "name="username" br Email: input type="text "name="email" br input type="submit "name="submit" value="Submit me! "/ form
Some examples are:
Example 8-3.
Accessing data from a simple POST HTML form
?php / / Available since PHP 4.1.0 print $_POST[ 'username']; print $_REQUEST['username']; import_request_variables('p', 'p_'); print $p_username; / / Available since PHP 3. print $HTTP_POST_VARS['username']; / / Available if the PHP directive register_globals = on.
Using a GET form is similar except you 'll use the appropriate GET predefined variable instead.
GET also applies to the QUERY_STRING (the information after the '?' in an URL).
So, for example, http: / /www.example.com / test.php?id=3 contains GET data which is accessible with $_GET[ 'id'].
Note:
Superglobal arrays, like $_POST and $_GET, became available in PHP 4.1.0
As shown, before PHP 4.2.0 the default value for register_globals was on.
The PHP community is encouraging all to not rely on this directive as it' s preferred to assume it's off and code accordingly.
Note:
If turned on, value (It's "PHP !") will automagically become (It\'s \"PHP!\").
Escaping is needed for DB insertion.
See also addslashes(), stripslashes() and magic_quotes_sybase.
You may, for example, group related variables together, or use this feature to retrieve values from a multiple select input.
For example, let 's post a form to itself and upon submission display the data:
More complex form variables
?php if ($HTTP_POST_VARS['action'] == 'submitted') {print 'pre'; print_r($HTTP_POST_VARS); print 'a href="'. $HTTP_SERVER_VARS['PHP_SELF'] .' "Please try again / a'; print '/ pre';} else {? form action=" ?php echo $HTTP_SERVER_VARS['PHP_SELF'];? "method="post" Name: input type="text "name="personal[name]" br Email: input type="text "name="personal[email]" br Beer: br select multiple name="beer[] "option value="warthog" Warthog / option option value="guinness "Guinness / option option value="stuttgarter" Stuttgarter Schwabenbräu / option / select br input type="hidden "name="action" value="submitted "input type="submit" name="submit "value="submit me!" / form ?php}?
In PHP 4, no such restriction applies.
When submitting a form, it is possible to use an image instead of the standard submit button with a tag like:
input type=" image "src="image.gif" name="sub "
When the user clicks somewhere on the image, the accompanying form will be transmitted to the server with two additional variables, sub_x and sub_y.
These contain the coordinates of the user click within the image.
The experienced may note that the actual variable names sent by the browser contains a period rather than an underscore, but PHP converts the period to an underscore automatically.
PHP transparently supports HTTP cookies as defined by Netscape 's Spec.
You can set cookies using the setcookie() function.
Cookies are part of the HTTP header, so the SetCookie function must be called before any output is sent to the browser.
This is the same restriction as for the header() function.
Cookie data is then available in the appropriate cookie data arrays, such as $_COOKIE, $HTTP_COOKIE_VARS as well as in $_REQUEST.
If you wish to assign multiple values to a single cookie variable, you may assign it as an array.
For example:
?php setcookie( "MyCookie[foo]", "Testing 1", time()+3600); setcookie("MyCookie[bar]", "Testing 2", time()+3600);?
That will create two seperate cookies although MyCookie will now be a single array in your script.
If you want to set just one cookie with multiple values, consider using serialize() or explode() on the value first.
Note that a cookie will replace a previous cookie by the same name in your browser unless the path or domain is different.
So, for a shopping cart application you may want to keep a counter and pass this along. i.e.
A setcookie() example
?php $count++; setcookie("count", $count, time()+3600); setcookie("Cart[$count]", $item, time()+3600);?
Typically, PHP does not alter the names of variables when they are passed into a script.
However, it should be noted that the dot (period, full stop) is not a valid character in a PHP variable name.
For the reason, look at it:
?php $varname.ext; / * invalid variable name * /?
For this reason, it is important to note that PHP will automatically replace any dots in incoming variable names with underscores.
Because PHP determines the types of variables and converts them (generally) as needed, it is not always obvious what type a given variable is at any one time.
See also the chapter on Types.
Prev
Home
Next
Variable variables
Up
Constants
PHP Manual
Prev
Next
Variables in PHP are represented by a dollar sign followed by the name of the variable.
The variable name is case-sensitive.
Variable names follow the same rules as other labels in PHP.
A valid variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores.
As a regular expression, it would be expressed thus: '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
Note:
For our purposes here, a letter is a-z, A-Z, and the ASCII characters from 127 through 255 (0x7f-0xff).
?php $var = "Bob"; $Var = "Joe"; echo "$var, $Var"; / / outputs "Bob, Joe" $4site = 'not yet'; / / invalid; starts with a number $_4site = 'not yet'; / / valid; starts with an underscore $täyte = 'mansikka'; / / valid; 'ä 'is ASCII 228.?
In PHP 3, variables are always assigned by value.
That is to say, when you assign an expression to a variable, the entire value of the original expression is copied into the destination variable.
This means, for instance, that after assigning one variable 's value to another, changing one of those variables will have no effect on the other.
For more information on this kind of assignment, see the chapter on Expressions.
PHP 4 offers another way to assign values to variables: assign by reference.
This means that the new variable simply references (in other words, "becomes an alias for "or "points to") the original variable.
Changes to the new variable affect the original, and vice versa.
This also means that no copying is performed; thus, the assignment happens more quickly.
However, any speedup will likely be noticed only in tight loops or when assigning large arrays or objects.
To assign by reference, simply prepend an ampersand () to the beginning of the variable which is being assigned (the source variable).
For instance, the following code snippet outputs' My name is Bob 'twice:
?php $foo = 'Bob'; / / Assign the value'Bob' to $foo $bar = $foo; / / Reference $foo via $bar. $bar = "My name is $bar"; / / Alter $bar... echo $bar; echo $foo; / / $foo is altered too.?
?php $foo = 25; $bar = $foo; / / This is a valid assignment. $bar = (24 * 7); / / Invalid; references an unnamed expression. function test() {return 25;} $bar = test(); / / Invalid.?
For example, in Perl 'Z'+1 turns into'AA', while in C'Z'+1 turns into '[' {ord('Z') == 90, ord('[') == 91).
Arithmetric Operations on Character Variables
X Y Z AA AB AC * /?
Prev
Home
Next
Type Juggling
Up
Predefined variables
PHP Manual
Prev
Chapter 8.
Variables
Next
PHP provides a large number of predefined variables to any script which it runs.
Many of these variables, however, cannot be fully documented as they are dependent upon which server is running, the version and setup of the server, and other factors.
Some of these variables will not be available when PHP is run on the command line.
For a listing of these variables, please see the section on Reserved Predefined Variables.
Warning
In PHP 4.2.0 and later, the default value for the PHP directive register_globals is off.
This is a major change in PHP.
Having register_globals off affects the set of predefined variables available in the global scope.
For example, to get DOCUMENT_ROOT you' ll use $_SERVER['DOCUMENT_ROOT'] instead of $DOCUMENT_ROOT, or $_GET['id'] from the URL http: / /www.example.com / test.php?id=3 instead of $id, or $_ENV['HOME'] instead of $HOME.
For related information on this change, read the configuration entry for register_globals, the security chapter on Using Register Globals, as well as the PHP 4.1.0 and 4.2.0 Release Announcements.
Using the available PHP Reserved Predefined Variables, like the superglobal arrays, is preferred.
From version 4.1.0 onward, PHP provides an additional set of predefined arrays containing variables from the web server (if applicable), the environment, and user input.
These new arrays are rather special in that they are automatically global--i.e., automatically available in every scope.
For this reason, they are often known as' autoglobals' or'superglobals'. (There is no mechanism in PHP for user-defined superglobals.) The superglobals are listed below; however, for a listing of their contents and further discussion on PHP predefined variables and their natures, please see the section Reserved Predefined Variables.
Also, you' ll notice how the older predefined variables ($HTTP_*_VARS) still exist.
Variable variables:
Superglobals cannot be used as variable variables.
If certain variables in variables_order are not set, their appropriate PHP predefined arrays are also left empty.
PHP Superglobals
Contains a reference to every variable which is currently available within the global scope of the script.
The keys of this array are the names of the global variables. $GLOBALS has existed since PHP 3.
Variables set by the web server or otherwise directly related to the execution environment of the current script.
Analogous to the old $HTTP_SERVER_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP GET.
Analogous to the old $HTTP_GET_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP POST.
Analogous to the old $HTTP_POST_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP cookies.
Analogous to the old $HTTP_COOKIE_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP post file uploads.
Analogous to the old $HTTP_POST_FILES array (which is still available, but deprecated).
See POST method uploads for more information.
Variables provided to the script via the environment.
Analogous to the old $HTTP_ENV_VARS array (which is still available, but deprecated).
Variables provided to the script via any user input mechanism, and which therefore cannot be trusted.
The presence and order of variable inclusion in this array is defined according to the variables_order configuration directive.
This array has no direct analogue in versions of PHP prior to 4.1.0.
See also import_request_variables().
Note:
When running on the command line, this will not include the argv and argc entries; these are present in the $_SERVER array.
Variables which are currently registered to a script 's session.
Analogous to the old $HTTP_SESSION_VARS array (which is still available, but deprecated).
See the Session handling functions section for more information.
Prev
Home
Next
Variables
Up
Variable scope
PHP Manual
Prev
Chapter 8.
Variables
Next
For the most part all PHP variables only have a single scope.
For example:
Here the $a variable will be available within the included b.inc Here the $a variable will be available within the included b.inc script.
However, within user-defined functions a local function scope is introduced.
Any variable used inside a function is by default limited to the local function scope.
?php $a = 1; / * global scope * / function Test() {echo $a; / * reference to local scope variable * /} Test();?
This script will not produce any output because the echo statement refers to a local version of the $a variable, and it has not been assigned a value within this scope.
You may notice that this is a little bit different from the C language in that global variables in C are automatically available to functions unless specifically overridden by a local definition.
In PHP global variables must be declared global inside a function if they are going to be used in that function.
?php $a = 1; $b = 2; function Sum() {global $a, $b; $b = $a + $b;} Sum(); echo $b;?
By declaring $a and $b By declaring $a and $b global within the function, all references to either variable will refer to the global version.
There is no limit to the number of global variables that can be manipulated by a function.
A second way to access variables from the global scope is to use the special PHP-defined $GLOBALS array.
The previous example can be rewritten as:
The $GLOBALS array is an associative array with the name of the global variable being the key and the contents of that variable being the value of the array element.
Here 's an example demonstrating the power of superglobals:
?php function test_global() {/ / Most predefined variables aren't "super "and require / / 'global 'to be available to the functions local scope. global $HTTP_POST_VARS; print $HTTP_POST_VARS['name']; / / Superglobals are available in any scope and do / / not require'global'.
Another important feature of variable scoping is the static Another important feature of variable scoping is the static variable.
Consider the following example:
This function is quite useless since every time it is called it sets $a to 0 and prints "0".
To make a useful counting function which will not lose track of the current count, the $a variable is declared static:
?php function Test() {static $a = 0; echo $a; $a++;}?
Now, every time the Test() function is called it will print the value of $a and increment it.
A recursive function is one which calls itself.
You must make sure you have an adequate way of terminating the recursion.
?php function Test() {static $count = 0; $count++; echo $count; if ($count 10) {Test ();} $count--;}?
The Zend Engine 1, driving PHP4, implements the static and global modifier for variables in terms of references.
This can lead to unexpected behaviour which the following example addresses:
?php function test_global_ref() {global $obj; $obj = new stdclass;} function test_global_noref() {global $obj; $obj = new stdclass;} test_global_ref(); var_dump($obj); test_global_noref(); var_dump($obj);?
NULL object( stdClass)(0) {}
References are not stored statically:
Executing this example will result in the following output:
NULL Static object:
NULL Static object: object( stdClass)(1) {["property"]= int(1)}
This example demonstrates that when assigning a reference to a static variable, it' s not remembered when you call the get_instance_ref() function a second time.
Prev
Home
Next
Predefined variables
Up
Variable variables
PHP Manual
Prev
Chapter 8.
Variables
Next
Sometimes it is convenient to be able to have variable variable names.
That is, a variable name which can be set and used dynamically.
A normal variable is set with a statement such as:
?php $a = "hello";?
A variable variable takes the value of a variable and treats that as the name of a variable.
In the above example, hello, can be used as the name of a variable by using two dollar signs. i.e.
?php $$a = "world";?
At this point two variables have been defined and stored in the PHP symbol tree: $a with contents "hello" and $hello with contents "world ".
Therefore, this statement:
?php echo "$a ${$a}";?
produces the exact same output as:
?php echo "$a $hello";?
i.e. they both produce: hello world.
In order to use variable variables with arrays, you have to resolve an ambiguity problem.
The syntax for resolving this ambiguity is: ${$a[1]} for the first case and ${$a}[1] for the second.
Please note that variable variables cannot be used with PHP 's Superglobal arrays.
If you are looking for a way to handle availability of superglobals and the old HTTP_*_VARS, you might want to try referencing them.
Prev
Home
Next
Variable scope
Up
Variables from outside PHP
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Warning
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Publications about PHP
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
Example B-1.
Prev
Home
Next
Up
Migrating from PHP / FI 2 to PHP 3
PHP Manual
Prev
Next
PHP 3.0 is rewritten from the ground up.
It has a proper parser that is much more robust and consistent than 2.0 's.
3.0 is also significantly faster, and uses less memory.
However, some of these improvements have not been possible without compatibility changes, both in syntax and functionality.
In addition, PHP' s developers have tried to clean up both PHP's syntax and semantics in version 3.0, and this has also caused some incompatibilities.
In the long run, we believe that these changes are for the better.
This chapter will try to guide you through the incompatibilities you might run into when going from PHP / FI 2.0 to PHP 3.0 and help you resolve them.
New features are not mentioned here unless necessary.
A conversion program that can automatically convert your old PHP / FI 2.0 scripts exists.
It can be found in the convertor subdirectory of the PHP 3.0 distribution.
This program only catches the syntax changes though, so you should read this chapter carefully anyway.
Prev
Home
Next
Up
Start / end tags
PHP Manual
Prev
Prev
Home
Translations
Up
PHP Manual
Prev
Next
The current possible PCRE modifiers are listed below.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix E.
Next
Prev
Home
Next
Up
List of Function Aliases
PHP Manual
Prev
Next
Example E-1.
Example E-2.
Table E-1.
Warning
Example E-3.
Example E-4.
Example E-5.
Example E-6.
Example E-7.
Example E-8.
Example E-9.
Prev
Home
Next
Debugger Protocol
Up
PHP Manual
Prev
Next
PHP, which stands for "PHP:
Hypertext Preprocessor "is a widely-used Open Source general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.
Its syntax draws upon C, Java, and Perl, and is easy to learn.
The main goal of the language is to allow web developers to write dynamically generated webpages quickly, but you can do much more with PHP.
This manual consists primarily of a function reference, but also contains a language reference, explanations of some of PHP 's major features, and other supplemental information.
You can download this manual in several formats at http: / /www.php.net / docs.php.
The downloads are updated as the content changes.
See also PHP History
Prev
Home
Next
PHP Manual
Getting Started
PHP Manual
Prev
Next
These functions are only available when running PHP as an Apache 1.x module.
For PHP installation on Apache 1.x see the Apache section in the installation chapter.
The behaviour of the Apache PHP module is affected by settings in php.ini.
Configuration settings from php.ini may be overridden by php_flag settings in the server configuration file or local .htaccess files.
Example 1.
Turning off PHP parsing for a directory using .htaccess
Table 1.
Apache configuration options
Name
Default
Changeable
Function
turns PHP parsing on or off
specify whether PHP scripts may request child process termination on end of request, see also apache_child_terminate()
send PHP scripts modification date as Last-Modified: header for this request
parse files with executable bit set as PHP regardles of their file ending
Here is a short explanation of the configuration directives.
This directive is really only useful in the Apache module version of PHP.
It is used by sites that would like to turn PHP parsing on and off on a per-directory or per-virtual server basis.
By putting engine off in the appropriate places in the httpd.conf file, PHP can be enabled or disabled.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Function Reference
Up
PHP Manual
Prev
Next
Arrays are essential for storing, managing, and operating on sets of variables.
Simple and multi-dimensional arrays are supported, and may be either user created or created by another function.
Please see the Arrays section of the manual for a detailed explanation of how arrays are implemented and used in PHP.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no resource types defined.
The constants below are always available as part of the PHP core.
CASE_LOWER is used with array_change_key_case() and is used to convert array keys to lower case.
This is also the default case for array_change_key_case().
CASE_UPPER is used with array_change_key_case() and is used to convert array keys to upper case.
SORT_ASC is used with array_multisort() to sort in ascending order.
Sorting type flags: used by various sort functions
SORT_REGULAR is used to compare items normally.
SORT_STRING is used to compare items as strings.
See also is_array(), explode(), implode(), split(), preg_split(), and join().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The aspell() functions allows you to check the spelling on a word and offer suggestions.
aspell works only with very old (up to .27.* or so) versions of aspell library.
Neither this module, nor those versions of aspell library are supported any longer.
If you want to use spell-checking capabilities in PHP, use pspell If you want to use spell-checking capabilities in PHP, use pspell instead.
It uses pspell library and works with newer versions of aspell.
You need the aspell library, available from: http: / /aspell.sourceforge.net /.
See also pspell.
Prev
Home
Next
Up
aspell_check_raw
PHP Manual
Prev
Next
For arbitrary precision mathematics PHP offers the Binary Calculator which supports numbers of any size and precision, represented as strings.
Since PHP 4.0.4, libbcmath is bundled with PHP.
You don 't need any external libraries for this extension.
In PHP 4, these functions are only available if PHP was configured with --enable-bcmath.
In PHP 3, these functions are only available if PHP was NOT configured with --disable-bcmath.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
BC math configuration options
Default
Changeable
Here is a short explanation of the configuration directives.
Number of decimal digits for all bcmath functions.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The bzip2 functions are used to transparently read and write bzip2 (.bz2) compressed files.
This module requires bzip2 / libbzip2 version = 1.0.x.
Bzip2 support in PHP is not enabled by default.
You will need to use the --with-bz2[ =DIR] configuration option when compiling PHP to enable bzip2 support.
This extension has no configuration directives defined in php.ini.
This extension defines one resource type: a file pointer identifying the bz2-file to work on.
This extension has no constants defined.
This example opens a temporary file and writes a test string to it, then prints out the contents of the file.
Example 1.
Small bzip2 Example
?php $filename = "/ tmp / testfile.bz2"; $str = "This is a test string.\n"; / / open file for writing $bz = bzopen($filename, "w"); / / write string to file bzwrite($bz, $str); / / close file bzclose($bz); / / open file for reading $bz = bzopen($filename, "r"); / / read 10 characters print bzread($bz, 10); / / output until end of the file (or the next 1024 char) and close it. print bzread($bz); bzclose($bz);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
The intermediary or standard it is based on is the Julian Day Count.
The Julian Day Count is a count of days starting from January 1st, 4713 B.C.
To convert between calendar systems, you must first convert to Julian Day Count, then to the calendar system of your choice.
Julian Day Count is very different from the Julian Calendar!
For more information on Julian Day Count, visit http: / /serendipity.magnet.ch / hermetic / cal_stud / jdn.htm.
For more information on calendar systems visit http: / /genealogy.org / ~scottlee / cal-overview.html.
To get these functions to work, you have to compile PHP with --enable-calendar.
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The following constants are available since PHP 4.3.0:
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions interface the CCVS API, allowing you to work directly with CCVS from your PHP scripts.
CCVS is RedHat' s solution to the "middle-man "in credit card processing.
It lets you directly address the credit card clearing houses via your *nix box and a modem.
Using the CCVS module for PHP, you can process credit cards directly through CCVS via your PHP Scripts.
The following references will outline the process.
Note:
CCVS has been discontinued by Red Hat and there are no plans to issue further keys or support contracts.
Those looking for a replacement can consider MCVE by Main Street Softworks as a potential replacement.
It is similar in design and has documented PHP support!
If you use this option without specifying the path to your CCVS installation, PHP will attempt to look in the default CCVS Install location (/ usr / local / ccvs).
Please note that CCVS support requires that $ccvs_path / lib and $ccvs_path / include exist, and include cv_api.h under the include directory and libccvs.a under the lib directory.
You will also need to make sure the PHP Processes are running under the same user as your CCVS was installed as (e.g. if you installed CCVS as user'ccvs', your PHP processes must run as'ccvs' as well.)
Additional information about CCVS can be found at http: / /www.redhat.com / products / ccvs.
RedHat maintains slightly outdated but still useful documentation at http: / /www.redhat.com / products / ccvs / support / CCVS3.3docs / ProgPHP.html.
Prev
Home
Next
Up
PHP Manual
Prev
Next
You can obtain the name of the class to which a object belongs, as well as its member properties and methods.
Using these functions, you can find out not only the class membership of an object, but also its parentage (i.e. what class is the object class extending).
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no resource types defined.
In this example, we first define a base class and an extension of the class.
The subclass Spinach adds a method to cook it and another to find out if it is cooked.
Example 1. classes.inc
?php / / base class with member properties and methods class Vegetable {var $edible; var $color; function Vegetable ($edible, $color="green ") {$this - edible = $edible; $this - color = $color;} function is_edible() {return $this - edible;} function what_color() {return $this - color;}} / / end of class Vegetable / / extends the base class class Spinach extends Vegetable {var $cooked = false; function Spinach() {$this - Vegetable (true, "green");} function cook_it() {$this - cooked = true;} function is_cooked() {return $this - cooked;}} / / end of class Spinach?
We then instantiate 2 objects from these classes and print out information about them, including their class parentage.
We also define some utility functions, mainly to have a nice printout of the variables.
Example 2. test_script.php
pre ?php include "classes.inc"; / / utility functions function print_vars($obj) {$arr = get_object_vars($obj); while (list($prop, $val) = each($arr)) echo "\t$prop = $val\n";} function print_methods($obj) {$arr = get_class_methods(get_class($obj)); foreach ($arr as $method) echo "\tfunction $method()\n";} function class_parentage($obj, $class) {global $$obj; if (is_subclass_of($$obj, $class)) {echo "Object $obj belongs to class ".get_class($$obj); echo" a subclass of $class\n";} else {echo "Object $obj does not belong to a subclass of $class\n";}} / / instantiate 2 objects $veggie = new Vegetable(true ,"blue"); $leafy = new Spinach(); / / print out information about objects echo "veggie:
CLASS ".get_class($veggie) ."\n"; echo "leafy:
CLASS ".get_class($leafy); echo", PARENT ".get_parent_class($leafy) ."\n"; / / show veggie properties echo "\nveggie:
Properties\n"; print_vars($veggie); / / and leafy methods echo "\nleafy:
Methods\n"; print_methods($leafy); echo "\nParentage:\n"; class_parentage("leafy", "Spinach"); class_parentage("leafy", "Vegetable");? / pre
One important thing to note in the example above is that the object $leafy is an instance of the class Spinach which is a subclass of Vegetable, therefore the last part of the script above will output:
[...] Parentage:
Object leafy does not belong to a subclass of Spinach Object leafy belongs to class spinach a subclass of Vegetable
Prev
Home
Next
Up
PHP Manual
Prev
Next
COM is a technology which allows the reuse of code written in any language (by any language) using a standard calling convention and hiding behind APIs the implementation details such as what machine the Component is stored on and the executable which houses it.
It can be thought of as a super Remote Procedure Call (RPC) mechanism with some basic object roots.
It separates implementation from interface.
COM encourages versioning, separation of implementation from interface and hiding the implementation details such as executable location and the language it was written in.
COM functions are only available on the Windows version of PHP.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Com configuration options
Default
Changeable
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
For further information on COM read the COM specification or perhaps take a look at Don Box' s Yet Another COM Library (YACL)
Prev
Home
Next
Up
COM
PHP Manual
Prev
Next
ClibPDF lets you create PDF documents with PHP.
ClibPDF functionality and API are similar to PDFlib.
This documentation should be read alongside the ClibPDF manual since it explains the library in much greater detail.
Many functions in the native ClibPDF and the PHP module, as well as in PDFlib, have the same name.
All functions except for cpdf_open() take the handle for the document as their first parameter.
Currently this handle is not used internally since ClibPDF does not support the creation of several PDF documents at the same time.
Actually, you should not even try it, the results are unpredictable.
I can 't oversee what the consequences in a multi threaded environment are.
According to the author of ClibPDF this will change in one of the next releases (current version when this was written is 1.10).
If you need this functionality use the pdflib module.
A nice feature of ClibPDF (and PDFlib) is the ability to create the pdf document completely in memory without using temporary files.
It also provides the ability to pass coordinates in a predefined unit length. (This feature can also be simulated by pdf_translate() when using the PDFlib functions.)
Another nice feature of ClibPDF is the fact that any page can be modified at any time even if a new page has been already opened.
The function cpdf_set_current_page() allows to leave the current page and presume modifying an other page.
Most of the functions are fairly easy to use.
The most difficult part is probably creating a very simple PDF document at all.
The following example should help you to get started.
It creates a document with one page.
The page contains the text "Times-Roman" in an outlined 30pt font.
The text is underlined.
In order to use the ClibPDF functions you need to install the ClibPDF package.
It is available for download from FastIO, but requires that you purchase a license for commercial use.
PHP requires that you use cpdflib = 2.
To get these functions to work, you have to compile PHP with --with-cpdflib[ =DIR].
DIR is the cpdflib install directory, defaults to / usr.
In addition you can specify the jpeg library and the tiff library for ClibPDF to use.
To do so add to your configure line the options --with-jpeg-dir[ =DIR] --with-tiff-dir[=DIR].
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Simple ClibPDF Example
?php $cpdf = cpdf_open( 0); cpdf_page_init($cpdf, 1, 0, 595, 842, 1.0); cpdf_add_outline($cpdf, 0, 0, 0, 1, "Page 1"); cpdf_begin_text($cpdf); cpdf_set_font($cpdf, "Times-Roman", 30, "WinAnsiEncoding"); cpdf_set_text_rendering($cpdf, 1); cpdf_text($cpdf, "Times Roman outlined", 50, 750); cpdf_end_text($cpdf); cpdf_moveto($cpdf, 50, 740); cpdf_lineto($cpdf, 330, 740); cpdf_stroke($cpdf); cpdf_finalize($cpdf); Header("Content-type: application / pdf"); cpdf_output_buffer($cpdf); cpdf_close($cpdf);?
The pdflib distribution contains a more complex example which creates a series of pages with an analog clock.
Here is that example converted into PHP using the ClibPDF extension:
Example 2. pdfclock example from pdflib 2.0 distribution
See also the PDFlib extension documentation.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The 'strength' of a password is tested by that checks length, use of upper and lower case and checked against the specified CrackLib dictionary.
More information regarding CrackLib along with the library can be found at http: / /www.users.dircon.co.uk / ~crypto /.
In order to use these functions, you must compile PHP with Crack support by using the --with-crack[ =DIR] option.
Table 1.
Name
Changeable
NULL
This extension has no resource types defined.
This example shows how to open a CrackLib dictionary, test a given password, retrieve any diagnostic messages, and close the dictionary.
Example 1.
CrackLib example
?php / / Open CrackLib Dictionary $dictionary = crack_opendict( '/ usr / local / lib / pw_dict') or die('Unable to open CrackLib dictionary'); / / Perform password check $check = crack_check($dictionary, 'gx9A2s0x'); / / Retrieve messages $diag = crack_getlastmessage(); echo $diag; / / 'strong password' / / Close dictionary crack_closedict($dictionary);?
Note:
If crack_check() returns TRUE, crack_getlastmessage() will return'strong password '.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The functions provided by this extension check whether a character or string falls into a certain character class according to the current locale (see also setlocale()).
When called with an integer argument these functions behave exactly like their C counterparts from ctype.h.
When called with a string argument they will check every character in the string and will only return TRUE if every character in the string matches the requested criteria.
When called with an empty string the result will always be TRUE.
Passing anything else but a string or integer will return FALSE immediately.
None besides functions from the standard C library which are always available.
Beginning with PHP 4.2.0 these functions are enabled by default.
For older versions you have to configure and compile PHP with --enable-ctype.
You can disable ctype support with --disable-ctype.
Note:
Builtin support for ctype is available with PHP 4.3.0.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
In short, CyberCash was bought out by VeriSign and although the CyberCash service continues to exist, VeriSign encourages users to switch.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This extension allows you to process credit cards transactions using Crédit Mutuel CyberMUT system (http: / /www.creditmutuel.fr / centre_commercial / vendez_sur_internet.html).
CyberMUT is a popular Web Payment Service in France, provided by the Crédit Mutuel bank.
If you are foreign in France, these functions will not be useful for you.
The use of these functions is almost identical to the original SDK functions, except for the parameters of return for cybermut_creerformulairecm() and cybermut_creerreponsecm(), which are returned directly by functions PHP, whereas they had passed in reference in the original functions.
These functions have been added in PHP 4.0.6.
Note:
These functions only provide a link to CyberMUT SDK.
Be sure to read the CyberMUT Developers Guide for full details of the required parameters.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Note:
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to get the date and time from the server where your PHP scripts are running.
You can use these functions to format the date and time in many different ways.
Note:
Please keep in mind that these functions are dependent on the locale settings of your server.
Make sure to take daylight saving time and leap years into consideration when working with these functions.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is a general abstraction layer for several file-based databases.
The behaviour of various aspects depends on the implementation of the underlying database.
You have to download and install supported dba-Handlers.
You should avoid it, if possible.
ndbm
It still has most of the arbitrary limits of dbm (therefore it is deprecated).
It is described as "a programmatic toolkit that provides high-performance built-in database support for both standalone and client / server applications.
DB3 is Sleepycat Software 's DB3.
DB4 is Sleepycat Software 's DB4.
Cdb is "a fast, reliable, lightweight package for creating and reading constant databases." It is from the author of qmail and can be found here.
cdb_make
flatfile
However you may use this where files were created in this format.
The actually available list of handlers is displayed by invoking phpinfo() or dba_handlers().
You also have to add support for at least one of the following handlers by specifying the --with-XXXX configure switch to your PHP configure line.
Configure Switch
To enable support for ndbm add --with-ndbm[ =DIR].
To enable support for gdbm add --with-gdbm[ =DIR].
db4
It is not possible to use db versions starting from 4.1 with PHP prior to version 4.3.0.
Since PHP 4.3.0 you can omit DIR to use the bundeled cdb library that adds the cdb_make handler which allows creation of cdb files and allows to access cdb files on the network using php 's streams.
flatfile
Note:
Uee this handler only when you cannot install one of the libraries required by the other handlers and when you cannot use bundeled cdb handler.
That means that you cannot have both file formats.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
?php $id = dba_open ("/ tmp / test.db", "n", "db2"); if (!$id) {echo "dba_open failed\n"; exit;} dba_replace ("key", "This is an example !", $id); if (dba_exists ("key", $id)) {echo dba_fetch ("key", $id); dba_delete ("key", $id);} dba_close ($id);?
However, it inherits all limits set by the underlying database implementation.
The file mode is commonly passed as the fourth argument to dba_open() or dba_popen().
You can access all entries of a database in a linear way by using the dba_firstkey() and dba_nextkey() functions.
Example 2.
?php / / ...open database... $key = dba_firstkey ($id); while ($key != false) {if (...) {/ / remember the key to perform some action later $handle_later[] = $key;} $key = dba_nextkey ($id);} for ($i = 0; $i count($handle_later); $i++) dba_delete ($handle_later[$i], $id);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access records stored in dBase-format (dbf) databases.
There is no support for indexes or memo fields.
There is no support for locking, too.
Two concurrent webserver processes modifying the same dBase file will very likely ruin your database.
dBase files are simple sequential files of fixed length records.
We recommend that you do not use dBase files as your production database.
Choose any real SQL server instead; MySQL or Postgres are common choices with PHP. dBase support is here to allow you to import and export data to and from your web database, because the file format is commonly understood by Windows spreadsheets and organizers.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This type of database (supported by the Berkeley DB, GDBM, and some system libraries, as well as a built-in flatfile library) stores key / value pairs (as opposed to the full-blown records supported by relational databases).
To use this functions you have to compile PHP with support for an underlying database.
In order to use these functions, you must compile PHP with dbm support by using the --with-db option.
This extension has no configuration directives defined in php.ini.
The function dbmopen() returns an database identifier which is used by the other dbm-functions.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The dbx module is a database abstraction layer (db'X', where'X 'is a supported database).
The dbx functions allow you to access all supported databases using a single calling convention.
The dbx-functions themselves do not interface directly to the databases, but interface to the modules that are used to support these databases.
To be able to use a database with the dbx-module, the module must be either linked or loaded into PHP, and the database module must be supported by the dbx-module.
Currently, following databases are supported, but others will follow:
FrontBase (available from PHP 4.1.0).
Sybase-CT (available from PHP 4.2.0).
Oracle (oci8) (available from PHP 4.3.0).
Documentation for adding additional database support to dbx can be found at http: / /www.guidance.nl / php / dbx / doc /.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
There are two resource types used in the dbx module.
The first one is the link - object for a database connection, the second a result - object which helds the result of a query.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The use of the DIO functions should be considered only when direct control of a device is needed.
One resource type is defined by this extension: a file descriptor returnded by dio_open().
Prev
Home
Next
Up
Prev
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
For related functions such as dirname(), is_dir(), mkdir(), and rmdir(), see the Filesystem section.
dio_write
PHP Manual
Prev
Next
Therefore, if you want to read an XML file and write a modified version, use DomDocument_create_element(), DomDocument_create_text_node(), set_attribute(), etc. and finally the DomDocument_dump_mem() function.
Download and install this library.
Download and install these libraries if you plan to use (enhanced XSLT features.
Add --with-dom-exslt[ =DIR] to include DOM EXSLT support, where DIR is the libexslt install directory.
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
These functions are listed in the following table.
It now adds a child and not a sibling.
Table 1.
Old function
DomDocument_dump_mem_file
DomDocument_create_element() followed by DomNode_append_child()
DomDocument_children
DomDocument_imported_node
DomDocument_create_element() und add it with DomNode_append_child().
DomDocument_create_element() and add it with DomNode_append_child().
DomNode_get_content
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
XML_ATTRIBUTE_NODE (integer)
XML_CDATA_SECTION_NODE (integer)
XML_COMMENT_NODE (integer)
XML_DOCUMENT_TYPE_NODE (integer)
XML_ATTRIBUTE_DECL_NODE (integer)
XML_ATTRIBUTE_ID (integer)
XML_ATTRIBUTE_NMTOKEN (integer)
XPATH_UNDEFINED (integer)
XPATH_STRING (integer)
XPATH_USERS (integer)
It is a good idea to have the DOM standard available when using this module.
These functions are mainly to retain compatibilty to older versions of the extension, and should not be used when creating new scripts.
First, all class attributes are implemented as functions with the same name.
This means that a DOM function lastChild() will be written as last_child().
Classes with an equivalent in the DOM standard are named DOMxxx.
DomDocument_create_processing_instruction()
DomNode_remove_child()
DomProcessingInstruction class (DomProcessingInstruction:
DomComment is derived from DomCData.
Instead of repeating this string in every example, it will be put into a file which will be included by each example.
Alternatively, you could create an XML document and read it with DomDocument_open_file().
Prev
Home
Next
Up
Prev
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
xptr_new_context
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
Note:
Note:
The constants below are always available as part of the PHP core.
Note:
Table 2.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
This extension has no configuration directives defined in php.ini.
Prev
Home
Next
Up
PHP Manual
Prev
Next
More information about FrontBase can be found at http: / /www.frontbase.com /.
Frontbase support has been added to PHP 4.0.6.
You can get FrontBase from http: / /www.frontbase.com /.
In order to have these functions available, you must compile PHP with fbsql support by using the --with-fbsql[ =DIR] option.
Users who installed FrontBase in a non standard directory should always specify the path to fbsql: --with-fbsql= / path / to / fbsql.
The behaviour of these functions is affected by settings in php.ini.
FrontBase configuration options
fbsql.generate_warnings
fbsql.default_password
fbsql.default_database
fbsql.default_database_password
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Forms Data Format (FDF) is a format for handling forms within PDF documents.
You should read the documentation at http: / /partners.adobe.com / asn / developer / acrosdk / forms.html for more information on what FDF is and how it is used in general.
The general idea of FDF is similar to HTML forms.
The difference is basically the format how data is transmitted to the server when the submit button is pressed (this is actually the Form Data Format) and the format of the form itself (which is the Portable Document Format, PDF).
Processing the FDF data is one of the features provided by the fdf functions.
One may as well take an existing PDF form and populated the input fields with data without modifying the form itself.
In such a case one would create a FDF document (fdf_create()) set the values of each input field (fdf_set_value()) and associate it with a PDF form (fdf_set_file()).
The Acrobat reader plugin of your browser recognizes the MimeType, reads the associated PDF form and fills in the data from the FDF document.
If you look at an FDF-document with a text editor you will find a catalogue object with the name FDF.
Such an object may contain a number of entries like Fields, F, Status etc..
The most commonly used entries are Fields which points to a list of input fields, and F which contains the filename of the PDF-document this data belongs to.
Those entries are referred to in the FDF documentation as / F-Key or / Status-Key.
Modifying this entries is done by functions like fdf_set_file() and fdf_set_status().
Fields are modified with fdf_set_value(), fdf_set_opt() etc..
You need the FDF toolkit SDK available from http: / /partners.adobe.com / asn / developer / acrosdk / forms.html.
As of PHP 4.3 you need at least SDK version 5.0.
The FDF toolkit library is available in binary form only, platforms supported by Adobe are Win32, Linux, Solaris and AIX.
Note:
This extension has no configuration directives defined in php.ini.
Most fdf functions require a fdf resource as their first parameter.
A fdf resource is a handle to an opened fdf file. fdf resources may be obtained using fdf_create(), fdf_open() and fdf_open_string().
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The following examples shows just the evaluation of form data.
Example 1.
Evaluating a FDF document
?php / / Open fdf from input string provided by the extension / / The pdf form contained several input text fields with the names / / volume, date, comment, publisher, preparer, and two checkboxes / / show_publisher and show_preparer. $fdf = fdf_open_string( $HTTP_FDF_DATA); $volume = fdf_get_value($fdf, "volume"); echo "The volume field has the value 'B $volume / B' BR "; $date = fdf_get_value($fdf, "date"); echo "The date field has the value 'B $date / B' BR"; $comment = fdf_get_value($fdf, "comment"); echo "The comment field has the value 'B $comment / B' BR "; if(fdf_get_value($fdf, "show_publisher") == "On") {$publisher = fdf_get_value($fdf, "publisher"); echo "The publisher field has the value 'B $publisher / B' BR";} else echo "Publisher shall not be shown.
BR "; if(fdf_get_value($fdf, "show_preparer") == "On") {$preparer = fdf_get_value($fdf, "preparer"); echo "The preparer field has the value 'B $preparer / B' BR";} else echo "Preparer shall not be shown.
BR "; fdf_close($fdf);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
filePro is a registered trademark of fP Technologies, Inc.
filePro support in PHP is not enabled by default.
To enable the bundled read-only filePro support you need to use the --enable-filepro configuration option when compiling PHP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Filesystem and Streams Configuration Options
Default
Changeable
Here is a short explanation of the configuration directives.
This option enables the URL-aware fopen wrappers that enable accessing URL object like files.
Default wrappers are provided for the access of remote files using the ftp or http protocol, some extensions like zlib may register additional wrappers.
Note:
This option was introduced immediately after the release of version 4.0.3.
For versions up to and including 4.0.3 you can only disable this feature at compile time by using the configuration switch --disable-url-fopen-wrapper.
Warning
On Windows versions prior to PHP 4.3, the following functions do not support remote file accesing: include(), include_once(), require(), require_once() and the imagecreatefromXXX functions in the Reference XLI, Image functions extension.
Define the user agent for PHP to send.
Default timeout (in seconds) for socket based streams.
Note:
This configuration option was introduced in PHP 4.3.
Define the anonymous ftp password (your email address).
When turned on, PHP will examine the data read by fgets() and file() to see if it is using Unix, MS-Dos or Macintosh line-ending conventions.
This enables PHP to interoperate with Macintosh systems, but defaults to Off, as there is a very small performance penalty when detecting the EOL conventions for the first line, and also because people using carriage-returns as item separators under Unix systems would experience non-backwards-compatible behaviour.
Note:
This configuration option was introduced in PHP 4.3.
This extension has no constants defined.
For related functions, see also the Directory and Program Execution sections.
For a list and explanation of the various URL wrappers that can be used as remote files, see also Appendix I.
Prev
Home
Next
Up
Prev
Next
FriBiDi is a free implementation of the Unicode Bidirectional Algorithm.
You must download and install the FriBiDi package.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
fdf_set_version
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
The windows version of PHP The windows version of PHP has built in support for this extension.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
?php / / set up basic connection $conn_id = ftp_connect( $ftp_server); / / login with username and password $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass); / / check connection if ((!$conn_id) _BAR_ _BAR_ (!$login_result)) {echo "FTP connection has failed !"; echo "Attempted to connect to $ftp_server for user $ftp_user_name"; exit;} else {echo "Connected to $ftp_server, for user $ftp_user_name";} / / upload the file $upload = ftp_put($conn_id, $destination_file, $source_file, FTP_BINARY); / / check upload status if (!$upload) {echo "FTP upload has failed !";} else {echo "Uploaded $source_file to $ftp_server as $destination_file";} / / close the FTP stream ftp_close($conn_id);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Please see the gettext documentation for your system for a thorough explanation of these functions or view the docs at http: / /www.gnu.org / manual / gettext / index.html.
To include GNU gettext support in your PHP build you must add the option --with-gettext[ =DIR] where DIR is the gettext install directory, defaults to / usr / local.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Warning
Note:
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions let you manipulate the output sent back to the remote browser right down to the HTTP protocol level.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
More information about InterBase is available at http: / /www.interbase.com /.
This database uses a single quote (') character for escaping, a behavior similar to the Sybase database, add to your php.ini the following directive:
To enable InterBase support configure PHP --with-interbase[ =DIR], where DIR is the InterBase base install directory, which defaults to / usr / interbase.
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32).
Therfore you don 't need to copy gds32.dll from the DLL folder.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The iconv library functions convert strings between various character sets encodings.
Note that the iconv() function on some systems may not work as well as you expect.
Your systems standard C library must provide the iconv() function or you must have libiconv installed on your system.
To be able to use the functions defined in this module you must compile your PHP interpreter using the configure line --with-iconv[ =DIR].
In order to enable this module on a Windows environment, you must copy iconv-1.3.dll from the DLL folder of the PHP / Win32 binary package to the SYSTEM32 folder of your windows machine. (Ex:
Starting with PHP 4.2.1 the name changed to iconv.dll
Table 1.
Since PHP 4.3.0 it is possible to identify at runtime which iconv implementation is adopted by this extension.
constant
ICONV_VERSION
See also the GNU Recode functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The Informix driver for Informix (IDS) 7.x, SE 7.x, Universal Server (IUS) 9.x and IDS 2000 is implemented in "ifx.ec "and "php3_ifx.h" in the informix extension directory.
IDS 7.x support is fairly complete, with full support for BYTE and TEXT columns.
IUS 9.x support is partly finished: the new data types are there, but SLOB and CLOB support is still under construction.
Configuration notes:
You need a version of ESQL / C to compile the PHP Informix driver.
ESQL / C versions from 7.2x on should be OK.
ESQL / C is now part of the Informix Client SDK.
Make sure that the "INFORMIXDIR" variable has been set, and that $INFORMIXDIR / bin is in your PATH before you run the "configure "script.
To be able to use the functions defined in this module you must compile your PHP interpreter using the configure line --with_informix[ =DIR], where DIR is the Informix base install directory, defaults to nothing.
The behaviour of these functions is affected by settings in php.ini.
Note:
Make sure that the Informix environment variables INFORMIXDIR and INFORMIXSERVER are available to the PHP ifx driver, and that the INFORMIX bin directory is in the PATH.
Check this by running a script that contains a call to phpinfo() before you start testing.
The phpinfo() output should list these environment variables.
This is TRUE for both CGI php and Apache mod_php.
You may have to set these environment variables in your Apache startup script.
The Informix shared libraries should also be available to the loader (check LD_LIBRARY_PATH or ld.so.conf / ldconfig).
Some notes on the use of BLOBs (TEXT and BYTE columns):
BLOBs are normally addressed by BLOB identifiers.
Select queries return a "blob id" for every BYTE and TEXT column.
You can get at the contents with "string_var = ifx_get_blob($blob_id);" if you choose to get the BLOBs in memory (with: "ifx_blobinfile(0) ;").
If you prefer to receive the content of BLOB columns in a file, use "ifx_blobinfile(1) ;", and "ifx_get_blob($blob_id);" will get you the filename.
Use normal file I / O to get at the blob contents.
For insert / update queries you must create these "blob id's" yourself with "ifx_create_blob();".
You then plug the blob id' s into an array, and replace the blob columns with a question mark (?) in the query string.
For updates / inserts, you are responsible for setting the blob contents with ifx_update_blob().
The behaviour of BLOB columns can be altered by configuration variables that also can be set at runtime:
configuration variable: ifx.textasvarchar
configuration variable: ifx.byteasvarchar
runtime functions:
ifx_textasvarchar( 0): use blob id's for select queries with TEXT columns
ifx_byteasvarchar( 0): use blob id's for select queries with BYTE columns
ifx_textasvarchar( 1): return TEXT columns as if they were VARCHAR columns, so that you don't need to use blob id's for select queries.
ifx_byteasvarchar( 1): return BYTE columns as if they were VARCHAR columns, so that you don't need to use blob id's for select queries.
configuration variable: ifx.blobinfile
runtime function:
ifx_blobinfile_mode( 0): return BYTE columns in memory, the blob id lets you get at the contents.
ifx_blobinfile_mode( 1): return BYTE columns in a file, the blob id lets you get at the file name.
If you set ifx_text / byteasvarchar to 1, you can use TEXT and BYTE columns in select queries just like normal (but rather long) VARCHAR fields.
Since all strings are "counted" in PHP, this remains "binary safe ".
It is up to you to handle this correctly.
The returned data can contain anything, you are responsible for the contents.
If you set ifx_blobinfile to 1, use the file name returned by ifx_get_blob(..) to get at the blob contents.
Note that in this case YOU ARE RESPONSIBLE FOR DELETING THE TEMPORARY FILES CREATED BY INFORMIX when fetching the row.
Every new row fetched will create new temporary files for every BYTE column.
The location of the temporary files can be influenced by the environment variable "blobdir", default is". "(the current directory).
Something like: putenv( blobdir=tmpblob"); will ease the cleaning up of temp files accidentally left behind (their names all start with "blb").
Automatically trimming "char" (SQLCHAR and SQLNCHAR) data:
This can be set with the configuration variable
ifx.charasvarchar: if set to 1 trailing spaces will be automatically trimmed, to save you some "chopping".
NULL values:
The configuration variable ifx.nullformat (and the runtime function ifx_nullformat()) when set to TRUE will return NULL columns as the string "NULL", when set to FALSE they return the empty string.
This allows you to discriminate between NULL columns and empty columns.
Table 1.
Informix configuration options
Default
Changeable
Here is a short explanation of the configuration directives.
Whether to allow persistent Informix connections.
The maximum number of persistent Informix connections per process.
The maximum number of Informix connections per process, including persistent connections.
The default host to connect to when no host is specified in ifx_connect() or ifx_pconnect().
Doesn 't apply in safe mode.
The default user id to use when none is specified in ifx_connect() or ifx_pconnect().
Doesn 't apply in safe mode.
The default password to use when none is specified in ifx_connect() or ifx_pconnect().
Doesn 't apply in safe mode.
Set to TRUE if you want to return blob columns in a file, FALSE if you want them in memory.
You can override the setting at runtime with ifx_blobinfile_mode().
Set to TRUE if you want to return TEXT columns as normal strings in select statements, FALSE if you want to use blob id parameters.
You can override the setting at runtime with ifx_textasvarchar().
Set to TRUE if you want to return BYTE columns as normal strings in select queries, FALSE if you want to use blob id parameters.
You can override the setting at runtime with ifx_textasvarchar().
Set to TRUE if you want to trim trailing spaces from CHAR columns when fetching them.
Set to TRUE if you want to return NULL columns as the literal string "NULL", FALSE if you want them returned as the empty string "".
You can override this setting at runtime with ifx_nullformat().
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
If you have the GD library (available at http: / /www.boutell.com / gd /) you will also be able to create and manipulate images.
Versions of GD older than gd-1.6 support GIF format images, and do not support PNG, where versions greater than gd-1.6 support PNG, not GIF.
You may wish to enhance GD to handle more image formats.
Enhance the capabilities of GD to deal with different fonts by specifying the --with-XXXX configure switch to your PHP configure line.
This is done by first decoding the comment using the specified characterset.
This setting cannot be empty but you can specify a list of encodings supported by mbstring.
This setting cannot be empty but you can specify a list of encodings supported by mbstring.
exif.decode_jis_motorola defines the image internal characterset for JIS encoded user comments if image is in motorola byte order (big-endian).
This setting cannot be empty but you can specify a list of encodings supported by mbstring.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The underlying c-client library also supports NNTP, POP3 and local mailbox access methods.
It 's important that you do not copy the IMAP source files directly into the system include directory as there may be conflicts.
From the c-client directory from your IMAP source tree, copy all the *.h files into include / and all the *.c files into lib /.
Also put this in the lib / directory but rename it as libc-client.a.
To build the c-client library with SSL or / and Kerberos support read the docs supplied with the package.
To get these functions to work, you have to compile PHP with --with-imap[ =DIR], where DIR is the c-client install prefix.
This location depends on where you created this directory according to the description above.
Depending how the c-client was configured, you might also need to add --with-imap-ssl= / path / to / openssl / and / or --with-kerberos= / path / to / kerberos into the PHP configure line.
Warning
This is due to the fact that they both share the same internal symbol.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
RFC2821:
Standard for ARPA internet text messages.
RFC1939:
Network News Transfer Protocol (NNTP).
Multipurpose Internet Mail Extensions (MIME).
Prev
Home
Next
Up
You 'll also find functions to set options for your running PHP.
The behaviour of these functions is affected by settings in php.ini.
If enabled, no errors are shown (implicit error_reporting(0)) while evaluation.
You can turn dynamic loading of PHP extensions with dl() on and off per virtual server or per directory.
This helps prevent poorly written scripts from tying up the server.
When magic_quotes are on, all '(single-quote), "(double quote),\ (backslash) and NUL's are escaped with a backslash automatically.
If magic_quotes_sybase is also on, a single-quote is escaped with a single-quote instead of a backslash.
PHP Manual
Prev
Next
Note:
If you already used PHP extensions to access other database servers, note that Ingres doesn' t allow concurrent queries and / or transaction over one connection, thus you won't find any result or transaction handle in this extension.
Warning
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
To compile PHP with Ingres support, you need the Open API library and header files included with Ingres II.
In order to have these functions available, you must compile PHP with Ingres support by using the --with-ingres[ =DIR] option, where DIR is the Ingres base directory, which defaults to / II / ingres.
If the II_SYSTEM environment variable isn 't correctly set you may have to use --with-ingres=DIR to specify your Ingres installation directory.
Unable to start ingres_ii module in Unknown on line 0 "then make sure the environement variable II_SYSTEM is correctly set.
The behaviour of these functions is affected by settings in php.ini.
Ingres II configuration options
ingres.default_database
ingres.default_password
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This can be used to build powerful, extensible interactive platforms such as online games and webchats.
IRCG also features support for a non-streaming mode where a helper application reformats incoming data and supplies static file snippets in special formats such as cHTML (i-mode) or WML (WAP).
Detailed installation instructions can be found here.
We urge you to use the provided installation script.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The former is provided by a SAPI module that interfaces with the Servlet server, the latter by this Java extension.
The JVM is created using JNI, and everything runs in-process.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
You need a Java VM installed on your machine to use this extension.
This extension can only be built as a shared dl.
Note to Win32 Users:
The behaviour of these functions is affected by settings in php.ini.
This extension has no constants defined.
?php / / get instance of Java class java.lang.System in PHP $system = new Java( 'java.lang.System'); / / demonstrate property access print'Java version='.$system - getProperty('java.version'). 'br'; print'Java vendor= '.$system - getProperty('java.vendor').' br '; print'OS='.$system - getProperty('os.name').' '. $system - getProperty('os.version').' on '. $system - getProperty('os.arch').' br '; / / java.util.Date example $formatter = new Java('java.text.SimpleDateFormat', "EEEE, MMMM dd, yyyy'at' h:mm:ss a zzzz"); print $formatter - format(new Java('java.util.Date'));?
Example 2.
AWT Example
new Java() will create an instance of a class if a suitable constructor is available.
If no parameters are passed and the default constructor is useful as it provides access to classes like java.lang.System which expose most of their functionallity through static methods.
Accessing a member of an instance will first look for bean properties then public fields.
Both static and instance members can be accessed on an object with the same syntax.
Furthermore, if the java object is of type java.lang.Class, then static members of the class (fields and methods) can be accessed.
Exceptions raised result in PHP warnings, and NULL results.
The warnings may be eliminated by prefixing the method call with an "@" sign.
The following APIs may be used to retrieve and reset the last error:
Overload resolution is in general a hard problem given the differences in types between the two languages.
Additionally, method names in PHP are not case sensitive, potentially increasing the number of overloads to select from.
Once a method is selected, the parameters are cooerced if necessary, possibly with a loss of data (example: double precision floating point numbers will be converted to boolean).
Note that hashtables in PHP may only be indexed by integers or strings; and that arrays of primitive types in Java can not be sparse.
The Java Servlet SAPI builds upon the mechanism defined by the Java extension to enable the entire PHP processor to be run as a servlet.
The primary advanatage of this from a PHP perspective is that web servers which support servlets typically take great care in pooling and reusing JVMs.
Build instructions for the Servlet SAPI module can be found in php4 / sapi / README.
Notes:
While this code is intended to be able to run on any servlet engine, it has only been tested on Apache 's Jakarta / tomcat to date.
Bug reports, success stories and / or patches required to get this code to run on other engines would be appreciated.
PHP has a habit of changing the working directory. sapi / servlet will eventually change it back, but while PHP is running the servlet engine may not be able to load any classes from the CLASSPATH which are specified using a relative directory syntax, or find the work directory used for administration and JSP compilation tasks.
Prev
Home
Next
Up
PHP Manual
Prev
Next
LDAP is the Lightweight Directory Access Protocol, and is a protocol used to access "Directory Servers".
The Directory is a special kind of database that holds information in a tree structure.
The concept is similar to your hard disk directory structure, except that in this context, the root directory is "The world" and the first level subdirectories are "countries ".
Lower levels of the directory structure contain entries for companies, organisations or places, while yet lower still we find directory entries for people, and perhaps equipment or documents.
To refer to a file in a subdirectory on your hard disk, you might use something like:
/usr / local / myapp / docs
The forwards slash marks each division in the reference, and the sequence is read from left to right.
The equivalent to the fully qualified file reference in LDAP is the "distinguished name", referred to simply as "dn".
An example dn might be:
cn=John Smith,ou=Accounts,o=My Company,c=US
The comma marks each division in the reference, and the sequence is read from right to left.
You would read this dn as:
country = US organization = My Company organizationalUnit = Accounts commonName = John Smith
In the same way as there are no hard rules about how you organise the directory structure of a hard disk, a directory server manager can set up any structure that is meaningful for the purpose.
However, there are some conventions that are used.
The message is that you can not write code to access a directory server unless you know something about its structure, any more than you can use a database without some knowledge of what is available.
Lots of information about LDAP can be found at
The Netscape SDK contains a helpful Programmer 's Guide in HTML format.
You will need to get and compile LDAP client libraries from either the University of Michigan ldap-3.3 package or the Netscape Directory SDK 3.0 to compile PHP with LDAP support.
LDAP support in PHP is not enabled by default.
You will need to use the --with-ldap[ =DIR] configuration option when compiling PHP to enable LDAP support.
DIR is the LDAP base install directory.
In order to enable this module on a Windows environment, you must copy libsasl.dll from the DLL folder of the PHP / Win32 binary package to the SYSTEM32 folder of your windows machine. (Ex:
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
The behaviour of these functions is affected by settings in php.ini.
Table 1.
LDAP configuration options
Default
Changeable
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Retrieve information for all entries where the surname starts with "S" from a directory server, displaying an extract with name and email address.
Example 1.
LDAP search example
?php / / basic sequence with LDAP is connect, bind, search, interpret search / / result, close connection echo "h3 LDAP query test / h3"; echo "Connecting.. ."; $ds=ldap_connect("localhost"); / / must be a valid LDAP server! echo "connect result is ".$ds. "p"; if ($ds) {echo "Binding.. ."; $r=ldap_bind($ds); / / this is an "anonymous "bind, typically / / read-only access echo "Bind result is ".$r." p "; echo "Searching for (sn=S*).. ."; / / Search surname entry $sr=ldap_search($ds ,"o=My Company, c=US", "sn=S*"); echo "Search result is ".$sr." p "; echo "Number of entires returned is ".ldap_count_entries($ds,$sr)." p "; echo "Getting entries... p"; $info = ldap_get_entries($ds, $sr); echo "Data for ".$info["count"]. "items returned: p"; for ($i=0; $i $info["count"]; $i++) {echo "dn is: ". $info[$i]["dn"]." br "; echo "first cn entry is:". $info[$i]["cn"][0]. "br"; echo "first email entry is: ". $info[$i]["mail"][0]." p ";} echo "Closing connection"; ldap_close($ds);} else {echo" h4 Unable to connect to LDAP server / h4 ";}?
Before you can use the LDAP calls you will need to know..
The name or address of the directory server you will use
The "base dn" of the server (the part of the world directory that is held on this server, which could be "o=My Company,c=US")
Whether you need a password to access the server (many servers will provide read access for an "anonymous bind "but require a password for anything else)
The typical sequence of LDAP calls you will make in an application will follow this pattern:
ldap_connect() / / establish connection to server _BAR_ ldap_bind() / / anonymous or authenticated "login "_BAR_ do something like search or update the directory and display the results _BAR_ ldap_close() / / "logout"
Prev
Home
Next
Up
PHP Manual
Prev
Next
For example, Qmail users can normally set it to / var / qmail / bin / sendmail or / var / qmail / bin / qmail-inject.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
mail
mailparse_determine_best_xfer_encoding
PHP Manual
Prev
Next
If you need to handle bigger numbers, take a look at the arbitrary precision math functions.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are always available as part of the PHP core.
Table 1.
Math constants
Constant
Pi
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Note:
If --with-mbstring=kr If --with-mbstring=kr is used, korean encoding will be supported.
Note:
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Example 1. php.ini setting example
Example 2. php.ini setting for EUC-JP users
Example 3. php.ini setting for SJIS users
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 4.
Note:
Example 5. php.ini setting example
Example 6.
Note: "Supported character encoding" does not mean that it works as internal character code.
Table 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
MCAL stands for Modular Calendar Access Library.
Libmcal is a C library for accessing calendars.
It 's written to be very modular, with pluggable drivers.
MCAL is the calendar equivalent of the IMAP module for mailboxes.
With mcal support, a calendar stream can be opened much like the mailbox stream with the IMAP support.
Calendars can be local file stores, remote ICAP servers, or other formats that are supported by the mcal library.
Calendar events can be pulled up, queried, and stored.
There is also support for calendar triggers (alarms) and recurring events.
With libmcal, central calendar servers can be accessed, removing the need for any specific database or local file programming.
Most of the functions use an internal event structure that is unique for each stream.
This alleviates the need to pass around large objects between functions.
There are convenience functions for setting, initializing, and retrieving the event structure values.
Note:
PHP had an ICAP extension previously, but the original library and the PHP extension is not supported anymore.
Note:
This extension is not available on Windows platforms.
Grab the latest version from http: / /mcal.chek.com / and compile and install it.
After you installed the mcal library, to get these functions to work, you have to compile PHP -with-mcal[ =DIR].
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions are intended to work with mhash.
Mhash can be used to create checksums, message digests, message authentication codes, and more.
This is an interface to the mhash library. mhash supports a wide variety of hash algorithms such as MD5, SHA1, GOST, and many others.
The general rule is that you can access the hash algorithm from PHP with MHASH_HASHNAME.
To use it, download the mhash distribution from its web site and follow the included installation instructions.
You need to compile PHP with the --with-mhash[ =DIR] parameter to enable this extension.
DIR is the mhash install directory.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Here is a list of hashes which are currently supported by mhash.
MHASH_MD5
MHASH_HAVAL256
MHASH_HAVAL160
MHASH_GOST
MHASH_CRC32
MHASH_CRC32B
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Example 1. built into php (unix)
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The classes below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
mssql_select_db
Up
ming_setcubicthreshold
PHP Manual
Prev
Next
See also ignore_user_abort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
It offers full-text indexing and searching for HTML, PDF, and text documents. mnoGoSearch consists of two parts.
The purpose of the indexer is to walk through HTTP, FTP, NEWS servers or local files, recursively grabbing all the documents and storing meta-data about that documents in a SQL database in a smart and effective manner.
The search is performed via Web interface.
More information about mnoGoSearch can be found at http: / /www.mnogosearch.ru /.
Download mnoGosearch from http: / /www.mnogosearch.ru / and install it on your system.
You need at least version 3.1.10 of mnoGoSearch installed to use these functions.
In order to have these functions available, you must compile PHP with mnoGosearch support by using the --with-mnogosearch option.
If you installed mnoGosearch at a different location you should specify it: --with-mnogosearch=DIR.
PHP contains built-in MySQL access library, which can be used to access MySQL.
Thus, if you use mnoGoSearch with MySQL, during PHP configuration you have to indicate the directory of your MySQL installation, that was used during mnoGoSearch configuration, i.e. for example: --with-mnogosearch --with-mysql= / usr.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
It is designed to provide consistent session management for a PHP web farm.
Note:
To enable Msession support configure PHP --with-msession[ =DIR], where DIR is the Msession install directory.
Prev
Home
Next
Up
PHP Manual
Prev
Next
More information about mSQL can be found at http: / /www.hughes.com.au /.
DIR is the mSQL base install directory, defaults to / usr / local / Hughes.
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
The maximum number of persistent mSQL connections per process.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access MS SQL Server database.
Requirements for WIn32 platforms.
The extension requires the MS SQL Client Tools to be installed on the system where PHP is installed.
The Client Tools can be installed from the MS SQL Server CD or by copying ntwdblib.dll from \winnt\system32 on the server to \winnt\system32 on the PHP box.
Copying ntwdblib.dll will only provide access.
Configuration of the client will require installation of all the tools.
Requirements for Unix / Linux platforms.
To use the MSSQL extension on Unix / Linux, you first need to build and install the FreeTDS library.
Source code and installation instructions are available at the FreeTDS home page: http: / /www.freetds.org /
The MSSQL extension is enabled by adding extension=php_mssql.dll to php.ini.
To get these functions to work, you have to compile PHP with --with-mssql[ =DIR], where DIR is the FreeTDS install prefix.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
MS SQL Server configuration options
Name
Default
Changeable
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access MySQL database servers.
More information about MySQL can be found at http: / /www.mysql.com /.
Documentation for MySQL can be found at http: / /www.mysql.com / documentation /.
In order to have these functions available, you must compile PHP with MySQL support.
By using the --with-mysql[ =DIR] configuration option you enable PHP to access MySQL databases.
If you use this option without specifying the path to MySQL, PHP will use the built-in MySQL client libraries.
With PHP 4 MySQL support is always enabled; if you don't specify the configure option, the bundled libraries are used.
Users who run other applications that use MySQL (for example, running PHP 3 and PHP 4 as concurrent apache modules, or auth-mysql) should always specify the path to MySQL: --with-mysql= / path / to / mysql.
This will force PHP to use the client libraries installed by MySQL, avoiding any conflicts.
The windows version of PHP The windows version of PHP has built in support for this extension.
Warning
Crashes and startup problems of PHP may be encountered when loading this extension in conjunction with the recode extension.
See the recode extension for more information.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
MySQL Configuration Options
Default
Changeable
Here is a short explanation of the configuration directives.
Whether to allow persistent connections to MySQL.
The maximum number of persistent MySQL connections per process.
The maximum number of MySQL connections per process, including persistent connections.
The default TCP port number to use when connecting to the database server if no other port is specified.
If no default is specified, the port will be obtained from the MYSQL_TCP_PORT environment variable, the mysql-tcp entry in / etc / services or the compile-time MYSQL_PORT constant, in that order.
Win32 will only use the MYSQL_PORT constant.
The default socket name to use when connecting to a local database server if no other socket name is specified.
The default server host to use when connecting to the database server if no other host is specified.
Doesn 't apply in safe mode.
The default user name to use when connecting to the database server if no other name is specified.
Doesn 't apply in safe mode.
The default password to use when connecting to the database server if no other password is specified.
Doesn 't apply in safe mode.
Connect timeout in seconds.
On Linux this timeout is also used for waiting for the first answer from the server.
There are two resource types used in the MySQL module.
The first one is the link identifier for a database connection, the second a resource which holds the result of a query.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Since PHP 4.3.0 it is possible to specify additional client flags for the mysql_connect() and mysql_pconnect() functions.
The following constants are defined:
Table 2.
MySQL client constants
constant
MYSQL_CLIENT_COMPRESS
use compression protocol
MYSQL_CLIENT_IGNORE_SPACE
Allow space after function names
MYSQL_CLIENT_INTERACTIVE
Allow interactive_timeout seconds (instead of wait_timeout) of inactivity before closing the connection.
The function mysql_fetch_array() uses a constant for the different types of result arrays.
The following constants are defined:
Table 3.
constant
description
MYSQL_ASSOC
Columns are returned into the array having the fieldname as the array index.
MYSQL_BOTH
Columns are returned into the array having both a numerical index and the fieldname as the array index.
MYSQL_NUM
Columns are returned into the array having a numerical index to the fields.
This index starts with 0, the first field in the result.
This simple example shows how to connect, execute a query, print resulting rows and disconnect from a MySQL database.
Example 1.
MySQL extension overview example
?php / * Connecting, selecting database * / $link = mysql_connect( "mysql_host", "mysql_user", "mysql_password") or die("Could not connect"); print "Connected successfully"; mysql_select_db("my_database") or die("Could not select database"); / * Performing SQL query * / $query = "SELECT * FROM my_table"; $result = mysql_query($query) or die("Query failed"); / * Printing results in HTML * / print "table \n"; while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {print "\t tr \n"; foreach ($line as $col_value) {print "\t\t td $col_value / td \n";} print "\t / tr \n";} print" / table \n"; / * Free resultset * / mysql_free_result($result); / * Closing connection * / mysql_close($link);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 2. ncurses color constants
Table 3. ncurses key constants
Table 4. mouse constants
Prev
Home
Next
Up
There is no installation needed to use these functions; they are part of the PHP core.
Table 1.
Whether or not to define the various syslog variables (e.g. $LOG_PID, $LOG_CRON, etc.).
At runtime, you can define these variables by calling define_syslog_variables().
The constants below are always available as part of the PHP core.
LOG_NDELAY
Table 3. syslog() Priorities (in descending order)
PHP Manual
Prev
Next
For more information refer to the NIS manpage and The Linux NIS( YP) / NYS / NIS + HOWTO.
To get these functions to work, you have to configure PHP with --enable-yp.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
ncurses_wrefresh
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Example 1.
Example 2.
Example 3. storage_classes.inc
Example 4. test_aggregation.php
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access Oracle8 and Oracle7 databases.
This extension is more flexible than the standard Oracle extension.
You will need the Oracle8 client libraries to use this extension.
The variables you might need to set are as follows:
After setting up the environment variables for your webserver user, be sure to also add the webserver user (nobody, www) to the oracle group.
If your webserver doesn 't start or crashes at startup:
Check that Apache is linked with the pthread library:
Please note that on some systems like UnixWare it is libthread instead of libpthread.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
OCI Hints
OCI_DEFAULT for execute command to delay execution OCIExecute( $stmt, OCI_DEFAULT); / / for retrieve data use (after fetch): $result = OCIResult($stmt, $n); if (is_object ($result)) $result = $result - load(); / / For INSERT or UPDATE statement use: $sql = "insert into table (field1, field2) values (field1 = 'value', field2 = empty_clob()) returning field2 into :field2"; OCIParse($conn, $sql); $clob = OCINewDescriptor($conn, OCI_D_LOB); OCIBindByName ($stmt, ":field2", $clob, -1, OCI_B_CLOB); OCIExecute($stmt, OCI_DEFAULT); $clob - save ("some text"); OCICommit($conn);?
You can easily access stored procedures in the same way as you would from the commands line.
Example 2.
Using Stored Procedures
OCIBindByName ($sth, ":address_id", $addr_id, 10); OCIBindByName ($sth, ":error_code", $errorcode, 10); OCIExecute ($sth);?
Prev
Home
Next
Up
OCIBindByName
PHP Manual
Prev
Next
In addition to normal ODBC support, the Unified ODBC functions in PHP allow you to access several databases that have borrowed the semantics of the ODBC API to implement their own API.
Instead of maintaining multiple database drivers that were all nearly identical, these drivers have been unified into a single set of ODBC functions.
The following databases are supported by the Unified ODBC functions:
Adabas D, IBM DB2, iODBC, Solid, and Sybase SQL Anywhere.
Note:
There is no ODBC involved when connecting to the above databases.
The functions that you use to speak natively to them just happen to share the same names and syntax as the ODBC functions.
The exception to this is iODBC.
Building PHP with iODBC support enables you to use any ODBC-compliant drivers with your PHP applications. iODBC is maintained by OpenLink Software.
More information on iODBC, as well as a HOWTO, is available at www.iodbc.org.
To access any of the supported databases you need to have the required libraries installed.
The windows version of PHP The windows version of PHP has built in support for this extension.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Unified ODBC Configuration Options
Default
Changeable
Note:
Entries marked with * are not implemented yet.
Here is a short explanation of the configuration directives.
ODBC data source to use if none is specified in odbc_connect() or odbc_pconnect().
User name to use if none is specified in odbc_connect() or odbc_pconnect().
Password to use if none is specified in odbc_connect() or odbc_pconnect().
Whether to allow persistent ODBC connections.
Check that a connection is still valid before reuse.
The maximum number of persistent ODBC connections per process.
The maximum number of ODBC connections per process, including persistent connections.
Specifies the number of bytes returned to variables.
Handling of binary data.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module uses the functions of OpenSSL for generation and verification of signatures and for sealing (encrypting) and opening (decrypting) data.
Some of these may be added in the future.
In order to use the OpenSSL functions you need to install the OpenSSL package.
To use PHP' s OpenSSL support you must also compile PHP --with-openssl[=DIR].
In order to enable this module on a Windows environment, you must copy libeay32.dll from the DLL folder of the PHP / Win32 binary package to the SYSTEM32 folder of your windows machine. (Ex:
Additionally, if you are planning to use the key generation and certificate signing functions, you will need to install a valid openssl.cnf on your system.
As of PHP 4.3.0, we include a sample configuration file in the openssl of our win32 binary distribution.
If you are using PHP 4.2.0 or later and are missing the file, you can obtain it from the OpenSSL home page or by downloading the PHP 4.3.0 release and using the configuration file from there.
PHP will search for the openssl.cnf using the following logic:
the OPENSSL_CONF environmental variable, if set, will be used as the path (including filename) of the configuration file.
The file openssl.cnf will be assumed to be found in the default certificate area, as configured at the time that the openssl DLL was compiled.
This is usually means that the default filename is c:\usr\local\ssl\openssl.cnf.
Note that it is possible to override the default path from the script using the configargs of the functions that require a configuration file.
This extension has no configuration directives defined in php.ini.
PHP 4.0.5 and earlier have to use a key or certificate resource returned by one of the openssl_get_xxx functions.
Certificates
An X.509 resource returned from openssl_x509_read()
A string having the format file: / /path / to / cert.pem; the named file must contain a PEM encoded certificate
Public / Private Keys
For public keys only: an X.509 resource
A string having the format file: / /path / to / file.pem - the named file must contain a PEM encoded certificate / private key (it may contain both)
For private keys, you may also use the syntax array( $key, $passphrase) where $key represents a key specified using the file: / / or textual content notation above, and $passphrase represents a string containing the passphrase for that private key
When calling a function that will verify a signature / certificate, the cainfo parameter is an array containing file and directory names that specify the locations of trusted CA files.
If a directory is specified, then it must be a correctly formed hashed directory as the openssl command would use.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The S / MIME functions make use of flags which are specified using a bitfield which can include one or more of the following values:
Table 1.
PKCS7 CONSTANTS
Constant
Description
adds text / plain content type headers to encrypted / signed message.
If decrypting or verifying, it strips those headers from the output - if the decrypted or verified message is not of MIME type text / plain then an error will occur.
normally the input message is converted to "canonical" format which is effectively using CR and LF as end of line: as required by the S / MIME specification.
When this options is present, no translation occurs.
This is useful when handling binary data which may not be in MIME format.
when verifying a message, certificates (if any) included in the message are normally searched for the signing certificate.
With this option only the certificates specified in the extracerts parameter of openssl_pkcs7_verify() are used.
The supplied certificates can still be used as untrusted CAs however.
do not verify the signers certificate of a signed message.
do not chain verification of signers certificates: that is don 't use the certificates in the signed message as untrusted CAs.
when signing a message the signer 's certificate is normally included - with this option it is excluded.
This will reduce the size of the signed message but the verifier must have a copy of the signers certificate available locally (passed using the extracerts to openssl_pkcs7_verify() for example.
normally when a message is signed, a set of attributes are included which include the signing time and the supported symmetric algorithms.
With this option they are not included.
When signing a message, use cleartext signing with the MIME type multipart / signed.
This is the default if the flags parameter to openssl_pkcs7_sign() if you do not specify any flags.
If you turn this option off, the message will be signed using opaque signing, which is more resistant to translation by mail relays but cannot be read by mail agents that do not support S / MIME.
Don 't try and verify the signatures on a message
Note:
These constants were added in 4.0.6.
Prev
Home
Next
OCIWriteLobToFile
Up
PHP Manual
Prev
Next
This extension adds support for Oracle database server access.
See also the OCI8 extension.
You have to compile PHP with the option --with-oracle[ =DIR], where DIR defaults to your environmment variable ORACLE_HOME.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
Ora_Bind
PHP Manual
Prev
Next
This can be useful in several different situations, especially if you need to send headers to the browser after your script has began outputting data.
No external libraries are needed to build this extension.
If you wish to limit the size of the buffer to a certain size - you can use a maximum number of bytes instead of 'On', as a value for this directive (e.g., output_buffering=4096).
For example, if you set output_handler to mb_output_handler(), character encoding will be transparently converted to the specified encoding.
FALSE by default.
This value defaults to TRUE when operating under the CLI SAPI.
In the above example, the output from echo() would be stored in the output buffer until ob_end_flush() was called.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
Note:
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This extension has no configuration directives defined in php.ini.
Example 1.
Prev
Home
Next
Ora_Rollback
Up
PHP Manual
Prev
Next
Note:
No external libraries are needed to build this extension.
Note:
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 1.
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The PDF functions in PHP can create PDF files using the PDFlib library created by Thomas Merz.
The documentation in this section is only meant to be an overview of the available functions in the PDFlib library and should not be considered an exhaustive reference.
It provides a very good overview of what PDFlib is capable of doing and contains the most up-to-date documentation of all functions.
You will need to understand some of the basic concepts of PDF and PostScript to efficiently use this extension.
All lengths and coordinates are measured in PostScript points.
Please see the PDFlib documentation included with the source distribution of PDFlib for a more thorough explanation of the coordinate system used.
Please note that most of the PDF functions require a pdf object as its first parameter.
Please see the examples below for more information.
PDFlib is available for download at http: / /www.pdflib.com / pdflib / index.html, but requires that you purchase a license for commercial use.
The JPEG and TIFF libraries are required to compile this extension.
Any version of PHP 4 after March 9, 2000 does not support versions of PDFlib older than 3.0.
PDFlib 3.0 or greater is supported by PHP 3.0.19 and later.
DIR is the PDFlib base install directory, defaults to / usr / local.
To do so add to your configure line the options --with-jpeg-dir[ =DIR] --with-png-dir[=DIR] --with-tiff-dir[=DIR].
When using version 3.x of PDFlib, you should configure PDFlib with the option --enable-shared-pdflib.
This extension has no configuration directives defined in php.ini.
Starting with PHP 4.0.5, the PHP extension for PDFlib is officially supported by PDFlib GmbH.
This means that all the functions described in the PDFlib manual (V3.00 or greater) are supported by PHP 4 with exactly the same meaning and the same parameters.
Only the return values may differ from the PDFlib manual, because the PHP convention of returning FALSE was adopted.
For compatibility reasons, this binding for PDFlib still supports the old functions, but they should be replaced by their new versions.
PDFlib GmbH will not support any problems arising from the use of these deprecated functions.
Table 1.
Deprecated functions and their replacements
pdf_set_value() passing "textrendering "as the second parameter.
pdf_get_value() passing "imagewidth "as the second parameter and the image as the third parameter.
pdf_get_value() passing "imageheight "as the second parameter and the image as the third parameter.
Most of the functions are fairly easy to use.
The most difficult part is probably creating your first PDF document.
It creates test.pdf It creates test.pdf with one page.
The text is also underlined.
Example 1.
Creating a PDF document with PDFlib
?php $pdf = pdf_new(); pdf_open_file($pdf, "test.pdf"); pdf_set_info($pdf, "Author", "Uwe Steinmann"); pdf_set_info($pdf, "Title", "Test for PHP wrapper of PDFlib 2.0"); pdf_set_info($pdf, "Creator", "See Author"); pdf_set_info($pdf, "Subject", "Testing"); pdf_begin_page($pdf, 595, 842); pdf_add_outline($pdf, "Page 1"); $font = pdf_findfont($pdf, "Times New Roman", "winansi", 1); pdf_setfont($pdf, $font, 10); pdf_set_value($pdf, "textrendering", 1); pdf_show_xy($pdf, "Times Roman outlined", 50, 750); pdf_moveto($pdf, 50, 740); pdf_lineto($pdf, 330, 740); pdf_stroke($pdf); pdf_end_page($pdf); pdf_close($pdf); pdf_delete($pdf); echo "A HREF=getpdf.php finished / A";?
The script getpdf.php just returns the pdf document.
The PDFlib distribution contains a more complex example which creates a page with an analog clock.
The example was converted to PHP from the PDFlib example. (The same example is available in the CLibPDF documentation.)
Example 2. pdfclock example from PDFlib distribution
?php $radius = 200; $margin = 20; $pagecount = 10; $pdf = pdf_new(); if (!pdf_open_file($pdf, "")) {print error; exit;}; pdf_set_parameter($pdf, "warning", "true"); pdf_set_info($pdf, "Creator", "pdf_clock.php"); pdf_set_info($pdf, "Author", "Uwe Steinmann"); pdf_set_info($pdf, "Title", "Analog Clock"); while($pagecount- - 0) {pdf_begin_page($pdf, 2 * ($radius + $margin), 2 * ($radius + $margin)); pdf_set_parameter($pdf, "transition", "wipe"); pdf_set_value($pdf, "duration", 0.5); pdf_translate($pdf, $radius + $margin, $radius + $margin); pdf_save($pdf); pdf_setrgbcolor($pdf, 0.0, 0.0, 1.0); / * minute strokes * / pdf_setlinewidth($pdf, 2.0); for ($alpha = 0; $alpha 360; $alpha += 6) {pdf_rotate($pdf, 6.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin / 3, 0.0); pdf_stroke($pdf);} pdf_restore($pdf); pdf_save($pdf); / * 5 minute strokes * / pdf_setlinewidth($pdf, 3.0); for ($alpha = 0; $alpha 360; $alpha += 30) {pdf_rotate($pdf, 30.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin, 0.0); pdf_stroke($pdf);} $ltime = getdate(); / * draw hour hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['minutes'] / 60.0)+$ltime['hours']-3.0)*30.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius / 2, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw minute hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] / 60.0)+$ltime['minutes']-15.0)*6.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius * 0.8, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw second hand * / pdf_setrgbcolor($pdf, 1.0, 0.0, 0.0); pdf_setlinewidth($pdf, 2); pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] - 15.0) * 6.0)); pdf_moveto($pdf, -$radius / 5, 0.0); pdf_lineto($pdf, $radius, 0.0); pdf_stroke($pdf); pdf_restore($pdf); / * draw little circle at center * / pdf_circle($pdf, 0, 0, $radius / 30); pdf_fill($pdf); pdf_restore($pdf); pdf_end_page($pdf); # to see some difference sleep(1);} pdf_close($pdf); $buf = pdf_get_buffer($pdf); $len = strlen($buf); header("Content-type: application / pdf"); header("Content-Length: $len"); header("Content-Disposition: inline; filename=foo.pdf"); print $buf; pdf_delete($pdf);?
An alternative PHP module for PDF document creation based on FastIO' s An alternative PHP module for PDF document creation based on FastIO's ClibPDF is available.
Note that ClibPDF has a slightly different API than PDFlib.
Prev
Home
Next
overload
pdf_add_annotation
PHP Manual
Prev
Next
When using these functions, you may omit calls to pfpro_init() and pfpro_cleanup() as this extension will do so automatically if required.
You may perform any number of transactions using pfpro_process() between the two.
Note:
Be sure to read the Payflow Pro Developers Guide for full details of the required parameters.
This extension is not available on Windows platforms.
If you are going to use this extension in an SSL-enabled webserver or with other SSL components (such as the CURL+SSL extension) you MUST get the beta SDK.
Copy the header file pfpro.h to / usr / local / include and the library file libpfpro.so to / usr / local / lib.
The behaviour of these functions is affected by settings in php.ini.
Verisign Payflow Pro configuration options
pfpro.defaulthost / PFPRO_VERSION 3
PHP_INI_ALL
"test-payflow.verisign.com"
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
PostgreSQL database is Open Source product and available without cost.
Postgres, developed originally in the UC Berkeley Computer Science Department, pioneered many of the object-relational concepts now becoming available in some commercial databases.
It provides SQL92 / SQL99 language support, transaction integrity and type extensibility.
PostgreSQL is an open source descendant of this original Berkeley code.
PostgreSQL supports many character encoding including multibyte character encoding.
The current version and more information about PostgreSQL is available at http: / /www.postgresql.org /.
In order to enable PostgreSQL support, --with-pgsql[ =DIR] is required when you compile PHP.
DIR is the PostgreSQL base install directory, defaults to / usr / local / pgsql.
The behaviour of these functions is affected by settings in php.ini.
PostgreSQL configuration options
Default
pgsql.allow_persistent
PHP_INI_SYSTEM
"-1"
pgsql.max_links
PHP_INI_SYSTEM
"0"
pgsql.ignore_notice
PHP_INI_ALL
"0"
PHP_INI_ALL
Here is a short explanation of the configuration directives.
pg_lowrite()
pg_loimport()
pg_loexport()
The old pg_connect() / pg_pconnect() syntax will be deprecated to support asynchronous connections in the future.
Not all functions are supported by all builds.
If there is missing function, libpq does not support the feature required for the function.
It is also important that you do not use an older libpq than the PostgreSQL Server to which you will be connecting.
If you use libpq older than PostgreSQL Server expects, you may have problems.
Since version 6.3 (03 / 02 / 1998) PostgreSQL uses unix domain sockets by default.
A table is shown below describing these new connection possibilities.
This socket will be found in / tmp / .s.PGSQL.5432.
This option can be enabled with the '-i' flag to postmaster and it's meaning is: "listen on TCP / IP sockets as well as Unix domain sockets ".
Table 3.
Postmaster and PHP
Is the postmaster running and accepting TCP / IP (with -i) connection at'localhost 'on port '5432'? in / path / to / file.php on line 20.
A connection to PostgreSQL server can be established with the following value pairs set in the command string: $conn = pg_connect( "host=myHost port=myPort tty=myTTY options=myOptions dbname=myDB user=myUser password=myPassword ");
The previous syntax of: $conn = pg_connect ("host", "port", "options", "tty", "dbname") has been deprecated.
Environmental variables affect PostgreSQL server / client behavior.
For example, PostgreSQL module will lookup PGHOST environment variable when the hostname is omitted in the connection string.
Supported environment variables are different from version to version.
Refer to PostgreSQL Programmer' s Manual (libpq - Environment Variables) for details.
Make sure you set environment variables for appropriate user.
Use $_ENV or getenv() to check which environment variables are available to the current process.
Example 1.
Setting default parameters
PGHOST=pgsql.example.com PGPORT=7890 PGDATABASE=web-system PGUSER=web-user PGPASSWORD=secret PGDATESTYLE=ISO PGTZ=JST PGCLIENTENCODING=EUC-JP export PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD PGDATESTYLE PGTZ PGCLIENTENCODING
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Starting with PostgreSQL 7.1.0, you can store up to 1GB into a field of type text.
In older versions, this was limited to the block size (default was 8KB, maximum was 32KB, defined at compile time)
To use the large object (lo) interface, it is required to enclose large object functions within a transaction block.
A transaction block starts with a SQL statement BEGIN and if the transaction was valid ends with COMMIT or END.
If the transaction fails the transaction should be closed with ROLLBACK or ABORT.
Example 2.
Using Large Objects
?php $database = pg_connect ("dbname=jacarta"); pg_query ($database, "begin"); $oid = pg_lo_create ($database); echo "$oid\n"; $handle = pg_lo_open ($database, $oid, "w"); echo "$handle\n"; pg_lo_write ($handle, "large object data"); pg_lo_close ($handle); pg_query ($database, "commit");?
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module contains an interface to those functions defined in the IEEE 1003.1 (POSIX.1) standards document which are not accessible through other means.
POSIX.1 for example defined the open(), read(), write() and close() functions, too, which traditionally have been part of PHP 3 for a long time.
Some more system specific functions have not been available before, though, and this module tries to remedy this by providing easy access to these functions.
Warning
Sensitive data can be retrieved with the POSIX functions, e.g. posix_getpwnam() and friends.
None of the POSIX function perform any kind of access checking when safe mode is enabled.
It' s therefore strongly advised to disable the POSIX extension at all (use --disable-posix in your configure line) if you're operating in such an environment.
Note:
POSIX functions are enabled by default.
You can disable POSIX-like functions with --disable-posix.
The section about Process Control Functions maybe of interest for you.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to check the spelling of a word and offer suggestions.
Note:
To compile PHP with pspell support, you need the aspell and pspell libraries, available from http: / /aspell.sourceforge.net / and http: / /aspell.net / respectively.
If you have the libraries needed add the --with-pspell[ =dir] option when compiling PHP.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
The readline() functions implement an interface to the GNU Readline library.
These are functions that provide editable command lines.
An example being the way Bash allows you to use the arrow keys to insert characters or scroll through command history.
Note:
To use the readline functions, you need to install libreadline.
You can find libreadline on the home page of the GNU Readline project, at http: / /cnswww.cns.cwru.edu / ~chet / readline / rltop.html.
It' s maintained by Chet Ramey, who's also the author of Bash.
You can also use this functions with the libedit library, a non-GPL replacement for the readline library.
The libedit library is BSD licensend and available for download from http: / /sourceforge.net / projects / libedit /.
To use this functions you must compile the CGI or CLI version of PHP with readline support.
You need to configure PHP --with-readline[ =DIR].
In order you want to use the libedit readline replacement, configure PHP --with-libedit[ =DIR].
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The GNU Recode library converts files between various coded character sets and surface encodings.
The library recognises or produces nearly 150 different character sets and is able to convert files between almost any pair.
To be able to use the functions defined in this module you must compile your PHP interpreter using the --with-recode[ =DIR] option.
Crashes and startup problems of PHP may be encountered when loading the recode as extension after loading any extension of mysql or imap.
This is due a technical problem that both the c-client library used by imap and recode have their own hash_lookup() function and both mysql and recode have their own hash_insert function.
This is due to the fact that they both share the same internal symbol.
This extension has no resource types defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
PHP also supports regular expressions using a Perl-compatible syntax using the PCRE functions.
Those functions support non-greedy matching, assertions, conditional subpatterns, and a number of other features not supported by the POSIX-extended regular expression syntax.
Warning
The PCRE functions are.
Regular expressions are used for complex string manipulation in PHP.
The functions that support regular expressions are:
No external libraries are needed to build this extension.
To enable regexp support configure PHP --with-regex[ =TYPE].
TYPE can be one of system, apache, php.
The default is to use php.
Note:
Do not change the TYPE unless you know what you are doing.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Regular Expression Examples
ereg ("abc", $string); / * Returns true if"abc "is found anywhere in $string. * / ereg ("^abc", $string); / * Returns true if "abc"; is found at the beginning of $string. * / ereg ("abc$", $string); / * Returns true if "abc" is found at the end of $string. * / eregi ("(ozilla .[23]_BAR_MSIE.3)", $HTTP_USER_AGENT); / * Returns true if client browser is Netscape 2, 3 or MSIE 3. * / ereg ("([[:alnum :]]+) ([[:alnum :]]+) ([[:alnum :]]+)", $string,$regs); / * Places three space separated words into $regs[1], $regs[2] and $regs[3]. * / $string = ereg_replace ("^", "br /", $string); / * Put a br / tag at the beginning of $string. * / $string = ereg_replace ("$", "br /", $string); / * Put a br /; tag at the end of $string. * / $string = ereg_replace ("\n", "", $string); / * Get rid of any newline characters in $string. * /
The simpler shell style wildcard pattern matching is provided by fnmatch().
Prev
Home
Next
Up
PHP Manual
Prev
Next
It includes semaphores, shared memory and inter-process messaging (IPC).
This module provides also shared memory functions using System V shared memory.
Different httpd-daemons and even other programs (such as Perl, C,...) are able to access this data to provide a global data-exchange.
Use semaphores for synchronization.
Limits of Shared Memory by the Unix OS
max size of shared memory, normally 131072 bytes
minimum size of shared memory, normally 1 byte
They provide a simple and effective means of exchanging data between processes, without the need for setting up an alternative using unix domain sockets.
Support for this functions are not enabled by default.
To enable the System V messages support compile PHP with the option --enable-sysvmsg.
Name
sysvmsg.value
sysvmsg.string
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
It runs on high-end mainframe servers using the operating system BS2000 / OSD.
the ease of use of Java-, Web - and client / server connectivity,
the ability to manage tens and even hundreds of thousands of users.
Note:
PHP 4 does not support the SESAM database.
Name of BS2000 PLAM library containing the loadable SESAM driver modules.
Required for using SESAM functions.
The BS2000 PLAM library must be set ACCESS=READ,SHARE=YES because it must be readable by the apache server 's user id.
Required for using SESAM functions.
The application configuration file will usually contain a configuration like (see SESAM reference manual):
CNF=B NAM=K NOTYPE
Name of SESAM message catalog file.
Only if the SESAM message file is not installed in the system 's BS2000 message file table, it can be set with this directive.
The message catalog must be set ACCESS=READ,SHARE=YES because it must be readable by the apache server 's user id.
php3_sesam_configfile $SESAM.SESAM.CONF.AW
php3_sesam_messagecatalog
php3_sesam_messagecatalog $.SYSMES.SESAM-SQL.030
That means:
connecting the databases with the SESAM database handler
To get a connection between a PHP script and the database handler, the CNF and NAM parameters of the selected SESAM configuration file must match the id of the started database handler.
In case of distributed databases you have to start a SESAM / SQL-DCN agent with the distribution table including the host and database names.
The communication between PHP (running in the POSIX subsystem) and the database handler (running outside the POSIX subsystem) is realized by a special driver module called SQLSCI and SESAM connection modules using common memory.
Because of the common memory access, and because PHP is a static part of the web server, database accesses are very fast, as they do not require remote accesses via ODBC, JDBC or UTM.
In the configuration, you must tell PHP the name of this PLAM library, and the file link to use for the SESAM configuration file (As of SESAM V3.0, SQLSCI is available in the SESAM Tool Library, which is part of the standard distribution).
Because the SQL command quoting for single quotes uses duplicated single quotes (as opposed to a single quote preceded by a backslash, used in some other databases), it is advisable to set the PHP configuration directives php3_magic_quotes_gpc and php3_magic_quotes_sybase to On for all PHP scripts using the SESAM interface.
Because of limitations of the BS2000 process model, the driver can be loaded only after the Apache server has forked off its server child processes.
This will slightly slow down the initial SESAM request of each child, but subsequent accesses will respond at full speed.
When explicitly defining a Message Catalog for SESAM, that catalog will be loaded each time the driver is loaded (i.e., at the initial SESAM request).
The BS2000 operating system prints a message after successful load of the message catalog, which will be sent to Apache 's error_log file.
Make sure that the SESAM OML PLAM library and SESAM configuration file are readable by the user id running the web server.
Otherwise, the server will be unable to load the driver, and will not allow to call any SESAM functions.
Also, access to the database must be granted to the user id under which the Apache server is running.
Otherwise, connections to the SESAM database handler will fail.
Because of the larger memory overhead needed by "scrollable" cursors, the default is "sequential ".
When using "scrollable" cursors, the cursor can be freely positioned on the result set.
For each "scrollable" query, there are global default values for the scrolling type (initialized to:
SESAM_SEEK_NEXT) and the scrolling offset which can either be set once by sesam_seek_row() or each time when fetching a row using sesam_fetch_row().
When fetching a row using a "scrollable" cursor, the following post-processing is done for the global default values for the scrolling type and scrolling offset:
Table 2.
E.g., when retrieving columns with sesam_fetch_row(), the first column has the index 0, and the subsequent columns have indexes up to (but not including) the column count ($array["count"]).
When porting SESAM applications from other high level languages to PHP, be aware of this changed interface.
Where appropriate, the description of the respective php sesam functions include a note that the index is zero based.
When allowing access to the SESAM databases, the web server user should only have as little privileges as possible.
For most databases, only read access privilege should be granted.
Depending on your usage scenario, add more access rights as you see fit.
Never allow full control to any database for any user from the 'net!
Restrict access to php scripts which must administer the database by using password control and / or SSL security.
No two SQL dialects are ever 100% compatible.
When porting SQL applications from other database interfaces to SESAM, some adaption may be required.
The following typical differences should be noted:
Vendor specific data types
Some vendor specific data types may have to be replaced by standard SQL data types (e.g., TEXT could be replaced by VARCHAR(max. size)).
Keywords as SQL identifiers
In SESAM (as in standard SQL), such identifiers must be enclosed in double quotes (or renamed).
Display length in data types
Instead of int( 4) (intended use: integers up to '9999'), SESAM requires simply int Instead of int(4) (intended use: integers up to '9999'), SESAM requires simply int for an implied size of 31 bits.
Also, the only datetime data types available in SESAM are:
DATE, TIME( 3) and TIMESTAMP(3).
SQL types with vendor-specific unsigned, zerofill, or auto_increment attributes
Unsigned and zerofill are not supported.
Auto_increment is automatic (use "INSERT... VALUES(*,...) "
Numeric variables must not be initialized with string constants.
Use DEFAULT 0 instead.
CREATE TABLE exmpl (xtime timestamp(3) DEFAULT TIMESTAMP '1970-01-01 00:00:00.000 'NOT NULL);
Some databases promise to guess / estimate the number of the rows in a query result, even though the returned value is grossly incorrect.
SESAM does not know the number of rows in a query result before actually fetching them.
If you REALLY need the count, try SELECT COUNT(...) WHERE..., it will tell you the number of hits.
A second query will (hopefully) return the results.
In SESAM, in the DROP TABLE command, the table name must be either followed by the keyword RESTRICT or CASCADE.
When specifying RESTRICT, an error is returned if there are dependent objects (e.g., VIEWs), while with CASCADE, dependent objects will be deleted along with the specified table.
SESAM does not currently support the BLOB type.
A future version of SESAM will have support for BLOB.
At the PHP interface, the following type conversions are automatically applied when retrieving SQL fields:
Table 3.
integer
float
string
string
The special "multiple fields" feature of SESAM allows a column to consist of an array of fields.
Such a "multiple field" column can be created like this:
Example 1.
Example 2.
INSERT INTO multi_field_test (pkey, multi(2..3)) VALUES ('Second', 'first_val', 'second_val ')
When retrieving a result row, "multiple columns" are accessed like "inlined "additional columns.
In the example above, "pkey" will have the index 0, and the three "multi(1..3) "columns will be accessible as indices 1 through 3.
For specific SESAM details, please refer to the SESAM / SQL-Server documentation (english) or the SESAM / SQL-Server documentation (german), both available online, or use the respective manuals.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Session support in PHP consists of a way to preserve certain data across subsequent accesses.
This enables you to build more customized applications and increase the appeal of your web site.
If you are familiar with the session management of PHPLIB, you will notice that some concepts are similar to PHP 's session support.
A visitor accessing your web site is assigned an unique id, the so-called session id.
This is either stored in a cookie on the user side or is propagated in the URL.
The session support allows you to register arbitrary numbers of variables to be preserved across requests.
If this is the case, the prior saved environment is recreated.
Registered variables which are undefined are marked as being not defined.
Note:
Note:
Please note when working with sessions that a record of a session is not created until a variable has been registered using the session_register() function or by adding a new key to the $_SESSION superglobal array.
This holds true regardless of if a session has been started using the session_start() function.
Session fixation
You need to take additional measures to actively protect the integrity of the session, depending on the value associated with it.
Assess the importance of the data carried by your sessions and deploy addditional protections - - this usually comes at a price, reduced convenience for the user.
In that case, cookies must be enabled unconditionally on the user side, or sessions will not work.
A leaked session id enables the third party to access all resources which are associated with a specific id.
If you link to an external site, the URL including the session id might be stored in the external site 's referrer logs.
If it is not encrypted, session ids will flow in plain text over the network.
No external libraries are needed to build this extension.
Optionally you can use shared memory allocation (mm), developed by Ralf S.
You have to download mm and install it.
Note that the session storage module for mm does not guarantee that concurrent accesses to the same session are properly locked.
Session support is enabled in PHP by default.
If you would not like to build your PHP with session support, you should specify the --disable-session option to configure.
To use shared memory allocation (mm) for session storage configure PHP --with-mm[=DIR].
You do not need to load any additional extension in order to use these functions.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Session configuration options
Name
Default
Changeable
The session management system supports a number of configuration options which you can place in your php.ini file.
We will give a short overview.
session.save_handler defines the name of the handler which is used for storing and retrieving data associated with a session.
Defaults to files.
See also session_set_save_handler().
session.save_path session.save_path defines the argument which is passed to the save handler.
If you choose the default files handler, this is the path where the files are created.
Defaults to / tmp.
If session.save_path 's path depth is more than 2, garbage collection will not be performed.
See also session_save_path().
Warning
If you leave this set to a world-readable directory, such as / tmp (the default), other users on the server may be able to hijack sessions by getting the list of files in that directory.
Note:
Windows users have to change this variable in order to use PHP 's session functions.
Make sure to specify a valid path, e.g.: c: / temp.
It should only contain alphanumeric characters.
Defaults to PHPSESSID.
See also session_name().
session.auto_start specifies whether the session module starts a session automatically on request startup.
Defaults to 0 (disabled).
session.serialize_handler defines the name of the handler which is used to serialize / deserialize data.
Currently, a PHP internal format (name php) and WDDX is supported (name wddx).
WDDX is only available, if PHP is compiled with WDDX support.
Defaults to php.
session.gc_probability specifies the probability that the gc (garbage collection) routine is started on each request in percent.
Defaults to 1.
session.gc_maxlifetime specifies the number of seconds after which data will be seen as' garbage 'and cleaned up.
Note:
If you are using the default file-based session handler, your filesystem must keep track of access times (atime).
Windows FAT does not so you will have to come up with another way to handle garbage collecting your session if you are stuck with a FAT filesystem or any other fs where atime tracking is not available.
session.referer_check contains the substring you want to check each HTTP Referer for.
If the Referer was sent by the client and the substring was not found, the embedded session id will be marked as invalid.
Defaults to the empty string.
session.entropy_file gives a path to an external resource (file) which will be used as an additional entropy source in the session id creation process.
Examples are / dev / random or / dev / urandom which are available on many Unix systems.
session.entropy_length specifies the number of bytes which will be read from the file specified above.
Defaults to 0 (disabled).
session.use_cookies session.use_cookies specifies whether the module will use cookies to store the session id on the client side.
Defaults to 1 (enabled).
session.use_only_cookies specifies whether the module will only use cookies to store the session id on the client side.
Defaults to 0 (disabled, for backward compatibility).
Enabling this setting prevents attacks involved passing session ids in URLs.
This setting was added in PHP 4.3.0.
session.cookie_lifetime specifies the lifetime of the cookie in seconds which is sent to the browser.
The value 0 means "until the browser is closed." Defaults to 0 .See also session_get_cookie_params() and session_set_cookie_params().
session.cookie_path session.cookie_path specifies path to set in session_cookie.
Defaults to / .See also session_get_cookie_params() and session_set_cookie_params().
session.cookie_domain specifies the domain to set in session_cookie.
Default is none at all.
See also session_get_cookie_params() and session_set_cookie_params().
session.cookie_secure specifies whether cookies should only be sent over secure connections.
Defaults to off.
This setting was added in PHP 4.0.4.
See also session_get_cookie_params() and session_set_cookie_params().
session.cache_limiter specifies cache control method to use for session pages (none / nocache / private / private_no_expire / public).
Defaults to nocache.
See also session_cache_limiter().
session.cache_expire specifies time-to-live for cached session pages in minutes, this has no effect for nocache limiter.
Defaults to 180.
See also session_cache_expire().
session.use_trans_sid whether transparent sid support is enabled or not.
Defaults to 0 (disabled).
Note:
For PHP 4.1.2 or less, it is enabled by compiling with --enable-trans-sid.
From PHP 4.2.0, trans-sid feature is always compiled.
URL based session management has additional security risks compared to cookie based session management.
Users may send an URL that contains an active session ID to their friends by email or users may save an URL that contains a session ID to their bookmarks and access your site with the same session ID always, for example.
url_rewriter.tags url_rewriter.tags specifies which html tags are rewritten to include session id if transparent sid support is enabled.
Defaults to a=href,area=href,frame=src,input=src,form=fakeentry
The track_vars and register_globals configuration settings influence how the session variables get stored and restored.
Note:
As of PHP 4.0.3, track_vars is always turned on.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Constant containing the session name and session ID in the form of "name=ID".
Note:
As of PHP 4.1.0, $_SESSION is available as a global variable just like $_POST, $_GET, $_REQUEST and so on.
Unlike $HTTP_SESSION_VARS, $_SESSION is always global.
Therefore, you do not need to use the global keyword for $_SESSION.
Please note that this documentation has been changed to use $_SESSION everywhere.
You can substitute $HTTP_SESSION_VARS for $_SESSION, if you prefer the former.
The keys in the $_SESSION associative array are subject to the same limitations as regular variable names in PHP, i.e. they cannot start with a number and must start with a letter or underscore.
For more details see the section on variables in this manual.
If register_globals is disabled, only members of the global associative array $_SESSION can be registered as session variables.
The restored session variables will only be available in the array $_SESSION.
Use of $_SESSION (or $HTTP_SESSION_VARS with PHP 4.0.6 or less) is recommended for improved security and code readablity.
With $_SESSION, there is no need to use the session_register(), session_unregister(), session_is_registered() functions.
Session variables are accessible like any other variables.
Example 1.
Registering a variable with $_SESSION.
?php session_start(); / / Use $HTTP_SESSION_VARS with PHP 4.0.6 or less if (!isset($_SESSION['count'])) {$_SESSION['count'] = 0;} else {$_SESSION['count']++;}?
Example 2.
Unregistering a variable with $_SESSION and register_globals disabled.
?php session_start(); / / Use $HTTP_SESSION_VARS with PHP 4.0.6 or less unset($_SESSION['count']);?
Example 3.
Unregistering a variable with register_globals enabled, after registering it using $_SESSION.
?php session_start(); / / With PHP 4.3 and later, you can also simply use the prior example. session_unregister('count');?
If register_globals is enabled, then each global variable can be registered as session variable.
Upon a restart of a session, these variables will be restored to corresponding global variables.
Since PHP must know which global variables are registered as session variables, users need to register variables with session_register() function.
You can avoid this by simply setting entries in $_SESSION.
Caution
If you are using $_SESSION and disable register_globals, do not use session_register(), session_is_registered() and session_unregister(), if your scripts shall work in PHP 4.2 and earlier.
You can use these functions in 4.3 and later.
If you enable register_globals, session_unregister() If you enable register_globals, session_unregister() should be used since session variables are registered as global variables when session data is deserialized.
Disabling register_globals is recommended for both security and performance reasons.
Example 4.
Registering a variable with register_globals enabled
?php if (!session_is_registered('count')) {session_register("count"); $count = 0;} else {$count++;}?
If register_globals is enabled, then the global variables and the $_SESSION entries will automatically reference the same values which were registered in the prior session instance.
If you register a new session variable by using session_register(), the entry in the global scope and the $_SESSION entry will not reference the same value until the next session_start().
I.e. a modification to the newly registered global variable will not be reflected by the $_SESSION entry.
This has been corrected in PHP 4.3.
There are two methods to propagate a session id:
URL parameter
The session module supports both methods.
The second method embeds the session id directly into URLs.
PHP is capable of transforming links transparently.
Unless you are using PHP 4.2 or later, you need to enable it manually when building PHP.
Under UNIX, pass --enable-trans-sid to configure.
Note:
For full XHTML conformance, specify amp; there.
Alternatively, you can use the constant SID which is always defined.
Otherwise, it expands to an empty string.
The following example demonstrates how to register a variable, and how to link correctly to another page using SID.
Example 5.
Counting the number of hits of a single user
?php if (!session_is_registered('count')) {session_register('count'); $count = 1;} else {$count++;}?
Hello visitor, you have seen this page ?php echo $count;? times. p To continue, A HREF="nextpage.php? ?php echo SID? "click here / A
The ?php echo SID? (?=SID? can be used if short_open_tag is enabled) is necessary to preserve the session id in the case that the user has disabled cookies.
The ?=SID? is not necessary, if --enable-trans-sid was used to compile PHP.
Note:
Non-relative URLs are assumed to point to external sites and hence don 't append the SID, as it would be a security risk to leak the SID to a different server.
To implement database storage, or any other storage method, you will need to use session_set_save_handler() to create a set of user-level storage functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Shmop is an easy to use set of functions that allows PHP to read, write, create and delete UNIX shared memory segments.
These functions will not typically work on Windows, as it does not support shared memory.
As of Windows 2000 though, enabling the php_shmop.dll in your php.ini will enable this functionality though.
Note:
In PHP 4.0.3, these functions were prefixed by shm rather than shmop.
No external libraries are needed to build this extension.
To use shmop you will need to compile PHP with the --enable-shmop parameter in your configure line.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Example 1.
Shared Memory Operations Overview
?php / / Create 100 byte shared memory block with system id if 0xff3 $shm_id = shmop_open( 0xff3, "c", 0644, 100); if(!$shm_id) {echo "Couldn't create shared memory segment\n";} / / Get shared memory block's size $shm_size = shmop_size($shm_id); echo "SHM Block Size: ".$shm_size. "has been created.\n"; / / Lets write a test string into shared memory $shm_bytes_written = shmop_write($shm_id, "my shared memory block", 0); if($shm_bytes_written != strlen("my shared memory block")) {echo "Couldn't write the entire length of data\n";} / / Now lets read the string back $my_string = shmop_read($shm_id, 0, $shm_size); if(!$my_string) {echo "Couldn't read from shared memory block\n";} echo "The data inside shared memory was: ".$my_string ."\n"; / /Now lets delete the block and close the shared memory segment if(!shmop_delete($shm_id)) {echo "Couldn't mark shared memory block for deletion .";} shmop_close($shm_id);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
On Windows these functions are only available on NT and not on Win95 / 98.
In order to use the UCD SNMP package, you need to define NO_ZEROLENGTH_COMMUNITY to 1 before compiling it.
After configuring UCD SNMP, edit config.h and search for NO_ZEROLENGTH_COMMUNITY.
It should look like this afterwards:
If you see strange segmentation faults in combination with SNMP commands, you did not follow the above instructions.
If you do not want to recompile UCD SNMP, you can compile PHP with the --enable-ucd-snmp-hack switch which will work around the misfeature.
This directory should be moved to DRIVE:\usr\mibs, where DRIVE must be replaced with the driveletter where PHP is installed on, e.g.: c:\usr\mibs.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The socket extension implements a low-level interface to the socket communication functions based on the popular BSD sockets, providing the possibility to act as a socket server as well as a client.
For a more generic client-side socket interface, see fsockopen() and pfsockopen().
When using these functions, it is important to remember that while many of them have identical names to their C counterparts, they often have different declarations.
Please be sure to read the descriptions to avoid confusion.
Those unfamiliar with socket programming can find a lot of useful material in the appropriate Unix man pages, and there is a great deal of tutorial information on socket programming in C on the web, much of which can be applied, with slight modifications, to socket programming in PHP.
The UNIX Socket FAQ might be a good start.
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
The socket functions described here are part of an extension to PHP which must be enabled at compile time by giving the --enable-sockets option to configure.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The socket extension was written to provide a useable interface to the powerful BSD sockets.
Care has been taken that the functions work equally well on Win32 and Unix implementations.
Almost all of the sockets functions may fail under certain conditions and therefore emit an E_WARNING message describing the error.
Sometimes this doesn 't happen to the desire of the developer.
For example the function socket_read() may suddenly emit an E_WARNING message because the connection broke unexpectedly.
It' s common to suppress the warning with the @ -operator and catch the error code within the application with the socket_last_error() function.
You may call the socket_strerror() function with this error code to retrieve a string describing the error.
See their description for more information.
Note:
The E_WARNING messages generated by the socket extension are in english though the retrieved error message will appear depending on the current locale (LC_MESSAGES):
Example 1.
Socket example:
Simple TCP / IP server
This example shows a simple talkback server.
Change the address and port Change the address and port variables to suit your setup and execute.
You may then connect to the server with a command similar to: telnet 192.168.1.53 10000 (where the address and port match your setup).
Anything you type will then be output on the server side, and echoed back to you.
To disconnect, enter 'quit'.
#! / usr / local / bin / php -q ?php error_reporting (E_ALL); / * Allow the script to hang around waiting for connections. * / set_time_limit (0); / * Turn on implicit output flushing so we see what we're getting * as it comes in. * / ob_implicit_flush (); $address = '192.168.1.53'; $port = 10000; if (($sock = socket_create (AF_INET, SOCK_STREAM, 0)) 0) {echo "socket_create() failed: reason: ". socket_strerror ($sock). "\n";} if (($ret = socket_bind ($sock, $address, $port)) 0) {echo "socket_bind() failed: reason:". socket_strerror ($ret). "\n";} if (($ret = socket_listen ($sock, 5)) 0) {echo "socket_listen() failed: reason: ". socket_strerror ($ret). "\n";} do {if (($msgsock = socket_accept($sock)) 0) {echo "socket_accept() failed: reason:". socket_strerror ($msgsock). "\n"; break;} / * Send instructions. * / $msg = "\nWelcome to the PHP Test Server. \n ". "To quit, type'quit '.
To shut down the server type 'shutdown'.\n"; socket_write($msgsock, $msg, strlen($msg)); do {if (FALSE === ($buf = socket_read ($msgsock, 2048))) {echo "socket_read() failed: reason: ". socket_strerror ($ret). "\n"; break 2;} if (!$buf = trim ($buf)) {continue;} if ($buf == 'quit') {break;} if ($buf == 'shutdown') {socket_close ($msgsock); break 2;} $talkback = "PHP:
You said '$buf'.\n"; socket_write ($msgsock, $talkback, strlen ($talkback)); echo "$buf\n";} while (true); socket_close ($msgsock);} while (true); socket_close ($sock);?
Example 2.
Socket example:
Simple TCP / IP client
This example shows a simple, one-shot HTTP client.
It simply connects to a page, submits a HEAD request, echoes the reply, and exits.
?php error_reporting (E_ALL); echo "h2 TCP / IP Connection / h2 \n"; / * Get the port for the WWW service. * / $service_port = getservbyname ('www', 'tcp'); / * Get the IP address for the target host. * / $address = gethostbyname ('www.example.com'); / * Create a TCP / IP socket. * / $socket = socket_create (AF_INET, SOCK_STREAM, 0); if ($socket 0) {echo "socket_create() failed: reason:". socket_strerror ($socket). "\n";} else {echo "OK.\n";} echo "Attempting to connect to '$address' on port '$service_port'.. ."; $result = socket_connect ($socket, $address, $service_port); if ($result 0) {echo "socket_connect() failed.\nReason: ($result) ". socket_strerror($result). "\n";} else {echo "OK.\n";} $in = "HEAD / HTTP / 1.0\r\n\r\n"; $out = ''; echo "Sending HTTP HEAD request.. ."; socket_write ($socket, $in, strlen ($in)); echo "OK.\n"; echo "Reading response:\n\n"; while ($out = socket_read ($socket, 2048)) {echo $out;} echo "Closing socket.. ."; socket_close ($socket); echo "OK.\n\n";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
There are many wrappers built into PHP by default (See Appendix I), and additional, custom wrappers may be added either within a PHP script using stream_register_wrapper(), or directly from an extension using the API Reference in Chapter 43.
Custom filters can be defined in a PHP script using stream_register_filter() or in an extension using the API Reference in Chapter 43.
See Appendix I for a list of PHP builtin wrappers.
Again, see Appendix I for a description of targets for builtin streams.
No external libraries are needed to build this extension.
This extension has no configuration directives defined in php.ini.
Example 1.
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions all manipulate strings in various ways.
Some more specialized sections can be found in the regular expression and URL handling sections.
For information on how strings behave, especially with regard to usage of single quotes, double quotes, and escape sequences, see the Strings entry in the Types section of the manual.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no constants defined.
For even more powerful string handling and manipulating functions take a look at the POSIX regular expression functions and the Perl compatible regular expression functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
The libswf does not have support for Windows.
For up to date SWF support take a look at the MING functions.
You can download libswf at ftp: / /ftp.sgi.com / sgi / graphics / grafica / flash.
Once you have libswf all you need to do is to configure --with-swf[ =DIR] Once you have libswf all you need to do is to configure --with-swf[=DIR] where DIR is a location containing the directories include and lib.
If you unpack the libswf distribution the two files will be in one directory.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Once you 've successfully installed PHP with Shockwave Flash support you can then go about creating Shockwave files from PHP.
You would be surprised at what you can do, take the following code:
Example 1.
?php swf_openfile ("test.swf", 256, 256, 30, 1, 1, 1); swf_ortho2 (-100, 100, -100, 100); swf_defineline (1, -70, 0, 70, 0, .2); swf_definerect (4, 60, -10, 70, 0, 0); swf_definerect (5, -60, 0, -70, 10, 0); swf_addcolor (0, 0, 0, 0); swf_definefont (10, "Mod"); swf_fontsize (5); swf_fontslant (10); swf_definetext (11, "This be Flash wit PHP !", 1); swf_pushmatrix (); swf_translate (-50, 80, 0); swf_placeobject (11, 60); swf_popmatrix (); for ($i = 0; $i 30; $i++) {$p = $i / (30-1); swf_pushmatrix (); swf_scale (1 -($p*.9), 1, 1); swf_rotate (60*$p, 'z'); swf_translate (20+20*$p, $p / 1.5, 0); swf_rotate (270*$p, 'z'); swf_addcolor ($p, 0, $p / 1.2, -$p); swf_placeobject (1, 50); swf_placeobject (4, 50); swf_placeobject (5, 50); swf_popmatrix (); swf_showframe ();} for ($i = 0; $i 30; $i++) {swf_removeobject (50); if (($i%4) == 0) {swf_showframe ();}} swf_startdoaction (); swf_actionstop (); swf_enddoaction (); swf_closefile ();?
Prev
Home
Next
Up
PHP Manual
Prev
Next
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
Table 2.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
Note:
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
Prev
Dealing with URL strings: encoding, decoding and parsing.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
token_name
For information on how variables behave, see the Variables entry in the Language Reference section of the manual.
There is no installation needed to use these functions; they are part of the PHP core.
Table 1.
Name
unserialize_callback_func
Here is a short explanation of the configuration directives.
See also unserialize().
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions are intended for work with WDDX.
After installing expat compile PHP with --enable-wddx.
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Example 1.
This example will produce:
Example 2.
?php $pi = 3.1415926; $packet_id = wddx_packet_start("PHP"); wddx_add_vars($packet_id, "pi"); / * Suppose $cities came from database * / $cities = array("Austin", "Novato", "Seattle"); wddx_add_vars($packet_id, "cities"); $packet = wddx_packet_end($packet_id); print $packet;?
This example will produce:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 1.
Example 1.
Example 2.
Example 3.
Example 4. xmltest.xml
Example 5. xmltest2.xml
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Currently this extension only supports the Sablotron library from the Ginger Alliance.
XSLT (Extensible Stylesheet Language (XSL) Transformations) is a language for transforming XML documents into other XML documents.
Information about XSLT and related technologies can be found at http: / /www.w3.org / TR / xslt.
If you need support for the old extension, please ask your questions on the PHP mailing lists.
Binaries are provided as well as source.
The Sablotron library should be installed somewhere your compiler can find it.
Make sure you have the same libraries linked to the Sablotron library as those, which are linked with PHP.
When asking for support, always mention these directives, and whether there are other versions of those libraries installed on your system somewhere.
If you compiled Sablotron with JavaScript support, you must specify the option: --with-sablot-js=DIR.
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
This extension has no resource types defined.
Drop all logging and error reporting.
Tell Sablotron to parse public entities.
Do not add the meta tag "Content-Type" for HTML output.
Suppress the whitespace stripping (on data files only).
Error return code, for scheme handlers.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module uses the functions of the ZZIPlib library by Guido Draheim.
Note that ZZIPlib only provides a subset of functions provided in a full implementation of the ZIP compression algorithm and can only read ZIP file archives.
A normal ZIP utility is needed to create the ZIP file archives read by this library.
Zip support in PHP is not enabled by default.
You will need to use the --with-zip[ =DIR] configuration option when compiling PHP to enable zip support.
Zip support before PHP 4.1.0 is experimental.
This section reflects the Zip extension as it exists in PHP 4.1.0 and later.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
This example opens a ZIP file archive, reads each file in the archive and prints out its contents.
The test2.zip archive used in this example is one of the test archives in the ZZIPlib source distribution.
Example 1.
Zip Usage Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This feature requires a C runtime library that provides the fopencookie() This feature requires a C runtime library that provides the fopencookie() function.
This module uses the functions of zlib by Jean-loup Gailly and Mark Adler.
You do not need to load any additional extension in order to use these functions.
The behaviour of these functions is affected by settings in php.ini.
Therefore there are three options in the configuration file php.ini.
Accept-Encoding "headers are added to the output.
If you output a "Content-Type: image /" header the compression is disabled, too (in order to circumvent a Netscape bug).
This option also accepts integer values instead of boolean "On" / "Off", using this you can set the output buffer size (default is 4KB).
You cannot specify additional output handlers if zlib.output_compression is activated here.
This extension has no resource types defined.
This example opens a temporary file and writes a test string to it, then it prints out the content of this file twice.
?php $filename = tempnam ('/ tmp', 'zlibtest') .'.gz'; print "html \n head / head \n body \n pre \n"; $s = "Only a test, test, test, test, test, test, test, test!\n"; / / open file for writing with maximum compression $zp = gzopen($filename, "w9"); / / write string to file gzwrite($zp, $s); / / close file gzclose($zp); / / open file for reading $zp = gzopen($filename, "r"); / / read 3 char print gzread($zp, 3); / / output until end of the file and close it. gzpassthru($zp); print "\n"; / / open file and print content (the 2nd time). if (readgzfile($filename) != strlen($s)) {echo "Error with zlib functions !";} unlink($filename); print" / pre \n / h1 / body \n / html \n";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
The following is a listing of predefined identifiers in PHP.
None of the identifiers listed here should be used as identifiers in a your scripts.
These lists include keywords and predefined variable, constant, and class names.
These lists are neither exhaustive or complete.
These words have special meaning in PHP.
Some of them represent things which look like functions, some look like constants, and so on--but they 're not, really: they are language constructs.
Using them as variable names is generally OK, but could lead to confusion.
Table G-1.
PHP Keywords
or
__LINE__
as
echo()
empty()
endforeach
endif
endwhile
eval
extends
for
function
list()
var
__FUNCTION__
__CLASS__
Prev
Home
Next
List of Function Aliases
Up
Predefined Variables
PHP Manual
Prev
Next
The following is a list of functions which create, use or destroy PHP resources.
The function is_resource() can be used to determine if a variable is a resource and get_resource_type() will return the type of resource it is.
Table H-1.
Resource Types
Resource Type Name
Created By
Used By
Destroyed By
None
None
VARIANT
PDF document with CPDF lib
dba_delete(), dba_exists(), dba_fetch(), dba_firstkey(), dba_insert(), dba_nextkey(), dba_optimize(), dba_replace(), dba_sync()
Persistent link to DBA database
Link to Dbase database
dbx_connect()
domxml attribute
ftp
GD Image
None
Font for GD
imagepsfreefont()
gmp_intval(), gmp_strval(), gmp_add(), gmp_sub(), gmp_mul(), gmp_div_q(), gmp_div_r(), gmp_div_qr(), gmp_div(), gmp_mod(), gmp_divexact(), gmp_cmp(), gmp_neg(), gmp_abs(), gmp_sign(), gmp_fact(), gmp_sqrt(), gmp_sqrtrm(), gmp_perfect_square(), gmp_pow(), gmp_powm(), gmp_prob_prime(), gmp_gcd(), gmp_gcdext(), gmp_invert(), gmp_legendre(), gmp_jacobi(), gmp_random(), gmp_and(), gmp_or(), gmp_xor(), gmp_setbit(), gmp_clrbit(), gmp_scan0(), gmp_scan1(), gmp_popcount(), gmp_hamdist()
None
Hyperwave object
hw_close(), hw_free_document()
hyperwave link persistent
Persistent link to Hyperwave server
Link to icap server
Link to IMAP, POP3 server
Link to ingresII base
None
Persistent link to ingresII base
Link to Interbase database
None
Interbase query
ibase_fetch_row(), ibase_fetch_object(), ibase_field_info(), ibase_num_fields()
Interbase Result
Interbase transaction
ldap result
ldap result entry
SWFButton
SWFTextField
Link to mSQL database
None
Persistent link to mSQL
mSQL result
Link to Microsft SQL Server database
None
Persistent link to Microsft SQL Server
Microsft SQL Server result
mysql_affected_rows(), mysql_change_user(), mysql_create_db(), mysql_data_seek(), mysql_db_name(), mysql_db_query(), mysql_drop_db(), mysql_errno(), mysql_error(), mysql_insert_id(), mysql_list_dbs(), mysql_list_fields(), mysql_list_tables(), mysql_query(), mysql_result(), mysql_select_db(), mysql_tablename(), mysql_get_host_info(), mysql_get_proto_info(), mysql_get_server_info()
Link to MySQL database
mysql_affected_rows(), mysql_change_user(), mysql_create_db(), mysql_data_seek(), mysql_db_name(), mysql_db_query(), mysql_drop_db(), mysql_errno(), mysql_error(), mysql_insert_id(), mysql_list_dbs(), mysql_list_fields(), mysql_list_tables(), mysql_query(), mysql_result(), mysql_select_db(), mysql_tablename(), mysql_get_host_info(), mysql_get_proto_info(), mysql_get_server_info()
None
mysql result
Link to Oracle database
Oracle Cursor
Link to ODBC database
None
Persistent link to ODBC database
OpenSSL key
Oracle cursor
ora_logoff()
oracle link persistent
Persistent link to oracle database
pdf_close(), pdf_delete()
pdf_get_image_height(), pdf_get_image_width(), pdf_open_CCITT(), pdf_place_image()
pdf_close_image()
pdf object
pdf outline
pgsql large object
pg_lo_open()
pg_lo_open(), pg_lo_create(), pg_lo_read(), pg_lo_read_all(), pg_lo_seek(), pg_lo_tell(), pg_lo_unlink(), pg_lo_write()
pg_lo_close()
Link to PostgreSQL database
Persistent link to PostgreSQL database
PostgreSQL result
None
pspell dictionary
None
pspell configuration
xslt_closelog(), xslt_openlog(), xslt_run(), xslt_set_sax_handler(), xslt_errno(), xslt_error(), xslt_fetch_result(), xslt_free()
XSLT parser
shmop_open()
shmop_read(), shmop_write(), shmop_size(), shmop_delete()
shmop_close()
Link to Sybase database using DB library
None
Persistent link to Sybase database using DB library
Sybase result using DB library
Link to Sybase database using CT library
None
Persistent link to Sybase database using CT library
Sybase result using CT library
gz-compressed file
Prev
Home
Next
Standard Predefined Constants
Up
PHP Manual
Prev
Chapter 5.
Security
Next
When PHP is used as an Apache module it inherits Apache' s user permissions (typically those of the "nobody "user).
This has several impacts on security and authorization.
For example, if you are using PHP to access a database, unless that database has built-in access control, you will have to make the database accessable to the "nobody" user.
This means a malicious script could access and modify the database, even without a username and password.
It' s entirely possible that a web spider could stumble across a database administrator's web page, and drop all of your databases.
You can protect against this with Apache authorization, or you can design your own access model using LDAP, .htaccess files, etc. and include that code as part of your PHP scripts.
Often, once security is established to the point where the PHP user (in this case, the apache user) has very little risk attached to it, it is discovered that PHP is now prevented from writing any files to user directories.
Or perhaps it has been prevented from accessing or changing databases.
It has equally been secured from writing good and bad files, or entering good and bad database transactions.
A frequent security mistake made at this point is to allow apache root permissions, or to escalate apache 's abilitites in some other way.
Escalating the Apache user' s permissions to root is extremely dangerous and may compromise the entire system, so sudo'ing, chroot'ing, or otherwise running as root should not be considered by those who are not security professionals.
There are some simpler solutions.
By using open_basedir By using open_basedir you can control and restrict what directories are allowed to be used for PHP.
You can also set up apache-only areas, to restrict all web based activity to non-user, or non-system, files.
Prev
Home
Next
Installed as CGI binary
Up
Filesystem Security
PHP Manual
Prev
Chapter 5.
Security
Next
Using PHP as a CGI binary is an option for setups that for some reason do not wish to integrate PHP as a module into server software (like Apache), or will use PHP with different kinds of CGI wrappers to create safe chroot and setuid environments for scripts.
This setup usually involves installing executable PHP binary to the web server cgi-bin directory.
CERT advisory CA-96.11 recommends against placing any interpreters into cgi-bin.
Even if the PHP binary can be used as a standalone interpreter, PHP is designed to prevent the attacks this setup makes possible:
Accessing system files: http: / /my.host / cgi-bin / php? / etc / passwd
The query information in a url after the question mark (?) is passed as command line arguments to the interpreter by the CGI interface.
Usually interpreters open and execute the file specified as the first argument on the command line.
When invoked as a CGI binary, PHP refuses to interpret the command line arguments.
Accessing any web document on server: http: / /my.host / cgi-bin / php / secret / doc.html
The path information part of the url after the PHP binary name, / secret / doc.html is conventionally used to specify the name of the file to be opened and interpreted by the CGI program.
Usually some web server configuration directives (Apache:
Action) are used to redirect requests to documents like http: / /my.host / secret / script.php to the PHP interpreter.
With this setup, the web server first checks the access permissions to the directory / secret, and after that creates the redirected request http: / /my.host / cgi-bin / php / secret / script.php.
This way any user able to access / cgi-bin / php is able to access any protected document on the web server.
In PHP, compile-time configuration option --enable-force-cgi-redirect and runtime configuration directives doc_root and user_dir can be used to prevent this attack, if the server document tree has any directories with access restrictions.
See below for full the explanation of the different combinations.
If your server does not have any content that is not restricted by password or ip based access control, there is no need for these configuration options.
If your web server does not allow you to do redirects, or the server does not have a way to communicate to the PHP binary that the request is a safely redirected request, you can specify the option --enable-force-cgi-redirect to the configure script.
You still have to make sure your PHP scripts do not rely on one or another way of calling the script, neither by directly http: / /my.host / cgi-bin / php / dir / script.php nor by redirection http: / /my.host / dir / script.php.
Redirection can be configured in Apache by using AddHandler and Action directives (see below).
This compile-time option prevents anyone from calling PHP directly with a url like http: / /my.host / cgi-bin / php / secretdir / script.php.
Instead, PHP will only parse in this mode if it has gone through a web server redirect rule.
Usually the redirection in the Apache configuration is done with the following directives:
If your web server does not support any way of telling if the request is direct or redirected, you cannot use this option and you must use one of the other ways of running the CGI version documented here.
To include active content, like scripts and executables, in the web server document directories is sometimes consider an insecure practice.
If, because of some configuration mistake, the scripts are not executed but displayed as regular HTML documents, this may result in leakage of intellectual property or security information like passwords.
Therefore many sysadmins will prefer setting up another directory structure for scripts that are accessible only through the PHP CGI, and therefore always interpreted and not displayed as such.
Also if the method for making sure the requests are not redirected, as described in the previous section, is not available, it is necessary to set up a script doc_root that is different from web document root.
You can set the PHP script document root by the configuration directive doc_root in the configuration file, or you can set the environment variable PHP_DOCUMENT_ROOT.
If it is set, the CGI version of PHP will always construct the file name to open with this doc_root and the path information in the request, so you can be sure no script is executed outside this directory (except for user_dir below).
Another option usable here is user_dir.
When user_dir is unset, only thing controlling the opened file name is doc_root.
Opening an url like http: / /my.host / ~user / doc.php does not result in opening a file under users home directory, but a file called ~user / doc.php under doc_root (yes, a directory name starting with a tilde [~]).
If user_dir is set to for example public_php, a request like http: / /my.host / ~user / doc.php will open a file called doc.php under the directory named public_php under the home directory of the user.
If the home of the user is / home / user, the file executed is / home / user / public_php / doc.php.
user_dir expansion happens regardless of the doc_root setting, so you can control the document root and user directory access separately.
In / usr / local / bin, for example.
The only real downside to this option is that you will now have to put a line similar to:
To get PHP to handle PATH_INFO and PATH_TRANSLATED information correctly with this setup, the php parser should be compiled with the --enable-discard-path configure option.
Prev
Home
Next
Security
Up
Installed as an Apache module
PHP Manual
Prev
Chapter 5.
Security
Next
PHP, like any other large system, is under constant scrutiny and improvement.
Each new version will often include both major and minor changes to enhance and repair security flaws, configuration mishaps, and other issues that will affect the overall security and stability of your system.
Like other system-level scripting languages and programs, the best approach is to update often, and maintain awareness of the latest versions and their changes.
Prev
Home
Next
Hiding PHP
Up
Language Reference
PHP Manual
Prev
Chapter 5.
Security
Next
Nowadays, databases are cardinal components of any web based application by enabling websites to provide varying dynamic content.
Since very sensitive or secret informations can be stored in such database, you should strongly consider to protect them somehow.
To retrieve or to store any information you need to connect to the database, send a legitimate query, fetch the result, and close the connecion.
Nowadays, the commonly used query language in this interaction is the Structured Query Language (SQL).
See how an attacker can tamper with an SQL query.
As you can realize, PHP cannot protect your database by itself.
The following sections aim to be an introduction into the very basics of how to access and manipulate databases within PHP scripts.
Keep in mind this simple rule: defence in depth.
In the more place you take the more action to increase the protection of your database, the less probability of that an attacker succeeds, and exposes or abuse any stored secret information.
Good design of the database schema and the application deals with your greatest fears.
The first step is always to create the database, unless you want to use an existing third party 's one.
When a database is created, it is assigned to an owner, who executed the creation statement.
Usually, only the owner (or a superuser) can do anything with the objects in that database, and in order to allow other users to use it, privileges must be granted.
Applications should never connect to the database as its owner or a superuser, because these users can execute any query at will, for example, modifying the schema (e.g. dropping tables) or deleting its entire content.
You may create different database users for every aspect of your application with very limited rights to database objects.
The most required privileges should be granted only, and avoid that the same user can interact with the database in different use cases.
This means that if intruders gain access to your database using one of these credentials, they can only effect as many changes as your application can.
You are encouraged not to implement all the business logic in the web application (i.e. your script), instead to do it in the database schema using views, triggers or rules.
If the system evolves, new ports will be intended to open to the database, and you have to reimplement the logic in each separate database client.
Over and above, triggers can be used to transparently and automatically handle fields, which often provides insight when debugging problems with your application or tracing back transactions.
You may want to estabilish the connections over SSL to encrypt client / server communications for increased security, or you can use ssh to encrypt the network connection between clients and the database server.
If either of them is done, then monitoring your traffic and gaining informations in this way will be a hard work.
SSL / SSH protects data travelling from the client to the server, SSL / SSH does not protect the persistent data stored in a database.
SSL is an on-the-wire protocol.
Once an attacker gains access to your database directly (bypassing the webserver), the stored sensitive data may be exposed or misused, unless the information is protected by the database itself.
Encrypting the data is a good way to mitigate this threat, but very few databases offer this type of data encryption.
The easiest way to work around this problem is to first create your own encryption package, and then use it from within your PHP scripts.
PHP can assist you in this case with its several extensions, such as Mcrypt and Mhash, covering a wide variety of encryption algorithms.
The script encrypts the data be stored first, and decrypts it when retrieving.
See the references for further examples how encryption works.
In case of truly hidden data, if its raw representation is not needed (i.e. not be displayed), hashing may be also taken into consideration.
The well-known example for the hashing is storing the MD5 hash of a password in a database, instead of the password itself.
See also crypt() and md5().
Example 5-5.
Using hashed password field
/ / storing password hash $query = sprintf( "INSERT INTO users(name,pwd) VALUES('%s' ,'%s') ;", addslashes($username), md5($password)); $result = pg_exec($connection, $query); / / querying if user submitted the right password $query = sprintf("SELECT 1 FROM users WHERE name='%s' AND pwd='%s' ;", addslashes($username), md5($password)); $result = pg_exec($connection, $query); if (pg_numrows($result) 0) {echo "Welcome, $username !";} else {echo "Authentication failed for $username .";}
Many web developers are unaware of how SQL queries can be tampered with, and assume that an SQL query is a trusted command.
It means that SQL queries are able to circumvent access controls, thereby bypassing standard authentication and authorization checks, and sometimes SQL queries even may allow access to host operating system level commands.
Direct SQL Command Injection is a technique where an attacker creates or alters existing SQL commands to expose hidden data, or to override valuable ones, or even to execute dangerous system level commands on the database host.
This is accomplished by the application taking user input and combining it with static parameters to build a SQL query.
The following examples are based on true stories, unfortunately.
Owing to the lack of input validation and connecting to the database on behalf of a superuser or the one who can create users, the attacker may create a superuser in your database.
Example 5-6.
Splitting the result set into pages... and making superusers (PostgreSQL and MySQL)
$offset = argv[ 0]; / / beware, no input validation! $query = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset ;"; / / with PostgreSQL $result = pg_exec($conn, $query); / / with MySQL $result = mysql_query($query);
/ / in case of PostgreSQL 0; insert into pg_shadow(usename,usesysid,usesuper,usecatupd,passwd) select'crack', usesysid, 't' ,'t' ,'crack 'from pg_shadow where usename='postgres'; - - / / in case of MySQL 0; UPDATE user SET Password=PASSWORD('crack') WHERE user='root'; FLUSH PRIVILEGES;
Note:
It is common technique to force the SQL parser to ignore the rest of the query written by the developer with - - which is the comment sign in SQL.
A feasible way to gain passwords is to circumvent your search result pages.
What the attacker needs only is to try if there is any submitted variable used in SQL statement which is not handled properly.
These filters can be set commonly in a preceding form to customize WHERE, ORDER BY, LIMIT and OFFSET clauses in SELECT statements.
If your database supports the UNION construct, the attacker may try to append an entire query to the original one to list passwords from an arbitrary table.
Using encrypted password fields is strongly encouraged.
Example 5-7.
Listing out articles... and some passwords (any database server)
SQL UPDATEs are also subject to attacking your database.
These queries are also threatened by chopping and appending an entirely new query to it.
But the attacker might fiddle with the SET clause.
In this case some schema information must be possessed to manipulate the query successfully.
This can be acquired by examing the form variable names, or just simply brute forcing.
There are not so many naming convention for fields storing passwords or usernames.
Example 5-8.
From resetting a password... to gaining more privileges (any database server)
A frightening example how operating system level commands can be accessed on some database hosts.
Example 5-9.
Attacking the database host' s operating system (MSSQL Server)
Note:
Some of the examples above is tied to a specific database server.
This does not mean that a similar attack is impossible against other products.
Your database server may be so vulnerable in other manner.
You may plead that the attacker must possess a piece of information about the database schema in most examples.
You are right, but you never know when and how it can be taken out, and if it happens, your database may be exposed.
If you are using an open source, or publicly available database handling package, which may belong to a content management system or forum, the intruders easily produce a copy of a piece of your code.
It may be also a security risk if it is a poorly designed one.
These attacks are mainly based on exploiting the code not being written with security in mind.
Never trust on any kind of input, especially which comes from the client side, even though it comes from a select box, a hidden input field or a cookie.
The first example shows that such a blameless query can cause disasters.
Never connect to the database as a superuser or as the database owner.
Use always customized users with very limited privileges.
Check if the given input has the expected data type.
PHP has a wide range of input validating functions, from the simplest ones found in Variable Functions and in Character Type Functions (e.g. is_numeric(), ctype_digit() respectively) onwards the Perl compatible Regular Expressions support.
If the application waits for numerical input, consider to verify data with is_numeric(), or silently change its type using settype(), or use its numeric representation by sprintf().
Example 5-10.
A more secure way to compose a query for paging
settype( $offset, 'integer'); $query = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset ;"; / / please note %d in the format string, using %s would be meaningless $query = sprintf("SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET %d ;", $offset);
Quote each non numeric user input which is passed to the database with addslashes() or addcslashes().
See the first example.
As the examples shows, quotes burnt into the static part of the query is not enough, and can be easily hacked.
Do not print out any database specific information, especially about the schema, by fair means or foul.
See also Error Reporting and Error Handling and Logging Functions.
You may use stored procedures and previously defined cursors to abstract data access so that users do not directly access tables or views, but this solution has another impacts.
Besides these, you benefit from logging queries either within your script or by the database itself, if it supports.
Obviously, the logging is unable to prevent any harmful attempt, but it can be helpful to trace back which application has been circumvented.
The more detail is generally better.
Prev
Home
Next
Filesystem Security
Up
Error Reporting
PHP Manual
Prev
Chapter 5.
Security
Next
With PHP security, there are two sides to error reporting.
One is beneficial to increasing security, the other is detrimental.
This allows the system cracker to probe for information about the server, to determine possible weaknesses.
For example, if an attacker had gleaned information about a page based on a prior form submission, they may attempt to override variables, or modify them:
Example 5-11.
Attacking Variables with a custom HTML page
The PHP errors which are normally returned can be quite helpful to a developer who is trying to debug a script, indicating such things as the function or file that failed, the PHP file it failed in, and the line number which the failure occured in.
This is all information that can be exploited.
It is not uncommon for a php developer to use show_source(), highlight_string(), or highlight_file() as a debugging measure, but in a live site, this can expose hidden variables, unchecked syntax, and other dangerous information.
Especially dangerous is running code from known sources with built-in debugging handlers, or using common debugging techniques.
If the attacker can determine what general technique you are using, they may try to brute-force a page, by sending various common debugging strings:
Example 5-12.
Exploiting common debugging variables
Regardless of the method of error handling, the ability to probe a system for errors leads to providing an attacker with more information.
For example, the very style of a generic PHP error indicates a system is running PHP.
If the attacker was looking at an .html page, and wanted to probe for the back-end (to look for known weaknesses in the system), by feeding it the wrong data they may be able to determine that a system was built with PHP.
A function error can indicate whether a system may be running a specific database engine, or give clues as to how a web page or programmed or designed.
This allows for deeper investigation into open database ports, or to look for specific bugs or weaknesses in a web page.
By feeding different pieces of bad data, for example, an attacker can determine the order of authentication in a script, (from the line number errors) as well as probe for exploits that may be exploited in different locations in the script.
A filesystem or general PHP error can indicate what permissions the webserver has, as well as the structure and organization of files on the web server.
Developer written error code can aggravate this problem, leading to easy exploitation of formerly "hidden" information.
There are three major solutions to this issue.
The first is to scrutinize all functions, and attempt to compensate for the bulk of the errors.
The second is to disable error reporting entirely on the running code.
The third is to use PHP 's custom error handling functions to create your own error handler.
Depending on your security policy, you may find all three to be applicable to your situation.
One way of catching this issue ahead of time is to make use of PHP' s own error_reporting(), to help you secure your code and find variable usage that may be dangerous.
By testing your code, prior to deployment, with E_ALL, you can quickly find areas where your variables may be open to poisoning or modification in other ways.
Once you are ready for deployment, by using E_NONE, you insulate your code from probing.
Example 5-13.
Finding dangerous variables with E_ALL
?php if ($username) {/ / Not initialized or checked before usage $good_login = 1;} if ($good_login == 1) {/ / If above test fails, not initialized or checked before usage fpassthru (" / highly / sensitive / data / index.html");}?
Prev
Home
Next
Database Security
Up
Using Register Globals
PHP Manual
Prev
Chapter 5.
Security
Next
PHP is subject to the security built into most server systems with respect to permissions on a file and directory basis.
This allows you to control which files in the filesystem may be read.
Care should be taken with any files which are world readable to ensure that they are safe for reading by all users who have access to that filesystem.
Since PHP was designed to allow user level access to the filesystem, it 's entirely possible to write a PHP script that will allow you to read system files such as / etc / passwd, modify your ethernet connections, send massive printer jobs out, etc.
This has some obvious implications, in that you need to ensure that the files that you read from and write to are the appropriate ones.
Consider the following script, where a user indicates that they 'd like to delete a file in their home directory.
This assumes a situation where a PHP web interface is regularly used for file management, so the Apache user is allowed to delete files in the user home directories.
Example 5-1.
Poor variable checking leads to....
?php / / remove a file from the user' s home directory $username = $_POST['user_submitted_name']; $homedir = "/ home / $username"; $file_to_delete = "$userfile"; unlink ("$homedir / $userfile"); echo "$file_to_delete has been deleted !";?
Example 5-2....
A filesystem attack
?php / / removes a file from anywhere on the hard drive that / / the PHP user has access to.
If PHP has root access: $username = ".. / etc /"; $homedir = "/ home /.. / etc /"; $file_to_delete = "passwd"; unlink (" / home /.. / etc / passwd"); echo "/ home /.. / etc / passwd has been deleted !";?
Only allow limited permissions to the PHP web user binary.
Check all variables which are submitted.
Example 5-3.
More secure file name checking
?php / / removes a file from the hard drive that / / the PHP user has access to. $username = $_SERVER[ 'REMOTE_USER']; / / using an authentication mechanisim $homedir = "/ home / $username"; $file_to_delete = basename("$userfile"); / / strip paths unlink ($homedir / $file_to_delete); $fp = fopen(" / home / logging / filedelete.log" ,"+a"); / /log the deletion $logstring = "$username $homedir $file_to_delete"; fputs ($fp, $logstring); fclose($fp); echo "$file_to_delete has been deleted !";?
Example 5-4.
More secure file name checking
?php $username = $_SERVER[ 'REMOTE_USER']; / / using an authentication mechanisim $homedir = "/ home / $username"; if (!ereg('^[^. / ][^ / ]*$', $userfile)) die('bad filename'); / /die, do not process if (!ereg('^[^. / ][^ / ]*$', $username)) die('bad username'); / /die, do not process / /etc...?
Depending on your operating system, there are a wide variety of files which you should be concerned about, including device entries (/ dev / or COM1), configuration files (/ etc / files and the .ini files), well known file storage areas (/ home /, My Documents), etc.
For this reason, it 's usually easier to create a policy where you forbid everything except for what you explicitly allow.
Prev
Home
Next
Installed as an Apache module
Up
Database Security
PHP Manual
Prev
Chapter 5.
Security
Next
In general, security by obscurity is one of the weakest forms of security.
But in some cases, every little bit of extra security is desirable.
A few simple techniques can help to hide PHP, possibly slowing down an attacker who is attempting to discover weaknesses in your system.
By setting expose_php = off in your php.ini file, you reduce the amount of information available to them.
Another tactic is to configure web servers such as apache to parse different filetypes through PHP, either with an .htaccess directive, or in the apache configuration file itself.
You can then use misleading file extensions:
Example 5-18.
Hiding PHP as another language
# Make PHP code look like other code types AddType application / x-httpd-php .asp .py .pl
Example 5-19.
Using unknown types for PHP extensions
# Make PHP code look like unknown types AddType application / x-httpd-php .bop .foo .133t
Example 5-20.
Using html types for PHP extensions
# Make all PHP code look like html AddType application / x-httpd-php .htm .html
Prev
Home
Next
User Submitted Data
Up
Keeping Current
PHP Manual
Prev
Next
PHP is a powerful language and the interpreter, whether included in a web server as a module or executed as a separate CGI binary, is able to access files, execute commands and open network connections on the server.
These properties make anything run on a web server insecure by default.
PHP is designed specifically to be a more secure language for writing CGI programs than Perl or C, and with correct selection of compile-time and runtime configuration options, and proper coding practices, it can give you exactly the combination of freedom and security you need.
As there are many different ways of utilizing PHP, there are many configuration options controlling its behaviour.
A large selection of options guarantees you can use PHP for a lot of purposes, but it also means there are combinations of these options and server configurations that result in an insecure setup.
The configuration flexibility of PHP is equally rivalled by the code flexibility.
PHP can be used to build complete server applications, with all the power of a shell user, or it can be used for simple server-side includes with little risk in a tightly controlled environment.
How you build that environment, and how secure it is, is largely up to the PHP developer.
This chapter starts with some general security advice, explains the different configuration option combinations and the situations they can be safely used, and describes different considerations in coding for different levels of security.
A completely secure system is a virtual impossibility, so an approach often used in the security profession is one of balancing risk and usability.
If every variable submitted by a user required two forms of biometric validation (such as a retinal scan and a fingerprint), you would have an extremely high level of accountability.
It would also take half an hour to fill out a fairly complex form, which would tend to encourage users to find ways of bypassing the security.
The best security is often inobtrusive enough to suit the requirements without the user being prevented from accomplishing their work, or over-burdening the code author with excessive complexity.
Indeed, some security attacks are merely exploits of this kind of overly built security, which tends to erode over time.
A phrase worth remembering:
A system is only as good as the weakest link in a chain.
If all transactions are heavily logged based on time, location, transaction type, etc. but the user is only verified based on a single cookie, the validity of tying the users to the transaction log is severely weakened.
When testing, keep in mind that you will not be able to test all possibilities for even the simplest of pages.
The input you may expect will be completely unrelated to the input given by a disgruntled employee, a cracker with months of time on their hands, or a housecat walking across the keyboard.
This is why it 's best to look at the code from a logical perspective, to discern where unexpected data can be introduced, and then follow how it is modified, reduced, or amplified.
The Internet is filled with people trying to make a name for themselves by breaking your code, crashing your site, posting inappropriate content, and otherwise making your day interesting.
It doesn 't matter if you have a small or large site, you are a target by simply being online, by having a server that can be connected to.
Many cracking programs do not discern by size, they simply trawl massive IP blocks looking for victims.
Try not to become one.
Prev
Home
Next
Configuration directives
Up
Installed as CGI binary
PHP Manual
Prev
Chapter 5.
Security
Next
One feature of PHP that can be used to enhance security is configuring PHP with register_globals = off.
By turning off the ability for any user-submitted variable to be injected into PHP code, you can reduce the amount of variable poisoning a potential attacker may inflict.
They will have to take the additional time to forge submissions, and your internal variables are effectively isolated from user submitted data.
While it does slightly increase the amount of effort required to work with PHP, it has been argued that the benefits far outweigh the effort.
Example 5-14.
Working with register_globals=on
?php if ($username) {/ / can be forged by a user in get / post / cookies $good_login = 1;} if ($good_login == 1) {/ / can be forged by a user in get / post / cookies, fpassthru (" / highly / sensitive / data / index.html");}?
Example 5-15.
Working with register_globals = off
?php if( $_COOKIE['username']) {/ / can only come from a cookie, forged or otherwise $good_login = 1; fpassthru (" / highly / sensitive / data / index.html");}?
Example 5-16.
Detecting simple variable poisoning
?php if ($_COOKIE['username'] !$_POST['username'] !$_GET['username']) {/ / Perform other checks to validate the user name... $good_login = 1; fpassthru (" / highly / sensitive / data / index.html");} else {mail("admin@example.com", "Possible breakin attempt", $_SERVER['REMOTE_ADDR']); echo "Security violation, admin has been alerted ."; exit;}?
Prev
Home
Next
Error Reporting
Up
User Submitted Data
PHP Manual
Prev
Chapter 5.
Security
Next
The greatest weakness in many PHP programs is not inherent in the language itself, but merely an issue of code not being written with security in mind.
For this reason, you should always take the time to consider the implications of a given piece of code, to ascertain the possible damage if an unexpected variable is submitted to it.
Example 5-17.
Dangerous Variable Usage
?php / / remove a file from the user' s home directory... or maybe / / somebody else's? unlink ($evil_var); / / Write logging of their access... or maybe an / etc / passwd entry? fputs ($fp, $evil_var); / / Execute something trivial.. or rm -rf *? system ($evil_var); exec ($evil_var);?
Will this script only affect the intended files?
Can unusual or undesirable data be acted upon?
Can this script be used in unintended ways?
Can this be used in conjunction with other scripts in a negative manner?
Will any transactions be adequately logged?
You may also want to consider turning off register_globals, magic_quotes, or other convenience settings which may confuse you as to the validity, source, or value of a given variable.
Working with PHP in error_reporting( E_ALL) mode can also help warn you about variables being used before they are checked or initialized (so you can prevent unusual data from being operated upon).
Prev
Home
Next
Using Register Globals
Up
Hiding PHP
PHP Manual
Prev
Chapter 43.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Next
Example 43-1. simple stream example that displays the PHP home page
Table 43-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
PHP Manual
Prev
Next
One or more of these values can be combined using the OR operator.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Table 43-1.
Table 43-2.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 43-1.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 43-1. php_stream_make_seekable() return values
Note:
Note:
Note:
Note:
Note:
In many cases, this function can only succeed when origstream In many cases, this function can only succeed when origstream is a newly opened stream with no data buffered in the stream layer.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Next
Example 43-2.
Example 43-3.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
php_stream_dirent char d_name[ MAXPATHLEN]
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
php_stream_statbuf struct stat sb
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table J-1.
Prev
Home
Next
Up
About the manual
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Create a file named hello.php and put it in your web servers root directory (DOCUMENT_ROOT) with the following content:
Example 2-1.
Our first PHP script: hello.php
html head title PHP Test / title / head body ?php echo "p Hello World / p";? / body / html
Use your browser to access the file with your web access URL, ending with the "/ hello.php" file reference.
When developing locally this url will be something like http: / /localhost / hello.php or http: / /127.0.0.1 / hello.php but this depends on the web servers configuration.
If everything is setup correctly, this file will be parsed by PHP and the following output will make it to your browser:
Note that this is not like a CGI script.
The file does not need to be executable or special in any way.
This program is extremely simple and you really didn 't need to use PHP to create a page like this.
Hello World using the PHP echo() statement.
If you tried this example and it didn 't output anything, or it prompted for download, or you see the whole file as text, chances are that the server you are on does not have PHP enabled.
Ask your administrator to enable it for you using the Installation Ask your administrator to enable it for you using the Installation chapter of the manual.
If you 're developing locally, also read the installation chapter to make sure everything is configured properly.
If problems continue to persist, don 't hesitate to use one of the many PHP support options.
The point of the example is to show the special PHP tag format.
In this example we used ?php to indicate the start of a PHP tag.
You may jump in and out of PHP mode in an HTML file like this all you want.
For more details, read the manual section on basic PHP syntax.
There are many text editors and Integrated Development Environments (IDEs) that you can use to create, edit and manage PHP files.
A partial list of these tools is maintained at PHP Editor 's List.
Having an editor with syntax highlighting can be helpful.
A Note on Word Processors:
Word processors such as StarOffice Writer, Microsoft Word and Abiword are not good choices for editing PHP files.
A Note on Windows Notepad:
Alternately, you can click on the 'Text Documents' drop-down menu in the save dialog box and change the setting to "All Files ".
Now that you' ve successfully created a simple PHP script that works, it's time to create the most famous PHP script!
Make a call to the phpinfo() function and you'll see a lot of useful information about your system and setup such as available Predefined Variables, loaded PHP modules, and configuration settings.
Take some time and review this important information.
Prev
Home
Next
A simple tutorial
Up
Something Useful
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
One of the most powerful features of PHP is the way it handles HTML forms.
The basic concept that is important to understand is that any form element in a form will automatically be available to your PHP scripts.
Please read the manual section on Variables from outside of PHP for more information and examples on using forms with PHP.
Here 's an example HTML form:
Example 2-6.
A simple HTML form
form action=" action.php "method="POST" Your name: input type="text "name="name" / Your age: input type="text "name="age" / input type="submit "/ form
There is nothing special about this form.
It is a straight HTML form with no special tags of any kind.
When the user fills in this form and hits the submit button, the action.php page is called.
In this file you would have something like this:
Example 2-7.
Printing data from our form
Hi ?php echo $_POST[ "name"];?.
You are ?php echo $_POST[ "age"];? years old.
A sample output of this script may be:
Hi Joe.
You are 22 years old.
There is nothing more to it.
The $_POST[ "name"] and $_POST["age"] variables are automatically set for you by PHP.
Earlier we used the $_SERVER autoglobal, now above we just introduced the $_POST Earlier we used the $_SERVER autoglobal, now above we just introduced the $_POST autoglobal which contains all POST data.
Notice how the method of our form is POST.
If we used the method GET then our form information would live in the $_GET If we used the method GET then our form information would live in the $_GET autoglobal instead.
You may also use the $_REQUEST autoglobal if you don 't care the source of your request data.
It contains a mix of GET, POST, COOKIE and FILE data.
See also the import_request_variables() function.
Prev
Home
Next
Something Useful
Up
Using old code with new versions of PHP
PHP Manual
Prev
Next
Here we would like to show the very basics of PHP in a short simple tutorial.
See the section titled What can PHP do for more information.
PHP-enabled web pages are treated just like regular HTML pages and you can create and edit them the same way you normally create regular HTML pages.
In this tutorial we assume that your server has support for PHP activated and that all files ending in .php are handled by PHP.
On most servers this is the default extension for PHP files, but ask your server administrator to be sure.
Just create your .php files and put them in your web directory and the server will magically parse them for you.
Think of these PHP-enabled files as simple HTML files with a whole new family of magical tags that let you do all sorts of things.
Let 's say you want to save precious bandwidth and develop locally.
You 'll most likely want to install a database as well, such as MySQL.
You can install these individually or a simpler way is to locate a pre-configured package that automatically installs all of these with just a few mouse clicks.
In linux, you may find rpmfind helpful for locating RPMs.
Prev
Home
Next
What can PHP do?
Up
Your first PHP-enabled page
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Now that PHP has grown to be a popular scripting language, there are more resources out there that have listings of code you can reuse in your own scripts.
For the most part the developers of the PHP language have tried to be backwards compatible, so a script written for an older version should run (ideally) without changes in a newer version of PHP, in practice some changes will usually be needed.
Two of the most important recent changes that affect old code are:
The deprecation of the old $HTTP_*_VARS arrays (which need to be indicated as global when used inside a function or method).
They are: $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_REQUEST, and $_SESSION.
The older $HTTP_*_VARS arrays, such as $HTTP_POST_VARS, still exist and have since PHP 3.
External variables are no longer registered in the global scope by default.
In other words, as of PHP 4.2.0 the PHP directive register_globals is off by default in php.ini.
The preferred method of accessing these values is via the autoglobal arrays mentioned above.
Older scripts, books, and tutorials may rely on this directive being on.
If on, for example, one could use $id from the URL http: / /www.example.com / foo.php?id=42.
Whether on or off, $_GET[ 'id'] is available.
Prev
Home
Next
Dealing with Forms
Up
What 's next?
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Let 's do something a bit more useful now.
We are going to check what sort of browser the person viewing the page is using.
In order to do that we check the user agent string that the browser sends as part of its HTTP request.
This information is stored in a variable.
Variables always start with a dollar-sign in PHP.
The variable we are interested in right now is $_SERVER[ "HTTP_USER_AGENT"].
It' s known as an Autoglobal (or Superglobal).
See the related manual page on Autoglobals for more information.
These special variables were introduced in PHP 4.1.0.
Before this time, we used the older $HTTP_*_VARS arrays instead, such as $HTTP_SERVER_VARS.
Although deprecated, these older variables still exist. (See also the note on old code.)
To display this variable, we can simply do:
Example 2-2.
Printing a variable (Array element)
A sample output of this script may be:
There are many types There are many types of variables available in PHP.
In the above example we printed an Array In the above example we printed an Array element.
Arrays can be very useful.
$_SERVER is just one variable that 's automatically made available to you by PHP.
A list can be seen in the Reserved Variables section of the manual or you can get a complete list of them by creating a file that looks like this:
Example 2-3.
Show all predefined variables with phpinfo()
If you load up this file in your browser you will see a page full of information about PHP along with a list of all the variables available to you.
You can put multiple PHP statements inside a PHP tag and create little blocks of code that do more than just a single echo.
For example, if we wanted to check for Internet Explorer we could do something like this:
Example 2-4.
Example using control structures and functions
?php if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {echo "You are using Internet Explorer br / ";}?
A sample output of this script may be:
You are using Internet Explorer br /
Here we introduce a couple of new concepts.
We have an if statement.
If you are familiar with the basic syntax used by the C language this should look logical to you.
If you don' t know enough C or some other language where the syntax used above is used, you should probably pick up any introductory PHP book and read the first couple of chapters, or read the Language Reference If you don't know enough C or some other language where the syntax used above is used, you should probably pick up any introductory PHP book and read the first couple of chapters, or read the Language Reference part of the manual.
You can find a list of PHP books at http: / /www.php.net / books.php.
The second concept we introduced was the strstr() function call. strstr() is a function built into PHP which searches a string for another string.
In this case we are looking for "MSIE" inside $_SERVER["HTTP_USER_AGENT"].
If the string is found, the function returns TRUE and if it isn 't, it returns FALSE.
If it returns TRUE, the if statement evaluates to TRUE If it returns TRUE, the if statement evaluates to TRUE and the code within its {braces} is executed.
Otherwise, it 's not.
Feel free to create similar examples, with if, else, and other functions such as strtoupper() and strlen().
Each related manual page contains examples too.
We can take this a step further and show how you can jump in and out of PHP mode even in the middle of a PHP block:
Example 2-5.
Mixing both HTML and PHP modes
?php if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {? h3 strstr must have returned true / h3 center b You are using Internet Explorer / b / center ?php} else {? h3 strstr must have returned false / h3 center b You are not using Internet Explorer / b / center ?php}?
A sample output of this script may be:
h3 strstr must have returned true / h3 center b You are using Internet Explorer / b / center
Instead of using a PHP echo statement to output something, we jumped out of PHP mode and just sent straight HTML.
The important and powerful point to note here is that the logical flow of the script remains intact.
Only one of the HTML blocks will end up getting sent to the viewer depending on if strstr() returned TRUE or FALSE In other words, if the string MSIE was found or not.
Prev
Home
Next
Your first PHP-enabled page
Up
Dealing with Forms
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
With what you know now you should be able to understand most of the manual and also the various example scripts available in the example archives.
You can also find other examples on the php.net websites in the links section: http: / /www.php.net / links.php.
Prev
Home
Next
Using old code with new versions of PHP
Up
PHP Manual
Prev
Appendix I.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix I.
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
List of Resource Types
Up
PHP Manual
Prev
Appendix I.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
A set of macros was introduced into Zend' s API that simplify access to zval containers (see Table 42-1).
Table 42-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Next
To work around this, you have to use a set of API functions to force a type conversion on every argument that' s being passed (see Table 32-1).
Table 32-1.
Note:
Figure 32-2 shows the output.
Figure 32-2.
Example 32-2.
For a description of both structures, see Table 32-2, Table 32-3 and Table 32-4.
Table 32-2.
See Table 32-3 for a description.
For a list of available types, see Table 32-4.
Table 32-3.
Table 32-4.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Next
Examples are given in in Example 32-3.
Example 32-3.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Figure 32-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Next
A very clever implementation of this can be found in the code handling PHP' s fsockopen() located in ext / standard / fsock.c, as shown in Example 32-1.
Example 32-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The default config.m4 shown in Example 27-1 is a bit more complex:
Example 27-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 38-1 shows a small demonstration of calling a user function.
Example 38-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP defines a set of macros that can be used in this process, the most useful of which are described in Table 41-1.
Table 41-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 28-1 shows the source.
Example 28-1.
Note:
The module shown earlier in Example 28-1 can be enabled with --enable-first_module or --enable-first_module=yes.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
readgzfile
PHP Manual
Prev
Next
Access to initialization entries can also be handled with the macros shown in Table 39-1.
Table 39-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Next
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This might sound a bit confusing at first, but it' s not that complicated (see Figure 24-1).
Figure 24-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 25.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 25.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
As shown in Figure 24-1 As shown in Figure 24-1 above, PHP can be extended primarily at three points: external modules, built-in modules, and the Zend engine.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 36.
Next
For examples of these functions, see Example 36-2.
Example 36-2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 36.
Next
Example 36-1 Example 36-1 shows a source example and its output.
Example 36-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 36.
Next
Table 36-1.
Figure 36-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These macros automatically set the correspondent type and value, as described in Table 35-1 and Table 35-2.
Note:
The macros in Table 35-1 automatically return from your function, those in Table 35-2 only set the return value; they don't return from your function.
Table 35-1.
Table 35-2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Next
The parameter list of this declaration is very important; you should keep these parameters in mind (see Table 31-1 for descriptions).
Table 31-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Next
Internally, zend_function_entry is defined as shown in Example 31-1.
Example 31-1.
Note:
Table 31-2 shows a list of all the macros that you can use to define functions.
Table 31-2.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Next
You can see the internal definition of this module in Example 31-2.
Example 31-2.
For reference purposes, you can find a list of the macros involved in declared startup and shutdown functions in Table 31-3.
Table 31-3.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
For a simple test procedure, you can copy it to your htdocs directory and try it with the source in Example 29-1.
Warning
Example 29-1.
Calling this PHP file in your Web browser should give you the output shown in Figure 29-1.
Figure 29-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
Table 33-1, Table 33-2 and Table 33-3 describe these functions.
Table 33-1.
Table 33-2.
Table 33-3.
This is done using zend_hash_update( )() for associative arrays (see Example 33-3) and zend_hash_index_update() for indexed arrays (see Example 33-4):
Example 33-3.
Example 33-4.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
To create your own constants, you can use the macros in Table 33-6.
Table 33-6.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
This is somewhat bad practice, but Table Table 33-5 describes macros that do exactly this task.
Table 33-5.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 33-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
The corresponding type value for longs is IS_LONG (see Example 33-2).
Example 33-2.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
Table 33-4.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up

PHP Handbuch
Zurück
Anhang K.
Über das Handbuch
Nach vorne
Experimentell wird auch XSLT (Extensible Stylesheet Language Transformations) für Bearbeitung und Formatierung verwendet.
Die Verwendung von XML als Quellformat bietet uns die Möglichkeit, aus den Quelldateien sehr viele verschiedene Formaten zu generieren, während man nur ein QUelldokument für alle Formate pflegen muß.
Die Programme für die Formatierung der HTML - und TeX -Versionen sind Jade, von James Clark und The Modular DocBook Stylesheets von Norman Walsh.
Microsoft HTML Help Workshop wird dazu verwendet, das Handbuch im Windows HTML Help Format zu erzeugen und natürlich auch PHP selbst, um eine zusätzliche Konvertierung und Formatierung zu erledigen.
Sie können das Handbuch in verschiedenen Sprachen und Formaten wie Text, HTML, PDF, PalmPilot DOC, PalmPilot iSilo und Windows HTML Help, unter http: / /www.php.net / docs.php downloaden.
Die Handbücher werden automatisch auf dem neuesten Stand gehalten, sobald der Inhalt verändert wurde.
Weitere Informationen zum Download des XML -Quellcodes dieser Dokumentation unter http: / /cvs.php.net /.
Die Dokumentation befindet sich im Modul phpdoc.
Zurück
Zum Anfang
Nach vorne
Wie Sie helfen können, die Dokumentation zu verbessern
Nach oben
Übersetzungen
PHP Handbuch
Zurück
Anhang K.
Über das Handbuch
Nach vorne
Es gibt drei Möglichkeiten, diese Dokumentation zu verbessern.
Wenn Sie Fehler in diesem Handbuch finden, egal in welcher Sprache, bitte teilen Sie uns diese über das Bug System unter http: / /bugs.php.net / mit.
Bezeichnen Sie den Bug als "Documentation Problem".
Dort können Sie uns auch Probleme mit einem bestimmten Handbuchformat mitteilen.
Anmerkung:
Bitte missbrauchen Sie das Bug System nicht, indem Sie Hilfegesuche absenden.
Verwenden Sie stattdessen dazu die Mailinglisten oder die Community Sites, die weiter oben erwähnt wurden.
Durch Kommentare können Sie anderen Lesern zusätzliche Codebeispiele, Warnungen und weitere Klärungen zur Verfügung stellen.
Aber tragen Sie bitte keine Bugreports in das Kommentarsystem ein.
Mehr über die Kommentarfuntkion können Sie im Abschnitt 'Über die Kommentare (User Notes)' dieses Anhangs lesen.
Wenn Sie Englisch und / oder einige andere Sprachen beherrschen, dann können Sie auch bei der Übersetzung helfen.
Wollen Sie eine neue Übersetzung beginnen oder bei einem vorhandenen Übersetzungsteam beitreten, lesen Sie bitte http: / /cvs.php.net / co.php / phpdoc / howto / howto.html.tar.gz.
Zurück
Zum Anfang
Nach vorne
Mehr Informationen über PHP finden
Nach oben
Wie wir die Formate generieren
PHP Handbuch
Zurück
Nach vorne
Das PHP Handbuch wird in diversen Formaten zur Verfügung gestellt.
Formate, die online lesbar sind und solche, die zum Download bereit stehen.
Anmerkung:
Einige Verlage haben gedruckte Versionen dieses Handbuchs veröffentlicht.
Wir können diese Bücher nicht empfehlen, da sie relativ schnell veraltet sind.
Sie können das Handbuch unter http: / /www.php.net / und zahllosen Mirrors online lesen.
Sie sollten generell immer einen Mirror in Ihrer Nähe verwenden.
Sie können sich das Handbuch entweder in purem (druckfreundlichen) HTML Format oder in einem HTML Format im Design der PHP Website ansehen.
Der Vorteil des Onlinehandbuchs gegenüber den meisten Offlineformaten ist die Integration von Kommentaren (User Notes), die von Usern eingetragen werden.
Ein offensichtlicher Nachteil ist, dass Sie online sein müssen, um das Onlinehandbuch anzusehen.
Welches Format das Beste für Sie ist hängt davon ab, welches Betriebssystem Sie verwenden und welches Sie am liebsten lesen.
Wenn Sie Informationen darüber suchen, wie das Handbuch in so vielen verschiedenen Formaten generiert wird, lesen Sie bitte den Abschnitt 'Wie wir die Formate generieren' in diesem Anhang.
Die plattformunabhängigsten Formate des Handbuchs sind die HTML - und Textversionen.
Das HTML Format steht sowohl als einzelne HTML-Datei, als auch als Paket von mehren einzelnen Dateien für jedes Kapitel (welches mehrere tausend Dateien ergibt) zur Verfügung.
Die HTML - und Textformate können als komprimierte tar-Dateien (mit bzip2 komprimiert) heruntergeladen werden.
Ein anderes geläufiges Format, welches plattformunabhängig ist, und das Format, was sich am besten zum drucken eignet, ist PDF (auch als Adobe Acrobat bekannt).
Seien Sie gewarnt, dieses Handbuch umfaßt fast 2000 Seiten und wird ständig erweitert.
Anmerkung:
Wenn Sie noch kein Programm installiert haben, über das Sie PDFs ansehen können, laden Sie sich den Adobe Acrobat Reader herunter.
Beide Formate sind ideal für diese Plattform.
Sie können Ihren Handheld dazu verwenden, auf Ihrem täglichen Weg zur Arbeit mit der DOC oder iSilo Software Ihre PHP-Kenntnisse aufzubessern, oder einfach nur, um schnell etwas nachzuschlagen.
Unter Windows gibt es ein HTML-Handbuch zur Verwendung mit der Windows HTML Hilfe.
Diese Version beinhaltet eine Volltextsuche, einen kompletten Index und Lesezeichen.
Viele bekannte PHP Entwicklungsumgebungen haben diese Version der Dokumentation für schnelleren Zugriff integriert.
Zurück
Zum Anfang
Nach vorne
Nach oben
Über die Kommentare (User Notes)
PHP Handbuch
Zurück
Anhang K.
Über das Handbuch
Nach vorne
Dieses Handbuch versucht nicht, Vorschriften über generelle Programmierpraktiken zu machen.
Wenn Sie das erste mal programmieren, oder noch ein Anfänger sind, werden Sie es schwer finden, PHP programmieren nur mit diesem Handbuch zu lernen.
Suchen Sie sich lieber eine Anleitung, die auf Anfänger zugeschnitten ist.
Sie finden eine Liste mit PHP-bezogenen Büchern unter http: / /www.php.net / books.php.
Es gibt eine ganze Reihe von aktiven Mailinglisten, um über die PHP-Programmierung zu diskutieren.
Hängen Sie selber an einem Problem fest, für das Sie keine Lösung finden, bekommen Sie unter Umständen Hilfestellung von jemandem auf einer der Listen.
Eine Liste der Mailinglisten finden Sie unter http: / /www.php.net / support.php, genauso wie Links zu den Archiven der Mailinglisten und anderen Supportseiten.
Außerdem gibt es unter http: / /www.php.net / links.php eine Liste von Websites mit Artikeln, Foren und Codebeispielen rund um PHP.
Zurück
Zum Anfang
Nach vorne
Über die Kommentare (User Notes)
Nach oben
Wie Sie helfen können, die Dokumentation zu verbessern
PHP Handbuch
Zurück
Anhang K.
Über das Handbuch
Nach vorne
Die Kommentare der Benutzer spielen eine wichtige Rolle in der Entwicklung des Handbuchs.
Dadurch, dass Benutzern erlaubt wird, Beispiele, Warnungen und weitere Klärungen über ihren Browser beizusteuern, ist es uns möglich, diese Rückmeldungen in den Text des Handbuchs einzuarbeiten.
Und bis die Kommentare eingearbeitet sind können sie online und in manchen Offlineformaten in der Form eingesehen werden, wie sie eingetragen wurden.
Anmerkung:
Die Kommentare sind nicht moderiert bevor sie online erscheinen, also kann für die Qualität des Schriftstils und der Codebeispiele, ja sogar für die Richigkeit der Beiträge, nicht garantiert werden. (Nicht, dass es irgendeine Garantie für die Qualität oder Richtigkeit des Handbuchs ansich gibt.)
Zurück
Zum Anfang
Nach vorne
Über das Handbuch
Nach oben
Mehr Informationen über PHP finden
PHP Handbuch
Zurück
Anhang K.
Über das Handbuch
Nach vorne
Das PHP Handbuch ist nicht nur in verschiedenen Formaten, sondern auch in verschiedenen Sprachen verfügbar.
Der Inhalt wird zuerst auf englisch geschrieben, bevor er von Teams auf der ganzen Welt in ihre Muttersprache übersetzt wird.
Wenn die Übersetzung einer bestimmten Funktion oder eines Kapitels noch nicht abgeschlossen ist, so wird die englische Version angezeigt.
Die Personen, die an der Handbuchübersetzung mitwirken, beginnen mit dem XML Quellcode, von http: / /cvs.php.net / und übersetzen diesen in ihre Muttersprache.
Sie verwenden nicht die HTML -, Text - oder PDF -Version.
Das Build System kümmert sich um die Konvertierungen von XML in lesbare Formate.
Anmerkung:
Dokumentationsteam, indem Sie die phpdoc Mailingliste abbonieren:
Senden Sie eine Email an phpdoc-subscribe@lists.php.net.
Schreiben Sie, dass Sie interessiert sind, das Handbuch zu übersetzen und es wird sich sicher jemand bei Ihnen melden, der Ihnen hilft, die Übersetzung in eine neue Sprache zu starten oder Sie mit einem schon bestehenden Dokumentationsteam für Ihre Sprache bekannt machen.
Im Moment ist das Handbuch (teilweise oder vollständig) in die folgenden Sprachen übersetzt:
Brasilianisches Portugiesisch, Tschechisch, Holländisch, Französisch, Deutsch, Ungarisch, Italienisch, Japanisch, Koreanisch, Polnisch, und Spanisch.
Sämtliche Übersetzungen können hier heruntergeladen werden: http: / /www.php.net / docs.php.
Zurück
Zum Anfang
Nach vorne
Wie wir die Formate generieren
Nach oben
Fehlendes
PHP Handbuch
Zurück
Nach vorne
Hier ist die Liste der Aliase.
Alle Aliase sind hier aufgelistet.
Dies würde zu einem nicht tragbaren Script führen.
Diese Liste soll all denen helfen, die ihre alten Scripts auf den neusten Stand bringen wollen.
Wie auch immer, manche Funktionen haben schlicht und einfach zwei Namen und keine ist zu bevorzugen. (Zum Beispiel sind is_int() und is_integer() die selben)
Diese Liste ist auf dem Stand von PHP 4.0.6.
Eine täglich aktuallisierte Aliasliste finden Sie hier.
Tabelle F-1.
Aliase
Hauptfunktion
verwendete Extension
Zurück
Zum Anfang
Nach vorne
Nach oben
Reservierte Schlüsselwörter in PHP
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Verschiedene Fragen
Die Geschichte von PHP und verwandten Projekten
PHP Handbuch
Zurück
Anhang E.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die COM Klasse bietet ein Gerüst zur Integration von (D )COM Komponenten in Ihre PHP Skripte.
COM Klassen Konstruktor.
Parameter:
Name oder Klassen-ID der gewünschten Komponente.
Name des DCOM Servers, von welchem die Komponente geholt werden soll.
Ist NULL angegeben, wird localhost angenommen.
Um DCOM zuzulassen, muss com.allow_dcom in der php.ini auf TRUE gesetzt sein.
Spezifiziert die Codepage, welche zur Konvertierung der PHP-Strings in Unicode-Strings und umgekehrt verwendet wird.
Mögliche Werte sind CP_ACP, CP_MACCP, CP_OEMCP, CP_SYMBOL, CP_THREAD_ACP, CP_UTF7 und CP_UTF8.
Beispiel 1.
COM Beispiel (1)
/ / Word starten $word = new COM( "word.application") or die("Konnte Word nicht instantiieren"); print "Word geladen, Version {$word - Version}\n"; / /Fenster anzeigen $word - Visible = 1; / /ein leeres Dokument öffnen $word - Documents - Add(); / /irgendetwas tun $word - Selection - TypeText("Dies ist ein Test.. ."); $word - Documents[1] - SaveAs("Useless test.doc"); / /Word schließen $word - Quit(); / /Das Objekt freigeben $word - Release(); $word = null;
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
COM Support Funktionen für Windows
Nach oben
PHP Handbuch
Zurück
Nach vorne
(PHP 3, PHP 4)
Ein Pseudo-Objekt-Orientierter Mechanismus zum Lesen eines Verzeichnisses.
Das per directory angegebene Verzeichnis wird geöffnet.
Sobald das Verzeichnis geöffnet ist, stehen 2 Eigenschaften zur Verfügung.
Die Eigenschaft Handle kann mit anderen Directory-Funktionen wie readdir(), rewinddir() und closedir() benutzt werden (Handles sind Verweise auf Einträge in einer internen Tabelle zur Verwaltung von Objekten).
Die Eigenschaft Path enthält die Pfadangabe des geöffneten Verzeichnisses.
Es sind 3 Methoden verfügbar: read, rewind und close.
Beispiel 1. dir() -Beispiel:
$d = dir( "/ etc"); echo "Handle: ".$d - handle." br \n"; echo "Path: ".$d - path. "br \n"; while($entry=$d - read()) {echo $entry." br \n";} $d - close();
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ein einfacher Container, um Variablen in VARIANT Strukturen zu verpacken.
VARIANT Klassen-Konstruktor.
Parameter:
Ist er nicht angegeben, wird ein VT_EMPTY Objekt erzeugt.
spezifiziert den Typ vom Inhalt des VARIANT Objektes.
Mögliche Werte sind VT_UI1, VT_UI2, VT_UI4, VT_I1, VT_I2, VT_I4, VT_R4, VT_R8, VT_INT, VT_UINT, VT_BOOL, VT_ERROR, VT_CY, VT_DATE, VT_BSTR, VT_DECIMAL, VT_UNKNOWN, VT_DISPATCH und VT_VARIANT.
Diese Werte sind wechselseitig exklusiv, können aber mit VT_BYREF vereinigt werden, um zu spezifizieren, dass es sich um einen Wert handelt.
Wird er weggelassen, wird der Typ von value verwendet.
Konsultieren Sie bitte die MSDN Library für weitere Informationen.
gibt die Codepage an, welche zur Konvertierung der PHP-Strings in Unicode-Strings und umgekehrt verwendet wird.
Mögliche Werte sind CP_ACP, CP_MACCP, CP_OEMCP, CP_SYMBOL, CP_THREAD_ACP, CP_UTF7 und CP_UTF8.
Zurück
Zum Anfang
Nach vorne
com
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei PHP 3.0.x existieren Apache-Anweisungen, die mit jeder Konfigurationseinstellung der php3.ini korrespondieren, ausgenommen Einstellungen mit dem Prefix "php3_".
Dieser Schalter wird benutzt, um die Boolean-Konfigurations-Option zu aktivieren. ("Admin")
Die Datei wird in die aufgerufene Datei eingebettet, als wenn Sie sie mittels der include() Funktion eingebunden hätten, dabei wird ein gesetzter include_path beachtet.
Hier können Sie ein Verzeichnis angeben, in dem die require(), include() und fopen_with_path() Funktionen nach Dateien suchen.
Wenn auch magic_quotes_sybase auf ON steht, wird ein single-quote mit einem weiteren single-quote anstatt eines Backslashs versehen.
Wenn auch der Schalter magic_quotes_sybase aktiviert ist, wird ein einfaches Anführungszeichen mit einem einfachen Anführungszeichen anstatt eines Backslashes versehen.
Dieses soll Abstürzen des Servers durch schlecht geschriebene oder falsche Skripte vorbeugen.
Sie sollten dies ausschalten, wenn der globale Bereich Ihrer Skripte nicht durch Benutzerdaten gestört werden soll.
In diesem Fall kÖnnen alle EGPCS-Variablen durch $HTTP_ENV_VARS, $HTTP_GET_VARS, $HTTP_POST_VARS, $HTTP_COOKIE_VARS und $HTTP_SERVER_VARS angespochen werden.
Wenn Sie die Option deaktiviert haben, müssen Sie die Langform des öffnenden Tags (?php? )verwenden.
Hier wird das temporäre Verzeichnis angegeben, in welchem Dateien gespeichert werden, die mittels file upload auf den Server geladen werden.
Die angegebene BS2000 Message-Katalogdatei muss durch Setzen von ACCESS=READ,SHARE=YES lesbar gemacht werden, da unter der Apache Server User-Id auf sie zugegriffen wird.
Zurück
Zum Anfang
Nach vorne
Problems?
Nach oben
Sicherheit
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
PHP bietet eine alternative Syntax für einige seiner Kontroll-Strukturen, als da sind if, while, for, foreach und switch.
Immer muss die öffnende Klammer durch einen Doppelpunkt ":" und die schließende Klammer durch ein endif;, endwhile;, endfor;, endforeach; oder endswitch; ersetzt werden.
A ist gleich 5 ?php endif;?
Im obigen Beispiel ist der HTML-Bereich "A ist gleich 5" in eine if -Anweisung mit alternativer Syntax eingebettet.
Der HTML-Bereich wird nur ausgegeben, wenn $a gleich 5 ist.
Die alternative Syntax kann auch auf else und elseif Die alternative Syntax kann auch auf else und elseif angewendet werden.
Es folgt eine if -Struktur mit elseif und else im alternativen Format:
if ($a == 5): print "a ist gleich 5"; print ".. ."; elseif ($a == 6): print "a ist gleich 6"; print "!! !"; else: print "a ist weder 5 noch 6"; endif;
Siehe auch while, for und if für weitere Beispiele.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Break bricht die Ausführung der aktuellen for, foreach while, do..while or switch Anweisungs-Sequenz ab.
Einem break kann optional ein nummerisches Argument angehängt werden, das die Anzahl der abzubrechenden Befehls-Sequenzen enthält.
$arr = array ('eins', 'zwei', 'drei', 'vier', 'stop', 'fünf'); while (list (, $val) = each ($arr)) {if ($val == 'stop') {break; / * Man kann hier auch 'break 1; 'schreiben. * /} echo "$val br \n"; / * Benutzung des optionalen Argumentes. * / $i = 0; while (++$i) {switch ($i) {case 5: echo "Bei 5 br \n"; break 1; / * Beendet nur switch. * / case 10: echo "Bei 10; quitting br \n"; break 2; / * Beendet switch und while. * / default: break;}}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Die Schleife wird an der aktuellen Stelle abgebrochen und es wird der nächste Durchlauf begonnen.
Continue kann optional ein nummerisches Argument erhalten, das angibt, wie viele Ebenen von enhaltenen Schleifen übersprungen werden sollen.
while (list ($key, $value) = each ($arr)) {if ($key% 2) {/ / überspringe ungerade Werte continue;} tue_was_mit_ungerade ($value);} $i = 0; while ($i+ + 5) {echo "Außn br \n"; while (1) {echo "nbsp; nbsp;Mitte br \n"; while (1) {echo" nbsp; nbsp;Innen br \n"; continue 3;} echo "Das wird nie ausgegeben. br \n";} echo "Dies auch nicht. br \n";}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Das Sprachkonstrukt declare Das Sprachkonstrukt declare wird dazu verwendet, um Ausführungsdirektiven für einen Codeblock anzugeben.
Die Schreibweise von declare ist der anderer Kontrollstrukturen ähnlich:
declare (Direktive) Anweisung
Die Directive gibt Ihnen die Möglichkeit, das Verhalten des declare -Blocks zu bestimmen.
Zur Zeit wird nur eine Direktive erkannt: die ticks (Weiter unten finden Sie mehr Informationen zu den ticks).
Der Anweisung steil des declare -Blocks wird ausgeführt - wie genau diese Ausführung passiert und welche Nebeneffekte während der Ausführung auftreten, hängt von der Direktive ab, die Sie im directive -Block angegeben haben.
Ein tick ist ein Ereigniss, das bei jedem N -ten Autreten der low-level Anweisungen innerhalb des declare Ein tick ist ein Ereigniss, das bei jedem N -ten Autreten der low-level Anweisungen innerhalb des declare Blocks, die vom Parser ausgeführt werden, auftritt.
Der Wert von N wird durch die Angabe von ticks= N innerhalb des declare -Blocks in dem directive Abschnitt bestimmt.
Das Ereignis / die Ereignisse, die bei jedem tick eintreten, legen Sie mit der Funktion register_tick_function() fest.
Weitere Einzelheiten können Sie dem Beispiel unten entnehmen.
Beachten Sie, dass mehr als ein Ereigniss für jeden tick eintreten kann.
Beispiel 12-1.
Profil eines Bereichs von PHP Code
?php / / Funktion, die bei Aufruf die Zeit aufzeichnet function profile ($dump = FALSE) {static $profile; / / Rückgabe der gespeicherten Zeit aus profile, danach löschen if ($dump) {$temp = $profile; unset ($profile); return ($temp);} $profile[] = microtime ();} / / Einen tick handler bestimmen register_tick_function("profile"); / / Funktion vor dem declare-Block initialisieren profile (); / / Ausführen eines Code-Blocks, jede 2te Anweisung löst einen tick aus declare (ticks=2) {for ($x = 1; $x 50; ++$x) {echo similar_text (md5($x), md5($x*$x)), "br / ;";}} / / Ausgabe der gespeicherten Daten aus dem Profiler print_r (profile (TRUE));?
Ticks sind gut für Debugging, einfaches Multitasking, Hintergrund I / O und viele andere Aufgaben geeignet.
Siehe auch register_tick_function() und unregister_tick_function().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Do..while -Schleifen sind den while -Schleifen sehr ähnlich, außer dass der Wahrheitsgehalt des Ausdrucks erst am Ende jedes Durchlaufs geprüft wird, statt am Anfang.
Wird diese Bedingung von Anfang an als FALSE ausgewertet endet die Ausführung der Schleife sofort).
Es gibt nur eine Syntax für do..while -Schleifen:
Da diese aber nicht erfüllt, also FALSE ist ($i ist nicht größer als 0), wird die Schleifenausführung beendet.
Erfahrene C-Anwender kennen auch die Möglichkeit, Programm-Blöcke mit do..while (0) einzuschliessen und dann die break Anweisung zu benutzen.
Der folgende Programm-Ausschnitt zeigt dies:
do {if ($i 5) {print "i ist nicht groß genug"; break;} $i *= $factor; if ($i $minimum_limit) {break;} print "i ist ok"; ...bearbeite i...} while(0);
Es ist nicht weiter tragisch, wenn Sie dieses Beispiel nicht oder nur zum Teil verstehen.
Sie können auch ohne dieses 'Feature' effektive PHP-Programme und Skripte schreiben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Häufig ist es erforderlich, eine Anweisung auszuführen, wenn eine bestimmte Bedingung erfüllt ist und eine andere Anweisung, falls sie nicht erfüllt ist.
Else erweitert eine if -Anweisung um die Ausführung von Anweisungen, sobald der Ausdruck der if -Anweisung als FALSE ausgewertet wird.
Der folgende Code wird z.B. a ist größer als b anzeigen, wenn $a größer ist als $b, anderenfalls a ist NICHT größer als b:
if ($a $b) {print "a ist größer als b";} else {print "a ist NICHT größer als b";}
Zurück
Zum Anfang
Nach vorne
Kontroll-Strukturen
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Elseif ist, wie der Name schon sagt, eine Verbindung von if und else.
Wie else erweitert sie eine if -Anweisung um die Ausführung anderer Anweisungen, sobald die normale if -Bedingung als FALSE angesehen wird.
Anders als bei else wird die Ausführung dieser alternativen Anweisungen nur durchgeführt, wenn die bei elseif angegebene alternative Bedingung als TRUE angesehen wird.
Der folgende Code wird z.B. a ist größer als b, a ist gleich b oder a ist kleiner als b ausgeben:
if ($a $b) {print "a ist größer als b";} elseif ($a == $b) {print "a ist gleich b";} else {print "a ist kleiner als b";}
Es kann mehrere elseif -Anweisungen innerhalb einer if -Anweisung geben.
Die erste elseif -Bedingung (falls vorhanden), die TRUE ist, wird ausgeführt.
Das Verhalten ist identisch zu 'elseif' (ein Wort).
Die Bedeutung der Syntax ist leicht unterschiedlich (falls Sie mit C vertraut sind, das ist das gleiche Verhalten) aber der Grundtenor ist der, dass beide Schreibweisen, bezogen auf das Ergebnis, sich exakt gleich verhalten.
Die elseif -Anweisung wird nur ausgeführt, wenn die vorausgehende if -Bedingung sowie jede vorherige elseif -Bedingung FALSE ist und die aktuelle elseif -Bedingung TRUE ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
Alternative Syntax für Kontroll-Strukturen
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
PHP 4 (nicht PHP 3) enthält ein foreach Konstrukt, genau wie Perl und einige andere Sprachen.
Wenn Sie versuchen foreach mit einer Variable eines anderen Datentyps oder einer nicht initialisierten Variable zu benutzen, gibt PHP einen Fehler aus.
Es gibt zwei Syntax-Formen; die zweite ist eine unbedeutende, aber sinnvolle Erweiterung der ersten Syntax:
foreach( array_expression as $value) Anweisung foreach(array_expression as $key = $value) Anweisung
Die erste Form durchläuft das array_expression -Array.
Dadurch wird beim nächsten Durchgang automatisch das nächste Element ausgewertet.
Die zweite Form arbeitet genauso, außer dass bei jedem Durchlauf auch der aktuelle Schlüssel der Variablen $key zugewiesen wird.
Anmerkung:
Sobald foreach zum ersten Mal ausgeführt wird, wird der interne Array-Pointer automatisch auf das erste Element des Arrays zurück gesetzt.
Das bedeutet, dass Sie vor einem Durchlauf von foreach reset() nicht aufrufen müssen.
Anmerkung:
Deshalb wird auch der Array-Pointer nicht wie bei dem each() -Konstrukt verändert und Veränderungen an ausgegebenen Arrayelementen haben keine Auswirkung auf das originale Array.
Trotzdem wird der interne Arrayzeiger des originalen Arrays bei der Verarbeitung bewegt.
Anmerkung:
Fehlermeldungen durch den Gebrauch von '@' zu unterdrücken ist bei foreach nicht möglich.
reset ($arr); while (list(, $value) = each ($arr)) {echo "Wert: $value br \n";} foreach ($arr as $value) {echo "Wert: $value br \n";}
Noch einige Beispiele, die die Anwendung verdeutlichen:
Nur der Wert * / $a = array (1, 2, 3, 17); foreach ($a as $v) {print "Aktueller Wert von \$a: $v.\n";} / * foreach Beispiel 2:
Schlüssel und Wert * / $a = array ("eins "= 1, "zwei" = 2, "drei "= 3, "siebzehn" = 17); foreach($a as $k = $v) {print "\$a[$k] = $v.\n";} / * foreach Beispiel 4: multidimensionale Arrays * / $a[0][0] = "a"; $a[0][1] = "b"; $a[1][0] = "y"; $a[1][1] = "z"; foreach($a as $v1) {foreach ($v1 as $v2) {print "$v2\n";}} / * foreach Beispiel 5: dynamische Arrays * / foreach(array(1, 2, 3, 4, 5) as $v) {print "$v\n";}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
For -Schleifen sind die komplexesten Schleifen in PHP.
Sie funktionieren wie ihr Gegenstück in C.
Die Syntax einer for -Schleife sieht so aus:
for (ausdr1; ausdr2; ausdr3) Anweisung
Der erste Ausdruck (ausdr1) wird beim Schleifenbeginn (ohne jegliche Vorbedingung) geprüft bzw. ausgeführt.
Zu Beginn jedes Durchlaufs wird nun ausdr2 geprüft.
Wenn dieser TRUE ist, fährt die Schleife fort mit der Ausführung der nachfolgenden Anweisung.
Ist das Ergebnis FALSE, wird die Schleife beendet.
Am Ende jedes Durchlaufs wird ausdr3 geprüft (ausgeführt).
Ist ausdr2 leer, wird die Schleife endlos oft durchlaufen (PHP wertet diesen, wie in C, implizit als TRUE).
Das ist nicht so sinnlos, wie Sie vielleicht glauben, weil man häufig eine Schleife erst durch eine bedingte break -Anweisung statt durch eine unwahr werdende for -Bedingung beenden möchte.
Beachten Sie die folgenden Beispiele.
Alle geben Zahlen von 1 bis 10 aus:
/* Beispiel 1 * / for ($i = 1; $i = 10; $i++) {print $i;} / * Beispiel 2 * / for ($i = 1;;$i++) {if ($i 10) {break;} print $i;} / * Beispiel 3 * / $i = 1; for (;;) {if ($i 10) {break;} print $i; $i++;} / * Beispiel 4 * / for ($i = 1; $i = 10; print $i, $i++);
Selbstverständlich sieht das erste (oder vielleicht das vierte) Beispiel am besten aus, aber Sie werden noch feststellen, dass es oftmals ganz nützlich sein kann, leere Parameter in for -Schleifen zu verwenden.
PHP unterstützt auch bei for -Schleifen die alternative "Doppelpunkt-Syntax".
Anweisung;...; endfor;
Andere Sprachen haben für das Durchlaufen eines Hash´s oder Arrays eine foreach -Anweisung.
PHP 3 hat dies nicht; im Gegensatz zu PHP 4 (vgl. foreach).
In PHP 3 kann man dafür eine Kombination von while mit der list() - und each() -Funktion einsetzen.
Beispiele finden Sie in der Dokumentation zu diesen Funktionen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Jedes PHP-Skript besteht aus einer Reihe von Anweisungen.
Eine Anweisung kann aus einem Funktionsaufruf, einer Schleife, einer bedingten Anweisung oder einem Befehl, der nichts macht (eine leere Anweisung), bestehen.
Jede Anweisung endet gewöhnlich mit einem Semikolon.
Darüber hinaus können Anweisungen zu einer Anweisungsgruppe zusammengefasst werden, welche durch geschweifte Klammern begrenzt wird.
Eine Anweisungsgruppe ist auch eine Anweisung.
Die unterschiedlichen Arten von Anweisungen werden in diesem Abschnitt erläutert.
Das if -Konstrukt ist eine der wichtigsten Möglichkeiten vieler Programmier-Sprachen, PHP eingeschlossen.
Es erlaubt die bedingte Ausführung von Programmteilen.
PHP kennt eine if -Struktur, die ähnlich der Programmiersprache C ist:
if (ausdr) Anweisung
Wie im Abschnitt über Ausdrücke beschrieben, wird ausdr auf seinen boolschen Wertinhalt ausgewertet.
Wenn ausdr als TRUE ausgewertet wird, führt PHP die Anweisung aus, falls die Auswertung FALSE ergibt, wird sie übergangen.
Mehr Informationen welche Werte als FALSE ausgewertet werden finden Sie im Abschnitt 'Umwandlung nach boolean'.
Das folgende Beispiel wird a ist größer als b anzeigen, wenn $a größer als $b ist:
if ($a $b) print "a ist größer als b";
Oft werden Sie die bedingte Ausführung von mehr als einer Anweisung wollen.
Selbstverständlich ist es nicht erforderlich, jede Anweisung mit einer if -Bedingung zu versehen.
Statt dessen können Sie mehrere Anweisungen in Gruppen zusammenfassen.
Danach wird der Wert von $a in $b gespeichert:
if ($a $b) {print "a ist größer als b"; $b = $a;}
Das ermöglicht ihnen völlige Flexibilität bei der bedingten Ausführung verschiedenster Programmteile.
Zurück
Zum Anfang
Nach vorne
Array Operatoren
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Die switch -Anweisung ist gleichbedeutend einer Reihe von if -Anweisungen mit dem gleichen Parameter.
Häufig wollen Sie ein und dieselbe Variable (bzw. den selben Ausdruck) mit verschiedensten Werten vergleichen und in Abhängigkeit vom Auswertungsergebnis verschiedene Programmteile ausführen.
Genau das ermöglicht die switch -Anweisung.
Die folgenden zwei Beispiele zeigen zwei verschiedene Wege, das Gleiche zu bewirken; eines gebraucht mehrere if -Anweisungen, das andere eine switch -Anweisung:
if ($i == 0) {print "i ist gleich 0";} if ($i == 1) {print "i ist gleich 1";} if ($i == 2) {print "i ist gleich 2";} switch ($i) {case 0: print "i ist gleich 0"; break; case 1: print "i ist gleich 1"; break; case 2: print "i ist gleich 2"; break;}
Es ist wichtig, die Ausführung einer switch -Anweisung zu verstehen, um Fehler zu vermeiden.
Die switch -Anweisung wird Zeile für Zeile (also Anweisung für Anweisung) abgearbeitet.
Zu Beginn wird nichts ausgeführt.
Erst wenn bei einem case -Teil eine Entsprechung zum switch -Ausdruck vorliegt, werden die darin enthaltenen Anweisungen von PHP ausgeführt.
PHP fährt dann mit der Abarbeitung des restlichen Codes innerhalb des switch -Blocks fort oder bis zum ersten Auftreten einer break -Anweisung.
Ohne break am Ende eines case-Teils werden also noch die folgenden case-Blöcke ausgeführt.
Zum Beispiel:
switch ($i) {case 0: print "i ist gleich 0"; case 1: print "i ist gleich 1"; case 2: print "i ist gleich 2";}
Wenn hier $i gleich 0 ist, würde PHP alle print-Anweisungen ausführen!
Ist $i gleich 1, werden die letzten beiden print-Befehle ausgeführt und wenn $i = 2 ist, wird nur der letzte print-Befehl ausgeführt.
Deshalb ist es wichtig break -Anweisungen zu setzen (abgesehen von bestimmten Fällen, in denen Sie diese mit Absicht weglassen).
Bei einer switch -Anweisung wird die Bedingung also nur einmal überprüft und das Ergebnis mit jeder case -Anweisung verglichen.
Bei einem elseif -Befehl wird die Bedingung neu geprüft.
Ist ihre Bedingung komplizierter als ein einfacher Vergleich und / oder in einer umfangreichen Schleife eingebettet, kann eine switch -Anweisung schneller als mehrere if -Befehle sein.
Dann wird die Kontrolle einfach an den nächsten case-Teil übergeben.
switch ($i) {case 0: case 1: case 2: print "i ist kleiner als 3 aber nicht negativ"; break; case 3: print "i ist gleich 3";}
Ein Spezialfall ist default.
Dieser Fall trifft auf alles zu, was nicht von den voranstehenden case-Ausdrücken erfasst wurde und sollte als letzte case Anweisung angegeben werden.
Zum Beispiel:
switch ($i) {case 0: print "i ist gleich 0"; break; case 1: print "i ist gleich 1"; break; case 2: print "i ist gleich 2"; break; default: print "i ist weder 0, 1 noch 2";}
Der case -Ausdruck kann eine Prüfung einfacher Typen sein, also von Integer - oder Fließkomma-Zahlen oder von Strings / Zeichenketten.
Arrays oder Objekte können nicht benutzt werden, es sei denn, sie wurden in einfache Typen umgewandelt.
Die alternative Syntax der Kontrollstrukturen gilt auch für switch-Sequenzen.
Mehr Informationen dazu erhalten Sie unter Alternative Syntax für Kontroll-Strukturen.
switch ($i): case 0: print "i ist gleich 0"; break; case 1: print "i ist gleich 1"; break; case 2: print "i ist gleich 2"; break; default: print "i ist weder 0, 1 noch 2"; endswitch;
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
While -Schleifen sind die einfachste Form von Schleifen in PHP.
Sie funktionieren genau wie in C.
Die Grundform einer while -Anweisung lautet:
while (ausdr) Anweisung
Die Bedeutung einer while -Anweisung ist einfach.
Sie weist PHP an, einen in ihr eingebetteten Befehl so lange zu wiederholen, wie die while -Bedingung als TRUE ausgewertet wird.
Wird der Wert während der Ausführung der Anweisungen innerhalb der while -Schleife verändert, endet die Ausführung dieses Anweisungsblocks erst mit dem Ende der Iteration (Jeder Schleifendurchlauf ist eine Iteration).
Falls die while -Bedingung bereits zu Beginn FALSE ist, werden die Anweisungen der while -Schleife nicht ein einziges Mal durchlaufen.
Wie bei der if -Anweisung kann man mehrere Anweisungen innerhalb der gleichen while -Schleife angeben, indem man sie mit geschweiften Klammern umschließt oder die alternative Syntax gebraucht:
Anweisung... endwhile;
Die folgenden Beispiele sind identisch; beide geben Zahlen von 1 bis 10 aus:
/* Beispiel 1 * / $i = 1; while ($i = 10) {print $i++; / * es wird erst $i ausgegeben, bevor der Wert erhöht wird (Post-Inkrement) * /} / * Beispiel 2 * / $i = 1; while ($i = 10): print $i; $i++; endwhile;
Zurück
Zum Anfang
Nach vorne
Alternative Syntax für Kontroll-Strukturen
Nach oben
PHP Handbuch
This manual is © Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003 by the PHP Documentation Group.
Die Mitglieder der PHP-Dokumentationsgruppe sind auf dem Titelblatt aufgeführt.
Es ist entweder die Version 2 oder eine neuere Version der Lizenz zu benutzen.
Das Kapitel 'Extending PHP 4.0' ist © 2000 by Zend Technologies, Ltd.
Dieses Material kann unter den Bedingungen der Open Publication License, v1.0 oder neuer (die aktuellste Version ist unter http: / /www.opencontent.org / openpub / erhältlich) verteilt werden.
Zum Anfang
PHP Handbuch
Zurück
Nach vorne
Jedesmal, wenn PHP startet, stellt der Debugger eine Verbindung zu einem TCP -Port her.
Damit lässt sich ein "debugging server" einrichten, der innerhalb einer IDE oder eines programmierbaren Editors (z.
Geben Sie in der Konfigurationsdatei (debugger.port) einen TCP-Port für den Debugger ein und aktivieren Sie ihn (debugger.enabled).
Schreiben Sie in Ihren Code die Anweisung "debugger_on (host)", wobei host die IP-Adresse oder der Hostname ist, wo der TCP -Listener läuft.
Zurück
Zum Anfang
Nach vorne
Andere Inkompatibilitäten
Nach oben
Debugger-Protokoll
PHP Handbuch
Zurück
Anhang D.
Der PHP-Debugger
Nach vorne
Das Protokoll des Debuggers ist zeilenorientiert.
Jede Zeile hat einen Typ, und mehrere Zeilen bilden eine Meldung.
Jede Meldung beginnt mit der Zeile start und endet mit end.
Es ist möglich, dass PHP Zeilen mehrerer Meldungen gleichzeitig ausgibt.
Eine Zeile hat folgendes Format:
Datum im ISO 8601-Format: (jjjj - mm - tt)
Zeit inklusive Mikrosekunden: ss: mm: uuuuuu
DNS-Name oder IP-Adresse des Hosts, auf dem der Fehler auftrat.
PID (process id) auf dem host des Prozesses mit dem PHP-Script, das den Fehler erzeugt hat.
Typ der Zeile.
Er zeigt dem empfangenden Programm, wie es die folgenden Daten behandeln soll:
Tabelle D-1.
Typen der Debugger-Zeilen
Bedeutung
Teilt dem empfangenden Programm mit, dass hier eine Debuggermeldung beginnt.
Der Inhalt von data ist der Typ der Fehlermeldung, der unten aufgelistet ist.
Die PHP-Fehlermeldung.
Dateiname und Zeilennummer, wo der Fehler aufgetreten ist.
Die erste Location - Zeile beinhaltet immer die Top-Level-Location. data enthält file: line.
Nach jeder message und nach jeder function steht eine location -Zeile.
Anzahl der Frames in der folgenden Ebenenanzeige.
Bei vier Frames werden Informationen zu vier Ebenen von Funktionsaufrufen angezeigt.
Wenn keine "frames"-Zeile angezeigt wird, ist die Funktionstiefe 0 (der Fehler ist auf der höchsten Ebene aufgetreten).
Name der Funktion, in der der Fehler aufgetreten ist.
Wird jeweils für jede Funktionsebene innerhalb des Funktionsaufrufs wiederholt angezeigt.
Teilt dem empfangenden Programm mit, dass die Meldung hier endet.
Daten in der jeweiligen Zeile.
Tabelle D-2.
Debugger-Fehlertypen
PHP-intern
Beispiel D-1.
Beispielhafte Debuggermeldung
Zurück
Zum Anfang
Nach vorne
Der PHP-Debugger
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Sektion behandelt die meistverbreiteten Fehler, die beim Compilieren von PHP auftauchen.
Ich habe mir die aktuellste Version von PHP mit Hilfe des Anonymous-CVS-Dienstes besorgt, kann aber kein configure-Script finden.
Sie müssen das GNU autoconf-Paket installiert haben, damit das configure-Script aus configure.in generiert werden kann.
Es ist zu beachten, dass das configure-Script bei einer geänderten configure.in nicht neu generiert wird, es sei denn, configure wird mit dem Parameter --enable-maintainer-mode Es ist zu beachten, dass das configure-Script bei einer geänderten configure.in nicht neu generiert wird, es sei denn, configure wird mit dem Parameter --enable-maintainer-mode aufgerufen.
Es sollte also darauf geachtet werden, dass das configure-Script manuell neu generiert wird, wenn configure.in verändert wurde.
Ein Symptom für eine Veränderung des configure.in ist, wenn Dinge wie @VARIABLE@ im Makefile auftachen, nachem configure oder config.status ausgeführt wurde.
Ich habe Probleme.
PHP für den Apache zu konfigurieren.
Er beschwert sich, dass er die Datei httpd.h nicht finden kann, obwohl sie sich genau dort befindet, wo ich es angegeben habe.
Sie müssen dem configure / setup-Script die Top-Level-Pfad des Apache-Source-Trees mitteilen.
Das bedeutet, dass z.B. --with-apache= / path / to / apache korrekt ist, --with-apache= / path / to / apache / src jedoch nicht.
Es ist möglich, das configure-Script so anzupassen, dass es nicht nur in Standard-Pfaden nach Headerdatei und Bibliotheken sucht, in dem dem C Präprozessort und Linker zusätzliche Flags übergeben werden:
Wenn die Datei language-parser.tab.c compiliert wird, erscheinen Fehler, die yytname undeclared besagen.
Sie müssen Bison updaten.
Die aktuellste Version findet sich unter ftp: / /ftp.gnu.org / pub / gnu / bison /.
Wenn ich make ausführe, scheint alles normal zu verlaufen, aber sobald es versucht, die Applikation zu linken, beschwert es sich, einige Dateien nicht finden zu können.
Einige alte Versionen von make platzieren die compilierten Versionen der Dateien nicht in das korrekte Verzeichnis.
Versuchen Sie, das Problem zu lösen, indem sie zunächst mittels cp *.o functions die Dateien an der vorgesehenen Platz kopieren, und anschließend make Versuchen Sie, das Problem zu lösen, indem sie zunächst mittels cp *.o functions die Dateien an der vorgesehenen Platz kopieren, und anschließend make noch einmal ausführen.
Sollte es dann funktionieren, empfehlen wir, Ihre Version von GNU make zu aktualisieren.
Wenn PHP gelinkt wird, berschwert es sich über undefinierte Referenzen.
Schauen Sie sich die Link-Zeile an, und stellen Sie sicher, das alle nötigen Bibliotheken am Ende mit eingeschlossen werden.
Wenn Sie mit Apache 1.2.x linken, haben Sie daran gedacht, die benötigten Informationen in die EXTRA_LIBS-Zeile des Konfigurationsscriptes einzufügen, und haben Sie das configure-Script des Apache wiederholt ausgeführt?
Weitere Informationen dazu finden Sie im INSTALL File Ihrer Distribution.
Einige Leute haben berichtet, dass sie '-ldl' unmittelbar nach libphp4.a einfügen mußten, wenn sie PHP mit Apache gelinkt haben.
Wie wird PHP mit Apache 1.3.x compiliert?
Folgen Sie diesen Schritten:
Besorgen Sie sich die letzte Version von Apache unter http: / /www.apache.org / dist /.
Entpacken Sie die Datei zum Beispiel unter / usr / local / src / apache-1.3.
Compilieren Sie zunächst PHP, zum Beispiel mit. / configure --with-apache= / path / apache-1.3 (ersetzen Sie path mit dem Pfad zu Ihrem apache-1.3-Verzeichnis.
Führen Sie make, gefolgt von einem make install aus, und kopieren die benötigten Dateien in den Apache-Tree.
Wechseln Sie in das Verzeichnis / path / apache-1.3 / src und bearbeiten die Datei Configuration.
Fügen Sie AddModule modules / php4 / libphp4.a hinzu.
Führen Sie. / Configure, gefolgt von make aus.
Nun sollte eine lauffähig Version eines PHP-fähigen Apaches compiliert sein.
Bitte beachten Sie:
Sie können auch das neue Apache. / configure -Script nuten.
Weitere Informationen dazu finden sie in der Datei README.configure, die der Apache-Distribution beiliegt.
Auch in der Datei INSTALL Ihrer PHP-Distribution finden sich Informationen dazu.
Ich habe die Schritte, die zur Installation des Apache-Modules unter UNIX nötig sind, aber wenn ich mit meinem Browser PHP-Scripts aufrufe, werde ich aufgefordert, die Dateien zu speichern.
Das bedeutet das das PHP-Modul nicht aufgerufen wird.
Sie sollten folgende Dinge überprüfen:
Stellen Sie sicher, dass das httpd-Binary, das Sie ausführen, tatsächlich das neue httpd-Binary ist, das sie compiliert haben.
Um das zu tun versuchen Sie, / path / to / binary / httpd -l auszuführen.
Wenn mod_php4.c Wenn mod_php4.c nicht auftaucht, führen Sie nicht das korrekte Binary aus.
Finden und installieren Sie das korrekte Binary.
Stellen Sie sicher, dass Sie den korrekten Mime-Type in ihrer Apache .conf -Datei angegeben haben.
Er sollte AddType application / x-httpd-php3 .php3 (für PHP 3)
oder AddType application / x-httpd-php .php (für PHP 4) lauten.
Stellen Sie ebenfalls sicher, dass diese AddType-Anweisung sich nicht in einem Virtualhost oder Directory Block befindet.
Der Standardplatz der Apache Konfigurationsdateien hat sich von Apache 1.2 zu Apache 1.3 verändert.
Sie sollten sicherstellen, das die Konfigurationsdatei, zu der sie die AddType-Anweisung hinzugefügt haben diejenige ist, die auch verarbeitet wird.
Sie können einen offensichtlichen Syntaxfehler oder eine andere eindeutige Änderung in Ihre httpd.conf einfbauen, um dies zu überprüfen.
Es heisst, es muß --activate-module=src / modules / php4 / libphp4.a benutzt werden, aber diese Datei existiert nicht, also habe ich es zu --activate-module=src / modules / php4 / libmodphp4.a geändert, aber es funktioniert nicht.
Die Datei libphp4.a soll nicht existieren, der Apache wird es generieren.
Wenn ich versuche, den Apache mit PHP als statisches Modul mittels --activate-module=src / modules / php4 / libphp4.a zu compilieren, kommt die Fehlermeldung, mein Compiler sei nicht ANSI-Konform.
Das ist eine irreführende Fehlermeldung des Apache, die in aktuellen Versionen behoben ist.
Wenn ich versuche, PHP mittels der Option --with-apxs zu compilieren, bekomme ich komische Fehlermeldungen.
Hier sind drei Dinge zu überprüfen:
Wenn Apache das apxs Perlscript generiert, werden manchmal aus unerfindlichen Gründen nicht die richtigen Compiler-Flags verwendet.
Öffnen Sie Ihr apxs-Script und überprüfen es auf Zeilen, die ähnlich wie folgende aussehen:
Während des make bekomme ich Fehler in microtime und jede Menge RUSAGE_ -Zeugs.
Wenn während des make -Teils der Installation Probleme auftauchen, die wie folgt aussehen:
ist Ihr System beschädigt.
Sie müssen Ihr / usr / include reparieren, indem sie das glibc-devel-Paket installieren, dessen Version mit der Ihrer glibc übereinstimmt.
Das hat absolut nichts mit PHP zu tun.
Um sich selbst davon zu überzeugen, führen Sie folgenden simplen Test durch:
Ich möchte mein PHP aktualisieren.
Wo kann ich die. / configure -Zeile finden, die von meiner aktuellen PHP-Version verwendet wird?
Entweder schauen sie in die config.nice -Datei im Source-Tree ihrer aktuellen PHP-Version nach, oder Sie führen folgendes Script aus:
Wenn ich PHP mit der GD-Library compiliere, tauchen seltsame Compilerfehler auf oder PHP startet nicht.
Stellen Sie sicher, dass PHP und die GD-Library gegen die selben Bibliotheken wie libPNG gelinkt sind.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP benutzen
PHP Handbuch
Zurück
Nach vorne
Beispiel 52-1.
Zurück
Zum Anfang
Nach vorne
PHP und HTML
Nach oben
PHP und andere Sprachen
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Was es ist und was es tut.
Was ist PHP?
PHP ist die Abkürzung für "PHP:
Hypertext Preprocessor ", eine weitverbreitete Open Source Skriptsprache speziell für Webentwicklungen.
Seine Syntax erinnert an C, Java und Perl und es ist einfach zu erlernen.
Das Hauptziel dieser Sprache ist es, Webentwicklern die Möglichkeit zu geben, schnell dynamisch generierte Webseiten zu erzeugen.
Eine Einführung in PHP von Stig Sæther Bakken ist hier auf der Zend Website verfügbar.
Desweiteren gibt es das PHP Conference Material, das in der Regel frei verfügbar ist.
Für was steht PHP?
PHP steht für PHP: Hypertext Preprocessor
Das verwirrt einige Menschen, da das erste Wort der Abkürzung ist die Abkürzung.
Dieser Typ von Abkürzung wird rekursive Abkürzung genannt.
Wer sich weiter für das Thema der rekursiven Abkürzungen interessiert, findet im Free On-Line Dictionary of Computing weitere Informationen dazu.
Wie stehen die verschiedenen PHP-Versionen zueinander?
PHP / FI 2.0 ist eine frühe und nicht mehr unterstützte Version von PHP.
PHP 3 ist der Nachfolger von PHP / FI 2.0 und wesentlich besser.
PHP 4 ist die aktuellste Generation von PHP, die die Zend engine als Sprachkern nutzt.
Kann ich mehrere verschiedene PHP-Versionen zur selben Zeit laufen lassen?
Ja.
Weitere Informationen dazu finden sich in der Datei INSTALL, die der Source-Distribution von PHP beiliegt.
Sie sollten auch den dazu gehörigen Anhang lesen.
Was sind die Unterschiede zwischen PHP 3 und PHP 4?
Es existieren einige Artikel dazu, die von den Autoren von PHP 4 verfasst wurden.
Eine kurze Zusammenfassung der neuen Features:
Erweiterte API
Standardisierter Build-Prozess unter UNIX
Allgemein gehaltenes Webserver-Interface, es werden auch multi-threaded Webserver unterstützt.
Verbesserte Syntax-Highlighter
Nativer HTTP-Session-Support
Output buffering Support
Mächtiges Konfigurations-System
Ich glaube, ich habe einen Bug gefunden!
Sie sollten die PHP Bug-Datenbank aufrufen und herausfinden, ob es sich bei dem Bug um einen bereits bekannten Bug handelt.
Ist der Bug noch nicht bekannt, können Sie diesen über das Reportformular posten.
Wenn Sie das Reportformular verwenden, bekommt ihr Bug automatisch eine Nummer zugewiesen, so das Sie später wiederkehren und Anhand der Nummer herausfinden können, ob der Bug gefixed wurde.
Die Bug-Datenbank ist unter http: / /bugs.php.net / zu finden.
Zurück
Zum Anfang
Nach vorne
Nach oben
Mailing-Listen
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Allgemeine Informationen
PHP Handbuch
Zurück
Nach vorne
PHP und HTML interagieren stark:
PHP kann HTML generieren und HTML kann Informationen an PHP weitergeben.
Wie muss ich enkodieren / dekodieren, wenn ich einen Wert über ein Formular / einen URL weitergeben möchte?
Es gibt mehrere Stufen, für die Enkodierung wichtig ist.
Dann sind dies die relevanten Stufen:
HTML-Interpretation:
Wenn Sie einen zufälligen String angeben wollen, müssen Sie ihn in die doppelte Anführungszeichen einschließen und htmlspecialchars() auf den gesamten Wert anwenden.
Ein URL besteht aus mehreren Teilen.
Wenn Sie wollen, dass Ihre Daten als ein Element interpretiert werden, dann müssen Sie Ihre Daten mit urlencode() enkodieren.
Beispiel 51-1.
Ein verstecktes HTML-Formular-Element
Anmerkung:
Es wäre falsch, urlencode() auf $data anzuwenden, da es die Aufgabe des Browsers ist, die Daten zu enkodieren.
Alle populären Browser machen dies auch korrekt.
Beachten Sie, dass dies unabhängig von der verwendeten Methode (also z.B.
Feststellen werden Sie dies aber nur bei GET-Anfragen, da POST-Anfragen meist versteckt geschehen.
Beispiel 51-2.
Daten, die vom Benutzer bearbeitet werden sollen
Anmerkung:
Die Daten werden wie Browser wie gewünscht ausgegeben, da der Browser die HTML-escapten Symbole interpretiert.
Nach dem Abschicken, egal ob via GET oder POST, werden die Daten für den Transfer enkodiert (mit urlencode()) und von PHP direkt wieder dekodiert (mit urldecode()).
Sie müssen also für die En - und Dekodierung nicht selbst sorgen, die Browser und PHP erledigen dies automatisch für Sie.
Beispiel 51-3.
In einem URL
Anmerkung:
Hier wird eine HTML-GET-Anfrage gefakt, deswegen müssen Sie die Daten manuell mit urlencode() enkodieren.
Anmerkung:
Sie müssen htmlspecialchars() auf den gesamten URL anwenden, da der URL als Wert eines HTML-Attributs auftritt.
In diesem Fall wird der Browser zuerst etwas wie "un - htmlspecialchars()" auf den Wert anwenden und dann erst den URL weitergeben.
PHP wird den URL korrekt verstehen, da Sie die Daten mit urlencode() enkodiert haben.
Sie werden feststellen, dass das im URL durch amp; ersetzt wird.
Auch wenn die meisten Browser richtig arbeiten, falls Sie diese Ersetzung vergessen sollten, sollten Sie sich trotzdem nicht darauf verlassen.
Das bedeutet, dass Sie - auch wenn Ihr URL nicht dynamisch ist - trotzdem htmlspecialchars() auf den URL anwenden müssen.
Ich versuche ein input type=" image "-Tag zu benutzen, aber die Variablen $foo.x and $foo.y sind nicht verfügbar.
Wo finde ich diese?
Wenn ein Formular abgeschickt werden soll, ist es möglich, ein Bild statt des Standard-Submit-Buttons zu verwenden, indem Sie ein Tag wie das folgende verwenden:
Da $foo.x und $foo.y in PHP keine gültigen Namen für Variablen sind, werden Sie automatisch in $foo_x und $foo_y konvertiert.
Die Punkte werden also durch Unterstriche ersetzt.
Wie kann ich Array aus einem HTML-Formular erstellen?
Um die Formularwerte als Array im PHP-Skript zur Verfügung zu haben, müssen Sie die input, select or textarea -Felder wie folgt benennen:
input name=" MeinArray[] "input name="MeinArray[]" input name="MeinArray[] "input name="MeinArray[]"
input name=" MeinArray[] "input name="MeinArray[]" input name="MeinAnderesArray[] "input name="MeinAnderesArray[]"
input name=" AnderesArray[] "input name="AnderesArray[]" input name="AnderesArray[email] "input name="AnderesArray[telefon]"
Anmerkung:
Die Angabe eines Array-Schlüssels ist in HTML optional.
Wenn Sie keinen Schlüssel angeben, wird das Array in der Formular-Reihenfolge gefüllt.
Im ersten Beispiel enthält das Array MeinArray also die Schlüssel 0, 1, 2 und 3.
Array-Funktionen und Variablen außerhalb von PHP.
Wie bekomme ich alle Werte aus einem "select multiple "-HTML-Tag?
Mit einem "select multiple "-Tag können Benutzer mehrere Werte aus einer Liste auswählen.
Diese Werte werden dann an den "action handler" des Formulars (z.B. ein PHP-Skript) übergeben.
Problematisch ist dabei, dass alle mit demselben Namen übergeben werden, z.B.:
Beachten Sie, dass, falls Sie JavaScript benutzen, die eckigen Klammern [] im Feldnamen Probleme machen können, wenn Sie versuchen, über den Namen auf das Feld zu verweisen.
Benutzen Sie stattdessen die numerische ID des Formularfelds oder schließen Sie den Variablennamen in einfache Anführungszeichen ein und benutzen Sie dies als den Index, z.B.:
Zurück
Zum Anfang
Nach vorne
PHP benutzen
Nach oben
PHP Handbuch
Zurück
Nach vorne
ZurÃ¼ck
Zum Anfang
Nach vorne
Nach oben
Probleme bei der Compilierung
PHP Handbuch
Zurück
Nach vorne
PHP ist die beste Sprache für Webanwendungen, aber was ist mit anderen Sprachen?
ASP ist eigentlich keine Sprache ansich, es ist ein Akronym für Active Server Pages, die eigentlichen Sprachen in denen ASP programmiert wird sind Visual Basic Script oder JScript.
Der größte Nachteil von ASP ist, dass es ein proprietäres System ist und nativ nur auf Microsofts Internet Information Server (IIS) verwendet werden kann.
Dies limitiert ASP auf Win32 basierende Server.
Es gibt einige Projekte, die die Möglichkeit bieten, ASP unter anderen Umgebungen zu verwenden:
InstantASP von Halcyon (kommerziell), Chili!Soft ASP von Chili!Soft (kommerziell) und OpenASP von ActiveScripting.org (kostenlos).
ASP wird nachgesagt, dass es eine langsamere und schwerfälligere Sprache als PHP ist, instabiler noch dazu.
Eines der Vorteile von ASP ist, dass es, weil VBScript verwendet wird, relativ leicht zu erlernen ist, wenn Sie bereits Visual Basic programmieren können.
Auch ist die ASP-Unterstützung im IIS Server standardmäßig vorhanden, was es einfach macht, ASP zum laufen zu kriegen.
Wenn Sie also "fortgeschrittene" Features wie die Verbindung zu FTP-Servern nutzen wollen, müssen Sie kommerzielle Komponenten hinzukaufen.
Gibt es ein Programm, was ASP in PHP konvertieren kann?
Ja, asp2php wird meistens als Antwort genannt.
Zurück
Zum Anfang
Nach vorne
Nach oben
Von PHP 2 auf PHP 3 umsteigen
PHP Handbuch
Zurück
Nach vorne
In dieser Rubrik finden Sie Informationen, wie Sie mit der PHP-Community in Kontakt treten können.
Wir empfehlen Ihnen die Mailing-Listen.
Gibt es PHP-Mailing-Listen?
Natürlich!
Es gibt eine ganze Reihe von Mailing-Listen für verschiedene Themen.
Eine komplette Liste der Mailing-Liste finden Sie auf unserer Support -Seite.
Die allgemeinste Mailing-Liste ist php-general.
Um diese Liste zu abonnieren, schicken Sie eine E-Mail an php-general-subscribe@lists.php.net.
Betreff und Inhalt der E-Mail spielen keine Rolle.
Um die Liste abzubestellen, schicken Sie eine E-Mail an php-general-unsubscribe@lists.php.net.
Sie können die Listen auch über das Web-Interface auf unserer Support -Seite abonnieren oder abbestellen.
Gibt es auch andere Communities?
Auf der ganzen Welt gibt es unzählige Communities.
Links zu IRC-Servern oder zu Mailing-Listen in verschiedenen Sprachen.
Hilfe!
Ich kann eine der Mailing-Listen nicht abonnieren / abbestellen!
Wenn Ihre E-Mail-Adresse joeblow@example.com lautet, können Sie Ihren Abo-Wunsch an php-general-subscribe-joeblow=example.com@lists.php.net schicken; falls Sie die Liste abbestellen möchten, können Sie eine E-Mail an php-general-unsubscribe-joeblow=example.com@lists.php.net Wenn Ihre E-Mail-Adresse joeblow@example.com lautet, können Sie Ihren Abo-Wunsch an php-general-subscribe-joeblow=example.com@lists.php.net schicken; falls Sie die Liste abbestellen möchten, können Sie eine E-Mail an php-general-unsubscribe-joeblow=example.com@lists.php.net schicken.
Für die anderen Mailing-Listen können Sie ähnliche Adressen benutzen.
Gibt es ein Archiv der Mailing-Listen?
Ja, Sie finden eine Liste der Archiv-Seiten auf unserer Support -Seite Die Mailing-Listen-Artikel werden auch als News-Postings archiviert.
Den News-Server können Sie mit einem Newsreader unter news: / /news.php.net / erreichen.
Es gibt auch ein experimentelles Web-Interface für den Newsserver unter http: / /news.php.net /.
Was kann ich die Mailing-Listen fragen?
Aus diesem Grund ist der Verkehr auf der php-general-Mailing-Liste stark angestiegen.
Momentan werden täglich über die Liste zwischen 150 und 200 Artikel versendet.
Daher bitten wir Sie, die Liste nur dann zu nutzen, wenn Sie nirgendwo eine Antwort auf Ihre Frage gefunden haben.
Bevor Sie an die Liste schreiben, schauen Sie bitte in diese FAQ und das Handbuch, ob Sie dort vielleicht schon die gesuchte Antwort finden.
Falls Sie dort nicht fündig werden, schauen Sie bitte in die Archive der Mailing-Listen (siehe oben).
Wenn Sie Probleme mit der Installation oder Konfiguration von PHP haben, stellen Sie bitte sicher, dass Sie die mitgelieferte Dokumentation und die READMEs gelesen haben.
Wenn Sie jetzt immer noch keine Antwort gefunden haben, können Sie Ihre Frage gerne an die Mailing-Liste schicken.
Welche Informationen soll ich mitschicken, wenn ich an die Mailing-Liste schreibe?
E-Mails wie "Hilfe, ich schaffe es nicht, PHP ans Laufen zu bekommen.
Was habe ich falsch gemacht? "sollten unbedingt vermieden werden.
Wenn Sie solche Probleme haben, müssen Sie angeben, welches Betriebssystem Sie nutzen, welche PHP-Version sie installieren wollen, in welcher Variante Sie PHP vorliegen haben (vorkompiliert, CVS, RPMs etc.), was Sie bisher schon versucht haben, wo Sie nicht weiterkamen und welche Fehlermeldung sie bekommen haben.
Dies gilt auch für alle anderen Probleme.
Sie sollten immer Informationen darüber angeben, was Sie versucht haben, wo Sie nicht weiterkamen, was Sie bereits getan haben und, falls möglich, die genaue Fehlermeldung.
Wenn Sie Probleme mit Ihren Quelltexten haben, müssen Sie den Teil, der nicht funktioniert, mitschicken.
Allerdings sollten Sie auch nicht mehr Code als nötig mitschicken, sonst wird Ihre E-Mail schlecht lesbar und viele Leute könnten Ihre Frage deswegen ignorieren.
Falls Sie sich unsicher sind, wie viele Informationen Sie schicken sollen, dann schicken Sie lieber zu viel als zu wenig.
Ein weiterer wichtiger Punkt ist auch, dass Sie Ihr Problem in der Betreff-Zeile zusammenfassen.
Ein Betreff wie "Hilfe!" oder "Was ist das Problem hier? "wird mit Sicherheit von einem Großteil der Leser ignoriert werden.
Zurück
Zum Anfang
Nach vorne
Allgemeine Informationen
Nach oben
PHP Handbuch
Zurück
Nach vorne
PHP hat schon eine lange Geschichte hinter sich:
Das legendäre PHP 1.0, PHP / FI, PHP 3.0 und PHP 4.0.
Von PHP 3 auf PHP 4 umsteigen?
Nur wenig der Funktionalität wurde dabei grundlegend verändert.
Wenn Sie sich über die Kompatibilität wirklich nicht sicher sind, dann sollten Sie PHP 4 auf einem Testsystem installieren und Ihre Scripts dort testen.
Siehe auch im Kapitel Richtiges Umsteigen dieses Handbuchs.
Inkompatible Funktionen?
Und auch darunter nur einige exotische.
Zurück
Zum Anfang
Nach vorne
Von PHP 2 auf PHP 3 umsteigen
Nach oben
Verschiedene Fragen
PHP Handbuch
Zurück
Nach vorne
PHP hat schon eine lange Geschichte hinter sich:
Das legendäre PHP 1.0, PHP / FI, PHP 3.0 und PHP 4.0.
Von PHP 2 auf PHP 3 umsteigen?
PHP / FI 2.0 wird nicht mehr unterstützt.
Lesen Sie bitte den entsprechenden Abschnitt im Handbuch für Informationen zum Umstieg von PHP / FI 2.0.
Wenn Sie immer noch mit PHP 2 arbeiten empfehlen wir stärkstens, direkt auf PHP 4 umzusteigen.
Zurück
Zum Anfang
Nach vorne
PHP und andere Sprachen
Nach oben
Von PHP 3 auf PHP 4 umsteigen
PHP Handbuch
Zurück
Nach vorne
Es gibt diverse Fragen, die in keine andere Kategorie passen.
Diese Fragen finden Sie hier.
Wo sind die Pop-Ups auf der Website hin?
Kann ich den Code dafür bekommen?
Die gelben Pop-Ups auf der alten Seite waren sehr cool, aber auch sehr schwer zu pflegen (solange sich manche Firmen einen Spaß daraus machen, die Arbeitsweise ihrer Browser mit jeder neuen Version zu ändern).
Sämtlicher Code alter Versionen der Website ist immer noch über CVS erhältlich.
Vor allem die letzte Version der Datei shared.inc (welche sämtliches Javascript und DHTML für die Pop-ups enthält) ist hier erhältlich.
Wie entpacke ich Manuals unter Windows, die mit bz2 komprimiert wurden?
Wenn Sie keinen Entpacker haben, der bz2 entpacken kann, laden Sie sich das Kommandozeilenprogramm von Redhat herunter (siehe Informationen weiter unten).
Wenn Sie nicht das Kommandozeeilenprogramm verwenden wollen, dann können Sie kostenlose Tools wie den Stuffit Expander, UltimateZip, 7-Zip, oder Quick Zip verwenden.
Wenn Sie WinRAR oder Power Archiver haben, können Sie die bz2 Dateien damit entpacken.
Sollten Sie Windows Commander verwenden, so gibt es dafür ein kostenloses bz2 Plugin auf der Windows Commander Seite.
Das bzip2 Kommandozeilenprogramm von Redhat:
Benutzer von Win2k SP2 verwenden die aktuelle Version 1.0.2, alle anderen Windows-Benutzer sollten Version 1.00 nehmen.
Nach dem Download sollten Sie die Datei in bzip2.exe umbenennen.
Kopieren Sie diese zur leichteren Handhabung in ein Verzeichnis im Windows-Pfad, z.B.
C:\Windows, wobei C: das Laufwerk Ihrer Windows Installation ist.
Anmerkung: lang steht für die Sprache und x für das Format, z.B. pdf.
Zum entpacken von php_manual_lang.x.bz2 folgen Sie diesen einfachen Schritten:
Öffenen Sie die Eingabeaufforderung
Springen Sie mit cd in das Verzeichnis, in dem Sie die heruntergeladene Datei php_manual_lang.x.bz2 gespeichert haben
Mit bzip2 -d php_manual_lang.x.bz2, entpacken Sie die Datei php_manual_lang.x im selben Verzeichnis
Wenn Sie die Datei php_manual_lang.tar.bz2 heruntergeladen haben, die viele HTML-Dateien enthält, gehen Sie genauso vor.
Der einzige Unterschied ist, dass Sie eine Datei namens php_manual_lang.tar erhalten.
Die meisten Entpacker unter Windows verstehen das tar Format wie z.B.
Zurück
Zum Anfang
Nach vorne
Von PHP 3 auf PHP 4 umsteigen
Nach oben
Anhang
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Mailing-Listen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Rubrik behandelt die beim Schreiben von PHP-Skripten am häufigsten auftretenden Fehler.
pre ?php echo "Das soll die erste Zeile sein .";? ?php echo "Das soll nach dem obigen Zeilenumbruch erscheinen .";? / pre
Ich möchte ein PHP-Skript schreiben, das Daten von beliebigen Formularen verarbeiten kann.
Woher weiß ich, welche Variablen über die POST-Methode verfügbar sind?
Stellen Sie sicher, dass track_vars in Ihrer php.ini aktiviert ist (Standardeinstellung seit PHP 4.0.3).
Wenn track_vars aktiviert ist, erstellt PHP einige assoziative Arrays.
Wenn Sie ein PHP-Skript schreiben möchten, das die Variablen, die über die POST-Methode verfügbar sind, verarbeitet, dann müssen Sie ähnlich wie im folgenden Beispiel vorgehen:
Ich möchte alle einfachen Anführungszeichen (') in einen Backslash gefolgt von einem einfachen Anführungszeichen konvertieren.
Wie kann ich das mit einem regulären Ausdruck machen?
Schauen Sie sich die addslashes() -Funktion an, die genau das macht.
Sie sollten sich ebenfalls die magic_quotes_gpc -Direktive in Ihrer php.ini anschauen.
Wenn ich den folgenden Code ausführe, wird die Ausgabe in der falschen Reihenfolge ausgegeben:
Um das Ergebnis Ihrer Funktion in einem Ausdruck verwenden zu können (um es z.B. wie im obigen Beispiel mit dem anderen String zu verbinden), müssen Sie den Wert mit return() zurückgeben und ihn nicht mit echo() ausgeben.
Wo sind meine Zeilenumbrüche geblieben?
pre ?php echo "Das soll die erste Zeile sein .";? ?php echo "Das soll nach dem obigen Zeilenumbruch erscheinen .";? / pre
In PHP können Code-Blöcke entweder mit "?" oder mit "? \n" enden (\n steht für Zeilenumbruch).
Im obigen Beispiel sind die ausgegebenen Zeilen daher in einer Zeile, denn PHP lässt die Zeilenumbrüche nach den Block-Ende-Zeichen weg.
Wenn Sie möchten, dass PHP einen Zeilenumbruch ausgibt, müssen Sie nach jedem Code-Block einen zusätzlichen Zeilenumbruch einfügen.
Warum macht PHP das so?
Würde PHP diesen Zeilenumbruch ausgeben, müssten Sie sehr lange Zeilen schreiben und Ihren Code damit unlesbar machen.
Ich bekommen die Meldung 'Warning:
Cannot send session cookie - headers already sent.. .' oder 'Cannot add header information - headers already sent... '.
Die Funktionen header(), setcookie() und die Session-Funktionen müssen Header dem Output-Stream hinzufügen.
Prüfen Sie also, ob Ihr Skript Header sendet, nachdem bereits irgendetwas ausgegeben wurde.
Wie kann ich auf Informationen aus dem Request-Header zugreifen?
Wenn Sie PHP als Apache-Modul laufen lassen, liefert Ihnen die getallheaders() -Funktion die gewünschten Informationen.
Der folgende Code gibt alle Request-Header aus:
Wenn ich versuche, Authentifikation mit IIS zu nutzen, bekomme ich die Meldung 'No Input file specified'.
Das Sicherheitsmodell des IIS hat Unrecht.
Dies ist ein Problem, das alle CGI-Programme, die unter dem IIS laufen, haben.
Als Workaround können Sie eine leere HTML-Datei, die nicht von PHP geparst wird, als Eingangsseite in ein per Authenfikation geschütztes Verzeichnis erzeugen.
Anschließend leiten Sie den Browser durch ein META-Tag auf die PHP-Seite weiter oder sie setzen einen Link auf die PHP-Seite.
PHP erkennt dann die Authentifizierung korrekt.
Dieses Problem tritt mit dem ISAPI-Modul nicht auf.
Auch auf anderen NT-Web-Servern sollte dieses Problem nicht auftauchen.
Weitere Informationen finden Sie auch hier: http: / /support.microsoft.com / support / kb / articles / q160 / 4/22.asp.
Mein PHP-Skript funktioniert unter IE und Lynx, aber unter Netscape fehlt ein Teil meiner Ausgabe.
Wenn ich mir den Quelltext anschaue, sehe ich die Ausgabe unter IE, aber nicht unter Netscape.
Tabellen) strenger als der IE.
Meist ist es hilfreich, wenn Sie Ihre HTML-Ausgabe mit einem HTML-Validator (z.B. validator.w3.org) prüfen.
Z.B. kann ein fehlendes / table den Fehler verursachen.
IE und Lynx ignorieren auch NULs (\0) im HTML-Stream, Netscape nicht.
Um dies zu überprüfen, kompilieren Sie am besten die Kommandozeilen -Version von PHP (auch bekannt als die CGI-Version) und führen Sie Ihr Skript auf der Kommandozeile aus.
Unter Unix pipen Sie es durch od -c und schauen Sie nach \0 Zeichen.
Unter Windows müssen Sie einen Editor oder ein anderes Programm benutzen, das es Ihnen ermöglicht, binäre Dateien anzuschauen.
Wenn Netscape ein NUL in einer Datei findet, gibt es normalerweise in dieser Zeile nichts mehr aus, während IE und Lynx die Zeile normal ausgeben.
Wie kann ich XML und PHP mischen?
PHP beschwert sich über meine ?xml -Tags!
Sie müssen die Kurzform der öffnenden PHP-Tags abschalten, indem Sie in Ihrer php.ini short_tags Sie müssen die Kurzform der öffnenden PHP-Tags abschalten, indem Sie in Ihrer php.ini short_tags auf 0 setzen oder indem Sie die gleichwertige Apache-Direktive benutzen.
Sie können dies auch innerhalb einer File -Sektion machen.
Wie kann ich mit PHP mit Frontpage oder einem anderen HTML-Editor, der meinen Code verschiebt, benutzen?
Die einfachste Möglichkeit ist, ASP-Tags in Ihrem PHP-Code zu aktivieren.
Sie können dann% und% zur Begrenzung Ihres Codes verwenden.
Viele HTML-Editoren verarbeiten solche Code-Blöcke intelligenter.
Um die ASP-Tags zu aktiveren, müssen Sie in Ihrer php.ini asp_tags auf On setzen oder die gleichwertige Apache-Direktive verwenden.
Wo kann ich eine komplette Liste der mir zur Verfügung stehenden Variablen finden und warum sind diese Variablen nicht in der PHP-Dokumentation zu finden?
Die beste Lösung ist, ?php phpinfo();? in ein PHP-Skript einzufügen und sich die Ausgabe anschauen.
Sie finden dort dann viele Informationen über Ihr PHP-Setup und eine Liste sowohl der Umgebungsvariablen als auch der speziellen Variablen, die Ihr Webserver zur Verfügung stellt.
Diese Liste kann nicht in der PHP-Dokumentation dokumentiert werden, da sie stark vom verwendet Server abhängt.
Ich versuche, auf eine der Standard-CGI-Variablen (wie $DOCUMENT_ROOT oder $HTTP_REFERER) in einer selbst-definierten Funktion zuzugreifen, aber anscheinend kann ich nicht darauf zugreifen.
Was mache ich falsch?
Sie müssen diese Variablen daher entweder in Ihrer Funktion als globale Variable deklarieren (z.B. mit "global $DOCUMENT_ROOT;") oder das globale Variablen-Array benutzen (z.B. "$GLOBALS["DOCUMENT_ROOT"]").
Anmerkung:
Dieses Array steht Ihnen innerhalb jeder Funktion zur Verfügung.
Statt auf $DOCUMENT_ROOT können Sie also auf $_SERVER[ "DOCUMENT_ROOT"] zugreifen.
Zurück
Zum Anfang
Nach vorne
Probleme bei der Compilierung
Nach oben
PHP und HTML
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Tabelle 23-1.
Anmerkung:
Tabelle 23-2.
Anmerkung:
Anmerkung:
Tabelle 23-3.
Anmerkung:
Anmerkung:
Anmerkung:
Anmerkung:
Beispiel 23-1.
Beispiel 23-2.
ZurÃ¼ck
Zum Anfang
Nach vorne
Safe Mode
Nach oben
Funktionsreferenz
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Folgendes trifft auf die Versionen 3.0.7 und später zu.
PHP erhält intern einen Verbindungsstatus.
Dieser kann drei Zustände annehmen:
Wenn ein PHP-Skript aktiv ist, ist der Status üblicherweise NORMAL.
Sollte der Client-Rechner die Verbindung beenden, wird der Status auf ABORTED gesetzt.
Ein clientseitiges Beenden der Verbindung wird für gewöhnlich veranlaßt, wenn der Benutzer den STOP-Button seines Browsers drückt.
Wenn das eingestellte Zeitlimit (siehe set_time_limit()) überschritten wird, wird der Status TIMEOUT gesetzt.
Sie können entscheiden, ob der Verbindungsabbruch seitens des Clients den Abbruch des Skriptes zur Folge haben soll.
Manchmal ist es sinnvoll, Skripte sauber zu beenden, auch wenn kein Browser mehr zur Verfügung steht, der die Ausgabe empfängt.
Die Abarbeitung eines Skriptes wird standardmäßig abgebrochen, wenn der Client die Verbindung beendet.
Dieses Verhalten kann sowohl durch die Option ignore_user_abort in der Konfigurationsdatei php3.ini, durch die entsprechende Option php3_ignore_user_abort in der Apache-Konfigurationsdatei als auch durch ignore_user_abort() beeinflußt werden.
Wenn PHP nicht angewiesen wird, einen Verbindungsabbruch durch den Benutzer zu ignorieren und die Verbindung dann durch den Benutzer beendet wird, wird die Abarbeitung des Scriptes abgebrochen.
Die einzige Ausnahme ist, wenn durch die Funktion register_shutdown_function() eine Shutdown-Funktion angegeben wird, die bei clientseitigem Abbruch ausgeführt wird.
Wenn dann der Benutzer den STOP-Button seines Browsers drückt, wird PHP bei der nächsten Ausgabe des Skriptes feststellen, dass die Verbindung abgebrochen wurde und die Shutdown-Funktion aufrufen.
Diese Shutdown-Funktion wird auch aufgerufen, wenn das Skript auf normalem Wege beendet wird, daher sollte man, wenn man für den Fall eines Benutzerabbruchs etwas anderes vorgesehen hat, die Funktion connection_aborted() verwenden.
Sie gibt TRUE zurück, wenn die Verbindung abgebrochen wurde.
Ein Skript kann ebenfalls durch den eingebauten Script-Timer beendet werden.
Der Standard-Timeout beträgt 30 Sekunden.
Er kann durch die Option max_execution_time in der php3.ini, durch den entsprechenden Eintrag php3_max_execution_time in der Apache-Konfigurationsdatei oder durch die Funktion set_time_limit() beeinflußt werden.
Bei Zeitüberschreitung wird das Skript beendet und, genau wie im obigen Fall des Verbindungsabbruchs, eine registrierte Shutdown-Funktion ausgeführt.
Um zu überprüfen, ob es sich um einen Abbruch aufgrund von Zeitüberschreitung handelt, kann die Funktion connection_timeout() benutzt werden.
Sie gibt TRUE zurück, wenn es sich um eine Zeitüberschreitung handelt.
Zu bemerken ist, dass der ABORTED und der TIMEOUT-Status gleichzeitig auftreten können.
Dies ist möglich, wenn PHP angewiesen wird, Benutzerabbrüche zu ignorieren.
PHP wird feststellen, dass der Benutzer die Verbindung abgebrochen hat, das Skript allerdings läuft weiter.
Sollte es dann das Zeitlimit erreichen, wird es abgebrochen und eine Shutdown-Funktion, wenn definiert, wird aufgerufen.
Zu diesem Zeitpunkt kann man feststellen, dass connection_timeout() und connection_aborted() TRUE zurückgeben.
Diese beiden Statusmöglichkeiten können auch durch einen Aufruf der Funktion connection_status() abgefragt werden.
Sie liefert ein Bitfeld des aktiven Status.
Wenn beispielsweise TIMEOUT und ABORTED aktiv sind, wird 3 zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Zugriff auf entfernte Dateien
Nach oben
Persistente Datenbankverbindungen
PHP Handbuch
Zurück
Nach vorne
PHP unterstützt HTTP-Cookies.
Hierbei handelt es sich um einen Mechanismus, um Informationen beim Client zu speichern und somit wiederkehrende Besucher zu identifizieren oder ihren Weg innerhalb des Angebotes nachzuvollziehen.
Cookies können durch die Funktion setcookie() gesetzt werden.
Sie sind Bestandteil des HTTP-Headers, was bedeutet, dass die Funktion setcookie() aufgerufen werden muss, bevor irgendeine Ausgabe an den Browser erfolgt.
Dies ist die gleiche Einschränkung, der auch die Funktion header() Dies ist die gleiche Einschränkung, der auch die Funktion header() unterliegt.
Header gesendet werden sollen oder nicht.
Vom Client gesendete Cookies werden - abhängig von den Konfigurationsvariablen register_globals und variables_order - automatisch in eine Variable geschrieben, wie es auch bei mittels GET oder POST gesendeten Daten geschieht.
Sollen einem Cookie mehrere Werte zugewiesen werden, so muss dem Cookienamen lediglich [] angefügt werden.
In älteren PHP-Versionen stehen diese Daten in $HTTP_COOKIE_VARS gespeichert, sofern die Konfigurationsvariable track_vars gesetzt ist.
Weitere Informationen sowie Anmerkungen zu Browser-Bugs finden Sie im Abschnitt setcookie().
Zurück
Zum Anfang
Nach vorne
HTTP-Authentifizierung mit PHP
Nach oben
Steuerung von Dateiuploads
PHP Handbuch
Zurück
Kapitel 18.
Steuerung von Dateiuploads
Nach vorne
Der mit MAX_FILE_SIZE eingestellte Wert kann nicht größer sein als der des ini-Parameters upload_max_filesize.
Der Standardwert ist 2 Megabyte.
Ist memory limit aktiviert, könnte eine Erhöhung von memory_limit nötig sein.
Stellen Sie sicher, dass der Wert von memory_limit groß genug ist.
Wenn max_execution_time zu kurz konfiguriert ist, könnte das Skript den Wert überschritten haben.
Stellen Sie sicher, dass der Wert von max_execution_time groß genug ist.
Ist post_max_size zu klein konfiguriert, können große Dateien nicht hochgeladen werden.
Stellen Sie sicher, dass der Wert von post_max_size groß genug ist.
Nicht zu prüfen an welcher Datei Sie arbeiten kann bedeuten, dass Benutzer auf sensible Informationen in anderen Verzeichnissen Zugriff erhalten.
Beachten Sie, dass CERN httpd in dem vom Client erhaltenen Content-Type Mime Header alles nach dem ersten Whitespace wegzuschneiden scheint.
Solange dies der Fall ist, unterstützt CERN httpd keine Dateiuploads.
Aufgrund der vielen möglichen Arten der Darstellung von Verzeichnissen können wir nicht garantieren, dass Dateien mit exotischen Namen (wie z.B. mit enthaltenen Leerzeichen) auch wirklich richtig verarbeitet werden.
Zurück
Zum Anfang
Nach vorne
Fehlermeldungen erklärt
Nach oben
Upload mehrerer Dateien
PHP Handbuch
Zurück
Kapitel 18.
Steuerung von Dateiuploads
Nach vorne
Seit PHP 4.2.0 gibt PHP zusammen mit dem Datei-Array entsprechende Fehlermeldungen.
Die Fehlermeldung befindet sich im Segment ['error'] des Datei-Arrays, welches während des Hochladens der Datei erstellt wird.
In anderen Worten kann der Fehler in $_FILES[ 'userfile']['error'] gefunden werden.
Wert:
0; Es liegt kein Fehler vor, die Datei wurde erfolgreich hochgeladen.
Wert:
1; Die hochgeladene Datei überschreitet die in der Anweisung upload_max_filesize in php.ini festgelegte Größe.
Wert:
2; Die hochgeladene Datei überschreitet die in dem HTML Formular mittels der Anweisung MAX_FILE_SIZE angegebene maximale Dateigröße.
Wert:
3; Die Datei wurde nur teilweise hochgeladen.
Wert:
4; Es wurde keine Datei hochgeladen.
Anmerkung:
Dies wurden Konstanten in PHP 4.3.0.
Zurück
Zum Anfang
Nach vorne
Steuerung von Dateiuploads
Nach oben
Häufige Probleme
PHP Handbuch
Zurück
Nach vorne
PHP kann Dateiuploads mit jedem RFC-1867 konformen Browser (dazu gehören der Netscape Navigator 3 oder höher, Microsoft Internet Explorer 3 mit einem Patch von Microsoft oder höher ohne Patch) durchführen.
Es können sowohl Text - als auch Binärdaten hochgeladen werden.
Mit PHP´s Authentifizierungs - und Dateifunktionen besteht volle Kontrolle darüber, wer Dateien hochladen darf und was mit den Dateien geschehen soll, wenn der Upload beendet ist.
Diesbezügliche Konfigurationshinweise:
Siehe auch die Anweisungen file_uploads, upload_max_filesize, upload_tmp_dir und post_max_size in der php.ini
PHP unterstützt auch Dateiuploads nach der PUT-Methode, die beispielsweise vom Netscape Composer und den W3C Amaya Clients benutzt wird.
Siehe dazu PUT-Unterstützung für nähere Informationen.
Eine Maske für den Dateiupload kann erstellt werden, indem man ein Formular entwirft, das ungefähr so aussieht:
Beispiel 18-1.
Formular für den Dateiupload
Warnung
Die maximale Dateigröße MAX_FILE_SIZE ist für den Browser nur ein Hinweis und es ist leicht, diese Grenze zu umgehen.
Also verlassen Sie sich nicht darauf, dass der Browser Ihrem Wunsch auch nachkommt!
Wie auch immer, die PHP-Einstellungen für die maximale Dateigröße können nicht getäuscht werden.
Die für hochgeladene Dateien definierten Variablen sind je nach PHP Version und Konfiguration verschieden.
Die Autoglobale $_FILES existiert seit PHP 4.1.0 und das Array $HTTP_POST_FILES seit PHP 4.0.0.
Diese Arrays enthalten alle Informationen über Ihre hochgeladenen Dateien.
Die Verwendung von $_FILES wird bevorzugt.
Seit PHP 4.2.0 steht register_globals standardmäßig auf off.
Im Folgenden sind die Inhalte von $_FILES Im Folgenden sind die Inhalte von $_FILES aus unserem Beispielskript aufgelistet.
Beachten Sie, dass dies auf der Annahme basiert, dass der Name des Dateiuploads wie in dem obigen Beispielskript userfile ist.
Der ursprüngliche Dateiname auf der Client Maschine.
Der Mime-Type der Datei, falls der Browser diese Information zur Verfügung gestellt hat.
Ein Beispiel wäre "image / gif".
Die Größe der hochgeladenen Datei in Bytes.
Der temporäre Dateiname, unter dem die hochgeladene Datei auf dem Server gespeichert wurde.
Der Fehlercode im Zusammenhang mit dem hochladen der Datei. ['error'] wurde in PHP 4.2.0 eingeführt.
Anmerkung:
In den Versionen vor PHP 4.1.0 war dies $HTTP_POST_FILES, und ist keine 'Autoglobale' Variable wie $_FILES.
PHP 3 unterstützt $HTTP_POST_FILES nicht.
Ist register_globals in der php.ini aktiviert, stehen zusätzliche Variablen zur Verfügung.
Zum Beispiel entspricht $userfile_name $_FILES[ 'userfile']['name'], $userfile_type entspricht $_FILES['userfile']['type'], etc.
Beachten Sie, dass register_globals standardmäßig deaktiviert ist, jedoch wird empfohlen, sich nicht darauf zu verlassen.
Standardmäßig werden Dateien in dem vorgegebenen temporären Verzeichnis des Servers gespeichert, außer es wurde mittels upload_tmp_dir in der php.ini ein anderer Ort konfiguriert.
Das Standardverzeichnis des Servers kann durch das Setzen der Umgebungsvariablen TMPDIR in der Umgebung, in der PHP ausgeführt wird, geändert werden.
Das Setzen mittels der Funktion putenv() Das Setzen mittels der Funktion putenv() innerhalb eines Skriptes ist nicht möglich.
Mittels dieser Umgebungsvariable kann auch sichergestellt werden, dass auch andere Operationen an hochgeladenen Dateien arbeiten können.
Beispiel 18-2.
Dateiuploads prüfen
Weitere Informationen finden Sie auch in den Beschreibungen für is_uploaded_file() und move_uploaded_file().
Das folgende Beispiel verarbeitet einen von einem HTML-Formular kommenden Dateiupload.
?php / / In PHP kleiner als 4.1.0 sollten Sie $HTTP_POST_FILES anstatt $_FILES verwenden. / / In PHP kleiner als 4.0.3 verwenden Sie copy() und is_uploaded_file() anstatt von / / move_uploaded_file() $uploaddir = '/ var / www / uploads /'; print "pre"; if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploaddir. $_FILES['userfile']['name'])) {print "File is valid, and was successfully uploaded.
Das die hochgeladene Datei empfangende Skript sollte die notwendige Logik zur Entscheidung enthalten, was mit der hochgeladenen Datei geschehen soll.
Sie können zum Beispiel $_FILES[ 'userfile']['size'] benutzen, um zu kleine bzw. zu große Dateien wegzuwerfen.
Seit PHP 4.2.0 können Sie Ihre Logik auch mittels $_FILES[ 'userfile']['error'] anhand der Fehlercodes Seit PHP 4.2.0 können Sie Ihre Logik auch mittels $_FILES['userfile']['error'] anhand der Fehlercodes planen.
Egal welche Logik Sie verwenden, Sie sollten die Datei in dem temporären Verzeichnis entweder löschen, oder an einen anderen Ort verschieben.
Wurde die Datei in dem temporären Verzeichnis nicht verschoben oder umbenannt, wird sie am Ende des Requests gelöscht.
Zurück
Zum Anfang
Nach vorne
Nach oben
Fehlermeldungen erklärt
PHP Handbuch
Zurück
Kapitel 18.
Steuerung von Dateiuploads
Nach vorne
Mehrere Dateien können hochgeladen werden, indem Sie verschiedene Namen name für input verwenden.
Es ist ebenfalls möglich, mehrere Dateien simultan hochzuladen, und die Informationen automatisch in Arrays zu erhalten.
Um dies zu tun, verwenden Sie in dem HTML Formular die gleiche Array-Sende-Syntax wie bei Auswahllisten mit Mehrfachauswahl und Checkboxen:
Anmerkung:
Die Unterstützung für den Upload von mehreren Dateien wurde in PHP 3.0.10 hinzugefügt.
Beispiel 18-3.
Upload mehrerer Dateien
Wenn das obige Formular übermittelt ist, werden die Arrays $_FILES[ 'userfile'], $_FILES['userfile']['name'] und $_FILES['userfile']['size'] Wenn das obige Formular übermittelt ist, werden die Arrays $_FILES['userfile'], $_FILES['userfile']['name'] und $_FILES['userfile']['size'] initialisiert (wie auch in $HTTP_POST_FILES vor PHP Version 4.1.0.).
Ist register_globals Ist register_globals aktiviert, werden auch globale Variablen für die hochgeladenen Dateien initialisiert.
Jedes von ihnen ist ein numerisch indiziertes Array mit den entsprechenden Werten für die hochgeladenen Dateien.
Nehmen wir zum Beispiel an, dass die Dateinamen / home / test / review.html und / home / test / xwp.out übermittelt wurden.
In diesem Fall würde $_FILES[ 'userfile']['name'][0] review.html enthalten, und $_FILES['userfile']['name'][1] hätte den Wert xwp.out.
Genauso würde $_FILES[ 'userfile']['size'][0] die Dateigröße von review.html enthalten, usw.
$_FILES[ 'userfile']['name'][0], $_FILES['userfile']['tmp_name'][0], $_FILES['userfile']['size'][0] und $_FILES['userfile']['type'][0] sind ebenfalls gesetzt.
Zurück
Zum Anfang
Nach vorne
Häufige Probleme
Nach oben
PUT-Unterstützung
PHP Handbuch
Zurück
Kapitel 18.
Steuerung von Dateiuploads
Nach vorne
Die Unterstützung der PUT-Methode hat sich zwischen PHP 3 und PHP 4 geändert.
In PHP 4 sollten Sie den standard Input-Datenstrom benutzen, um die Inhalte eines HTTP PUT zu lesen.
Beispiel 18-4.
Speicher von HTTP PUT Dateien mit PHP 4
?php / * PUT Daten kommen in den stdin Stream * / $putdata = fopen( "php: / /stdin" ,"r"); / * Eine Datei zum Schreiben öffnen * / $fp = fopen("myputfile.ext" ,"w"); / * Jeweils 1kB Daten lesen und in die Datei schreiben * / while ($data = fread($putdata,1024)) fwrite($fp,$data); / * Die Streams schließen * / fclose($fp); fclose($putdata);?
Anmerkung:
Sämtliche untenstehende Dokumentation betrifft nur PHP 3.
PHP unterstützt die HTTP PUT-Methode, wie sie von Clients wie Netscape Composer oder W3C Amaya benutzt wird.
PUT-Anfragen sind weitaus unkomplizierter als ein Dateiupload und sehen etwa so aus:
Das würde normalerweise bedeuten, dass der entfernte Client den folgenden Inhalt als / path / filename.html im Webverzeichnisbaum speichert.
Natürlich ist es keine gute Idee, dass PHP oder Apache jeden Benutzer beliebige Dateien überschreiben lassen.
Um eine solche Anfrage bearbeiten zu können, muss der Webserver erst angewiesen werden, ein bestimmtes PHP-Skript für die Abarbeitung aufzurufen.
Im Apache wird dies durch die Script - Direktive festgelegt.
Sie kann fast überall in der Apache-Konfigurationsdatei platziert werden, gebräuchlich ist die Platzierung innerhalb einer Directory - oder Virtualhost - Sektion.
Eine Zeile wie die folgende erledigt dies:
Diese Zeile legt fest, dass Apache alle PUT-Anfragen für URIs, die dem Kontext entsprechen, in dem diese Zeile steht, an das put.php Skript weiterleitet.
Dies setzt natürlich voraus, dass PHP aktiv und für die .php-Dateierweiterung registriert ist.
Innerhalb der put.php-Datei könnte folgendes stehen:
Dies kopiert die Datei an den vom Client angegebenen Ort.
Möglicherweise sollen vor dem Kopieren der Datei noch Überprüfungen und / oder Benutzerauthentifizierung stattfinden.
Wenn PHP eine PUT-Anfrage erhält, wird die Datei genau wie bei der POST-Methode in einem temporären Verzeichnis gespeichert.
Nach dem Abarbeiten der Anfrage wird die temporäre Datei gelöscht.
Also muss das PHP-Skript, das die PUT-Anfrage bearbeitet, die Datei irgendwohin kopieren.
Der Name der temporären Datei findet sich in der Variablen $PHP_PUT_FILENAME; der Name der zu speichernden Datei steht in $REQUEST_URI (kann bei Nicht-Apache Webservern variieren).
Dieser Zieldateiname wird vom Client festgelegt.
Man kann den Client auch umgehen; beispielsweise könnten alle hochgeladenen Dateien in ein spezielles Upload-Directory kopiert werden.
Zurück
Zum Anfang
Nach vorne
Upload mehrerer Dateien
Nach oben
Zugriff auf entfernte Dateien
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Referenzen entdecken
HTTP-Authentifizierung mit PHP
PHP Handbuch
Zurück
Nach vorne
Die HTTP-Authentifizierung durch PHP ist nur verfügbar, wenn PHP als Apache-Modul läuft und funktioniert daher nicht mit der CGI-Version.
In einem PHP-Skript für ein Apache-Modul kann man die Funktion header() benutzen, um die Nachricht "Authentifizierung notwendig "an den Client-Browser zu senden, damit dieser ein Fenster zur Eingabe von Benutzername / Passwort öffnet.
Momentan wird nur das Authentifizierungsmodell "basic" unterstützt.
Ein Auszug aus einem Skript, das die Clientauthentifizierung auf einer Seite erzwingt, würde so aussehen:
HTTP-Authentifizierung
?php if( !isset($PHP_AUTH_USER)) {Header( "WWW-Authenticate:
Basic realm=\" My Realm\""); Header("HTTP / 1.0 401 Unauthorized"); echo "Text to send if user hits Cancel button\n"; exit;} else {echo "Hello $PHP_AUTH_USER.
P "; echo "You entered $PHP_AUTH_PW as your password.
P ";}?
Hinweis:
Achten Sie bei den Header-Zeilen für maximale Kompatibilität auf die richtige Schreibweise!
Das Schlüsselwort "Basic" sollte genau so geschrieben werden, der Realm-String muss in doppelte (nicht einfache) Anführungszeichen eingeschlossen sein, und in der "HTTP / 1.0 401 "-Zeile darf nur genau ein Leerzeichen vor dem 401-Code stehen.
Dies kann durch die Abfrage einer Datenbank oder das Einlesen einer Textdatei geschehen.
Vorsicht bei einigen Internet Explorer-Versionen - sie scheinen sehr wählerisch zu sein, was die Reihenfolge der Header angeht.
Abhilfe schafft hier das Senden des WWW-Authenticate Headers vor dem HTTP / 1.0 401.
Um zu unterbinden, dass ein Skript das Passwort einer durch einen traditionellen externen Mechanismus geschützten Seite ausliest, werden die PHP_AUTH Variablen nicht gesetzt, wenn eine externe Authentifizierung für diese bestimmte Seite aktiviert ist.
In diesem Fall kann die $REMOTE_USER Variable benutzt werden, um den Benutzer durch die externe Zugriffskontrolle zu identifizieren.
PHP prüft das Vorhandensein einer AuthType PHP prüft das Vorhandensein einer AuthType Apache-Direktive, um zu entscheiden, ob eine externe Authentifizierung aktiv ist.
Vermeiden Sie deshalb diese Konfigurationsdirektive im Kontext der PHP-Authentifizierung (anderenfalls wird jeder Authentifizierungsversuch misslingen).
Zu beachten ist, dass obenstehendes keinesfalls jemanden, der die Kontrolle über eine nichtgeschützte URL hat, davon abhalten kann, Passwörter von geschützten URLs auf dem gleichen Rechner auszulesen.
Sowohl Netscape als auch der Internet Explorer löschen den lokalen Authentifizierungscache des Browserfensters, wenn der Server eine 401-Meldung zurückgibt.
Dies kann benutzt werden, um einen Benutzer "auszuloggen" und eine erneute Eingabe des Benutzernamens / Passworts zu erzwingen.
Manchmal wird dieses Verhalten für das automatische Ausloggen nach Ablauf einer bestimmten Zeitspanne oder für einen Logout-Button genutzt.
Beispiel 16-2.
HTTP-Authentifizierung, mit erneuter Anforderung von Name / Passwort
?php function authenticate() {Header ("WWW-Authenticate:
Basic realm=\" Test Authentication System\""); Header ("HTTP / 1.0 401 Unauthorized"); echo "You must enter a valid login ID and password to access this resource\n"; exit;} if(!isset($PHP_AUTH_USER) _BAR_ _BAR_ ($SeenBefore == 1 !strcmp($OldAuth, $PHP_AUTH_USER))) {authenticate();} else {echo "Welcome: $PHP_AUTH_USER BR "; echo "Old: $OldAuth"; echo" FORM ACTION=\"$PHP_SELF\ "METHOD=POST \n"; echo" INPUT TYPE=HIDDEN NAME=\"SeenBefore\ "VALUE=\"1\" \n"; echo "INPUT TYPE=HIDDEN NAME=\"OldAuth\" VALUE=\"$PHP_AUTH_USER\ "\n"; echo" INPUT TYPE=Submit VALUE=\"Re Authenticate\ "\n"; echo" / FORM \n";}?
Dieses Verhalten wird vom Authentifizierungsstandard HTTP Basic nicht gefordert, daher sollte man sich nie darauf verlassen.
Tests mit Lynx haben gezeigt, dass Lynx die Authentifizierungsinformationen bei Erhalt einer 401-Meldung nicht löscht.
Ein Klick auf den Zurück - Button und danach auf Vorwärts wird die angeforderte Adresse öffnen (und zwar so lange, bis die Identifizierung der Benutzer geändert wird).
Weiterhin muss beachtet werden, dass dies unter dem Microsoft IIS mit der CGI-Version von PHP aufgrund einer Einschränkung des IIS nicht funktioniert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Persistente Verbindungen sind SQL-Verbindungen, die nach Abarbeitung des Skriptes nicht geschlossen werden.
Wenn eine persistente Verbindung angefordert wird, prüft PHP zuerst, ob bereits eine identische persistente Verbindung (die vielleicht vorher offen geblieben ist) existiert und benutzt sie in diesem Fall.
Sollte keine Verbindung existieren, wird eine hergestellt.
Eine 'identische' Verbindung ist eine Verbindung, die zu dem gleichen Host mit dem gleichen Usernamen und Passwort hergestellt wurde.
Anmerkung:
IMAP extension.
Wer nicht durchgängig mit der Art und Weise vertraut ist, wie Webserver arbeiten und die Last verteilen, könnte missverstehen, wofür persistente Verbindungen gedacht sind.
Um absolute Klarheit zu schaffen:
Persistente Verbindungen bieten keine Funktionalität, die nicht auch von nicht-persistenten Verbindungen bereitgestellt wird.
Warum?
Das hat mit der Arbeitsweise von Webservern zu tun.
Es gibt drei Möglichkeiten, wie ein Webserver PHP zur Generierung von Webseiten einsetzen kann.
Die erste Methode ist, PHP als CGI -' Wrapper 'zu benutzen.
Wenn diese Methode eingesetzt wird, wird für jede Anfrage nach einer PHP-Seite vom Webserver eine Instanz des PHP - Interpreters gestartet und anschließend wieder beendet.
Durch die Beendigung des Interpreters nach abgeschlossener Anfrage werden alle Ressourcen, auf die zugegriffen wurde (wie beispielsweise eine Verbindung zu einem SQL - Datenbankserver) wieder geschlossen.
In diesem Fall erreicht man nichts, wenn man persistente Verbindungen benutzt - sie sind eben nicht beständig.
Die zweite und populärste Methode ist der Einsatz von PHP als Modul in einem Multiprozess-Webserver, was momentan nur auf den Apache zutrifft.
Typischerweise hat ein Multiprozess-Webserver einen Prozess (den 'Eltern 'Prozess), der einen Satz weiterer Prozesse (die 'Kinder') koordiniert, welche die eigentliche Arbeit des Bereitstellens der Seiten übernehmen.
Jede Anfrage, die von einem Client erfolgt, wird an einen untergeordneten Prozess, der noch keine andere Anfrage bearbeitet, weitergereicht.
Das bedeutet, dass eine zweite Anfrage des gleichen Clients an den Server unter Umständen von einem anderen untergeordneten Prozess als die erste Anfrage bearbeitet wird.
In diesem Fall sorgt eine persistente Verbindung dafür, dass jeder untergeordnete Prozess sich nur einmal mit dem SQL-Server verbinden muss, wenn eine solche benötigt wird.
Benötigt dann eine weitere Seite die Verbindung mit dem SQL-Server, kann auf die zurückgegriffen werden, die der untergeordnete Prozess vorher hergestellt hat.
Die letzte Methode ist, PHP als Plug-in für einen Multithread - Webserver zu benutzen.
Derzeit bietet PHP 4 Unterstützung für ISAPI, WSAPI und NSAPI (unter Windows), wodurch die Nutzung von PHP mit Multithread-Serven wie Netscape Fast Track (iPlanet), Microsoft Internet Information Server (IIS) und O'Reilly 's WebSite Pro ermöglicht wird.
Das Verhalten entspricht im wesentlichen dem oben beschriebenen Multiprozess-Modell.
Beachten Sie, dass PHP 3 keine Unterstützung für SAPI bietet.
Wozu dienen persistente Verbindungen, wenn sie keine zusätzliche Funktionalität bieten?
Effizienz.
Persistente Verbindungen sind nützlich, wenn der Aufwand für das Herstellen einer Verbindung zu einem SQL-Server hoch ist.
Ob dies der Fall ist oder nicht, hängt von vielen Faktoren ab - zum Beispiel, um welche Datenbank es sich handelt, ob sie auf dem gleichen Rechner wie der Webserver läuft oder welche Last die SQL-Maschine zu bewältigen hat usw.
Grundsätzlich gilt, dass, wenn viele Verbindungen hergestellt werden müssen, persistente Verbindungen außerordentlich hilfreich sind.
Sie veranlassen den untergeordneten Prozess, sich während seiner gesamten Lebensdauer lediglich einmal mit dem SQL-Server zu verbinden, anstatt bei jedem Aufruf einer Seite, die eine Verbindung benötigt.
Das heißt, dass jeder untergeordnete Prozess, der eine persistente Verbindung öffnet, seine eigene dauerhafte Verbindung zum Server hat.
Bei 20 untergeordneten Prozessen, die ein Skript ausführen, das eine persistente Verbindung zum SQL-Server herstellt, hat man beispielsweise 20 verschiedene Verbindungen zum SQL-Server - eine für jeden untergeordneten Prozess.
Beachten Sie jedoch, dass dies auch ein paar Nachteile haben kann, wenn Sie eine Datenbank mit limitierten Verbindungen benutzen, welche durch persistente Verbindungen überschritten werden.
Wenn Ihre Datenbank ein Limit von 16 gleichzeitigen Verbindungen hat, und aufgrund einer stark ausgelasteten Server-Session 17 Kind-Prozesse versuchen, eine Verbindung herzustellen, wird es einem nicht gelingen.
Endlosschleifen), kann das eine Datenbank mit mit nur 16 Verbindungen sehr schnell überschwemmen.
Konsultieren Sie die Dokumentation Ihrer Datenbank bezüglich der Behandlung von aufgegebenen Verbindungen oder Verbindungen im Leerlauf.
Warnung
Sie sollten sich zur Vorsicht noch ein paar Gedanken machen, wenn Sie persistente Verbindungen benutzen.
Einer ist, wenn Sie über eine persistente Verbindung Tabellen sperren und das Skript diese Sperre aus welchem Grund auch immer nicht mehr aufheben kann, nachfolgende Skripte, welche die selbe Verbindung benutzen, blockieren und den Neustart von entweder dem Webserver oder dem Datenbankserver verlangen.
Ein weiterer ist, dass wenn Sie Transaktionen benutzen, ein Transaktionsblock zu dem nächsten die Verbindung nutzenden Skript übertragen wird, wenn die Ausführung des Skriptes vor dem Transaktionsblock gestoppt wird.
In jedem Fall können Sie register_shutdown_function() In jedem Fall können Sie register_shutdown_function() benutzen, um eine einfache Funktion zu registrieren, welche Ihre Tabellen wieder entsperrt, oder Ihre Transaktionen zurückstellt.
Besser ist es, wenn Sie dieses Problem gänzlich vermeiden, indem keine persistenten Verbindungen in Skripten benutzen, welche Tabellen sperren oder Transaktionen verwenden (Sie können sie immer noch anderswo benutzen).
Eine wichtige Zusammenfassung.
Persistente Verbindungen wurden entwickelt, um eins-zu-eins Abbildungen auf reguläre Verbindungen zu haben.
Das heißt, dass man immer in der Lage sein sollte, die persistenten Verbindungen durch nicht-persistente zu ersetzten, ohne dass dies den Skriptablauf verändert.
Es kann (und wird vermutlich auch) die Effizienz des Skriptes beeinflussen, aber nicht dessen Verhalten.
Siehe auch fbsql_pconnect(), ibase_pconnect(), ifx_pconnect(), imap_popen(), ingres_pconnect(), msql_pconnect(), mssql_pconnect(), mysql_pconnect(), OCIPLogon(), odbc_pconnect(), Ora_pLogon(), pfsockopen(), pg_pconnect() und sybase_pconnect().
Zurück
Zum Anfang
Nach vorne
Verbindungssteuerung
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn die Unterstützung für den "URL fopen wrapper" bei der Konfiguration von PHP vorhanden ist (welche standardmäßig eingestellt ist, es sei denn, die Option --disable-url-fopen-wrapper wurde bei der Installation verwendet (Versionen bis 4.0.3) oder der Parameter allow_url_fopen in der php.ini deaktiviert wurde (neuere Versionen), können HTTP und FTP URLs bei den meisten Funktionen verwendet werden, die einen Dateinamen als Parameter benötigen, inklusive require() und include() Anweisungen.
Anmerkung: remote files funktionieren nicht mit include() und require() Anweisungen unter Windows.
Diese Daten können zur Abfrage einer Datenbank benutzt werden oder passend zum Rest der eigenen Website ausgegeben werden.
Beispiel 19-1.
Den Titel einer entfernten Seite auslesen
?php $file = fopen ("http: / /www.example.com / ", "r"); if (!$file) {echo" p Datei konnte nicht geöffnet werden.\n"; exit;} while (!feof ($file)) {$line = fgets ($file, 1024); / * Funktioniert nur, wenn Titel und title-Tags in einer Zeile stehen * / if (eregi ("title (.*) / title", $line, $out)) {$title = $out[1]; break;}} fclose($file);?
Auch eine Datei auf einem FTP-Server kann geschrieben werden, solange man sich über einen Benutzer mit entsprechenden Zugriffsrechten verbindet und die Datei noch nicht existiert.
Um sich mit einem anderen Benutzer als 'anonymous' zu verbinden muß ein username (und möglichst ein Passwort) innerhalb der URL angegeben werden, wie z.B. 'ftp: / /user:password@ftp.example.com / pfad / zur / datei'. (Die selbe Syntax kann verwendet werden, um auf Daten via HTTP zuzugreifen, wenn diese eine Basic Authentication benötigen.)
Beispiel 19-2.
Daten auf einen entfernten Server speichern
?php $file = fopen ("ftp: / /ftp.example.com / incoming / outputfile", "w"); if (!$file) {echo "p Datei konnte zum schreiben nicht geöffnet werden.\n"; exit;} / * Schreibe die Daten hier hin. * / fputs ($file, "$HTTP_USER_AGENT\n"); fclose ($file);?
Anmerkung:
Obiges Beispiel könnte dazu verleiten, dieses Verfahren zu benutzen, um in ein 'remote log-file' zu schreiben.
Wie oben erwähnt kann man jedoch ausschließlich neue Dateien anlegen, wenn man URL fopen() wrapper benutzt.
Für 'distributed logging' sollte man sich die Funktion syslog() anschauen.
Zurück
Zum Anfang
Nach vorne
PUT-Unterstützung
Nach oben
Verbindungssteuerung
PHP Handbuch
Zurück
Nach vorne
Safe Mode ist der Versuch, Sicherheitsprobleme bei gemeinsam genutzten Servern zu lösen.
Da es auf Ebene des Webservers bzw. des Betriebssystems keine praktischen Alternativen gibt, wird Safe Mode nunmehr von vielen Leuten, vor allem von Providern, eingesetzt.
Es existieren folgende Direktiven um Safe Mode zu konfigurieren:
Wenn safe_mode aktiviert ist, überprüft PHP, ob der Eigentümer des laufenden Skriptes dem Eigentümer der Datei entspricht, an der mit Hilfe der Dateifunktionen gearbeitet werden soll.
Beispiel:
Wenn anstelle von safe_mode ein open_basedir Wenn anstelle von safe_mode ein open_basedir Verzeichnis angegeben wurde, können Dateioperationen nur noch unterhalb dieses Verzeichnisses vorgenommen werden.
Beispiel (Apache httpd.conf):
Darüberhinaus können einzelne Funktionen deaktiviert werden.
Würde man folgenden Eintrag in der php.ini vornehmen:
Dies ist eine Auflistung der Funktionen, die durch Safe Mode eingeschränkt werden.
Diese Liste ist möglicherweise unvollständig und fehlerhaft!
Tabelle 22-1.
Durch Safe Mode eingeschränkte Funktionen
Funktion
Einschränkungen
dbmopen()
dbase_open()
filepro()
filepro_rowcount()
filepro_retrieve()
ifx_*()
ingres_*()
mysql_*()
pg_loimport()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Überprüft ob das Verzeichnis in dem das Skript ausgeführt werden soll, die gleiche UID hat wie das Skript selbst.
Führt die safe_mode_protected_env_vars und safe_mode_allowed_env_vars ini-directiven aus.
move_uploaded_file()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Überprüft ob das Verzeichnis in dem das Skript ausgeführt werden soll, die gleiche UID hat wie das Skript selbst.
dl()
backtick operator
shell_exec() (funktional gleichwertig zu den Backtick-Operatoren)
exec()
Ausführbare Dateien können nur innerhalb des durch safe_mode_exec_dir angegebenen Verzeichnisses ausgeführt werden.
Aus praktischen Gründen ist es momentan nicht erlaubt,.. im Pfad zu den ausführbaren Datein anzugeben.
Ausführbare Dateien können nur innerhalb des durch safe_mode_exec_dir angegebenen Verzeichnisses ausgeführt werden.
Aus praktischen Gründen ist es momentan nicht erlaubt,.. im Pfad zu den ausführbaren Datein anzugeben.
Ausführbare Dateien können nur innerhalb des durch safe_mode_exec_dir angegebenen Verzeichnisses ausgeführt werden.
Aus praktischen Gründen ist es momentan nicht erlaubt,.. im Pfad zu den ausführbaren Datein anzugeben.
Ausführbare Dateien können nur innerhalb des durch safe_mode_exec_dir angegebenen Verzeichnisses ausgeführt werden.
mkdir()
rmdir()
rename()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Überprüft ob das Verzeichnis in dem das Skript ausgeführt werden soll, die gleiche UID hat wie das Skript selbst.
unlink()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
copy()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
chgrp()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
chmod()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
In addition, you cannot set the SUID, SGID and sticky bits
touch()
Überprüft ob das Verzeichnis in dem das Skript ausgeführt werden soll, die gleiche UID hat wie das Skript selbst.
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Überprüft ob das Verzeichnis in dem das Skript ausgeführt werden soll, die gleiche UID hat wie das Skript selbst. (note: only the target is checked)
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
getallheaders()
Achtung:
Dies ist fehlerhaft bei der AOL-Server Implementation der Funktion getallheaders()!
highlight_file(), show_source()
Überprüft ob die Dateien / Verzeichnisse, die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Überprüft ob das Verzeichnis in dem das Skript ausgeführt werden soll, die gleiche UID hat wie das Skript selbst. (Hinweis: gilt nur ab Version PHP 4.2.1)
??
Zurück
Zum Anfang
Nach vorne
Persistente Datenbankverbindungen
Nach oben
Using PHP from the command line
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Apache-spezifische Funktionen
PHP Handbuch
Zurück
Nach vorne
Liefert den Absolutwert einer Zahl.
Ist number vom Typ float, so ist auch das Ergebnis vom Typ float, ansonsten ist es vom Typ int.
Zurück
Zum Anfang
Nach vorne
Mathematische Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Funktion ist auf Windows-Plattformen nicht implementiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Arcuscosinus zum Wert arg im Bogenmaß.
Siehe auch asin(), atan() und cos().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Es wird ein String zurück gegeben, in dem jedem Zeichen, das in charlist steht, ein "\" voran gestellt wurde.
Teile wie \n, \r etc. werden wie in C übergangen, ASCII-Zeichen kleiner als 32 und grösser als 126 werden in ihren oktal-Wert umgesetzt.
Seien Sie bei der Umsetzung von alphanumerischen Zeichen vorsichtig.
Sie können in charlist einen Bereich wie "\0..\37" angeben.
Dadurch wird allen ASCII-Zeichen von 0 bis 31 ein "\" voran gestellt.
Beispiel 1. addcslashes() Beispiel:
$escaped = addcslashes ($not_escaped, "\0..\37!@\177..\377");
Anmerkung:
Diese Funktion ist ab Version PHP4b3-dev verfügbar.
Siehe auch stripcslashes(), stripslashes(), htmlspecialchars(), htmlspecialchars() und quotemeta().
Zurück
Zum Anfang
Nach vorne
String-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist z.B. für Datenbankabfragen wichtig.
Die behandelten Zeichen sind der einfache und der doppelte Anführungsstrich ('und "), der Rückstrich (\) selbst sowie NUL (das Null-Byte).
Siehe auch stripslashes(), htmlspecialchars() und quotemeta().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
apache_child_terminate() beendet den Apache Prozess, der die aktuelle PHP-Anfrage ausführt, nachdem diese vollständig ausgeführt wurde.
Der verbrauchte Speicher wird gewöhnlich nur intern, aber nicht für das Betriebsystem, freigegeben.
Anmerkung:
Die Standardeinstellung ist off.
Dieses Feature steht bei multithreaded Versionen von Apache, wie der win32 Version, nicht zur Verfügung.
Siehe auch exit().
Zurück
Zum Anfang
Nach vorne
Apache-spezifische Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
apache_lookup_uri() führt eine Teilanfrage über eine bestimmte URI durch.
Die Abfrage geht gerade soweit, dass alle wichtigen Informationen über die gegebene Quelle gesammelt werden können.
Als Resultat wird eine Klasse zurückgeliefert, die folgende Elemente enthält:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
apache_note() ist eine Apache-spezifische Funktion, die Einträge in Apaches notes -Tabelle setzt und ausliest.
Wenn sie mit einem einzelnen Parameter aufgerufen wird, gibt sie den aktuellen Wert der Note note_name zurück.
Bei zwei Parametern wird der Eintrag note_name auf den zweiten Parameter note_value gesetzt und liefert den bisherigen Wert zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion apache_request_headers() liefert ein assoziatives Array zurück, das alle HTTP-Header-Informationen der aktuellen HTTP-Anfrage enthält.
Diese Funktion wird nur untersstützt, wenn PHP als Modul für Apache läuft.
Anmerkung:
In früheren Versionen als PHP 4.3.0 hieß die Funktion apache_request_headers() getallheaders().
Mit PHP 4.3.0 ist getallheaders() ein Alias für apache_request_headers().
Beispiel 1. apache_request_headers() Beispiel
Anmerkung:
Dieser Weg funktioniert unabhängig davon, ob Sie PHP als Modul für Apache benutzen.
Benutzen Sie phpinfo(), um eine Liste aller zur Verfügung stehenden Umgebungsvariablen zu erhalten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: ein assoziatives Array mit allen Apache-Antwort Headern.
Diese Funktion steht erst ab PHP Version 4.3.0 und folgende zur Verfügung.
Siehe auch getallheaders() und headers_sent().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_change_key_case() wandelt die Schlüssel des Arrays input in Klein - bzw.
Die Richtung der Umwandlung wird mit dem optionalen Parameter case festgelegt, mit dem die zwei Konstanten CASE_UPPER und CASE_LOWER übergeben werden können.
Default ist CASE_LOWER.
Diese Funktion lässt die numerischen Indizes unverändert.
Beispiel 1. array_change_key_case()
wird folgendes ausgeben:
Zurück
Zum Anfang
Nach vorne
Array Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_chunk() teilt das Array in verschiedene Arrays mit size Werten auf.
Am Ende kann auch ein Array mit weniger Werten erzeugt werden.
Die Arrays werden als Teile eines mehrdimensionalen Arrays erzeugt, welches bei Null und beginnend numerisch indiziert ist.
Sie können PHP dazu zwingen, die originalen Schlüssel des Arrays input beizubehalten, indem Sie den optionalen Parameter preserve_keys auf TRUE setzen.
Geben Sie FALSE an, werden in jedem erzeugten Array neue numerische Indizes erzeugt, welche bei Null beginnen.
Default ist FALSE.
Beispiel 1. array_chunk()
wird folgendes ausgeben:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_count_values() gibt ein Array zurück, in dem die Werte des Arrays input als Schlüssel, und deren Anzahl als Werte angegeben sind.
Beispiel 1. array_count_values()
Wird folgendes ausgeben:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. array_diff_assoc() example
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_diff() gibt ein Array mit allen Werten von array1, welche in keinem der anderen Argumente enthalten sind, zurück.
Beachten Sie, dass Schlüssel erhalten bleiben.
Beispiel 1. array_diff()
$array1 = array ("a "= "grün", "rot", "blau", "rot"); $array2 = array ("b" = "grün", "gelb", "rot"); $result = array_diff ($array1, $array2);
Dies speichert array( "blau"); in $result.
Mehrfache Vorkommen in $array1 werden auf die gleiche Weise behandelt.
Anmerkung:
Zwei Elemente werden nur dann als gleich angesehen, wenn (string) $elem1 === (string) $elem2.
Wenn die String-Repräsentation die gleiche ist.
Anmerkung:
Beachten Sie, dass diese Funktion nur eine Dimension eines n-dimensionalen Arrays prüft.
Natürlich können Sie tiefere Dimensionen prüfen, indem Sie z.B. array_diff( $array1[0], $array2[0]); benutzen.
Warnung
Dies war in PHP 4.0.4 fehlerhaft!
Siehe auch array_diff_assoc(), array_intersect() und array_intersect_assoc().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Indizes des Arrays beginnen mit dem start_index Parameter.
Beispiel 1. array_fill()
$a = array_fill( 5, 6, 'Banane');
$a würde mit print_r() folgende Inhalte ausgeben:
Array ([5] = Banane [6] = Banane [7] = Banane [8] = Banane [9] = Banane [10] = Banane)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_filter() gibt ein Array mit den mittels der Callback-Funktion function gefilterten Elementen von input zurück.
Ist input ein assoziatives Array, bleiben die Schlüssel erhalten.
Beispiel 1. array_filter()
function ungerade( $var) {return ($var% 2 == 1);} function gerade($var) {return ($var% 2 == 0);} $array1 = array ("a"= 1, "b"= 2, "c"= 3, "d"= 4, "e"= 5); $array2 = array (6, 7, 8, 9, 10, 11, 12); echo "Ungerade :\n"; print_r(array_filter($array1, "ungerade")); echo "Gerade:\n"; print_r(array_filter($array2, "gerade"));
Wird folgendes ausgeben:
Ungerade:
Array ([a] = 1 [c] = 3 [e] = 5) Gerade:
Von der Benutzerfunktion aus darf das Array selbst nicht geändert werden, wie zum Beispiel durch Hinzufügen oder Löschen eines Elementes, oder auch Löschen des Arrays, auf das array_filter() angewendet wird.
Ist das Array geändert, so ist das Verhalten dieser Funktion undefiniert.
Siehe auch array_map() und array_reduce().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schlüssel von trans werden Werte, und umgekehrt werden die Werte zu Schlüsseln.
Beachten Sie, dass die Werte von trans gültige Schlüssel sein müssen, z.B. haben sie entweder integer oder string Beachten Sie, dass die Werte von trans gültige Schlüssel sein müssen, z.B. haben sie entweder integer oder string zu sein.
Ist ein Wert vom falschen Typ wird eine Warnung ausgegeben, und das Schlüssel / Werte-Paar wird nicht vertauscht.
Kommt ein Wert mehrmals vor, wird der letzte Schlüssel mit seinem Wert vertauscht, und alle anderen Schlüssel - Wertepaare gehen verloren.
array_flip() gibt im Fehlerfall FALSE zurück.
Beispiel 1. array_flip() Beispiel
Kollision
Nun ist $trans:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein den Parametern entsprechendes Array zurück.
Mit dem = Operator können die Parameter indiziert werden.
Index kann vom Typ String oder numerisch sein.
Wird der Index weggelassen, erstellt die Funktion automatisch einen numerischen Index, der bei 0 beginnt.
Ist der Index als Integer-Wert angegeben, wird der nächste generierte Index der größte Integer Index + 1.
Beachten Sie, dass wenn zwei identische Indexe definiert sind, der letzte den ersten überschreibt.
Das folgende Beispiel zeigt wie man ein zweidimensionales Array erstellt, wie man Schlüssel für assoziative Arrays festlegt, und wie man numerische Indizes in normalen Arrays überspringt und fortsetzt.
Beispiel 1. array()
$fruits = array ("Früchte "= array ("a"= "Orange", "b"= "Banane", "c"= "Apfel"), "Zahlen" = array (1, 2, 3, 4, 5, 6), "Löcher "= array ("erstes", 5 = "zweites", "drittes"));
Beispiel 2.
Automatischer Index mit array()
wird folgendes anzeigen:
Dieses Beispiel erstellt ein auf dem Index 1 basierendes Array.
Beispiel 3.
1-basierter Index mit array()
$erstesquartal = array( 1 = 'Januar', 'Februar', 'März'); print_r($erstesquartal);
wird folgendes ausgeben:
Array ([1] = 'Januar '[2] = 'Februar' [3] = 'März ')
Siehe auch array_pad(), list() und range().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. array_intersect_assoc() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_intersect() gibt ein Array mit allen Werten von array1, die auch in allen anderen Argumenten enthalten sind, zurück.
Beachten Sie, dass die Schlüssel erhalten bleiben.
Beispiel 1. array_intersect() Beispiel
$array1 = array ("a "= "grün", "rot", "blau"); $array2 = array ("b" = "grün", "gelb", "rot"); $result = array_intersect ($array1, $array2);
Danach enthält $result
Array ([a] = grün [0] = rot)
Anmerkung:
Zwei Elemente werden nur dann als gleich angesehen, wenn (string) $elem1 === (string) $elem2.
Wenn die String-Repräsentation die gleiche ist.
Warnung
Dies war in PHP 4.0.4 fehlerhaft!
Siehe auch array_intersect_assoc(), array_diff() und array_diff_assoc().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_key_exists() gibt TRUE zurück, wenn key in dem Array vorhanden ist. key kann jeder für einen Array-Index mögliche Wert sein.
Beispiel 1. array_key_exists()
$search_array = array( "erstes "= 1, "zweites" = 4); if (array_key_exists("erstes", $search_array)) {echo "Das Element 'erstes 'ist in dem Array vorhanden";}
Anmerkung:
Der Name dieser Funktion ist in PHP 4.0.6 key_exists().
Siehe auch isset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_keys() gibt die Schlüssel (numerisch und String) des Arrays input zurück.
Ist der optionale Parameter search_value angegeben, werden nur die Schlüssel für diesen Wert zurückgegeben.
Andernfalls werden all Schlüssel von input zurückgegeben.
Beispiel 1. array_keys()
$array = array (0 = 100, "Farbe "= "rot"); print_r(array_keys ($array)); $array = array ("blau", "rot", "grün", "blau", "blau"); print_r(array_keys ($array, "blau")); $array = array ("Farbe" = array("blau", "rot", "grün"), "Größe "= array("klein", "mittel", "groß")); print_r(array_keys ($array));
würde folgendes ausgeben:
Array ([0] = 0 [1] = Farbe) Array ([0] = 0 [1] = 3 [2] = 4) Array ([0] = Farbe [1] = Größe)
Anmerkung:
Diese Funktion wurde in PHP 4 eingeführt, nachstehend finden Sie eine Implementierung für Benutzer von PHP 3.
Beispiel 2.
Implementierung von array_keys() für Benutzer von PHP 3:
Siehe auch array_values().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_map() gibt ein Array mit allen Elementen von arr1 zurück, nachdem die Callback-Funktion function auf jedes einzelne Element angewandt wurde.
Die Anzahl Parameter, welche die Callback-Funktion function akzeptiert, sollte der Anzahl der an array_map() übergebenen Arrays entsprechen.
Beispiel 1. array_map()
Dies speichert in $b:
Beispiel 2. array_map() - Verwendung mehrerer Arrays
?php function show_Spanish( $n, $m) {return "Die Zahl $n heißt auf Spanisch $m";} function map_Spanish($n, $m) {return array ($n = $m);} $a = array(1, 2, 3, 4, 5); $b = array("uno", "dos", "tres", "cuatro", "cinco"); $c = array_map("show_Spanish", $a, $b); print_r($c); $d = array_map("map_Spanish", $a, $b); print_r($d);?
Dies resultiert in:
/ / Ausgabe von $c Array ([0] = Die Zahl 1 heißt auf Spanisch uno [1] = Die Zahl 2 heißt auf Spanisch dos [2] = Die Zahl 3 heißt auf Spanisch tres [3] = Die Zahl 4 heißt auf Spanisch cuatro [4] = Die Zahl 5 heißt auf Spanisch cinco) / / Ausgabe von $d Array ([0] = Array ([1] = uno) [1] = Array ([2] = dos) [2] = Array ([3] = tres) [3] = Array ([4] = cuatro) [4] = Array ([5] = cinco))
Bei Verwendung von zwei oder mehr Arrays sollten diese gewöhnlich die gleiche Länge besitzen, da die Callback-Funktion parallel auf die entsprechenden Elemente angewandt wird.
Haben die Arrays unterschiedliche Längen, wird das kürzeste um leere Elemente erweitert.
Eine interessante Anwendung dieser Funktion ist die Konstruktion eines Arrays bestehend aus Arrays, was mit NULL als Name der Callback-Funktion leicht realisiert werden kann.
Beispiel 3.
Erstellen eines Arrays mit Arrays
?php $a = array( 1, 2, 3, 4, 5); $b = array("eins", "zwei", "drei", "vier", "fünf"); $c = array("uno", "dos", "tres", "cuatro", "cinco"); $d = array_map(null, $a, $b, $c); print_r($d);?
Würde folgendes ausgeben:
Array ([0] = Array ([0] = 1 [1] = eins [2] = uno) [1] = Array ([0] = 2 [1] = zwei [2] = dos) [2] = Array ([0] = 3 [1] = drei [2] = tres) [3] = Array ([0] = 4 [1] = vier [2] = cuatro) [4] = Array ([0] = 5 [1] = fünf [2] = cinco))
Siehe auch array_filter(), array_reduce() und array_walk().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_merge() fügt die Elemente von zwei oder mehr Arrays zusammen, indem die Werte des einen an das Ende des anderen angehängt werden.
Das daraus resultierende Array wird zurückgegeben.
Haben die angegebenen Arrays die selben String-Schlüssel, dann wird der hintere Wert dieses Schlüssels den vorhergehenden überschreiben.
Haben die Arrays den gleichen numerischen Schlüssel, dann wird der hintere Wert den vorhergehenden nicht überschreiben, sondern angehängt.
Beispiel 1. array_merge()
$array1 = array ("farbe "= "rot", 2, 4); $array2 = array ("a", "b", "farbe" = "grün", "form "= "trapezoid", 4); $result = array_merge ($array1, $array2);
Das $result Ergebnis ist:
Array ([farbe] = grün [0] = 2 [1] = 4 [2] = a [3] = b [form] = trapezoid [4] = 4)
Beispiel 2.
Einfaches array_merge() Beispiel
Vergessen Sie nicht, dass numerische Schlüssel neu numeriert werden!
Wenn Sie die Arrays komplett erhalten und nur eines an das andere anhängen wollen, verwenden Sie den Operator +:
Anmerkung:
Gemeinsame Schlüssel werden nach dem Prinzip "Wer zuerst kommt mahlt zuerst" behandelt.
Siehe auch array_merge_recursive().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_merge_recursive() fügt die Elemente von zwei oder mehr Arrays zusammen, so dass die Werte des einen Arrays an die des vorigen angehängt werden.
Das daraus resultierende Array wird zurückgegeben.
Haben die Arrays den gleichen numerischen Schlüssel, dann wird der hintere Wert den vorhergehenden nicht überschreiben, sondern an den vorderen angehängt.
Beispiel 1. array_merge_recursive()
$ar1 = array ("farbe "= array ("favorit" = "rot"), 5); $ar2 = array (10, "farbe "= array ("favorit" = "grün", "blau")); $result = array_merge_recursive ($ar1, $ar2);
Array ([farbe] = Array ([favorit] = Array ([0] = rot [1] = grün) [0] = blau) [0] = 5 [1] = 10)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_multisort() wird zum Sortieren von entweder mehreren Arrays auf einmal, oder eines multidimensionalen Arrays (entsprechend einer von mehreren Dimensionen) benutzt.
Bei der Sortierung werden die Schlüsselassoziationen beibehalten.
Die angegebenen Arrays werden als Spalten einer Tabelle behandelt, welche nach Reihen sortiert werden - ähnlich der SQL Klausel ORDER BY.
Das erste Array ist auch das erste in der Sortierreihenfolge.
Die in diesem Array gleichen Zeilen (Werte) werden anhand des nächsten angegebenen Arrays sortiert, usw.
Die Struktur der Argumente ist etwas ungewöhnlich, aber flexibel.
Das aller erste Argument muss ein Array sein.
Die nachfolgenden Argumente können entweder ein Array oder eines der folgenden Sortierflags sein.
Flags für Sortierreihenfolge:
SORT_ASC - sortiere in aufsteigender Reihenfolge
SORT_DESC - sortiere in absteigender Reihenfolge
Flags für Sortiertypen:
SORT_REGULAR - vergleiche Felder normal
SORT_NUMERIC - vergleiche Felder numerisch
SORT_STRING - vergleiche Felder als Strings
Es kann nur ein Sortierflag des selben Typs nach jedem Array spezifiziert werden.
Sortierflags nach einem Array Argument gelten nur für dieses Array, und werden vor jedem neuen Array Argument zu den Defaultflags SORT_ASC und SORT_REGULAR zurückgesetzt.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1.
Sortieren mehrerer Arrays
In diesem Beispiel enthält das erste Array nach dem Sortieren 10, "a", 100, 100.
Das zweite Array wird 1, 1, "2", 3 enthalten.
Die Einträge des zweiten Arrays, welche den identischen Einträgen des ersten Arrays entsprechen (100 und 100) wurden ebenfalls sortiert.
Beispiel 2.
Sortieren eines mehrdimensionalen Arrays
In diesem Beispiel enthält das erste Array nach dem Sortieren 10, 100, 100, "a" (wurde als Strings in aufsteigender Reihenfolge sortiert), und das zweite enthält 1, 3, "2", 1 (numerisch und absteigender Reihenfolge sortiert).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_pad() liefert eine Kopie von input, welche auf die von pad_size spezifizierte Größe mit dem Wert pad_value erweitert wurde.
Ist der Parameter pad_size positiv, wird das Array rechts erweitert, ist er negativ, dann erfolgt die Erweiterung links.
Ist der absolute Wert von pad_size kleiner oder gleich der Länge von input, erfolgt keine Erweiterung.
Beispiel 1. array_pad()
$input = array (12, 10, 9); $result = array_pad ($input, 5, 0); / / Ergebnis ist array (12, 10, 9, 0, 0) $result = array_pad ($input, -7, -1); / / Ergebnis ist array (-1, -1, -1, -1, 12, 10, 9) $result = array_pad ($input, 2, "noop"); / / nicht erweitert
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_pop() liefert den letzten Wert von array, und verkürzt array um ein Element.
Ist array leer (oder kein Array), wird NULL zurückgegeben.
Beispiel 1. array_pop()
$stack = array ("Orange", "Banane", "Apfel", "Himbeere"); $fruit = array_pop ($stack);
Danach hat $stack nur 3 Elemente:
Array ([0] = Orange [1] = Banane [2] = Apfel)
Warnung
Diese Funktion kann das Boolsche FALSE zurückliefern, kann aber auch einen nicht-Boolschen Wert zurückgeben, der von einem einfachen if-Statement als FALSE ausgewertet wird, wie zum Beispiel 0 oder "".
Weitere Informationen entnehmen Sie bitte dem Abschnitt über Boolsche Typen.
Benutzen Sie deshalb bitte den === Operator um den Rückgabewert dieser Funktion zu überprüfen.
Siehe auch array_push(), array_shift() und array_unshift().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_push() behandelt array als Stapel (Stack), und fügt die übergebenen Variablen an das Ende von array.
Die Länge von array wird dabei um die Anzahl der angefügten Variablen erhöht.
Dies hat den selben Effekt wie:
Liefert die neue Anzahl Elemente des Arrays.
Beispiel 1. array_push()
$stack = array ("Orange", "Banane"); array_push ($stack, "Apfel", "Himbeere");
Danach enthält $stack die folgenden Elemente:
Array ([0] = Orange [1] = Banane [2] = Apfel [3] = Himbeere)
Siehe auch array_pop(), array_shift() und array_unshift().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_rand() ist ziemlich nützlich, wenn Sie einen oder mehrere zufällige Einträge eines Arrays auswählen möchten.
Ist num_req nicht angegeben, wird ein Defaultwert von 1 angenommen.
Wenn Sie nur einen Eintrag auswählen, liefert array_rand() den Schlüssel eines zufälligen Eintrages.
Andernfalls wird ein Array mit den Schlüsseln der zufälligen Einträge zurückgegeben.
Dies hat den Zweck, dass Sie zufällige Schlüssel und auch Werte aus dem Array auswählen können.
Vergessen Sie bitte nicht, mittels srand() den Startwert für den Zufallsgenerator festzulegen.
Beispiel 1. array_rand()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_reduce() wendet die Funktion function iterativ bei den Elementen des Arrays input so an, dass das Array auf einen einzigen Wert reduziert wird.
Ist der optionale Parameter intial angegeben, wird er am Beginn des Prozesses benutzt oder als Resultat verwendet, sollte das Array leer sein.
Beispiel 1. array_reduce()
Hier enthält $b 15, $c 1200 (= 1*2*3*4*5*10), und $d enthält 1.
Siehe auch array_filter() und array_map().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ist der optionale Parameter preserve_keys TRUE, bleibt die Reihenfolge der Schlüssel aufrecht.
Beispiel 1. array_reverse()
$input = array ("php", 4.0, array ("grün", "rot")); $result = array_reverse ($input); $result_keyed = array_reverse ($input, TRUE);
Danach haben $result und $result_keyed die gleichen Elemente, aber Beachten Sie den Unterschied zwischen den Schlüsseln.
Die Ausgabe von $result und $result_keyed wird wie folgt aussehen:
Array ([0] = Array ([0] = grün [1] = rot) [1] = 4 [2] = php) Array ([2] = Array ([0] = grün [1] = rot) [1] = 4 [0] = php)
Anmerkung:
Der zweite Parameter wurde in PHP 4.0.3 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion durchsucht haystack nach needle und gibt bei Erfolg den Schlüssel zurück, andernfalls FALSE.
Anmerkung:
Ist der optionale dritte Parameter strict auf TRUE gesetzt, prüft array_search() auch die Typen von needle in haystack.
Warnung
Diese Funktion kann das Boolsche FALSE zurückliefern, kann aber auch einen nicht-Boolschen Wert zurückgeben, der von einem einfachen if-Statement als FALSE ausgewertet wird, wie zum Beispiel 0 oder "".
Weitere Informationen entnehmen Sie bitte dem Abschnitt über Boolsche Typen.
Benutzen Sie deshalb bitte den === Operator um den Rückgabewert dieser Funktion zu überprüfen.
Siehe auch array_keys() und in_array().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_shift() liefert den ersten Wert von array, verschiebt die anderen Werte hinunter, und verkürzt array um ein Element.
Strings als Schlüssel bleiben unverändert.
Ist array leer (oder kein Array), wird NULL zurückgegeben.
Beispiel 1. array_shift()
$stack = array ("Orange", "Banane", "Apfel", "Himbeere"); $fruit = array_shift ($stack);
Danach blieben in $stack 3 Elemente übrig:
Array ([0] = Banane [1] = Apfel [2] = Himbeere)
Siehe auch array_unshift(), array_push() und array_pop().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_slice() liefert die mittels offset und length spezifizierte Sequenz von Elementen des Arrays array
Ist offset positiv, beginnt die Sequenz bei diesem Offset in dem array.
Ist offset negativ, beginnt die Sequenz offset Elemente vor dem Ende von array.
Ist length positiv, enthält die Sequenz genauso viele Elemente.
Ist length negativ, enthält die Sequenz alle Elemente des Arrays von offset bis length Ist length negativ, enthält die Sequenz alle Elemente des Arrays von offset bis length Elemente vor dem Ende des Arrays.
Ist length nicht angegeben, enthält die Sequenz alle Elemente von offset bis zum Ende von array.
Beachten Sie, dass array_slice() Schlüssel ignoriert, und Offsets sowie Längen anhand der aktuellen Positionen berechnet.
Beispiel 1. array_slice()
$input = array ("a", "b", "c", "d", "e"); $output = array_slice ($input, 2); / / liefert "c", "d", und "e "$output = array_slice ($input, 2, -1); / / liefert "c", "d" $output = array_slice ($input, -2, 1); / / liefert "d "$output = array_slice ($input, 0, 3); / / liefert "a", "b", und "c"
Siehe auch array_splice().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_splice() entfernt die durch offset und length angegebenen Elemente des Arrays input, und ersetzt diese durch die Elemente des Arrays replacement, wenn angegeben und gibt ein Array mit den entfernten Elemente zurück.
Ist offset negativ, beginnt der zu entfernende Bereich offset Elemente vor dem Ende des Arrays input.
Ist length nicht angegeben, wird alles von offset bis zum Ende des Arrays entfernt.
Ist length positiv, wird die angegebene Anzahl Elemente entfernt.
Tipp:
Um alles von offset bis zum Ende des Arrays zu entfernen wenn replacement ebenfalls angegeben ist, verwenden Sie count( $input) als length.
Ist das Array replacement angegeben, werden die entfernten Elemente durch die Elemente dieses Arrays ersetzt.
Tipp:
Soll die Ersetzung durch nur ein Element erfolgen ist es nicht nötig ein Array zu anzugeben es sei denn, dieses Element ist selbst ein Array.
Hier einige Entsprechungen:
Gibt das Array mit den entfernten Elementen zurück.
Beispiel 1. array_splice()
$input = array ("rot", "grün", "blau", "gelb"); array_splice ($input, 2); / / $input ist nun array ("rot", "grün") $input = array ("rot", "grün", "blau", "gelb"); array_splice ($input, 1, -1); / / $input ist nun array ("rot", "gelb") $input = array ("rot", "grün", "blau", "gelb"); array_splice ($input, 1, count($input), "orange"); / / $input ist nun array ("rot", "orange") $input = array ("rot", "grün", "blau", "gelb"); array_splice ($input, -1, 1, array("schwarz", "braun")); / / $input ist nun array ("rot", "grün", "blau", "schwarz", "braun")
Siehe auch array_slice().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_sum() liefert die Summe der Werte eines Arrays als Integer oder Float.
Beispiel 1. array_sum()
Obiges Programm wird folgendes ausgeben:
Anmerkung:
PHP Versionen vor 4.0.6 haben das übergebene Array selbst modifiziert, und Strings in Zahlen konvertiert (welche abhängig von deren Wert meist zu null konvertiert wurden).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_unique() nimmt array und gibt ein neues Array zurück, aus dem alle doppelten Einträge entfernt wurden.
Erst behandelt array_unique() die Werte als Strings und sortiert sie, danach wird der erste gefundene Schlüssel behalten, und alle folgenden Schlüssel ignoriert.
Das heißt nicht, dass der Schlüssel des ersten zugehörigen Wertes aus dem unsortierten array behalten wird.
Anmerkung:
Zwei Elemente werden nur dann als gleich angesehen, wenn (string) $elem1 === (string) $elem2.
Wenn die String-Repräsentation die gleiche ist.
Das erste Element wird verwendet.
Warnung
Dies war in PHP 4.0.4 fehlerhaft!
Beispiel 1. array_unique() example
$input = array ("a "= "grün", "rot", "b" = "grün", "blau", "rot"); $result = array_unique ($input); print_r($result);
Dieses Programm wird folgendes ausgeben:
Array ([b] = grün [1] = blau [2] = rot)
Beispiel 2. array_unique() und Typen
Dieses Programm wird folgendes ausgeben (PHP 4.0.6):
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_unshift() fügt die übergebenen Elemente am Anfang von array ein.
Beachten Sie, dass die Liste von Elementen als Ganzes eingefügt wird, sodass die eingefügten Elemente die selbe Reihenfolge haben.
Die numerischen Schlüssel werden so modifiziert, dass bei null zu zählen begonnen wird, Strings als Schlüssel bleiben unverändert.
Diese Funktion gibt die neue Anzahl der in array enthaltenen Elemente zurück.
Beispiel 1. array_unshift()
$queue = array ("Orange", "Banane"); array_unshift ($queue, "Apfel", "Himbeere");
Als Ergebnis enthält $queue die folgenden Elemente:
Array ([0] = Apfel [1] = Himbeere [2] = Orange [3] = Banane)
Siehe auch array_shift(), array_push() und array_pop().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
array_values() liefert alle Werte des Arrays input.
Beispiel 1. array_values()
$array = array ("größe "= "XL", "farbe" = "gold"); print_r(array_values ($array));
Dies wird folgendes ausgeben:
Anmerkung:
Diese Funktion wurde in PHP 4 hinzugefügt, nachstehend findet sich eine Implementation für Benutzer von PHP 3.
Beispiel 2.
Implementation von array_values() für PHP 3 Benutzer
Siehe auch array_keys().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wendet die mittels function angegebene Benutzerfunktion für jedes Element von array an. function benötigt zwei Parameter.
Der Wert von array wird als erster übergeben, und der Schlüssel / Index als zweites.
Ist der optionale Parameter userdata angegeben, so wird er als dritter Parameter an die Funktion function übergeben.
Sollte function mehr als die ihr übergebenen Parameter benötigen, wird bei jedem Aufruf von function seitens array_walk() eine Fehlermeldung der Stufe E_WARNING generiert.
Diese Warnmeldungen können unterdrückt werden, indem man dem Funktionsaufruf von array_walk() den Operator @ voranstellt, oder error_reporting() verwendet.
Anmerkung:
Dann werden alle Änderungen an diesen Elementen direkt in dem originalen Array durchgeführt.
Die Modifizierung des Arrays aus function heraus könnte ein unvorhersehbares Verhalten hervorrufen.
Anmerkung:
Die Übergabe des Schlüssels und von userdata an function wurde mit PHP 4.0.0 eingeführt.
array_walk() ist nicht von dem internen Arrayzeiger von array betroffen. array_walk() geht ungeachtet der Zeigerposition das gesamte Array durch.
Um den Zeiger zurückzusetzen, verwenden Sie reset().
In PHP 3 setzt array_walk() den Zeiger zurück.
Von der Benutzerfunktion aus darf das Array selbst nicht geändert werden, wie zum Beispiel durch Hinzufügen oder Löschen eines Elementes, etc.
Wird das auf array_walk() angewendete Array geändert, so ist das Verhalten dieser Funktion undefiniert und unvorhersagbar.
Beispiel 1. array_walk()
Das obige Programm wird folgendes ausgeben:
Zitrone a.
Apfel... und nachher: d.
Siehe auch list(), foreach, each() und call_user_func_array().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sortiert ein Array so, dass der Zusammenhang zwischen den Indizes und den entsprechenden Arrayelementen erhalten bleibt.
Dies wird hauptsächlich bei assoziativen Arrays verwendet, bei denen die aktuelle Reihenfolge der Elemente bedeutend ist.
Beispiel 1. arsort()
$fruits = array ("d"= "Zitrone", "a"= "Orange", "b"= "Banane", "c"= "Apfel"); arsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
Dieses Beispiel würde folgendes ausgeben:
d = Zitrone a = Orange b = Banane c = Apfel
Die Früchte wurden in umgekehrter alphabetischer Reihenfolge sortiert, und die Zuordnung zwischen Index und Element blieb beibehalten.
Sie können das Verhalten der Sortierung mittels dem optionalen Parameter sort_flags beeinflussen, für Details siehe sort().
Siehe auch asort(), rsort(), ksort() und sort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
OS / 390, BS2000).
Die Funktion setzt die ASCII-kodierte Zeichenkette ascii_str in ihre äquivalente EBCDIC-Darstellung um (binärfest), und liefert das konvertierte Ergebnis zurück.
Siehe auch die Umkehrfunktion ebcdic2ascii().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Funktion ist auf Windows-Plattformen nicht implementiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Arcussinus zum Wert arg im Bogenmaß.
Siehe auch acos(), atan() und sin().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sortiert ein Array so, dass der Zusammenhang zwischen den Indizes und den entsprechenden Arrayelementen erhalten bleibt.
Dies wird hauptsächlich bei assoziativen Arrays verwendet, bei denen die aktuelle Reihenfolge der Elemente bedeutend ist.
Beispiel 1. asort()
$fruits = array ("d"= "Zitrone", "a"= "Orange", "b"= "Banane", "c"= "Apfel"); asort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
Dieses Beispiel würde folgendes ausgeben:
c = Apfel b = Banane a = Orange d = Zitrone
Die Früchte wurden alphabetisch sortiert, und die Zuordnung zwischen Index und Element blieb beibehalten
Sie können das Verhalten der Sortierung mittels dem optionalen Parameter sort_flags beeinflussen, für Details siehe sort().
Siehe auch arsort(), rsort(), ksort() und sort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
aspell_check() überprüft die Rechtschreibung eines Wortes und liefert TRUE, wenn das Wort korrekt ist, ansonsten FALSE.
Beispiel 1. aspell_check
$aspell_link = aspell_new( "english"); if (aspell_check($aspell_link, "testt")) {echo "Gültige Schreibweise";} else {echo "Bedaure, falsche Schreibweise";}
Zurück
Zum Anfang
Nach vorne
aspell_check-raw
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE, wenn das Wort korrekt ist und sonst FALSE.
Beispiel 1. aspell_check_raw()
$aspell_link = aspell_new( "english"); if (aspell_check_raw($aspell_link, "test")) {echo "Gültige Schreibweise";} else {echo "Bedaure, falsche Schreibweise";}
Zurück
Zum Anfang
Nach vorne
Aspell Funktionen [veraltet]
Nach oben
PHP Handbuch
Zurück
Nach vorne
aspell_new() öffnet ein neues Wörterbuch und liefert eine Wörterbuchkennung zurück, die von anderen aspell-Funktionen gebraucht wird.
Liefert FALSE bei einem Fehler.
Beispiel 1. aspell_new
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
aspell_suggest() liefert ein Array mit möglichen Schreibweisen eines übergebenen Wortes.
Beispiel 1. aspell_suggest()
$aspell_link = aspell_new( "english"); if (!aspell_check($aspell_link, "test")) {$suggestions = aspell_suggest($aspell_link, "test"); foreach ($suggestions as $suggestion) {echo "Mögliche Schreibweisen: $suggestion br \n";}}
Zurück
Zum Anfang
Nach vorne
Nach oben
Mathematische Funktionen mit beliebiger Genauigkeit
PHP Handbuch
Zurück
Nach vorne
assert() überprüft den übergebenen Parameter assertion und führt ein über die Funktion assert_options() definiertes Ereignis aus, falls die in assertion spezifizierte Bedingung FALSE ist.
Wird der Parameter assertion als String übergeben, so wird der String als PHP-Code interpretiert.
Der Vorteil der Übergabe des Parameters assertion als Zeichenkette liegt darin, dass die ausgegebene Meldung die über assertion übergebene Zeichenkette enthält.
assert() sollte nur zum Debuggen des Codes und nicht in Produktionsumgebungen verwendet werden werden, beispielsweise zur Überprüfung von Eingaben.
Die Optionen für die assert() können über die Funktion assert_options() oder in den Einstellungen der .ini-Datei gesetzt werden.
Die Funktion assert_options() mit der ASSERT_CALLBACK Direktive ermöglicht eine Funktion anzugeben, die bei fehlender Überprüfung aufgerufen wird.
Callback-Funktionen in Zusammenhang mit assert() sind nützlich, um beispielsweise automatisierte Tests durchzuführen, da die Callback-Funktion pber die Information verfügt, von welcher Stelle sie aufgerufen wurde.
Die Callback-Funktion wird mit drei Parametern aufgerufen.
Der erste Parameter enthält den Namen des Scripts, in dem die Überprüfung statt fand, der zweite Parameter die Zeilennummer, und der dritte Paramter enthält die über assertion angegebene Bedingung.
Beispiel 1.
Überprüfung mit benutzerdefinierter Funktion
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
assert_options() ermöglicht es, die verschiedenene assert() Optionen zu setzen, oder abzufragen, welche Optionen gesetzt sind.
Tabelle 1. assert Optionen
Option
Parameter in .ini-Datei
Standardwert
Beschreibung
assert() Überprüfung aktivieren
gibt eine PHP Warnung für jede fehlgeschlagene Überprüfung an
Beendet das Programm bei fehlgeschlagener Überprüfung
Unterdrückt die Fehlerausgabe während der Überprüfung
ermöglicht die Angabe einer benuterdefinierten Funktion
assert_options() gibt die Einstellung der gesetzten Optionen zurück oder liefert den Wert FALSE bei Auftreten eines Fehlers zurück.
Zurück
Zum Anfang
Nach vorne
PHP Optionen und Informationen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion berechnet den Arcustangens aus den Parametern x und y im Bereich (-¶; ¶].
Dieser entspricht weitgehend dem Arcustangens aus x / y, allerdings kann hier das Vorzeichen beider Parameter ausgewertet und so der Quadrant des Ergebnisses bestimmt werden.
Siehe auch atan(), acos(), asin(), und tan().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Funktion ist auf Windows-Plattformen nicht implementiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Arcustangens zum Wert arg im Bogenmaß im Bereich (-¶ / 2; ¶ / 2].
See also asin(), acos(), atan2() und tan().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
base64_decode() dekodiert encoded_data und bringt die Originaldaten wieder.
Die ausgegebenen Dateien können im Binärformat sein.
Siehe auch: base64_encode(), RFC-2045 Sektion 6.8.
Zurück
Zum Anfang
Nach vorne
URL Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
base64_encode() kodiert data mit base64.
Emails.
Base64-kodierte Daten benötigen ungefähr 33% mehr Speicher als die Originaldaten.
Siehe auch: base64_decode(), chunk_split(), RFC-2045 Sektion 6.8.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert einen String, der number zur Basis tobase enthält.
Der Parameter frombase gibt die Basis des Eingabewertes number an. tobase und tobase können Werte von 2 bis einschließlich 36 enthalten.
Für die Darstellung von Werten mit einer Basis größer als 10 werden neben den Ziffern '0' bis '9 'auch die Buchstaben von 'a' bis 'z 'eingesetzt, wobei 'a' einem Wert von 10 entspricht, 'b 'steht dementsprechend für den Wert 11, bis hin zum 'z', das den Wert 36 darstellt.
Beispiel 1. base_convert()
$binary = base_convert( $hexadecimal, 16, 2);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion extrahiert aus einer vollständigen Pfadangabe den Namen der Datei und gibt diesen zurück.
Endet der Dateiname mit suffix, wird dieses Ende ebenfalls abgeschnitten.
Unter Windows wird sowohl der Slash (/) als auch der Backslash (\) als Trennzeichen bei Pfadangaben benutzt.
Unter anderen Betriebssystemen hingegen nur der Slash (/).
Beispiel 1. basename()
$path = "/ home / httpd / html / index.php"; $file = basename($path); / / $file enthält den Wert "index.php" $file = basename ($path ,".php"); / / $file enthält den Wert "index "
Anmerkung:
Der Parameter suffix wurde in PHP 4.1.0. eingeführt.
Siehe auch dirname().
Zurück
Zum Anfang
Nach vorne
Funktionen des Dateisystems
Nach oben
PHP Handbuch
Zurück
Nach vorne
Addiert den linken Operanden zu dem rechten Operanden und liefert die Summe als Zeichenkette.
Der optionale Parameter Genauigkeit kann angegeben werden, um die Anzahl der Nachkommastellen im Ergebnis zu bestimmen.
Siehe auch bcsub().
Zurück
Zum Anfang
Nach vorne
Mathematische Funktionen mit beliebiger Genauigkeit
Nach oben
PHP Handbuch
Zurück
Nach vorne
Vergleicht den linken Operanden mit dem rechten Operanden und liefert das Ergebnis als Integer-Wert.
Der optionale Parameter Genauigkeit bestimmt die Anzahl der Nachkommastellen, die für den Vergleich ausgewertet werden.
Der Rückgabewert ist 0, wenn die beiden Operanden gleich sind.
Wenn der linke Operand größer ist als der rechte Operand, wird +1 zurückgeliefert; wenn der linke Operand kleiner ist als der rechte Operand ¸ wird -1 zurückgeliefert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dividiert den linken Operanden durch den rechten Operanden.
Der optionale Parameter Genauigkeit legt die Anzahl der Nachkommastellen im Ergebnis fest.
Siehe auch bcmul().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den linken Operanden modulo Modulus.
Siehe auch bcdiv().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Multipliziert den linken Operanden mit dem rechten Operanden.
Der optionale Parameter Genauigkeit legt die Anzahl der Nachkommastellen im Ergebnis fest.
Siehe auch bcdiv().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Potenziert x mit y.
Der optionale Parameter Genauigkeit legt die Anzahl der Nachkommastellen im Ergebnis fest.
Siehe auch bcpowmod() und bcsqrt().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Benutzen Sie diese schnelle Exponentialmethode um x mit y unter Berücksichtigung des Modulo modulus zu potenzieren.
Der optionale Parameter scale legt die Anzahl der Nachkommastellen im Ergebnis fest.
Die folgenden zwei Anweisungen sind funktional identisch.
Die Variante mit bcpowmod() ist schneller und akzeptiert größere Parameter
?php $a = bcpowmod( $x,$y,$mod); $b = bcmod(bcpow($x,$y),$mod); / * $a und $b sind genau gleich. * /?
Anmerkung:
Die Verwendung von nicht-natürlichen Zahlen kann zu unerwarteten Ergebnissen führen, weil diese Funktion die Modulodivision verwendet.
Eine natürliche Zahl ist jede ganzzahlige positive Zahl die ungleich Null ist.
Siehe auch bcpow() und bcmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen legt die Standard-Genauigkeit aller in der Folge aufgerufenden BC math-Funktionen fest, die nicht explizit die Genauigkeit durch den optionalen Parameter setzen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Quadratwurzel von Operand.
Der optionale Parameter Genauigkeit legt die Anzahl der Nachkommastellen im Ergebnis fest.
Siehe auch bcpow().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Subtrahiert den rechten Operanden vom linken Operanden und liefert das Ergebnis als Zeichenkette.
Der optionale Parameter Genauigkeit legt die Anzahl der Nachkommastellen im Ergebnis fest.
Siehe auch bcadd().
Zurück
Zum Anfang
Nach vorne
Nach oben
Bzip2 Komprimierungsfunktionen
PHP Handbuch
Zurück
Nach vorne
Es wird ein ASCII-String mit der hexadezimalen Wiedergabe des Parameters str zurück gegeben.
Die Umwandlung geschieht byteweise mit dem höchsten Anteil (4 Bit, "high-nibble") zuerst.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die dezimale Entsprechung der in binary_string übergebenen binären Zahl.
Der größte konvertierbare Wert ist ein String aus 31 Einsen, das entspricht 2147483647 dezimal (2 hoch 32 minus 1).
Siehe auch decbin(), octdec(), und hexdec().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
GNU Gettext
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion bindtextdomain() setzt den Pfad für einen Textbereich.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schließt die bzip2-Datei, die von dem Zeiger bz referenziert wird.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Der Dateizeiger muss gültig sein, und auf eine Datei zeigen, die erfolgreich mittels der bzopen() -Funktion geöffnet wurde.
Siehe auch bzopen().
Zurück
Zum Anfang
Nach vorne
Bzip2 Komprimierungsfunktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
bzcompress() komprimiert den source -String und gibt ihn als bzip2-komprimierte Daten zurück.
9 ergibt dabei den besten Komprimierungsfaktor, benötigt jedoch auch die meisten Systemressourcen.
Der optionale Parameter workfactor bestimmt, wie die Funktion sich im schlimmsten Fall, stark wiederholende Eingabedaten zu verhalten hat.
Der Wer kann zwischen 0 und 250 liegen, 0 ist ein spezieller Fall, 30 ist der Standardwert.
Unabhängig vom Parameter workfactor wird die generierte Ausgabe immer die selbe sein.
Beispiel 1. bzcompress() Beispiel
lt; ?php $str = "sample data"; $bzstr = bzcompress($str, 9); print ($bzstr);?
Siehe auch bzdecompress().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
bzdecompress() dekomprimiert den source -Parameter, der bzip2-komprimierte Daten enthält und gibt die dekomprimierten Daten zurück.
Wenn der optionale Parameter small TRUE ist, wird ein alternative Dekomprimierungsalgorithmus verwendet, der weniger Speicher benötigt, jedoch nur halb so schnell läuft.
Weitere Informationen sind in der bzip2 Dokumentation zu finden.
Beispiel 1. bzdecompress()
lt; ?php $start_str = "This is not an honest face ?"; $bzstr = bzcompress($start_str); print ("Compressed String: "); print ($bzstr); print ("\n lt;br gt;n"); $str = bzdecompress($bzstr); print ("Decompressed String: "); print ($str); print ("\n lt;br gt;n");?
Siehe auch bzcompress().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Fehlercode eines beliebigen Fehlercodes, der von dem Dateizeiger bz zurückgegeben wird.
Siehe auch bzerror() und bzerrstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Fehlercode und die Fehlerbeschreibung eines beliebigen von dem Dateizeiger bz gelieferten bzip2-Fehlers in einem assoziativen Array zurück.
Beispiel 1. bzerror() Beispiel
lt; ?php $error = bzerror($bz); echo $error["errno"]; echo $error["errstr"];?
Siehe auch bzerrno() und bzerrstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt eine Fehlermeldung eines bzip2-Fehler zurück, anhand des Dateizeigers bz identifiziert wird.
Siehe auch bzerrno() und bzerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Erzwingt ein Schreiben alle gepufferten bzip2-Daten für den Dateizeiger bz.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch bzread() und bzwrite().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der mode -Parameter ist mit der fopen() Vergleich ('r 'für lesenden Zugriff, 'w' für schreibenden Zugriff usw.).
Wenn das öffnen Fehlschlägt, gibt die Funktion FALSE zurück, andernfalls wird ein Zeiger auf die geöffnete Datei zurückgegeben.
Beispiel 1. bzopen() Beispiel
lt; ?php $bz = bzopen(" / tmp / foo.bz2", "r"); $decompressed_file = bzread($bz, filesize(" / tmp / foo.bz2")); bzclose($bz); print ("The contents of / tmp / foo.bz2 are: "); print ("\n lt;br gt;n"); print ($decompressed_file);?
Siehe auch bzclose().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
bzread() liest bis zu length Bytes aus dem bzip2-Dateizeiger bz.
Hört mit dem Lesen auf, wenn length (dekomprimierte) Bytes gelesen wurden oder das Ende der Datei (EOF) erreicht ist, welcher Fall auch immer zuerst auftritt.
Wenn der optionale Parameter length nicht angegeben wird, wird die Funktion bzread() 1024 unkomprimierte Bytes lesen.
Beispiel 1. bzread() Beispiel
Siehe auch bzwrite() und bzopen().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
bzwrite() schreibt den Inhalt des Strings data in den bzip2-Dateistream, auf den bz zeigt.
Wenn der optionale Parameter length übergeben wird, wird das Schreiben abgebrochen, nachdem length Bytes unkomprimierte Bytes geschrieben, oder das Ende des Strings erreicht wurde.
Beispiel 1. bzwrite() Beispiel
lt; ?php $str = "uncompressed data"; $bz = bzopen(" / tmp / foo.bz2", "w"); bzwrite($bz, $str, strlen($str)); bzclose($bz);?
Siehe auch bzread() und bzopen().
Zurück
Zum Anfang
Nach vorne
Nach oben
Kalender-Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die Anzahl der Tage in einem Monat eines Jahres für den angegebenen Kalender zurück.
Siehe auch jdtounix().
Zurück
Zum Anfang
Nach vorne
Kalender-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ruft die Funktion mit Namen function_name mit den Parametern parameters auf.
function friseur ($type) {print "Sie möchten einen $type-Kopf, kein Problem br ";} call_user_func ('friseur', "Bubi"); call_user_func ('friseur', "Pilz");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Klassen - und Objekt-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ruft die durch method_name angegebene Methode des benutzerdefinierten Objektes obj auf.
Ein Anwendungsbeispiel sehen Sie unten, wo wir eine Klasse definieren, ein Objekt instantiieren und call_user_method() benutzen, um seine Methode zeige_info indirekt aufzurufen.
?php class Land {var $NAME; var $TLD; function Land($name, $tld) {$this - NAME = $name; $this - TLD = $tld;} function zeige_info($prestr="") {echo $prestr ."Land: ".$this - NAME ."\n"; echo $prestr ."Top-Level-Domain: ".$this - TLD ."\n";}} $cntry = new Land("Peru" ,"pe"); echo "* Direkter Aufruf der Methode\n"; $cntry - zeige_info(); echo "\n* Indirekter Aufruf derselben Methode\n"; call_user_method ("zeige_info", $cntry, "\t");?
Siehe auch call_user_func().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
CCVS API Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
COM Support Funktionen für Windows
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert diejenige ganze Zahl, die größer oder gleich dem Parameter number ist.
Siehe auch floor() und round().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wechsel des aktuellen PHP-Verzeichnisses in das durch directory angegebene Verzeichnis.
Gibt FALSE zurück, wenn der Wechsel nicht möglich war, sonst TRUE.
Zurück
Zum Anfang
Nach vorne
Verzeichnis-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ist das angegebene Datum gültig, wird TRUE zurückgegeben, ansonsten FALSE.
Prüft die Gültigkeit der angebenen Datumswerte.
Ein Datum wird als gültig angesehen, wenn
das Jahr zwischen 1 und 32767 (inklusive) ist,
der Monat zwischen 1 und 12 (inklusive) ist und
der Tag innerhalb der erlaubten Werte des angegebenen Monat s ist.
Schalt Jahre werden berücksichtigt.
Siehe auch mktime() und strtotime().
Zurück
Zum Anfang
Nach vorne
Datums - und Zeit-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Durchsucht den DNS (Domain-Name-Service) auf Daten des Typs type auf Übereinstimmung mit host.
Gibt TRUE / wahr zurück, wenn ein Datensatz gefunden wurde.
Ansonsten - oder wenn ein Fehler vorliegt - wird FALSE / falsch zurück gegeben.
A, MX, NS, SOA, PTR, CNAME, or ANY.
Die Vorgabe ist MX.
Der Parameter host kann eine durch Punkte getrennte IP-Adresse (z.B.
192.168.0.2) oder ein Host-Name (z.B. www.example.com) sein.
Siehe auch getmxrr(), gethostbyaddr(), gethostbyname(), gethostbynamel() und das named(8) Manual.
Zurück
Zum Anfang
Nach vorne
Netzwerk Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Weist der Datei filename die Benutzergruppe group zu (spezifiziert durch Name oder Nummer).
Andere Benutzer können die Gruppenzugehörigkeit einer Datei in jede Gruppe ändern, derer sie angehören.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch chown() und chmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ändert die Zugriffsrechte der Datei spezifiziert in filename in die Zugriffsrechte um, die in mode spezifiziert sind.
Bedenken Sie, dass mode nicht automatisch für einen Oktalwert gehalten wird.
Um sicher zu gehen, dass die Operation wie erwartet verläuft, sollten Sie mode mit dem Prefix NULL (0) versehen:
chmod ("/ somedir / somefile", 755); / / dezimal; möglicherweise falsch chmod (" / somedir / somefile", "u+rwx,go+rx"); / / String; falsch chmod (" / somedir / somefile", 0755); / / oktal; richtiger Wert von mode
Der mode Parameter besteht aus drei oktalen Nummernteilen, welche die Zugriffsbeschränkungen für den Eigentümer, die Benutzergruppe des Eigentümers, und allen anderen in dieser Reihenfolge spezifiziert.
Eine Komponente kann mittels Addition derbenötigten Rechte für die gewünschten Benutzer berechnet werden.
Die Zahl 1 bedeutet das Recht zum Ausführen, die Zahl 2 bedeutet das Recht zum Schreiben der Datei und mit der Zahl 4 machen Sie die Datei lesbar.
Addieren Sie diese Zahlen, um die benötigten Rechte zu spezifizieren.
Weitere Informationen zu den Modi finden Sie auf Unix Systemen mit 'man 1 chmod' and 'man 2 chmod '.
/ / Lesen und Schreiben für den Eigentümer, nichts für alle anderen chmod ("/ somedir / somefile", 0600); / / Lesen und Schreiben für den Eigentümer, Lesen für alle anderen chmod (" / somedir / somefile", 0644); / / Alles für den Eigentümer, Lesen und Ausführen für andere chmod (" / somedir / somefile", 0755); / / Alles für den Eigentümer, Lesen und Ausführen für die / / Benutzergruppe des Eigentümers chmod (" / somedir / somefile", 0750);
Anmerkung:
Der aktuelle Benutzer ist der, unter dem PHP läuft.
Das ist unter Umständen nicht der Benutzer, den Sie für normale Shell - oder FTP-Zugriffe benutzen.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch chown() und chgrp().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. chop() -Beispiel:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ändert den Eigentümer der Datei filename in Benutzer user.
Nur der Superuser kann den Eigentümer einer Datei ändern.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch chmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen 1-Zeichen-String zurück, der dem mit ascii angegebenem Zeichen entspricht.
Beispiel 1. chr() Beispiel:
$str .= chr (27); / * fügt an das Ende von $str ein Escape-Zeichen an * / / * Oft wird diese Funktionalität gebraucht * / $str = sprintf ("Dieser String endet mit einem Escape: %c", 27);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE..
Anmerkung:
Anmerkung:
Diese Funktion ist auf Windows-Plattformen nicht implementiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dies ist z.B. hilfreich bei der Umwandlung von base64_encode -Ausgaben, die der RFC 2045 entsprechen müssen.
Diese Funktion fügt nach per chunklen angegebene Zeichen (Vorgabe: alle 76 Zeichen) den mittels end Diese Funktion fügt nach per chunklen angegebene Zeichen (Vorgabe: alle 76 Zeichen) den mittels end angegebenen String (Vorgabe ist hierfür "\r\n") ein.
Die Original-Zeichenkette bleibt unverändert.
Beispiel 1. chunk_split() Beispiel:
# Formatiere den String $daten in die RFC 2045 Schreibweise $neuer_string = chunk_split (base64_encode($daten));
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ergibt TRUE, falls eine Klasse mit dem Namen class_name definiert ist, ansonsten FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn Sie stat, lstat oder eine andere in der nachstehenden Liste der betroffenen Funktionen verwenden, speichert (cached) PHP die von diesen Funktionen zurückgeggebenen Informationen temporär, um eine bessere Performance zu bieten.
In manchen Fällen könnten Sie jedoch wollen, dass diese zwischengespeicherten Informationen gelöscht werden.
Wird z.B. die selbe Datei innerhalb eines Skriptes mehrmals geprüft und ist es wahrscheinlich, dass diese Datei während der Ausführung des Skriptes gelöscht oder verändert wird, könnten Sie sich dafür entscheiden, den Status Cache zu löschen.
In solchen Fällen empfiehlt es sich, die von PHP zwischengespeicherten Informationen über eine Datei mittels clearstatcache() zu löschen.
Anmerkung:
Diese Funktion speichert Informationen über bestimmte Dateinamen, weshalb Sie clearstatcache() nur aufrufen müssen, wenn Sie mehrere Operationen an dem selben Dateinamen durchführen, und die Informationen über genau diese Datei nicht gespeichert werden sollen.
Folgende Funktionen betreffen den Dateistatus: stat(), lstat(), file_exists(), is_writable(), is_readable(), is_executable(), is_file(), is_dir(), is_link(), filectime(), fileatime(), filemtime(), fileinode(), filegroup(), fileowner(), filesize(), filetype() und fileperms().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beendet den mit dir_handle angegebenen Verzeichnis-Stream (Ein - / Ausgabe-Kanal für Verzeichnis-Objekte).
Dieser muss vorher durch opendir() geöffnet worden sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
closelog() schließt den Descriptor, der benötigt wird um in den System-Logger zu schreiben.
Der Gebrauch von closelog() ist optional.
Siehe auch define_syslog_variables(), syslog() und openlog().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Erhöht den Referenzzähler der Komponente.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Wert der Eigenschaft property der mittels com_object referenzierten COM Komponente.
Gibt im Fehlerfall FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
com_invoke() ruft eine Methode des mittels com_object com_invoke() ruft eine Methode des mittels com_object referenzierten COM Komponente auf.
Gibt bei Erfolg den Rückgabewert von function_name, oder im Fehlerfall FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
com_load() erstellt eine neue COM Komponente, und gibt eine Referenz darauf zurück.
Im Fehlerfall wird FALSE Im Fehlerfall wird FALSE zurückgegeben.
Mögliche Werte für codepage sind CP_ACP, CP_MACCP, CP_OEMCP, CP_SYMBOL, CP_THREAD_ACP, CP_UTF7, und CP_UTF8.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
compact() übernimmt eine variable Anzahl von Parametern.
Jeder Parameter kann entweder ein String mit einem Variablennamen, oder ein Array mit Variablennamen sein.
Dieses Array kann auch andere Arrays mit Variablennamen enthalten; compact() behandelt sie rekursiv.
Für alle diese sucht compact() Für alle diese sucht compact() nach einer Variablen in der aktuellen Symboltabelle, und fügt diese dem zurückzugebenden Array hinzu, wobei der Variablenname als Schlüssel, und der Inhalt der Variablen als Wert gespeichert wird.
Kurz, diese Funktion tut das Gegenteil von extract().
Sie gibt ein Array mit allen Variablen zurück.
Strings, welche nicht gesetzt sind, werden einfach ignoriert.
Beispiel 1. compact()
Danach wird $result:
Siehe auch extract().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ein Alias von com_get().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ein Alias für com_set().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ein Alias für com_set().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Reduziert den Referenzzähler der Komponente.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den Wert der Eigenschaft property der COM Komponente com_object.
Gibt bei Erfolg den neu gesetzten Wert, oder im Fehlerfall FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
Klassen - und Objekt-Funktionen
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn der Client nicht mehr verbunden ist.
Siehe auch die Connection Handling -Beschreibung im Features -Kapitel für weitere Erläuterungen.
Zurück
Zum Anfang
Nach vorne
Sonstige Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Verbindungs-Status als Bit-Feld zurück.Siehe auch die Connection Handling -Beschreibung im Features -Kapitel für weitere Erläuterungen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn der Time-Out des Skripts erreicht ist.
Siehe auch die Connection Handling -Beschreibung im Features -Kapitel für weitere Erläuterungen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. constant() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert den angegebenen String von einem kyrillischen Zeichensatz in einen anderen.
Die Argumente from und to sind einzelne Zeichen die den Ausgangs - und Zielzeichensatz definieren.
Die unterstützten Zeichensätze sind:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion copy() kopiert eine Datei.
Sie gibt TRUE zurück, wenn der Kopiervorgang erfolgreich war, andernfalls FALSE.
Beispiel 1. copy()
Anmerkung:
Ab PHP 4.3.0 können die Parameter source und dest auch URLs sein, wenn "fopen wrappers" aktiviert ist.
Weitere Details hierzu finden Sie unter fopen().
Ist dest eine URL, könnte der Kopiervorgang scheitern, sollte der Wrapper das Überschreiben von existierenden Dateien nicht unterstützen.
Warnung
Sollte die Zieldatei bereits existieren, wird sie überschrieben.
Siehe auch move_uploaded_file(), rename(), und den Abschnitt über Steuerung von Dateiuploads.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Cosinus des Winkels arg (arg in Bogenmaß).
Siehe auch sin(), tan() und acos().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zählt die Häufigkeit des Vorkommens jedes einzelnen Byte-Wertes (0..255) in string und gibt sie auf verschiedene Arten zurück.
Der optionale Parameter mode ist voreingestellt auf 0.
In Abhängigkeit des mode -Wertes gibt count_chars() das folgende zurück:
0 - ein Array mit Byte-Werten für die Häufigkeit (auch 0-Vorkommen) jedes Zeichens.
1 - wie 0, aber nur Häufigkeiten grösser 0.
2 - wie 0, aber nur Häufigkeiten gleich 0.
3 - ein String der überhaupt vorkommenden Zeichen enthält.
4 - ein String der alle nicht vorkommenden Zeichen enthält.
Diese Funktion existiert ab PHP 4.0.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Anzahl von Elementen in var, welche typischerweise ein Array ist (da alles andere ein Element enthält).
Ist var kein Array, wird 1 zurückgegeben (Ausnahme: count (NULL) ist gleich 0).
Warnung
count() kann 0 zurückgeben wenn die Variable nicht gesetzt ist, aber sie könnte ebenfalls 0 zurückgeben, wenn eine Variable als leeres Array initialisiert wurde.
Verwenden Sie isset() um zu testen, ob eine Variable gesetzt ist.
In der Sektion Arrays finden Sie eine detaillierte Erklärung, wie Arrays in PHP implementiert sind und wie sie benutzt werden.
Beispiel 1. count()
$a[ 0] = 1; $a[1] = 3; $a[2] = 5; $result = count ($a); / /$result == 3 $b[0] = 7; $b[5] = 9; $b[10] = 11; $result = count ($b); / / $result == 3;
Anmerkung:
Die Funktion sizeof() ist ein Alias für count().
Siehe auch is_array(), isset() und strlen().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_add_annotation() fügt eine Anmerkung ein, bei der die untere linke Ecke bei (ulx, uly) und die obere rechte Ecke bei (orx, ory) liegt.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, dil wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Zurück
Zum Anfang
Nach vorne
ClibPDF Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_add_outline() fügt ein Lesezeichen mit dem Text Text hinzu, das auf die aktuelle Seite zeigt.
Beispiel 1.
Hinzufügen einer Seitenübersicht
?php $cpdf = cpdf_open( 0); cpdf_page_init($cpdf, 1, 0, 595, 842); cpdf_add_outline($cpdf, 0, 0, 0, 1, "Seite 1"); / /... / / etwas Zeichnung / /... cpdf_finalize($cpdf); Header("Content-type: application / pdf"); cpdf_output_buffer($cpdf); cpdf_close($cpdf);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_arc() zeichnet einen Kreisbogen mit dem Mittelpunkt (x-koor, y-koor) und dem Radius Radius, der mit dem Winkel Anfang beginnt und mit dem Winkel Ende endet.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_circle().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_begin_text() Die Funktion cpdf_begin_text() beginnt einen Textabschnitt.
Er muss mit cpdf_end_text() beendet werden.
Beispiel 1.
Ausgabe von Text
?php cpdf_begin_text( $pdf); cpdf_set_font($pdf, 16, "Helvetica", "WinAnsiEncoding"); cpdf_text($pdf, 100, 100, "Etwas Text"); cpdf_end_text($pdf)?
Siehe auch: cpdf_end_text().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_circle() zeichnet einen Kreis mit dem Mittelpunkt (x-koor, y-koor) und dem Radius Radius.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_arc().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_clip() beschränkt alle Zeichnungen auf den aktuellen Pfad.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_close() Die Funktion cpdf_close() schließt das PDF-Dokument.
Sie sollte als letzte, sogar nach cpdf_finalize(), cpdf_output_buffer() und cpdf_save_to_file(), aufgerufen werden.
Siehe auch: cpdf_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_closepath_fill_stroke() schließt den aktuellen Pfad, füllt seinen Innenraum mit der aktuellen Füllfarbe und zeichnet ihn.
Siehe auch: cpdf_closepath(), cpdf_stroke(), cpdf_fill(), cpdf_setgray_fill(), cpdf_setgray(), cpdf_setrgbcolor_fill() und cpdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_closepath() schließt den aktuellen Pfad.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_closepath_stroke() ist eine Kombination aus cpdf_closepath() und cpdf_stroke().
Der Pfad wird geschlossen.
Siehe auch: cpdf_closepath() und cpdf_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_continue_text() gibt die Zeichenkette in Text in der nächsten Zeile aus.
Siehe auch: cpdf_show_xy(), cpdf_text(), cpdf_set_leading() und cpdf_set_text_pos().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_curveto() zeichnet eine Bezier-Kurve vom aktuellen Punkt zum Punkt (x3, y3), wobei (x1, y1) und (x2, y2) als Kontrollpunkte verwendet werden.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_moveto(), cpdf_rmoveto(), cpdf_rlineto() und cpdf_lineto().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_end_text() beendet einen Textabschnitt, der mit cpdf_begin_text() begonnen wurde.
Beispiel 1.
Ausgabe von Text
?php cpdf_begin_text( $pdf); cpdf_set_font($pdf, 16, "Helvetica", "WinAnsiEncoding"); cpdf_text($pdf, 100, 100, "Etwas Text"); cpdf_end_text($pdf)?
Siehe auch: cpdf_begin_text().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_fill() füllt den Innenraum des aktuellen Pfades mit der aktuellen Füllfarbe.
Siehe auch: cpdf_closepath(), cpdf_stroke(), cpdf_setgray_fill(), cpdf_setgray(), cpdf_setrgbcolor_fill() und cpdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_fill_stroke() füllt den Innenraum des aktuellen Pfades mit der aktuellen Füllfarbe und zeichnet den aktuellen Pfad.
Siehe auch: cpdf_closepath(), cpdf_stroke(), cpdf_fill(), cpdf_setgray_fill(), cpdf_setgray(), cpdf_setrgbcolor_fill() und cpdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_finalize() beendet das Dokument PDF-Dokument.
Sie müssen danach trotzdem noch cpdf_close() aufrufen.
Siehe auch: cpdf_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_finalize_page() beendet die Seite mit der Seitennummer page number.
Diese Funktion hat nur den Zweck, Speicherplatz zu sparen.
Eine abgeschlossene Seite belegt weniger Speicherplatz, kann aber nicht mehr verändert werden.
Siehe auch: cpdf_page_init().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_global_set_document_limits() setzt verschiedene Beschränkungen für Dokumente.
Damit diese Funktion wirksam wird, muss sie vor cpdf_open() aufgerufen werden.
Sie setzt die Beschränkungen für alle Dokumente, die danach geöffnet werden.
Siehe auch: cpdf_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_import_jpeg() öffnet ein Bild, das unter dem Namen Dateiname gespeichert wurde.
Das Bild muss im JPEG-Format vorliegen.
Es wird auf der aktuellen Seite an der Position (x-koor, y-koor) platziert.
Das Bild wird um Winkel Grad gedreht.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_place_inline_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_lineto() zeichnet eine Linie vom aktuellen Punkt zum Punkt mit den Koordinaten (x-koor, y-koor).
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_moveto(), cpdf_rmoveto() und cpdf_curveto().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_moveto() setzt die aktuelle Position auf die Koordinaten x-koor und y-koor.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Siehe auch: cpdf_rmoveto().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_newpath() beginnt auf dem durch den Parameter PDF-Dokument angegebenen Dokument einen neuen Pfad.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_open() öffnet ein neues PDF-Dokument.
Wenn Komprimierung ungleich 0 ist, schaltet dieser Parameter die Komprimierung des Dokuments ein.
Der optionale Parameter Dateiname Der optionale Parameter Dateiname bestimmt die Datei in die das Dokument geschrieben wird.
Wenn er nicht angegeben wurde, wird das Dokument im Speicher erzeugt und kann entweder mit cpdf_save_to_file() in eine Datei geschrieben werden oder mit cpdf_output_buffer() an die Standardausgabe geschickt werden.
Anmerkung:
Der Rückgabewert wird in künftigen ClibPDF-Versionen als erster Parameter aller anderen Funktionen benötigt, die in ein PDF-Dokument schreiben.
Die ClibPDF-Bibliothek betrachtet den Dateinamen "-" als Synonym für stdout.
Das funktioniert allerdings nicht, wenn PHP als Apache-Modul kompiliert wurde, weil die Art und Weise, in der ClibPDF die Ausgabe an stdout vornimmt, nicht mit Apache funktioniert.
Sie können dieses Problem lösen, indem Sie keinen Dateinamen angeben und stattdessen cpdf_output_buffer() verwenden, um das PDF-Dokument auszugeben.
Siehe auch: cpdf_close() und cpdf_output_buffer().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_output_buffer() gibt das PDF-Dokument an stdout aus.
Das Dokument muss im Speicher erstellt worden sein, was der Fall ist, wenn cpdf_open() ohne den Parameter Dateiname aufgerufen wurde.
Siehe auch: cpdf_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_page_init() beginnt eine neue Seite mit der Höhe Höhe und der Breite Breite.
Die Seite hat die Nummer Seitennummer und die Ausrichtung Ausrichtung.
Ausrichtung kann 0 für Hochformat oder 1 für Querformat sein.
Der optionale Parameter Einheit gibt die Einheit des Koordinatensystems in Anzahl von Postscript-Punkten pro Einheit an.
Da ein Zoll 72 Punkten entspricht, würde ein Wert von 72 die Einheit auf ein Zoll setzen.
Auch der Standardwert ist 72.
Siehe auch: cpdf_set_current_page().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_place_inline_image() platziert auf der Seite ein Bild, das mit der PHP-Image-Funktion erstellt wurde, an der Position (x-koor, y-koor).
Das Bild kann gleichzeitig skaliert werden.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_import_jpeg().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_rect() zeichnet ein Rechteck, bei dem die linke untere Ecke im Punkt (x-koor, y-koor) liegt.
Die Breite wird auf Breite und die Höhe auf Höhe gesetzt.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_restore() stellt die mit cpdf_save() gesicherte Umgebung wieder her.
Sie funktioniert wie der Postscript-Befehl grestore und ist sehr nützlich, wenn Sie ein Objekt verschieben oder drehen wollen, ohne dass es sich auf andere Objekte auswirkt.
Beispiel 1.
Sichern / Wiederherstellen
?php cpdf_save( $pdf); / / nehmen Sie alle möglichen Arten von Drehungen, Verformungen,... vor cpdf_restore($pdf)?
Siehe auch: cpdf_save().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_rlineto() zeichnet eine Linie vom aktuellen Punkt zum relativen Punkt mit den Koordinaten (x-koor, y-koor).
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_moveto(), cpdf_rmoveto() und cpdf_curveto().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_rmoveto() setzt die aktuelle Position relativ zu den Koordinaten x-koor und y-koor.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_moveto().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_rotate() setzt die Drehung in Grad auf Winkel.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_save() sichert die aktuelle Umgebung.
Sie funktioniert wie der Postscript-Befehl gsave und ist sehr nützlich, wenn Sie ein Objekt verschieben oder drehen wollen, ohne dass es sich auf andere Objekte auswirkt.
Siehe auch: cpdf_restore().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_save_to_file() schreibt das PDF-Dokument in eine Datei, sofern es im Speicher erstellt wurde.
Diese Funktion wird nicht benötigt, wenn das PDF-Dokument unter Angabe eines Dateinamens als Parameter von cpdf_open() geöffnet wurde.
Siehe auch: cpdf_output_buffer() und cpdf_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_scale() setzt den Vergrößerungsfaktor in beide Richtungen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_char_spacing() legt den Abstand zwischen den Zeichen fest.
Siehe auch: cpdf_set_word_spacing() cpdf_set_leading().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_creator() setzt den Urheber eines PDF-Dokuments.
Siehe auch: cpdf_set_subject(), cpdf_set_title() und cpdf_set_keywords().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_current_page() setzt die Seite, an der alle Aktionen durchgeführt werden.
Sie können solange zwischen den Seiten wechseln, bis Sie eine Seite mit cpdf_finalize_page() abschließen.
Siehe auch: cpdf_finalize_page().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setdash() setzt das Muster einer gestrichelten Linie auf weiß weiße Einheiten und schwarz schwarze Einheiten.
Wenn beide 0 sind, wird die Linie durchgezogen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setflat() setzt die Flachheit auf einen Wert zwischen 0 und 100.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_font() setzt die aktuelle Schriftart, Schriftgröße und -kodierung.
Gegenwärtig werden nur Standard-Postscript-Schriftarten unterstützt.
Der Parameter Kodierung kann die folgenden Werte akzeptieren: "MacRomanEncoding", "MacExpertEncoding", "WinAnsiEncoding" und "NULL". "NULL" steht für die schriftarteigene Kodierung.
Weitere Informationen, insbesondere wie asiatische Schriftarten unterstützt werden, finden Sie im ClibPDF-Handbuch.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setgray_fill() setzt die Füllfarbe auf den angegebenen Grauwert.
Siehe auch: cpdf_setrgbcolor_fill().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setgray() setzt die aktuelle Zeichen - und Füllfarbe auf den angegebenen Grauwert.
Siehe auch: cpdf_setrgbcolor_stroke() und cpdf_setrgbcolor_fill().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setgray_stroke() setzt die aktuelle Zeichenfarbe auf den angegebenen Grauwert.
Siehe auch: cpdf_setrgbcolor_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_horiz_scaling() setzt die horizontale Skalierung auf Maßstab Prozent.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_keywords() setzt die Schlüsselwörter eines PDF-Dokuments.
Siehe auch: cpdf_set_title(), cpdf_set_creator() und cpdf_set_subject().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_leading() Die Funktion cpdf_set_leading() setzt den Zeilenabstand.
Dieser wird verwendet, wenn der Text durch cpdf_continue_text() ausgegeben wird.
Siehe auch: cpdf_continue_text().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setlinecap() Die Funktion cpdf_setlinecap() setzt den Typ der Linienenden auf einen Wert zwischen 0 und 2.
0 = stumpfes Ende, 1 = rund, 2 = vorspringendes Quadrat.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setlinejoin() Die Funktion cpdf_setlinejoin() setzt den Typ der Linienverbindungen auf einen Wert zwischen 0 und 2.
0 = Gehrung, 1 = rund, 2 = schräg.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setlinewidth() setzt die Linienbreite auf Breite.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setmiterlimit() setzt die Gehrungsbegrenzung auf einen Wert größer oder gleich 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_page_animation() legt den Übergang zwischen aufeinanderfolgenden Seiten fest.
Übergang kann folgende Werte haben:
0 für keinen,
1 für zwei über den Bildschirm sausende Zeilen, die die nächste Seite enthüllen,
2 für mehrere über den Bildschirm sausende Zeilen, die die nächste Seite enthüllen,
3 für eine Box, die die nächste Seite enthüllt,
4 für eine einzelne über den Bildschirm sausende Zeile, die die nächste Seite enthüllt,
5, dass dich die alte Seite auflöst und die nächste Seite enthüllt,
6, dass der Auflösungseffekt vom einen Bildschirmrand zum anderen wandert,
7, dass die alte Seite einfach durch die neue Seite ersetzt wird (Grundeinstellung)
Der Wert Dauer ist die Anzahl der Sekunden während des Seitenwechsels.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setrgbcolor_fill() setzt die Füllfarbe auf den angegebenen RGB-Farbwert.
Siehe auch: cpdf_setrgbcolor_stroke() und cpdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setrgbcolor() setzt die aktuelle Zeichen - und Füllfarbe auf den angegebenen RGB-Farbwert.
Siehe auch: cpdf_setrgbcolor_stroke() und cpdf_setrgbcolor_fill().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_setrgbcolor_stroke() setzt die aktuelle Zeichenfarbe auf den angegebenen RGB-Farbwert.
Siehe auch: cpdf_setrgbcolor_fill() und cpdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_subject() setzt das Thema eines PDF-Dokuments.
Siehe auch: cpdf_set_title(), cpdf_set_creator() und cpdf_set_keywords().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_text_matrix() legt die Matrix fest, die eine auf die aktuelle Schriftart angewandte Transformation beschreibt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_text_pos() legt die Position des Textes für den nächsten Aufruf von cpdf_show() fest.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Siehe auch: cpdf_show() cpdf_text().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_text_rendering() legt fest, wie der Text wiedergegeben wird.
Die möglichen Werte für Modus sind 0=Text ausfüllen, 1=Text durchstreichen, 2=Text ausfüllen und durchstreichen, 3=unsichtbar, 4=Text ausfüllen und dem Begrenzungspfad hinzufügen, 5=Text durchstreichen und dem Begrenzungspfad hinzufügen, 6=Text ausfüllen und durchstreichen und dem Begrenzungspfad hinzufügen, 7=dem Begrenzungspfad hinzufügen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_text_rise() legt die Verschiebung des Texts um Verschiebung Einheiten nach oben fest.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_title() setzt den Titel eines PDF-Dokuments.
Siehe auch: cpdf_set_subject(), cpdf_set_creator() und cpdf_set_keywords().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_set_word_spacing() legt den Abstand zwischen den Wörtern fest.
Siehe auch: cpdf_set_char_spacing() cpdf_set_leading().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_show() gibt die Zeichenkette Text an der aktuellen Position aus.
Siehe auch: cpdf_text(), cpdf_begin_text() und cpdf_end_text().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_show_xy() gibt die Zeichenkette Text an der Position mit den Koordinaten (x-koor, y-koor) aus.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Anmerkung:
Ohne die optionalen Parameter ist die Funktion cpdf_show_xy() mit cpdf_text() identisch.
Siehe auch: cpdf_text().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_stringwidth() gibt die Breite der Zeichenkette in Text zurück.
Zuvor muss eine Schriftart festgelegt werden.
Siehe auch: cpdf_set_font().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_stroke() Zeichnet eine Linie entlang des aktuellen Pfades.
Siehe auch: cpdf_closepath() und cpdf_closepath_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_text() gibt die Zeichenkette Text an der Position mit den Koordinaten (x-koor, y-koor) aus.
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Der optionale Parameter Richtung bestimmt die Drehung des Texts in Grad.
Der optionale Parameter Ausrichtungsmodus bestimmt, wie der Text ausgerichtet wird.
Die möglichen Werte können Sie der ClibPDF-Dokumentation entnehmen.
Siehe auch: cpdf_show_xy().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion cpdf_translate() setzt den Ursprung des Koordinatensystems auf den Punkt (x-koor, y-koor).
Der optionale Parameter Modus bestimmt die Länge einer Einheit.
Wenn er 0 ist oder weggelassen wurde, wird die Einheit verwendet, die für die Seite als Standard angegeben wurde.
Andernfalls werden die Koordinaten unabhängig von der aktuellen Einheit in Postscript-Punkten gemessen.
Zurück
Zum Anfang
Nach vorne
Nach oben
Crack Funktionen
PHP Handbuch
Zurück
Nach vorne
Wenn nicht, wird FALSE zurückgegeben.
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
crack_check() führt eine Überprüfung des mit password übergebenen Strings über das mit dictionary angegebene Wörterbuch durch.
Wenn dictionary nicht spezifiziert wird, wird das zuletzt geöffnete Wörterbuch genutzt.
Zurück
Zum Anfang
Nach vorne
Crack Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
crack_closedict() schliesst den in dictionary angegebenen Zeiger.
Wenn dictionary nicht genauer spezifiziert wird, wird das aktuell verwendetet Wörterbuch geschlossen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
crack_getlastmessage() gibt die Nachricht der letzten Passwortüberprüfung zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg einen Zeiger auf das Wörterbuch zurück oder FALSE bei einem Fehler.
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
crack_opendict() öffnet das mit dictionary angegebene Wörterbuch, um es mit crack_check() zu benutzen.
Anmerkung:
Es kann nur ein Wörterbuch zur gleichen Zeit geöffnet sein.
Siehe auch: crack_check(), und crack_closedict().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Berechnet die zyklisch redundante polynomische Prüfsumme mit einer Länge von 32-Bit für str.
Dies wird regulär für die Integritätsprüfung übermittelter Daten verwendet.
Siehe auch: md5().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Erzeugt eine anonyme Funktion an Hand der übergebenen Parameter und gibt einen eindeutigen Namen für diese zurück.
Dies gilt auch für code.
Falls sie "" "verwenden, müssen sie die Variablen-Namen "escapen", wie z.B. \$avar.
Dieser Befehl kann z.B. verwendet werden, um eine Funktion an Hand von Informationen zu erzeugen, die erst zur Laufzeit vorliegen.
Beispiel 1.
Erzeugen einer anonymen / temporären Funktion per create_function():
$newfunc = create_function( '$a,$b' ,'return "ln($a) + ln($b) = ".log($a * $b) ;'); echo "Neue Temp-Funktion: $newfunc\n"; echo $newfunc(2,M_E) ."\n"; / / Ausgabe: / / Neue Temp-Funktion: lambda_1 / / ln(2) + ln(2.718281828459) = 1.6931471805599
Beispiel 2.
Verwendungszweck:
function process( $var1, $var2, $farr) {for ($f=0; $f count($farr); $f++) echo $farr[$f]($var1,$var2) ."\n";} / / Erzeugung eines Bündels an mathematischen Funktionen $f1 = 'if ($a =0) {return "b*a^2 = ".$b*sqrt($a);} else {return false ;}'; $f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a) ;"; $f3 = 'if ($a 0 $b != 0) {return "ln(a) / b = ".log($a) / $b;} else {return false ;}'; $farr = array (create_function('$x,$y', 'return "als trig: ".(sin($x) + $x*cos($y)) ;'), create_function('$x,$y', 'return "als Hypotenuse: ".sqrt($x*$x + $y*$y) ;'), create_function('$a,$b', $f1), create_function('$a,$b', $f2), create_function('$a,$b', $f3)); echo "\nGebrauch des ersten Arrays der anonymen Funktionen\n"; echo "Parameter:
2.3445, M_PI\n"; process(2.3445, M_PI, $farr); / / Erzeugung eines Bündels an String-Behandlungs-Routinen $garr = array (create_function('$b, $a' ,'if (strncmp ($a, $b, 3) == 0) return "** \"$a\ "'. 'und \"$b\"\n** Sieht für mich gleich aus! (ansehen der ersten 3 Zeichen)" ;'), create_function('$a, $b' ,'; return "CRCs: ".crc32($a).", ".crc32(b) ;'), create_function('$a, $b' ,'; return "ähnlich(a, b) = ".similar_text($a, $b, $p) ."($p%)" ;')); echo "\nGebrauch des zweiten Arrays der anonymen Funktionen\n"; process("Twas brilling and the slithy toves", "Twas the night", $garr);
Gebrauch des ersten Arrays der anonymen Funktionen Parameter:
2.3445, M_PI als trig: -1.6291725057799 als Hypotenuse:
3.9199852871011 b*a^2 = 4.8103313314525 min( b^2+a, a^2,b) = 8.6382729035898 ln(a / b) = 0.27122299212594 Gebrauch des zweiten Arrays der anonymen Funktionen ** "Twas the night "und "Twas brilling and the slithy toves" ** Sieht für mich gleich aus! (ansehen der ersten 3 Zeichen) CRCs: -725381282, 1908338681 ähnlich(a,b) = 11(45.833333333333%)
Beispiel 3.
Gebrauch der anonymen Funktionen als Callback-Funktion:
$av = array( "der ","ein" ,"dieser ","jener "); array_walk($av, create_function( '$v,$k' ,'$v = $v ."Zug" ;')); print_r($av); / / mit PHP3 benutzen sie bitte var_dump() / / Ausgaben: / / Array / / (/ / [0] = der Zug / / [1] = ein Zug / / [2] = dieser Zug / / [3] = jener Zug / /) / / Ein Array aus Strings nach Länge geordnet $sv = array("kurz" ,"länger" ,"noch länger" ,"dieser ist am längsten"); print_r($sv); / / Ausgaben: / / Array / / (/ / [0] = kurz / / [1] = länger / / [2] = noch länger / / [3] = dieser ist am längsten / /) / / Sortierung von lang nach kurz usort($sv, create_function('$a,$b' ,'return strlen($b) - strlen($a) ;')); print_r($sv); / / Ausgabe: / / Array / / (/ / [0] = dieser ist am längsten / / [1] = noch länger / / [2] = länger / / [3] = kurz / /)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
crypt() verschlüsselt einen String unter Verwendung der Standard - DES -Verschlüsselungs-Methode von Unix.
Die zu übergebenden Argumente sind der zu verschlüsselnde String und optional ein 2-Zeichen-Salt-String, der die Schlüsselbasis bildet.
Lesen Sie die Man-Pages ihres Unix-Systems für mehr Informationen zu den Crypt-Funktionen.
Ist kein Salt-Argument angegeben, wird es von PHP nach dem Zufalls-Prinzip erzeugt.
Einige Betriebssystem unterstützen mehr als eine Methode zur Verschlüsselung.
So wird manchmal der DES - durch einen MD5-Algorithmus ersetzt.
Der verwendete Schlüssel wird durch das Salt-Argument bestimmt.
Zur Installations-Zeit untersucht PHP die vorhandenen Möglichkeiten und wird, abhängig vom Ergebnis dieser Prüfung, auch andere Schlüssel-Typen zulassen.
Wird kein Salt unterstützt, erzeugt PHP per Voreinstellung einen 2-Zeichen DES-Salt, es sei denn auf ihrem System existiert MD5.
Dann wird PHP einen zufälligen MD5-Salt generieren.
PHP erzeugt eine Konstante namens CRYPT_SALT_LENGTH.
Diese besagt, ob ihr System ein reguläres 2-Zeichen Salt oder das längere 12-Zeichen MD5-Salt unterstützt.
Wenn Sie das gegebene Salt benutzen, sollten Sie beachten, dass dieser Wert nur einmal bestimmt wird.
Rufen Sie diese Funktion nun rekursiv auf, beeinflusst das nicht nur das Ergebnis, sondern unter Umständen auch die Sicherheit.
Die Standard-DES-Verschlüsselung crypt() enthält das Salt als erste 2 Zeichen der Ausgabe.
Auf Systemen, wo die crypt( )-Funktion meherere Verschlüsselungen unterstützt, werden die folgenden Konstanten auf 0 oder 1 gesetzt, je nachdem, ob der entsprechende Typ verfügbar ist:
CRYPT_STD_DES - Standard DES-Schlüssel mit 2-Zeichen Salt
CRYPT_EXT_DES - Erweiterter DES-Schlüssel mit einem 9-Zeichen Salt
CRYPT_MD5 - MD5-Schlüssel mit 12-Zeichen Salt, beginnend mit $1$
Der veschlüsselte String kann nicht entschlüsselt werden, da crypt() eine Einweg-Verschlüsselung ist.
Siehe auch: md5().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anderenfalls wird FALSE zurückgegeben.
In der Standardeinstellung für locale C gelten nur [A-Za-z] als Buchstaben.
Die Funktion ist gleichbedeutend zu (ctype_alpha($text) _BAR_ _BAR_ ctype_digit($text)).
Siehe auch ctype_alpha(), ctype_digit(), und setlocale().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn alle Zeichen in text Buchstaben im Sinne der aktuellen locale-Einstellung sind.
In der Standardeinstellung für locale C gelten nur [A-Za-z] als Buchstaben und ctype_alpha() ist gleichbedeutend zu (ctype_upper($text) _BAR_ _BAR_ ctype_lower($text)), aber andere Sprachen haben Buchstaben, die weder als groß - noch als kleingeschrieben gelten.
Siehe auch ctype_upper(), ctype_lower(), und setlocale().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn alle Zeichen in text spezielle Steuerfunktionen haben, anderenfalls FALSE.
Zeilenumbruch, TAB, ESC.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn jedes Zeichen in text eine Ziffer ist, anderenfalls FALSE.
Siehe auch ctype_alnum() und ctype_xdigit().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn jedes Zeichen in text druckbar ist und tatsächlich eine sichtbare Ausgabe produziert (kein Leerzeichen), anderenFalls FALSE.
Siehe auch ctype_alnum(), ctype_print(), und ctype_punct().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn jedes Zeichen in text ein Kleinbuchstabe im Sinne der aktuellen locale-Einstellung ist, anderenfalls FALSE.
Siehe auch ctype_alpha() und ctype_upper().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn jedes Zeichen in text Gibt TRUE zurück, wenn jedes Zeichen in text tatsächtlich eine Ausgabe bewirkt (inkl.
Wenn text Steuerzeichen oder Zeichen, die keine Ausgabe - oder Steuerungsfunktion haben, enthält, wird FALSE zurückgegeben.
Siehe auch ctype_cntrl(), ctype_graph(), und ctype_punct().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anderenfalls wird FALSE zurückgegeben.
Siehe auch ctype_cntrl(), ctype_graph(), und ctype_punct().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn jedes Zeichen in text irgendeine Art Leerzeichen erzeugt, anderenfalls FALSE.
Neben dem eigentlichen Leerzeichen schließt das auch TAB, Zeilenforschub, Carriage Return und Formularvorschub mit ein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn jedes Zeichen in text ein Großbuchstabe im Sinne der aktuellen locale-Einstellung ist, anderenfalls FALSE.
Siehe auch ctype_alpha() und ctype_lower().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn jedes Zeichen in text eine Hexadezimalziffer ist, also eine Dezimalziffer oder ein Zeichen aus [A-Fa-f], anderenfalls FALSE.
Siehe auch ctype_digit().
Zurück
Zum Anfang
Nach vorne
Nach oben
dba Datenbank (dbm-style) Abstraktions-Funktionen
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tipp:
Damit lässt sich die Ausgabe dieser Funktion erfassen, und - zum Beispiel - in einem string speichern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
Cybercash Bezahl Funktionen
PHP Handbuch
Zurück
Nach vorne
Jedes Array hat einen internen Zeiger auf sein "aktuelles" Element, welcher auf das erste in das Array eingefügte Element initialisiert wird.
Die Funktion current() liefert das Array Element, auf das gerade vom internen Zeiger gezeigt wird.
Sie bewegt den Zeiger in keinster Weise.
Zeigt der interne Zeiger hinter das Ende der Elementenliste, gibt current() FALSE zurück.
Warnung
Enthält das Array leere Elemente (0 oder "", den leeren String), gibt diese Funktion auch für diese Elemente FALSE Enthält das Array leere Elemente (0 oder"", den leeren String), gibt diese Funktion auch für diese Elemente FALSE zurück.
Das macht es unmöglich, unter Verwendung von current() herauszufinden, ob das wirklich am Ende der Liste sind.
Um ein Array, das leere Elemente enthalten könnte richtig durchzugehen, verwenden Sie die Funktion each().
Siehe auch end(), next(), prev() und reset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Cybercash Bezahl Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein assoziatives Array mit den Elementen "errcode" und, falls "errcode "den Wert FALSE hat, "outbuff" (string), "outLth "(long) und "macbuff" (string) zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein assoziatives Array mit den Elementen "errcode" und, falls "errcode "den Wert FALSE hat, "outbuff" (string), "outLth "(long) und "macbuff" (string) zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
cybermut_creerformulairecm() wird dazu verwendet um ein HTML Formular zur Zahlungsaufforderung zu erzeugen.
Beispiel 1.
Erster Schritt der Bezahlung (entspricht cgi1.c)
?php / / Verzeichnis der Schlüssel putenv( "CMKEYDIR= / var / creditmut / cles"); / / Versionsnummer $VERSION="1.2"; $retour = cybermut_creerformulairecm ("https: / /www.creditmutuel.fr / test / telepaiement / paiement.cgi", $VERSION, "1234567890", "300FRF", $REFERENCE, $TEXTE_LIBRE, $URL_RETOUR, $URL_RETOUR_OK, $URL_RETOUR_ERR, "francais", "company", "Paiement par carte bancaire"); echo $retour;?
Siehe auch cybermut_testmac() und cybermut_creerreponsecm().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
cybermut_creerreponsecm() gibt einen String zurück, der die Bestätigungsmeldung enthält.
Der Parameter ist "OK", wenn die Bestätigungsmeldung korrekt von cybermut_testmac() identifiziert werden konnte.
Alles andere wird als Fehlermeldung angesehen.
Siehe auch cybermut_creerformulairecm() und cybermut_testmac().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
cybermut_testmac() wird dazu verwendet, sicherzustellen, dass keine betrügerischen oder falschen Daten in der erhaltenen Bestätigungsnachricht sind.
Achten Sie auf die Parameter code-retour und texte-libre, welche wegen dem Bindestrich nicht einfach ausgewertet werden können.
Sie müssen sie wie folgt verwenden:
?php $code_retour=$_GET[ "code-retour"]; $texte_libre=$_GET["texte-libre"];?
Beispiel 1.
Letzter Schritt der Bezahlung (entspricht cgi2.c)
?php / / Stellen Sie sicher, dass Enable Track Vars auf ON steht. / / Verzeichnis der Schlüssel putenv( "CMKEYDIR= / var / creditmut / cles"); / / Versionsnummer $VERSION="1.2"; $texte_libre = $_GET["texte-libre"]; $code_retour = $_GET["code-retour"]; $mac_ok = cybermut_testmac($MAC,$VERSION,$TPE,$date,$montant,$reference,$texte_libre,$code_retour); if ($mac_ok) {/ / / / insert data processing here / / / / $result=cybermut_creerreponsecm("OK");} else {$result=cybermut_creerreponsecm("Document Falsifie");}?
Siehe auch cybermut_creerformulairecm() und cybermut_creerreponsecm().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dabei wird entweder der angegebene Timestamp oder die gegenwärtige lokale Zeit berücksichtigt, wenn kein Timestamp angegegeben wird.
Anmerkung:
Der gültige Bereich eines Timestamp liegt typischerweise zwischen Fri, 13 Dec 1901 20:45:54 GMT und Tue, 19 Jan 2038 03:14:07 GMT. (Das entspricht den minimalen und maximalen Werten für einen vorzeichenbehafteten 32-Bit Integer).
Auf Windows-Betribssytemen liegt ist dieser Bereich beschränkt auf 01-01-1970 bis 19-01-2038.
Um einen Timestamp aus aus einem Datums-String zu erzeugen, können Sie die Funktion strtotime() benutzen.
Zusätzlich bieten einige Datenbanken Funktionen, um Ihre Datumsfromate in Timestamps umzuwandeln (wie z.B. die MySQL-Funktion UNIX_TIMESTAMP).
Die folgenden Zeichen werden bei der Formatierung erkannt:
a - "am" oder "pm "
A - "AM" oder "PM "
B - Swatch-Internet-Zeit
d - Tag des Monats, 2-stellig mit führender Null: "01" bis "31 "
D - Tag der Woche als 3 Buchstaben, z.B. "Fri"
F - Monat als ganzes Wort, z.B "January"
g - Stunde im 12-Stunden-Format, ohne führende Null: "1" bis "12 "
G - Stunde im 24-Stunden-Format, ohne führende Null: "0" bis "23 "
h - Stunde im 12-Stunden-Format: "01" bis "12 "
H - Stunde im 24-Stunden-Format: "00" bis "23 "
i - Minuten: "00" bis "59 "
I (großes 'i') - "1 "bei Sommerzeit, sonst "0"
j - Tag des Monats ohne führende Null: "1" bis "31 "
l - (kleines 'L') ausgeschriebener Tag der Woche, z.B. "Friday "
L - boolscher Wert für Schaltjahre: "0" oder "1 "
m - Monat: "01" to "12 "
M - Monat als 3 Buchstaben, z.B. "Jan"
n - Monat ohne führende Null: "1" bis "12 "
O - Zeitdifferenz zur Greenwich Zeit in Stunden (z.B. +0200)
r - Nach RFC 822 formatiertes Datum; z.B.: "Sun, 7 Oct 2001 14:56:02 +0200 "(seit PHP 4.0.4)
s - Sekunden: "00" bis "59 "
S - Anhang der englischen Aufzählung, 2 Buchstaben; z.B.: ""st", "nd", "rd" oder "th "
t - Anzahl der Tage des angegebenen Monats: "28" bis "31 "
T - Zeitzoneneinstellung des Rechners, z.B. "EST" oder "MDT "
U - Sekunden seit Beginn der UNIX-Epoche (January 1 1970 00:00:00 GMT)
w - Wochentag numerisch, beginnend mit "0" (Sonntag) bis "6 "(Samstag)
W - ISO-8601 Wochennummer des Jahres (Woche beginnt mit Montag) (seit PHP 4.1.0)
y - Jahr als zweistellige Zahl, z.B. "99"
Y - Jahr als vierstellige Zahl, z.B. "1999"
z - Tag des Jahres: "0" bis "365 "
Z - Offset der Zeitzone gegen GTM ("-43200 "bis "43200") in Sekunden.
Der Offset für Zeitzone West nach UTC ist immer negativ und für Zeitzone Ost nach UTC immer positiv.
Beispiel 1. date() Beispiel
print (date("l dS of F Y h:i:s A")); print ("July 1, 2000 is on a ". date ("l", mktime(0,0,0,7,1,2000)));
Möchten Sie verhindern, dass ein erkanntes Zeichen im Formatstring ersetzt wird, sollten Sie dieses Zeichen mit einem vorangestellten Backslash escapen.
Ist das Zeichen mit dem Backslash bereits eine spezielle Zeichenfolge, müssen Sie diesen Backslash ebenso escapen.
Beispiel 2.
Escaping von Zeichen in date()
echo date( "l \\t\h\e jS"); / / gibt etwas ähnliches aus wie 'Saturday the 8th '
Es ist möglich, date() und mktime() gleichzeitig zu verwenden, um Datumsangaben der Zukunft / Vergangenheit herauszufinden.
Beispiel 3. date() und mktime() Beispiele
$morgen = mktime( 0, 0, 0, date("m"), date ("d")+1, date("Y")); $letztermonat = mktime(0, 0, 0, date("m")-1, date("d"), date("Y")); $naechstesjahr = mktime(0, 0, 0, date("m"), date("d"), date("Y")+1);
Anmerkung:
Dieses Vorgehen kann zu verlässlicheren Ergebnissen führen, als simples Addieren oder Subtrahieren der Anzahl von Sekunden in Tagen oder Monaten zu einem Timestamp, da Sommer - und Winterzeit berücksichtigt werden.
Es folgen einige Beispiele zur date() Formatierung.
Beachten Sie, dass Sie alle anderen Zeichen escapen sollten, da alle Zeichen, die im Augenblick eine spezielle Bedeutung haben, unerwünschte Resultate liefern.
Bei allen weiteren Zeichen kann es durchaus möglich sein, dass diesen in zukünftigen PHP-Versionen eine Bedeutung zukommt.
Beim escapen sollten Sie darauf achten einfache Anführungszeichen zu benutzen, damit Zeichenfolgen wie zum Beispiel \n zu keinem Zeilenumbruch führen.
Beispiel 4. date() Formatierungen
/* Today is March 10th, 2001, 5:16:18 pm * / $today = date( "F j, Y, g:i a"); / / March 10, 2001, 5:16 pm $today = date("m.d.y"); / / 03.10.01 $today = date("j, n, Y"); / / 10, 3, 2001 $today = date("Ymd"); / / 20010310 $today = date('h-i-s, j-m-y, it is w Day z '); / / 05-16-17, 10-03-01, 1631 1618 6 Fripm01 $today = date('\i\t \i\s \t\h\e jS \d\a\y .'); / / It is the 10th day. $today = date("D M j G:i:s T Y"); / / Sat Mar 10 15:16:08 MST 2001 $today = date('H:m:s \m \i\s\ \m\o\n\t\h'); / / 17:03:17 m is month $today = date("H:i:s"); / / 17:16:17
Um Datumsangaben in anderen Sprach - / Zeitzonen-Formaten auszugeben, sollten sie die Funktionen setlocale() und strftime() nutzen.
Siehe auch: getlastmod(), gmdate(), mktime(), strftime() und time().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_close() schließt die offene Datenbank, die durch handle festgelegt wird, und gibt alle zugehörigen Ressourcen frei.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_close() besitzt keinen Rückgabewert.
Siehe auch dba_open() und dba_popen()
Zurück
Zum Anfang
Nach vorne
dba Datenbank (dbm-style) Abstraktions-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_delete() löscht den Eintrag mit dem Schlüssel key aus der durch handle spezifizierten Datenbank.
key ist der Schlüssel des Eintrags, der gelöscht wird.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_delete() hat als Rückgabewert TRUE oder FALSE, abhängig davon, ob der Löschvorgang erfolgreich war oder nicht.
Siehe auch dba_exists(), dba_fetch(), dba_insert(), und dba_replace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_exists() überprüft, ob ein Datensatz mit dem Schlüssel key in der durch handle spezifizierten Datenbank existiert.
Key ist der Schlüssel, dessen Existenz überprüft werden soll.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_exists() hat als Rückgabewert TRUE oder FALSE, abhängig davon, ob der Schlüssel gefunden wurde oder nicht.
Siehe auch dba_fetch(), dba_delete(), dba_insert(), und dba_replace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_fetch() liest die durch den Schlüssel key festgelegten Daten aus der durch handle spezifizierten Datenbank aus.
Key ist der Schlüssel, mit dem die Daten identifizert werden.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_fetch() hat als Rückgabewert entweder den zum Schlüssel key passenden Werte-String oder FALSE, abhängig davon, ob das Schlüssel / Wert-Paar gefunden wurde oder nicht.
Siehe auch dba_exists(), dba_delete(), dba_insert(), und dba_replace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_firstkey() gibt den ersten Schlüssel aus der durch handle spezifizierten Datenbank zurück und setzt den internen Schlüssel-Zeiger zurück.
Dies erlaubt in Verbindung mit dba_nextkey() eine sequentielle Suche durch die gesamte Datenbank.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_firstkey() liefert als Rückgabewert den Schlüssel oder FALSE, abhängig davon, ob die Aktion erfolgreich war oder fehlschlug.
Siehe auch dba_nextkey() und Beispiel 2 im DBA-Ü ;berblick
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_insert() fügt den Datensatz, der durch key und value beschrieben wird, in die durch handle spezifizierte Datenbank ein.
Die Aktion schlägt fehl, wenn es bereits einen Eintrag mit dem gleichen key in der Datenbank gibt.
key ist der Schlüssel des Eintrags, der eingefügt werden soll.
value ist der Wert, der eingefügt werden soll.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_insert() hat als Rückgabewert TRUE oder FALSE, abhängig davon, ob die Aktion erfolgreich war oder nicht.
Siehe auch dba_exists() dba_delete() dba_fetch() dba_replace()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_nextkey() gibt den nachfolgenden Schlüssel aus der durch handle spezifizierten Datenbank zurück und erhöht den internen Schlüssel-Zeiger.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_nextkey() hat als Rückgabewert den Schlüssel oder FALSE, abhängig davon, ob die Aktion erfolgreich war oder nicht.
Siehe auch dba_firstkey() und Beispiel 2 im DBA-Ãœberblick
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_open() stellt eine Datenbankinstanz für path mit mode her und benutzt dabei handler.
path ist ein gültiger Pfad in Ihrem Dateisystem.
Das mode Argument beschreibt den Modus, mit dem die Datenbank geöffnet werden soll.
Es gibt 4 Möglichkeiten, eine DBA Datenbank zu öffnen:
Eine existierende Datenbank soll nur lesend geöffnet werden.
Eine existierende Datenbank wird inhaltlich gelöscht.
Eine neue Datenbank soll angelegt werden.
Diese wird automatisch als read-write geöffnet.
Im Gegensatz zu "n" wird eine bereits existierende Datenbank inhaltlich nicht gelöscht, sondern nur für Lese - und Schreibzugriff geöffnet.
Eine existierende Datenbank soll lesend und schreibend geöffnet werden.
handler ist der Name des Handlers, der für den Zugriff auf path benutzt werden soll.
Die (oben durch... gekennzeichneten) optionalen Argumente der Funktion dba_open() werden an ihn übergeben.
dba_open() liefert als Rückgabewert eine positive Zugriffs -"handle "oder FALSE, abhängig davon, ob die Verbindung hergestellt werden konnte oder nicht.
Siehe auch dba_popen() dba_close()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_optimize() optimiert die zugrunde liegende Datenbank, die durch handle spezifiziert wird.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_optimize() hat als Rückgabewert TRUE oder FALSE, abhängig davon, ob die Optimierung erfolgreich war oder ob sie fehlschlug.
Siehe auch dba_sync()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
path ist ein gültiger Pfad in Ihrem Dateisystem.
Es gibt 4 Möglichkeiten, eine DBA Datenbank zu öffnen:
Eine neue Datenbank soll angelegt werden.
Eine existierende Datenbank wird inhaltlich gelöscht.
Diese wird automatisch als read-write geöffnet.
Eine existierende Datenbank soll lesend und schreibend geöffnet werden.
Die (oben durch... gekennzeichneten) optionalen Argumente der Funktion dba_popen() werden an ihn übergeben.
Siehe auch dba_open() dba_close()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dba_replace() ersetzt oder fügt in der durch handle spezifizierten Datenbank einen Datensatz ein, der durch den Schlüssel key und den Wert value beschrieben wird.
key ist der Schlüssel des Eintrags, der eingefügt werden soll.
value ist der Wert, der eingefügt werden soll.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_replace() liefert als Rückgabewert TRUE oder FALSE, abhängig davon, ob die Aktion erfolgreich war oder nicht.
Siehe auch dba_exists(), dba_delete(), dba_fetch(), und dba_insert().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Hängt den per record Hängt den per record definierten Datensatz an die Datenbank an.
Wenn die Anzahl der Einträge im angegebenen Record nicht gleich der Anzahl der Felder in der Datenbank ist, wird dieser Befehl scheitern und FALSE / falsch zurück geben.
Zurück
Zum Anfang
Nach vorne
dBase Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schließt die durch dbase_identifier angegebene Datenbank.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Jedes Array beschreibt das Format eines Feldes der Datenbank.
Jedes Feld-Array besteht aus einem Namen, einem Zeichen zur Festlegung des Feldtyps, der Länge und dem Wert für die Anzahl der Nachkommastellen.
Die verfügbaren Feldtypen sind:
Diese haben keine Länge oder Nachkommstellen.
Memo. (Beachten sie, dass diese von PHP nicht unterstützt werden.) Auch diese haben keine Länge oder Nachkommastellen.
Datum (gespeichert als JJJJMMTT).
Ebenfalls keine Länge und Nachkommastellen.
Zahl.
Diese haben sowohl eine Angabe der Länge als auch der Nachkommastellen.
Hier ist eine Längenangabe erforderlich.
Konnte die Datenbank erfolgreich erzeugt werden, wird ein dbase_identifier zurück gegeben, anderenfalls FALSE / falsch.
Beispiel 1.
Erzeugen einer dBase-Datenbank-Datei
/ / "Datenbank"-Name $dbname =" / tmp / test.dbf"; / / Datenbank -"Definitionen "$def = array (array("Datum", "D"), array("Name", "C", 50), array("Alter", "N", 3, 0), array("Email", "C", 128), array("IstMitglied", "L")); / / Erzeugung if (!dbase_create($dbname, $def)) print" strong Error! / strong ";
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Markiert den Datensatz record in der Datenbank als gelöscht.
Um ihn wirklich (physisch) zu entfernen, müssen sie noch die Funktion dbase_pack() aufrufen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Daten von record in einem Array zurück.
Das Array hat einen bei 0 beginnenden Index und enthält einen zusätzlichen Bereich der mit 'deleted' bezeichnet wird.
Dieser ist auf 1 gesetzt, wenn der Datensatz als gelöscht markiert ist (siehe dbase_delete_record()).
Jedes Feld wird in den entsprechenden PHP-Typ umgesetzt (Datumsangaben werden zu Zeichenketten / Strings).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Daten von record in einem assoziativen Array zurück.
Das Array enthält auch einen assoziativen Bereich, der 'deleted' heisst und auf 1 steht, wenn der Datensatz als gelöscht markiert ist (siehe dbase_delete_record()).
Jedes Feld wird in den entsprechenden PHP-Typ konvertiert (Datumsangaben werden zu Zeichenketten / Strings).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Anzahl der Datenfelder (Spalten) in der angegebenen Datenbank zurück.
Feld-Nummern sind Werte zwischen 0 und dbase_numfields( $db)-1, wogegen die Datensatz-Werte zwischen 1 und dbase_numrecords($db) sein können.
Beispiel 1.
Gebrauch von dbase_numfields()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Anzahl der Datensätze (Zeilen) in der angegebenen Datenbank zurück.
Datensatz-Nummern können Werte zwischen 1 und dbase_numrecords( $db) sein, wogegen Feld-Werte zwischen 0 und dbase_numfields($db )-1 sein können.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Flags entsprechen denen des open( )-Systemaufrufs (normalerweise bedeutet 0 Nur-Lesen, 1 Nur-Schreiben und 2 Lesen und Schreiben).
Gibt einen dbase_identifier für die geöffnete Datenbank zurück oder FALSE / falsch, wenn die Datenbank nicht geöffnet werden konnte.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Betroffen sind alle vorher per dbase_delete_record() als gelöscht markierten Datensätze.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Überschreibt die Daten des Datensatzes record_number mit den Daten aus record in der Datenbank.
Falls die Anzahl der definierten Einträge ungleich der Anzahl der Datenfelder in dem angesprochenen Datensatz ist, wird die Ausführung dieses Befehls abgewiesen und FALSE / falsch zurück gegeben.
dbase_record_number ist ein Integer-Wert, der von 1 bis zur Anzahl der Datensatz-Anzahl der Datenbank reicht (wie er bei Aufruf der Funktion dbase_numrecords() zurück gegeben wird).
Zurück
Zum Anfang
Nach vorne
Nach oben
DBM Datenbankfunktionen
PHP Handbuch
Zurück
Nach vorne
dba_sync() synchronisiert die Datenbank, die durch handle dba_sync() synchronisiert die Datenbank, die durch handle spezifiziert wird.
Dies kann möglicherweise einen physikalischen Schreibvorgang auf den Datenträger auslösen, falls dies unterstützt wird.
handle ist ein Datenbankhandle, das von dba_open() zurückgegeben wurde.
dba_sync() hat als Rückgabewert TRUE oder FALSE, abhängig davon, ob die Aktion erfolgreich war oder nicht.
Siehe auch dba_optimize()
Zurück
Zum Anfang
Nach vorne
Nach oben
Datums - und Zeit-Funktionen
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
DBM Datenbankfunktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt Zugiffssperren auf Datensätze frei und schließt die angegebene DBM Datenbank.
FALSE bei Fehler.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Löscht einen vorhanden Datensatz, der dem key entspricht, aus der Datenbank.
Wenn kein Datensatz zum Löschen gefunden wurde, wird der Returncode FALSE zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn in der DBM Datenbank ein Eintrag mit dem angegebenen Schlüssel key vorhanden ist, wird als Ergebnis TRUE zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Datensatz, der dem key in der DBM Datenbank entspricht.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Es gibt keine Garantie für eine bestimmte Reihenfolge innerhalb der Datenbank, da die Datenbank auf einen Hash-Algorithmus aufgebaut ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schreibt den Datensatz mit angegebenen Schlüssel in die Datenbank.
nur Leseberechtigung.
Ein Eintrag mit dem angegebenen Schlüssel existiert bereits in der Datenbank.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den auf key Gibt den auf key folgenden Schlüssel an den Aufrufer zurück.
Um alle Schlüssel einer DBM Datenbank auszulesen, wird dbmfirstkey(), gefolgt von wiederholten Aufrufen von dbmnextkey() verwendet, wie im folgenden Script:
Beispiel 1.
Ausgeben aller Schlüssel mit Datensätzen einer DBM Datenbank
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das zweite Argument ist der Modus, mit dem die DBM Datenbank geöffnet werden soll.
Eine existierende Datenbank soll nur lesend geöffnet werden.
Diese wird automatisch als read-write geöffnet.
Eine neue Datenbank soll angelegt werden.
Im Gegensatz zu "n" wird eine bereits existierende Datenbank inhaltlich nicht gelöscht, sondern nur "read-writeable "geöffnet.
Eine existierende Datenbank soll lesend und schreibend geöffnet werden.
Dieser Identifier muss für alle weiteren Aufrufe, die an die DBM Datenbank getätigt werden, mitgegeben werden.
Wenn die NDBM Unterstützung aktiviert wird, werden jeweils zwei Dateien filename.dir und filename.pag erzeugt.
Bitte beachten Sie, dass PHP seine Dateisperren zusätzlich zu den vorhanden DBM-Bibliothekseigenen Routinen verwendet.
Wenn Sie mehr über DBM-Datenbanken wissen wollen, sehen Sie in den UNIX-Manualseiten nach, oder schauen bei GNU 's GDBM nach.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schreibt einen Datensatz mit dem angegebenen Satzschlüssel in die Datenbank bzw. ersetzt ihn.
Ansonsten wird ein Datensatz mit mit den Schlüssel neu angelegt.
Zurück
Zum Anfang
Nach vorne
Nach oben
dbx Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
Direkte Ein - / Ausgabe Funktionen
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1. dbx_close()
?php $link = dbx_connect( DBX_MYSQL, "localhost", "db", "username", "password") or die ("Fehler beim Verbinden"); print("Verbindung hergestellt"); dbx_close($link);?
Anmerkung:
Konsultieren Sie bitte auch die modulspezifische Dokumentation.
Siehe auch dbx_connect().
Zurück
Zum Anfang
Nach vorne
dbx Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ist der erste Wert größer oder kleiner als der zweite, wird 1 bzw. -1 zurückgegeben (oder umgekehrt, wenn der Parameter flag auf DBX_CMP_DESC gesetzt ist). dbx_compare() ist eine Hilfsfunktion für dbx_sort(), um das Erstellen bzw.
Der Parameter flags spezifiziert die Vergleichsrichtung:
DBX_CMP_ASC - aufsteigende Reihenfolge
DBX_CMP_DESC - absteigende Reihenfolge
DBX_CMP_NATIVE - keine Typenkonvertierung
DBX_CMP_TEXT - vergleicht die Werte als Strings
DBX_CMP_NUMBER - vergleicht die Werte numerisch
Beispiel 1. dbx_compare()
?php function user_re_order ($a, $b) {$rv = dbx_compare ($a, $b, "parentid", DBX_CMP_DESC); if (!$rv) {$rv = dbx_compare ($a, $b, "id", DBX_CMP_NUMBER);} return $rv;} $link = dbx_connect (DBX_ODBC, "", "db", "username", "password") or die ("Fehler beim Verbinden"); $result = dbx_query ($link, "SELECT id, parentid, description FROM table ORDER BY id"); / / die Daten in $result sind nun nach id gereiht dbx_sort ($result, "user_re_order"); / / die Daten in $result sind nun nach parentid (absteigend) gereiht, / / und dann nach id dbx_close ($link);?
Siehe auch dbx_sort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dbx_connect() gibt bei Erfolg ein Objekt, oder im Fehlerfall FALSE zurück.
Konnte eine Verbindung hergestellt, jedoch keine Datenbank ausgewählt werden, wird die Verbindung wieder geschlossen, und FALSE zurückgegeben.
Wird der Parameter persistent auf DBX_PERSISTENT gesetzt, wird eine persistente Verbindung hergestellt.
Der Parameter module Der Parameter module kann entweder einen String, oder eine Konstante enthalten, auch wenn letzteres vorgezogen wird.
Die möglichen Werte sind nachstehend aufgelistet, aber bedenken Sie bitte, dass diese nur funktionieren, wenn das Modul gerade geladen ist.
DBX_MYSQL oder "mysql"
DBX_ODBC oder "odbc"
DBX_PGSQL oder "pgsql"
DBX_MSSQL oder "mssql"
DBX_FBSQL oder "fbsql" (seit PHP 4.1.0 verfügbar)
DBX_SYBASECT oder "sybase_ct" (seit PHP 4.2.0 verfügbar)
DBX_OCI8 oder "oci8" (seit PHP 4.3.0 verfügbar)
Die Parameter host, database, username und password werden erwartet, werden aber abhängig von den Verbindungsfunktionen für das abstrahierte Modul nicht immer verwendet.
Das zurückgegebene Objekt hat drei Eigenschaften:
Das ist der Name der derzeit ausgewählten Datenbank.
Das ist ein gültiges Handle für die verbundene Datenbank, und als solche kann es wenn nötig auch in modulspezifischen Funktionen verwendet werden.
$link = dbx_connect (DBX_MYSQL, "localhost", "db", "username", "password"); mysql_close ($link - handle); / / dbx_close($link) wäre hier besser
Dies ist die oben erwähnte Modulnummer, und wird nur dbx-intern verwendet.
Beispiel 1. dbx_connect()
?php $link = dbx_connect (DBX_ODBC, "", "db", "username", "password", DBX_PERSISTENT) or die ("Fehler beim Verbinden"); print ("Verbindung hergestellt"); dbx_close ($link);?
Anmerkung:
Konsultieren Sie bitte auch die modulspezifische Dokumentation.
Siehe auch dbx_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
MySQL-Modul) zurück.
Bestehen mehrere Verbindungen zu dem gleichen Modul, wird nur der letzte Fehler zurückgegeben.
Bestehen Verbindungen zu verschiedenen Modulen, wird der letzte Fehler von dem im Parameter link_identifier angegebenen Modul zurückgegeben.
Beispiel 1. dbx_error()
?php $link = dbx_connect( DBX_MYSQL, "localhost", "db", "username", "password") or die ("Fehler beim Verbinden"); $result = dbx_query($link, "select id from non_existing_table"); if ($result == 0) {echo dbx_error ($link);} dbx_close ($link);?
Anmerkung:
Konsultieren Sie bitte auch die modulspezifische Dokumentation.
Die Fehlermeldung des Microsoft SQL Server ist übrigens das Ergebnis der Funktion mssql_get_last_message().
Die Fehlermeldung für Oracle (oci8) ist (dzt. noch) nicht implementiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. dbx_escape_string() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
dbx_query() gibt bei Erfolg ein Objekt oder 1 zurück, oder 0 im Fehlerfall.
Das Objekt wird nur zurückgegeben, wenn die in sql_statement angegebene Abfrage eine Ergebnisliste liefert.
Beispiel 1.
Wie mit dem gelieferten Wert umgegangen wird
?php $link = dbx_connect( DBX_ODBC, "", "db", "username", "password") or die("Fehler beim Verbinden"); $result = dbx_query($link, 'SELECT id, parentid, description FROM table'); if (is_object($result)) {/ /... tue hier irgendetwas, detaillierte Beispiele siehe unten... / / erst die Ausgabe der Feldnamen und Typen / / dann die Ausgabe einer Tabelle mit den gelieferten Werten} else if ($result == 1) {echo("Abfrage wurde erfolgreich ausgeführt, jedoch keine Ergebnisse");} else {exit("Fehler bei Abfrage");} dbx_close($link);?
Der Parameter flags Der Parameter flags wird verwendet, um die Menge der zu liefernden Informationen zu steuern.
Die folgenden Konstanten können mit dem Bit-Operator (_BAR_) beliebig kombiniert werden.
Die Flags DBX_COLNAMES_* heben die Einstellungen dbx.colnames_case in der php.ini auf.
Dieser Flag ist immer gesetzt, d.h. dass zurückgegebene Objekt hat eine Eigenschaft data, welche aus einem zweidimensionalen, numerisch indizierten Array besteht.
Datensatz -) Nummer, und 3 steht für die Spalten - (bzw.
Die erste Reihe und Spalte haben den Index 0.
Ist DBX_RESULT_ASSOC ebenfalls angegeben, so enthält das zurückgegebene Objekt auch Informationen im Zusammenhang mit DBX_RESULT_INFO, selbst wenn es nicht angegeben wurde.
Liefert Informationen über Spalten, wie Feldnamen und Feldtypen.
Dies bewirkt, dass in der data Eigenschaft des zurückgegebenen Objektes auf die Werte eines Feldes mit den entsprechenden Spaltennamen als Schlüssel zugegriffen werden kann.
Assoziierte Ergebnisse sind eigentlich Referenzen zu den numerisch indizierten Daten, weshalb eine Änderung von data[ 0][0] auch den Inhalt von data[0]['feldname_für_erste_spalte'] betrifft.
DBX_RESULT_INDEX _BAR_ DBX_RESULT_INFO _BAR_ DBX_RESULT_ASSOC - dies ist Standard, wenn flags nicht angegeben ist.
Das zurückgegebene Objekt hat abhängig von flags vier oder fünf Eigenschaften:
Das ein gültiges Handle für die verbundene Datenbank, und als solche kann es (wenn nötig) auch in modulspezifischen Funktionen verwendet werden.
Reihen (oder Datensätze).
$result = dbx_query ($link, 'SELECT id FROM table'); echo $result - rows; / / Anzahl der Datensätze echo $result - cols; / / Anzahl der Felder
Dies wird nur zurückgegeben, wenn im Parameter flags entweder DBX_RESULT_INFO oder DBX_RESULT_ASSOC spezifiziert sind.
Es ist ein zweidimensionales Array mit zwei Reihen (name und type), welches die Spalteninformationen enthält.
Auflistung von Name und Typ jedes Feldes
Diese Eigenschaft enthält die aktuellen Ergebnisdaten, möglicherweise auch mit den Spaltennamen assoziiert, was jedoch vom Parameter flags abhängig ist.
Wenn DBX_RESULT_ASSOC gesetzt ist, können Sie $result - data[ 2]["feldname"] verwenden.
Ausgabe des Inhaltes der data Eigenschaft in eine HTML Tabelle
Anmerkung:
Konsultieren Sie bitte auch die modulspezifische Dokumentation.
Spaltennamen für Abfragen an einer Oracle Datenbank werden in Kleinbuchstaben zurückgegeben.
Siehe auch dbx_escape_string() und dbx_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Anmerkung:
Wenn möglich ist es besser, die ORDER BY SQL Klausel anstatt von dbx_sort() zu verwenden.
Beispiel 1. dbx_sort()
?php function user_re_order ($a, $b) {$rv = dbx_compare ($a, $b, "parentid", DBX_CMP_DESC); if (!$rv) {$rv = dbx_compare ($a, $b, "id", DBX_CMP_NUMBER);} return $rv;} $link = dbx_connect (DBX_ODBC, "", "db", "username", "password") or die ("Fehler beim Verbinden"); $result = dbx_query ($link, "SELECT id, parentid, description FROM tbl ORDER BY id"); / / Die Daten in $result sind nun nach id geordnet dbx_sort ($result, "user_re_order"); / / Die Daten in $result sind nun nach parentid (absteigend) geordnet, / / dann nach id dbx_close ($link);?
Siehe auch dbx_compare().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dcgettext() erlaubt es, den Textbereich für die Wirkungsdauer von einem gettext() Die Funktion dcgettext() erlaubt es, den Textbereich für die Wirkungsdauer von einem gettext() neu zu setzen.
Man kann ausserdem eine Kategorie angeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
Oracle 8 Funktionen
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Beispiel 1. debug_backtrace() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schaltet den internen PHP-Debugger aus.
Der Debugger befindet sich noch in der Entwicklung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schaltet den internen PHP-Debugger, zeigend auf address, ein.
Der Debugger befindet sich noch in der Entwicklung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert eine binäre Repräsentation von number als String zurück.
Der größte konvertierbare Wert für number ist dezimal 4294967295, dies entspricht (2 hoch 32 )-1 und liefert einen String aus 32 Einsen.
Siehe auch bindec() sowie dechex() und decoct().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der größte konvertierbare Wert für number ist dezimal 2147483647, dies entspricht (2 hoch 32)-1 und liefet als Ergebnis den String "7fffffff "zurück.
Siehe auch hexdec() sowie decbin() und decoct().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert eine oktale (zur Basis 8) Repräsentation von number Diese Funktion liefert eine oktale (zur Basis 8) Repräsentation von number als String zurück.
Der größte konvertierbare Wert für number ist dezimal 2147483647, dies entspricht (2 hoch 32)-1 und liefet als Ergebnis den String "17777777777 "zurück.
Siehe auch octdec() sowie decbin() und dechex().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn die angegebene Konstante name existiert, wird TRUE zurück gegeben, ansonsten FALSE.
Siehe auch define() und den Abschnitt Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Definiert eine Konstante, ähnlich wie bei Variablen, ausser das:
Eine Konstante nicht mit einem '$' beginnt;
Auf eine Konstante überall zugegriffen werden kann, ohne allerdings den Auswertungsregeln von Variablen zu unterliegen;
Eine Konstante nicht umdefiniert oder zurück gesetzt werden kann, wenn sie einmal gesetzt wurde und
eine Konstante nur eindimensionale Werte (also keine Arrays) enthalten kann.
Der Konstanten-Name wird durch name angegeben.
Der Wert wird durch value gesetzt.
Wenn der optional mögliche dritte Parameter case_insensitive den Wert 1 hat, wird die Konstante zwischen Groß - und Kleinschreibung unterschieden.
Die Funktionalität des dritten Parameters scheint z.Zt. noch nicht richtig umgesetzt worden zu sein (Stand 03 / 2000).
?php define ("KONSTANTE", "Hallo Welt ."); echo KONSTANTE; / / outputs "Hallo Welt .";?
Siehe auch unter defined() und im Abschnitt Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Initialisiert alle Konstanten, die in den SysLog-Funktionen Verwendung finden.
Siehe auch openlog(), syslog() und closelog().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion wandelt den übergebenen Winkel von Grad in Bogenmaß.
Siehe auch rad2deg().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses ist ein "Dummy Handbuch Eintrag" für diejenigen, die nach einer Funktion wie unlink() oder unset() an der falschen Stelle suchen.
Siehe auch unlink() um Dateien zu löschen, unset() um Variablen zu löschen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dgettext() erlaubt es, den Textbereich für die Wirkungsdauer von einem gettext() neu zu setzen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieser Sprach-Konstrukt erzeugt eine Meldung und bricht das Parsing / die Abarbeitung des Skriptes ab (ohne Rückkehrmöglichkeit).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dio_close() schliesst die Datei fd.
Zurück
Zum Anfang
Nach vorne
Direkte Ein - / Ausgabe Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dio_fcntl() führt eine Aktion cmd an der Datei fd aus.
Einige Aktionen cmd benötigen das zusätzliche Argument args.
arg ist ein assoziatives Array, wenn cmd F_SETLK oder F_SETLLW ist.
Es hat folgende Einträge:
"start" - offset an dem der Lock beginnt
"length" - Länge des gelockten Bereichs
Kann folgende Werte annehmen:
SEEK_SET, SEEK_END and SEEK_CUR
"type" - Locktyp:
F_RDLCK (read lock), F_WRLCK (write lock) oder F_UNLCK (unlock)
F_SETLK - Setzt oder löscht einen Lock.
Ist der Bereich bereits von einem anderen Prozess gelockt, so liefert die Funktion dio_fcntl() -1 zurück.
F_SETLKW - wie F_SETLK, jedoch im Falle, dass der Bereich von einem anderen Prozess gelockt wird, wartet dio_fcntl() auf die Freigabe des Locks.
F_GETLK - dio_fcntl() liefert ein assioziatives Array zurück (Beschreibung siehe oben), falls ein anderer Prozess den Bereich gelockt hat.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Im Fehlerfall liefert dio_open() -1 zurück.
Ist der Parameter flags O_CREAT, so gibt der optionale Parameter mode Ist der Parameter flags O_CREAT, so gibt der optionale Parameter mode die Dateirechte an.
Der Parameter flags kann eine der folgenden Zugriffsmethoden sein:
O_RDONLY - öffnet die Datei für Lesezugriff
O_WRONLY - öffnet die Datei für Schreibzugriff
O_RDWR - öffnet die Datei für Schreib - und Lesezugriff
O_CREAT - erzeugt die Datei, falls diese nicht existiert
O_EXCL - in Kombination mit O_CREAT wird ein Fehler (-1) zurückgegeben, wenn die Datei bereits existiert
O_TRUNC - falls die Datei bereits existiert, und sie für Schreibzugriff geöffnet wird, wird diese auf die Grösse 0 zurückgesetzt
O_APPEND - setzt den Zeiger für Schreiboperationen an das Ende der Datei
O_NONBLOCK - Setzt den Modus auf "nonblocking"
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dio_read() liest n Bytes aus der Datei fd und gibt diese zurück.
Wird der optionale Parameter n nicht angegeben, wird standardmässig ein 1K Block gelesen und zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dio_seek() setzt den Dateizeiger der Datei fd.
Der whence gibt dabei an, wie die Position pos interpretiert werden soll:
SEEK_SET - gibt an, dass pos die Position vom Anfang der Datei ist
SEEK_CUR - gibt an, dass pos die Position relativ von der momentanen Dateizeigerposition ist.
SEEK_END - gibt an, dass pos die Position relativ zum Dateiende ist.
Eine negative Zahl setzt den Dateizeiger innerhalb der Datei, ein positvier Wert bewirkt, dass die Datei vom Ende bis zur neuen Position mit Nullen aufgefüllt wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Array enthält folgende Einträge:
"device" - Device
"inode" - Inode
"mode" - Modus
"nlink" - Anzahl Links
"uid" - Benutzer Id
"gid" - Gruppentyp
"device_type" - Device Typ
"size" - Grösse in Bytes
"blocksize" - Blockgrösse
"blocks" - Anzahl allocierter Blöcke
"atime" - Letzter Zugriff
"mtime" - Letze Modifikation
"ctime" - Letzte Änderung
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dio_truncate() schneidet die Datei fd nach offset ab.
War die Datei ursprünglich grösser, so gehen die Daten verloren.
War sie kleiner so wird sie mit Nullen aufgefüllt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion dio_write() schreibt bis zu len Bytes an Daten data in die Datei fd.
Wird der optionale Parameter len nicht angegeben, so werden alle Daten data in die Datei geschrieben. dio_write() liefert die Anzahl der Bytes zurück, die in die Datei geschrieben wurden.
Zurück
Zum Anfang
Nach vorne
Nach oben
Verzeichnis-Funktionen
PHP Handbuch
Zurück
Nach vorne
Bei einer vollständigen Pfadangabe gibt diese Funktion den Verzeichnispfad zurück.
Unter Windows wird sowohl der Slash (/) als auch der Backslash (\) als Trennzeichen bei Pfadangaben benutzt.
Unter anderen Betriebssystemen hingegen nur der Slash (/).
Beispiel 1. dirname()
$path = "/ etc / passwd"; $file = dirname ($path); / / $file enthält den Wert" / etc "
Anmerkung:
Seit PHP 4.0.3 entspricht dirname() dem POSIX-Standard.
Im Grunde heißt das, dass wenn keine Slashes in path vorhanden sind, wird ein Punkt ('.') zurückgegeben, womit das aktuelle Verzeichnis gemeint ist.
Andernfalls enthält der zurückgegebene String path, jedoch ohne den hinteren / component.
Beachten Sie, dass Sie von dirname() oft einen Slash oder Punkt zurückbekommen, wo die alte Funktionalität einen leeren String lieferte.
Siehe auch basename(), pathinfo() und realpath().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt den freien Speicherplatz eines Verzeichnisses in Byte zurück.
Beispiel 1. disk_free_space()
$df = disk_free_space( "/ "); / / $df hält die Anzahl an freien Bytes / / im Verzeichnis" / "
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Von diesem Alias wird abgeraten, benutzen Sie stattdessen disk_free_space().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anhand des übergebenen Strings mit dem Verzeichnisnamen gibt diese Funktion die Anzahl Bytes auf dem korrespondierenden Dateisystem oder der Disk Partition zurück.
Beispiel 1. disk_total_space()
$df = disk_total_space( "/ "); / / $df enthält die Gesamtanzahl / / verfügbarer Bytes in" / "
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Lädt die mittels dem Parameter library angegebene PHP-Erweiterung.
Der Parameter library ist nur der Dateiname der zu ladenden Erweiterung (Extension), welcher von Ihrer Plattform abhängig ist.
Z.B. würde die Extension sockets (wenn als shared module kompiliert, nicht standardmäßig!) auf Unix Plattformen sockets.so, und auf Windows Plattformen php_sockets.dll heißen.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Ist die Funktionalität des Ladens von Modulen nicht verfügbar (siehe Anmerkung), oder wurde sie deaktiviert (entweder durch Deaktivieren von enable_dl oder durch aktivieren von safe_mode in der php.ini), wird ein E_ERROR ausgegeben, und die Ausführung gestoppt.
Scheitert dl() weil die angegebene Erweiterung nicht geladen werden konnte, wird zusätzlich zu FALSE eine E_WARNING Meldung ausgegeben.
Verwenden Sie extension_loaded() um zu testen, ob die gewünschte Erweiterung bereits verfügbar ist oder nicht.
Dies funktioniert sowohl bei eingebauten, als auch bei dynamisch geladenen Erweiterungen (entweder durch php.ini, oder mittels dl()).
Beispiel:
Das Verzeichnis, von wo aus die Erweiterung geladen wird, hängt von Ihrer Plattform ab:
Windows - Wenn nicht explizit in der php.ini angegeben, wird die Erweiterung standardmäßig von c:\php4\extensions\ geladen.
Unix - Wenn nicht explizit in der php.ini angegeben, hängt das standardmäßige Verzeichnis ab von:
ob PHP mit --enable-debug erstellt wurde oder nicht
ob PHP mit (experimentellem) ZTS (Zend Thread Safety) Unterstützung erstellt wurde oder nicht
der aktuellen internen ZEND_MODULE_API_NO (Zend interne Modul API Nummer, welche im Grunde das Datum der letzten größeren Modul API Änderung darstellt, z.B.
20010901).
In solch einer Umgebung verwenden Sie bitte die extensions Anweisung in Ihrer php.ini.
Die CGI und CLI Module sind davon jedoch nicht betroffen!
Siehe auch Extension Loading Directives and extension_loaded().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Überprüft die DNS Datensätze passend zu dem eingegeben Internet Host Namen oder der IP-Adresse.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ermittelt die MX Datensätze passend zu dem eingegeben Internet Host Namen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Tabelle 1.
Anmerkung:
Tabelle 2.
Anmerkung:
Beispiel 1.
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt den Namen eines Attributes zurück.
Siehe auch DomAttribute_value().
Zurück
Zum Anfang
Nach vorne
DOM XML Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Eine detailierte Erklärung finden Sie im DOM-Standard
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt den Wert eines Attributes zurück.
Siehe auch DomAttribute_name().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Fügt einem DOM-Dokument ein Wurzelelement hinzu und gibt das neue Element zurück.
Der Elementname ist in dem passenden Parameter übergeben.
Beispiel 1.
Einen HTML-Header generieren.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert einen neue Instanz der Klasse DomAttribute zurück.
Der Name des Attributes ist der Wert des ersten Parameters.
Der Wert des Attributes ist der Wert des zweiten Parameters.
Dieses Element wird im Dokument nicht auftauchen bis es mit DomNode_append_child() eingefügt wurde.
Der Rückgabewert ist false, wenn ein Fehler aufgetreten ist.
Siehe auch DomNode_append_child(), DomDocument_create_element(), DomDocument_create_text(), DomDocument_create_cdata_section(), DomDocument_create_processing_instruction(), DomDocument_create_entity_reference(), DomNode_insert_before().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine neue Instanz der Klasse DomCData zurück.
Der Inhalt des cdata-Element ist der Wert des übergebenen Parameters.
Diese Element wird im Dokument nicht auftauchen, bis es mit DomNode_append_child() eingefügt wurde.
Der Rückgabewert ist false, wenn ein Fehler auftritt.
Siehe auch DomNode_append_child(), DomDocument_create_element(), DomDocument_create_text(), DomDocument_create_attribute(), DomDocument_create_processing_instruction(), DomDocument_create_entity_reference(), DomNode_insert_before().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine neue Instanz der Klasse DomComment zurück.
Der Inhalt des Kommentar ist der Wert des übergebenen Parameters.
Dieses Element wird im Dokument nicht auftauchen, bis es mittels DomNode_append_child() eingefügt wurde.
Der Rückgabewert ist false wenn ein Fehler auftritt.
Siehe auch DomNode_append_child(), DomDocument_create_element(), DomDocument_create_text(), DomDocument_create_attribute(), DomDocument_create_processing_instruction(), DomDocument_create_entity_reference(), DomNode_insert_before().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine neue Instanz der Klasse DomEntityReference zurück.
Der Inhalt der Entitätsreferenz ist der Wert des übergebenen Parameters.
Dieses Element wird im Dokument nicht auftauchen, bis es mit DomNode_append_child() eingefügt wurde.
Der Rückgabewert ist false wenn ein Fehler auftritt.
Siehe auch DomNode_append_child(), DomDocument_create_element(), DomDocument_create_text(), DomDocument_create_cdata_section(), DomDocument_create_processing_instruction(), DomDocument_create_attribute(), DomNode_insert_before().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine neue Instanz der der Klasse DomCData zurück.
Der Inhalt der Ausführungsanweisung ist der Wert des übergebenen Parameters.
Dieses Element wird solange nicht im Dokument auftauchen, bis es mittels DomNode_append_child() eingefügt wurde.
Der Rückgabewert ist false wenn ein Fehler auftritt.
Siehe auch DomNode_append_child(), DomDocument_create_element(), DomDocument_create_text(), DomDocument_create_cdata_section(), DomDocument_create_attribute(), DomDocument_create_entity_reference(), DomNode_insert_before().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine neue Instanz der Klasse DomText zurück.
Der Inhalt des Textes ist der Wert des übergebenen Parameters.
DomNode_append_child().
Der Rückgabewert ist false wenn ein Fehler auftritt.
Siehe auch DomNode_append_child(), DomDocument_create_element(), DomDocument_create_comment(), DomDocument_create_text(), DomDocument_create_attribute(), DomDocument_create_processing_instruction(), DomDocument_create_entity_reference(), DomNode_insert_before().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein Objekt der Klasse DomDocumentType zurück.
In PHP-Versionen vor 4.3 war dies die Klasse Dtd, der DOM-Standard kennt diese Klasse jedoch nicht.
Siehe auch die Methoden der Klasse DomDocumentType.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt das Wurzelelement eines Dokumentes zurück.
Das folgende Beispiel gibt ausschliesslich das Element mit dem Namen CHAPTER zurück und gibt es aus.
Das andere Element - der Kommentar - wird nicht zurückgegeben.
Beispiel 1.
Das Wurzelelement zurückliefern
?php include( "example.inc"); if(!$dom = domxml_open_mem($xmlstr)) {echo "Fehler beim parsen des Dokumentes\n"; exit;} $root = $dom - document_element(); print_r($root);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Generiert ein XML-Dokument aus der DOM Repräsentation.
Diese Funktion wird normalerweise nach dem Zusammenbau eines neuen DOM-Dokumentes aufgerufen.
Der Parametter format gibt an, ob die Ausgabe formatiert erfolgen soll oder nicht.
Der erste Parameter gibt den Dateinamen an, mittels des zweiten Parameters wird entschieden, ob die Datei komprimiert werden soll oder nicht. filename and the second parameter, whether it should be compressed or not.
Beispiel 1.
Generierung eines HTML-Headers
?php $doc = domxml_new_doc( "1.0"); $root = $doc - create_element("HTML"); $root = $doc - append_child($root); $head = $doc - create_element("HEAD"); $head = $root - append_child($head); $title = $doc - create_element("TITLE"); $title = $head - append_child($title); $text = $doc - create_text_node("Das ist der Titel"); $text = $title - append_child($text); $doc - dump_file(" / tmp / test.xml", false, true);?
Siehe auch DomDocument_dump_mem() DomDocument_html_dump_mem().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Generiert ein XML-Dokument aus der DOM-Repräsentation.
Diese Funktion wird normalerweise aufgerufen, nachdem ein neues DOM Dokument generiert wurde.
Der Parameter format gibt an, ob die Ausgabe formatiert erfolgen soll.
Beispiel 1.
Generiere einen HTML-Header
?php $doc = domxml_new_doc( "1.0"); $root = $doc - create_element("HTML"); $root = $doc - append_child($root); $head = $doc - create_element("HEAD"); $head = $root - append_child($head); $title = $doc - create_element("TITLE"); $title = $head - append_child($title); $text = $doc - create_text_node("Das ist der Titel"); $text = $title - append_child($text); echo "PRE"; echo htmlentities($doc - dump_mem(true)); echo "/ PRE";?
Anmerkung:
Der erste Parameter wurde in PHP 4.3.0 hinzugefügt.
Siehe auch DomDocument_dump_file(), DomDocument_html_dump_mem().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ähnlich der Funktion DomDocument_get_elements_by_tagname(), sucht jedoch nach einem Element mit einer bestimmten ID.
Die akutelle Implementierung führt lediglich eine simple XPath-Suche nach "/ /*[@ID = '%s']" durch.
Das entspricht nicht dem DOM-Standard, der null erwartet, wenn unbekannt ist, welches Element den Typ ID trägt.
Dieses Verhalten wird in Zukunft dem Standard angepasst werden, sie sollten sich also nicht auf dieses Verhalten verlassen.
Siehe auch DomDocument_get_elements_by_tagname()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch DomDocument_add_root()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Generiert ein HTML-Dokument aus der aktuellen DOM-Repräsentation.
Diese Funktion wird normalerweise aufgerufen, nachdem ein DOM-Dokument erzeugt wurde.
Beispiel 1.
Generierung eins HTML-Headers
?php $doc = domxml_new_doc( "1.0"); $root = $doc - create_element("HTML"); $root = $doc - append_child($root); $head = $doc - create_element("HEAD"); $head = $root - append_child($head); $title = $doc - create_element("TITLE"); $title = $head - append_child($title); $text = $doc - create_text_node("Das ist der Titel"); $text = $title - append_child($text); echo "PRE"; echo htmlentities($doc - html_dump_mem()); echo "/ PRE";?
See also DomDocument_dump_file(), DomDocument_html_dump_mem().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Beispiel 2.
Beispiel 3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
.NET Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion interpretiert ihr Argument als Fließkommazahl und liefert den Wert als double zurück.
Als var können beliebige skalare Ausdrücke, aber keine Arrays oder Objekte übergeben werden.
$var = '122.34343The'; $double_value_of_var = doubleval ($var); print $double_value_of_var; / / Ausgabe:
Siehe auch intval(), strval(), settype() und Typ-Veränderung.
Zurück
Zum Anfang
Nach vorne
Variablen-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert das aktuelle Schlüssel - Wertepaar des Arrays array, und erhöht den Array Cursor.
Dieses Paar wird als Array mit 4 Elementen zurückgegeben, und zwar mit den Schlüsseln 0, 1, key, und value.
Die Elemente 0 und key enthalten den Namen des Schlüssels, 1 und value den Wert.
Zeigt der interne Zeiger hinter das Ende der Array-Inhalte, gibt each() FALSE zurück.
Beispiel 1. each() Beispiele
$bar enthält nun die folgenden Schlüssel / Wert Paare:
$bar enthält nun die folgenden Schlüssel / Wert Paare:
each() wird typischerweise in Verbindung mit list() verwendet, um ein Array durchzugehen; zum Beispiel $_POST:
Beispiel 2.
Durchgehen von $_POST mit each()
echo "Werte, die mit der POST Methode übertragen wurden: br /"; reset ($_POST); while (list ($key, $val) = each ($_POST)) {echo "$key = $val br / \n";}
Nachdem each() ausgeführt wurde, bleibt der Array Cursor beim nächsten Element des Arrays, oder wenn am Ende des Arrays angelangt, bei dem letzten Element.
Sie müssen reset() verwenden, wenn Sie das Array erneut mittels each durchgehen wollen.
Siehe auch key(), list(), current(), reset(), next(), prev() und foreach.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wird kein Jahr angegeben, so wird der Zeitpunkt für das laufende Jahr bestimmt.
Warnung
Liegt das angegebene Jahr vor 1970 oder nach 2037 (auf 32 bit-Systemen), so wird eine Warnung ausgegeben und das Ergebnis ist nicht gültig.
Beispiel 1. easter_date() Beispiel
April 1999" * / echo date ("M-d-Y", easter_date(2000)); / * "23.
April 2001 "* /
März, festgelegt.
Der hier genutzte Algorithmus wurde um das Jahr 532 von Dionysius Exiguus eingeführt.
Bis zum Jahr 1752 wird nach dem Julianischen Kalender ein einfacher 19jähriger Zyklus für die Bestimmung der Mondphasen benutzt.
Hierdurch wurden zwei Korrekturfaktoren eingeführt, um den Zyklus genauer abzubilden.
(Der Code basiert auf einen C-Programm von Simon Kershaw, webmaster@ely.anglican.org)
Siehe auch easter_days() für die Bestimmung von Osterfesten vor 1970 oder nach 2037.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ermittelt den Abstand in Tagen zwischen der Frühlings-Tagundnachtgleiche und dem Ostersonntag im durch year angegebenen Jahr.
Wird kein Jahr angegeben, so wird der Wert für das laufende Jahr bestimmt.
Diese Funktion kann im Gegensatz zu easter_date() das Osterfest auch in Jahren vor 1970 und nach 2037 bestimmen.
Beispiel 1. easter_date() Beispiel
Siehe auch easter_date().
Zurück
Zum Anfang
Nach vorne
Nach oben
frenchtojd
PHP Handbuch
Zurück
Nach vorne
OS / 390, BS2000).
Die Funktion setzt die EBCDIC-kodierte Zeichenkette ebcdic_str in ihre äquivalente ASCII-Darstellung um (binärfest), und liefert das konvertierte Ergebnis zurück.
Siehe auch die Umkehrfunktion ascii2ebcdic().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt alle als Parameter angegebenen Strings aus.
Deshalb brauchen Sie keine Klammern zu verwenden.
Wenn Sie echo mehr als einen Parameter übergeben wollen, dürfen Sie diese nicht mit Klammern umgeben.
Es ist nicht möglich, echo() in einem Variablen-Funktionen Kontext zu nutzen.
Beispiel 1. echo() examples
?php echo "Hallo Welt"; echo "Dies umfasst mehrere Zeilen.
Die Zeilenumbrüche werden ebenfalls ausgegeben ."; echo "Dies umfasst\nmehrere Zeilen.
Die Zeilenumbrüche werden\nebenfalls ausgegeben ."; echo "Escape Zeichen werden \"so realisiert\" ."; / / Sie können Variablen innerhalb eines echo Statements verwenden $foo = "foobar"; $bar = "barbaz"; echo "foo ist $foo"; / / foo ist foobar / / Einfache Anführungszeichen geben den Variablennamen aus, nicht den Inhalt echo 'foo is $foo'; / / foo is $foo / / Wenn Sie nicht auch andere Zeichen ausgeben, / / können Sie auch nur Variablen verwenden echo $foo; / / foobar echo $foo,$bar; / / foobarbarbaz echo END Dies verwendet die "here document "Syntax, um mehrere Zeilen mit $variablen Interpolation auszugeben.
Beachten Sie, dass das sich das here document Endezeichen in einer Zeile mit nur einem Strichpunkt ohne extra Leerzeichen befinden muss!
END; / / echo ist keine Funktion, weshalb der folgende Code ungültig ist. ($some_var)? echo('true'): echo('false'); / / Aber folgende Beispiele funktionieren: ($some_var)? print('true'): print('false'); / / print ist eine Funktion echo $some_var? 'true': 'false'; / / Das Statement herumgedreht?
echo() kann auch in einer Kurzform verwendet werden, indem Sie unmittelbar nach dem öffnenden Tag ein Gleichheitszeichen setzen.
Anmerkung:
Diese Kurzform funktioniert nur, wenn die Konfigurationsoption short_open_tag aktiviert ist.
Siehe auch print(), printf() und flush().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert TRUE, wenn eine Variable nicht definiert, leer oder gleich 0 ist, ansonsten FALSE.
empty() kann nur auf Variablen, nicht aber auf Ausdrücke angewandt werden.
Siehe auch isset() und unset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
end() rückt den internen Zeiger von array bis zum letzten Element vor, und gibt dieses Element zurück.
Beispiel 1.
Ein einfaches end() Beispiel
Siehe auch current(), each(), next() und reset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Die Funktion preg_match(), die eine zu Perl kompatible Syntax regulärer Ausdrücke verwendet, ist häufig die schnellere Alternative zu ereg().
Wenn Übereinstimmungen mit eingeklammerten Teilzeichenketten von Suchmuster gefunden werden und die Funktion mit dem dritten Argument regs aufgerufen wurde, werden die Übereinstimmungen in den Elementen des Arrays regs gespeichert. $regs[ 1] enthält dann die Teilzeichenkette der ersten Klammer, $regs[2] die Teilzeichenkette der zweiten usw. $regs[0] enthält bei Übereinstimmung mit Zeichenkette eine Kopie der kompletten Zeichenkette.
Bis (und inklusive) PHP 4.1.0 wird $regs mit genau zehn Elementen gefüllt, auch wenn es tatsächlich mehr oder weniger Übereinstimmungen mit den eingeklammerten Teilzeichenketten gibt.
Dies wirkt sich aber nicht auf ereg() s Fähigkeit aus, mehr übereinstimmende Teilzeichenketten zu finden.
Falls keine Übereinstimmungen gefunden werden, wird $regs nicht von ereg() verändert.
Die Suche unterscheidet zwischen Groß und Kleinschreibung.
Gibt TRUE zurück, wenn in Zeichenkette eine Übereinstimmung mit Suchmuster gefunden wurde oder FALSE, wenn keine Übereinstimmung gefunden wurde oder wenn ein Fehler aufgetreten ist.
Der folgende Code-Schnipsel mimmt ein Datum im ISO-Format (JJJJ-MM-TT) und gibt es im Format TT.MM.JJJJ aus:
Beispiel 1. ereg() Beispiel
if (ereg ("([0-9]{4}) -([0-9]{1,2}) -([0-9]{1,2})", $date, $regs)) {echo "$regs[3].$regs[2].$regs[1]";} else {echo "Ungültiges Datumsformat: $date";}
Siehe auch: eregi(), ereg_replace(), eregi_replace() und preg_match().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entspricht ereg() mit dem Unterschied, dass sie übereinstimmende Buchstaben nicht nach Groß - und Kleinschreibung unterscheidet.
Beispiel 1. eregi() Beispiel
Siehe auch: ereg(), ereg_replace() und eregi_replace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entspricht ereg_replace() mit dem Unterschied, dass sie übereinstimmende Buchstaben nicht nach Groß - und Kleinschreibung unterscheidet.
Siehe auch: ereg(), eregi() und ereg_replace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion preg_replace(), die eine zu Perl kompatible Syntax regulärer Ausdrücke verwendet, ist häufig die schnellere Alternative zu ereg_replace().
Diese Funktion durchsucht Zeichenkette nach Übereinstimmungen mit Suchmuster und ersetzt dann den übereinstimmenden Text durch Ersatz.
Wenn Suchmuster eingeklammerte Teilzeichenketten enthält, darf Ersatz Teilzeichenketten der Form\\ Ziffer enthalten, die dann durch die Ziffer 'ste Teilzeichenkette ersetzt werden. \\0 erzeugt den gesamten Inhalt der durchsuchten Zeichenkette.
Bis zu neun Teilzeichenketten dürfen verwendet werden.
Klammern dürfen geschachtelt werden und werden in diesem Fall anhand der öffnenden Klammern gezählt.
Wenn in Zeichenkette keine Übereinstimmungen gefunden werden, wird Zeichenkette unverändert zurückgegeben.
Der folgende Code-Schnipsel gibt zum Beispiel dreimal "Das war ein Test" aus:
Beispiel 1. ereg_replace() Beispiel
$string = "Das ist ein Test"; echo ereg_replace (" ist", "war", $string); echo ereg_replace (" ()ist", "\\1war", $string); echo ereg_replace ("( ()ist)", "\\2war", $string);
Wenn Sie als Ersatz einen ganzzahligen Wert verwenden, bekommen sie vielleicht nicht das erwartete Ergebnis.
Das liegt daran, dass ereg_replace() die Zahl als Ordinalwert eines Zeichens betrachtet und dieses verwendet.
Zum Beispiel:
Beispiel 2. ereg_replace() Beispiel
?php / * Dieses funktioniert nicht wie erwartet. * / $zahl = 4; $zeichenkette = "Diese Zeichenkette hat vier Wörter ."; $zeichenkette = ereg_replace('vier', $zahl, $zeichenkette); echo $zeichenkette; / * Ausgabe: 'Diese Zeichenkette hat Wörter. '* / / * Dieses funktioniert. * / $zahl = '4'; $zeichenkette = "Diese Zeichenkette hat vier Wörter ."; $zeichenkette = ereg_replace('vier', $zahl, $zeichenkette); echo $zeichenkette; / * Output: 'Diese Zeichenkette hat 4 Wörter.' * /?
Beispiel 3.
Ersetzen von URLs durch Links
Siehe auch: ereg(), eregi(), eregi_replace(), str_replace() und preg_match().
Zurück
Zum Anfang
Nach vorne
Reguläre Ausdrücke Funktionen (POSIX erweitert)
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sendet eine Fehlermeldung an das Log-File des Webservers, einen TCP Port oder eine Datei.
Der erste Parameter, message, ist die Fehlermeldung, die mitgeschrieben werden soll.
Der zweite Parameter, message_type gibt an, wo die Meldung abgelegt werden soll:
Tabelle 1. error_log() Typem
Message wird mit Hilfe des internen Log-Systems des Betriebssystemes oder einer Datei geschrieben, je nachdem, wie error_log eingestellt ist.
Message wird via Email an die Adresse gesendet, die mit destination amnngegeben wurde.
Dies ist der einzige Punkt, bei dem der vierte Parameter extra_headers verwendet wird.
Die Nachricht verwendet die selbe interne Funktion wie mail().
Message wird über den PHP-Debugger gesendet.
Diese Option ist nur verfügbar, wenn der Debugger gestartet wurde.
Ist das der Fall, so wird mit dem destination Parameter der Hostname oder die IP-Adresse gesetzt.
Optional auch der Port, unter dem der Debugger läuft.
Message wird an die Datei angefügt, die mit destination angegeben wurde.
Beispiel 1. error_log() Beispiele
/ / Server sendet eine Nachricht an den Administrator, / / dass keine Verbindung zur Datenbank möglich ist. if (!Ora_Logon($username, $password)) {error_log ("Oracle database not available !", 0);} / / Server sendet eine Nachricht an den Administrator, dass FOO langsam ausgeht if (!($foo = allocate_new_foo()) {error_log ("Big trouble, we're all out of FOOs !", 1, "operator@mydomain.com");} / / AndereMöglichkeiten, error_log() aufzurufen: error_log ("You messed up !", 2, "127.0.0.1:7000"); error_log ("You messed up !", 2, "loghost"); error_log ("You messed up !", 3, "/ var / tmp / my-errors.log");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt die Stufe von PHP 's Fehlermeldungen.
Diese Stufe ist der Fehlermeldung hängt von den folgenden Werten ab. (Hinter den folgenden Links verbirgt sich die Bedeutung der internen Werte):
Tabelle 1. error_reporting() Werte
Werte
interne Namen
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses erlaubt es Ihnen, eine Zeichenkette direkt an eine Shell-Funktion zu übergeben, so dass diese als eine einzige, sichere Anweisung ausgeführt werden kann.
Die Funktion sollte verwendet werden, um Parameter, die aus Benutzereingaben resultieren, an Shell-Funktionen zu übergeben.
Die Shell-Funktionen umfassen exec(), system() und den backtick operator.
Beispiel:
Siehe auch: exec(), popen(), system() und den Backtick Operator.
Zurück
Zum Anfang
Nach vorne
Funktionen zur Programmausführung
Nach oben
PHP Handbuch
Zurück
Nach vorne
escapeshellcmd() maskiert alle möglichen Zeichen in einer Zeichenkette, die dazu benutzt werden könnten, um einen Shellbefehl zur Durchführung von willkürlichen Befehlen zu veranlassen.
Diese Funktion sollte verwendet werden um sicherzustellen, dass alle Daten aus einer Benutzereingabe maskiert werden bevor dieses Daten zu einer der Funktionen exec(), system() oder dem Backtick Operator Diese Funktion sollte verwendet werden um sicherzustellen, dass alle Daten aus einer Benutzereingabe maskiert werden bevor dieses Daten zu einer der Funktionen exec(), system() oder dem Backtick Operator übergeben werden.
Beispiel:
$e = escapeshellcmd( $userinput); system("echo $e"); / / hier ist es egal, ob $e Leerstellen hat $f = escapeshellcmd($filename); system("touch \" / tmp / $f\"; ls -l \" / tmp / $f\""); / / hier ist es nicht egal
Siehe auch: escapeshellarg(), exec(), popen(), system() und den Backtick Operator.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
eval() versucht, den in code_str enthaltenen String als PHP-Code auszuführen.
Abgesehen von anderen Zwecken kann dies nützlich sein, um Code auszuführen, der aus einer Datenbank ausgelesen wird.
Beim Gebrauch von eval() gilt es einige Faktoren zu beachten.
Die Zeichenkette code_str muss gültigen PHP-Code enthalten, einschließlich syntaktisch richtiger Begrenzungszeichen (also incl. "; "-Abschluss-Zeichen für einzelne Anweisungen, sonst bricht der PHP-Parser in der folgenden Zeile mit einem Fehler ab.
Beachten sie, dass die innerhalb von eval() vorgenommenen Variablen-Zuweisungen nach Abarbeitung auch im Hauptskript ihre Gültigkeit behalten.
Eine return -Angabe beendet sofort die Auswertung des Strings.
In PHP3 ist eval() nämlich vom Typ void und liefert nichts zurück.
Beispiel 1. eval() -Beispiel (einfache Texteinfügung):
?php $string = 'Bierglas'; $name = 'Binding-Lager'; $str = 'Das ist mein $string, voll mit $name. br'; echo $str; eval ("\$str = \"$str\" ;"); echo $str;?
Das obige Beispiel gibt aus:
Das ist mein $string, voll mit $name.
Das ist mein Bierglas, voll mit Binding-Lager.
Beachten sie bitte das Setzen des Begrenzungs-Zeichens ";" in code_str sowie den Gebrauch des "\ "-Zeichens.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
exec() führt ein gegebenen Befehl aus, ohne eine Ausgabe zu erzeugen.
Die Funktion gibt lediglich die letzte Zeile aus dem Befehlsergebnis zurück.
Wenn Sie auf die direkte Rückgabe / Ausgabe eines Befehls angewiesen sind, dann benutzen Sie stattdessen die Funktion passthru().
Ist der Parameter array angegeben, wird dieses mit jeder Zeile des Befehlsausgabe gefüllt.
Beachten Sie, dass wenn das Array schon Elemente enthält, die Funktion exec() die Ausgabe an das Array anhängt.
Wenn Sie dieses nicht wünschen, rufen Sie die Funktion unset () für das Array auf, bevor Sie es als Parameter der Funktion exec() übergeben.
Ist der Parameter return_var angegeben, so wird der Rückgabestatus des ausgeführten Befehls in diese Variable geschrieben.
Beachten Sie, dass wenn Sie Benutzereingaben an diese Funktion übergeben, diese mit escapeshellcmd() behandelt, um sicherzustellen, dass niemand mit willkürlichen Befehlen Ihrem System Schaden zufügen kann.
Andernfalls wird PHP solange laufen, bis das Programm beendet ist.
Siehe auch: system(), passthru(), popen(), escapeshellcmd() und den Backtick Operator.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Grafik-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1. exif_read_data() example
Anmerkung:
Anmerkung:
Anmerkung:
Anmerkung:
Also the size of an embedded thumbnail is returned in THUMBNAIL subarray and the function exif_read_data() can return thumbnails in TIFF format.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. exif_thumbnail() example
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Mit exit() beenden sie - ohne Möglichkeit der Rückkehr - die Skriptausführung.
Beachten sie auch die Funktion die().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert e potenziert mit arg.
Siehe auch pow().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Jeder String ist ein Teil von string.
Die Trennung erfolgt an der mit separator angegebenen Zeichenkette (ein oder mehrere Zeichen).
Ist der Parameter limit angegeben, werden maximal limit Teile zurück gegeben.
Das letzte Element enthält dann den ganzen Rest von string.
Beispiel 1. explode() -Beispiel:
$pizza = "Teil1 Teil2 Teil3 Teil4 Teil5 Teil6"; $pieces = explode (" ", $pizza);
Siehe auch split() und implode().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ist wahr, wenn die Bibliothek, die mit name definiert wurde, geladen ist.
Einen Überblick über die verschiedenen Bibliotheken erhält man mit phpinfo().
Siehe auch phpinfo().
Anmerkung:
Diese Funktion wurde mit Version 3.0.10 eingeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion wird verwendet, um Variablen eines Arrays in die aktuelle Symboltabelle zu importieren.
Es behandelt die Schlüssel des assoziativen Arrays var_array als Variablennamen, und die Werte als Variablenwerte.
Für jedes Paar Schlüssel / Wert wird - abhängig von den Parametern extract_type und prefix - eine Variable in der aktuellen Symboltabelle eingetragen.
Anmerkung:
Seit Version 4.0.5 gibt diese Funktion die Anzahl der extrahierten Variablen zurück.
Anmerkung:
EXTR_IF_EXISTS und EXTR_PREFIX_IF_EXISTS wurde in Version 4.2.0. eingeführt.
Anmerkung:
EXTR_REFS wurde in Version 4.3.0 eingeführt.
extract() prüft jeden Schlüssel, ob dieser einen gültigen Variablennamen ergibt, und auch auf eventuelle Kollisionen mit existierenden Variablen in der Symboltabelle.
Die Art, wie ungültige / numerische Schlüssel und Kollisionen behandelt werden, wird mit extract_type spezifiziert.
Es kann einen der folgenden Werte annehmen:
Im Falle einer Kollision wird die existierende Variable überschrieben.
Im Falle einer Kollision wird die existierende Variable nicht überschrieben.
Im Falle einer Kollision wird dem Variablennamen prefix vorangestellt.
Allen Variablennamen wird prefix vorangestellt.
Seit PHP 4.0.5 gilt dies auch für numerische Variablen.
Nur ungültigen / numerischen Variablennamen wird prefix vorangestellt.
Dieser Flag wurde mit PHP 4.0.5 eingeführt.
Überschreibt die Variable nur, wenn sie bereits in der aktuellen Symboltabelle existiert, sonst geschieht nichts.
Dies ist dann hilfreich, wenn Sie eine Liste mit gültigen Variablen definieren, und dann z.B. nur jene Variablen extrahieren, welche Sie aus $_REQUEST definiert haben.
Dieser Flag wurde in PHP 4.2.0 eingeführt.
Erstellt nur Variablennamen mit Präfix, wenn die Version ohne Präfix der selben Variable in der aktuellen Symboltabelle existiert.
Dieser Flag wurde in PHP 4.2.0 eingeführt.
Extrahiert Variablen als Referenzen.
Das heißt, dass die Werte der importierten Variablen noch immer auf die Werte des Parameters var_array referenzieren.
Sie können diesen Flag alleine oder auch in Kombination mit einem anderen Flag verwenden, indem Sie Oder-Verknüpfungen im extract_type erstellen.
Dieser Flag wurde in PHP 4.3.0 eingeführt.
Ist extract_type nicht spezifiziert, so wird EXTR_OVERWRITE angenommen.
Beachten Sie, dass prefix nur dann nötig ist, wenn extract_type EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID, oder EXTR_PREFIX_IF_EXISTS ist.
Ist das Resultat trotz Präfix kein gültiger Variablenname, wird es nicht in die Symboltabelle importiert.
extract() gibt die Anzahl erfolgreich in die Symboltabelle importierter Variablen zurück.
Eine mögliche Verwendung für extract ist der Import der Variablen in einem von wddx_deserialize() gelieferten assoziativen Array in die Symboltabelle.
Beispiel 1. extract()
?php / * Annahme: $var_array ist ein von wddx_deserialize zurückgegebenes Array * / $groesse = "groß"; $var_array = array ("farbe" = "blau", "groesse "= "mittel", "form" = "Kugel"); extract ($var_array, EXTR_PREFIX_SAME, "wddx"); print "$farbe, $groesse, $form, $wddx_groesse\n";?
Das obige Beispiel wird folgendes ausgeben:
blau, groß, Kugel, mittel
$size wurde nicht überschrieben, da wir EXTR_PREFIX_SAME spezifiziert haben, was im Anlegen von $wddx_size $size wurde nicht überschrieben, da wir EXTR_PREFIX_SAME spezifiziert haben, was im Anlegen von $wddx_size endete.
Wäre EXTR_SKIP spezifiziert worden, dann wäre $wddx_size nicht angelegt worden.
EXTR_OVERWRITE hätte $size mit dem Wert "medium" überschrieben, und EXTR_PREFIX_ALL hätte die neuen Variablen $wddx_color, $wddx_size, und $wddx_shape angelegt.
Sie müssen assoziative Arrays benutzen, numerisch indizierte Arrays liefern keine Resultate.
Siehe auch compact().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Mail Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_affected_rows() liefert die Anzahl der von der letzten INSERT-, UPDATE - oder DELETE-Abfrage betroffenen Datensätze auf dem Server, der mit der angegebenen Verbindungskennung assoziiert ist.
Wenn keine Verbindungskennung angegeben, wird die zuletzt über fbsql_connect() geöffnete Verbindung verwendet.
Anmerkung:
Falls Sie Transaktionen verwenden, müssen Sie fbsql_affected_rows() unmittelbar nach Ihrer INSERT-, UPDATE-, oder DELETE-Abfrage, nicht nach dem Commit.
Diese Funktion gibt in diesem Falle trotzdem Null( 0) zurück.
Anmerkung:
Benutzen Sie UPDATE, wird FrontBase keine Spalten aktualisieren, bei denen der Neue dem alten Wert entspricht.
Die kann dazu führen, dass fbsql_affected_rows() unter umständen nicht die tatsächliche Anzahl der betroffenen Datensätze liefert, sondern nur die, die wörtlich durch die Anfrag betroffen sind.
Falls die letze Anfrage fehlschlägt, liefert diese Funktion -1 zurück.
Siehe auch: fbsql_num_rows().
Zurück
Zum Anfang
Nach vorne
FrontBase Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn er angegeben ist, wird der Autocommit-Status gewechselt.
Ist AnAus TRUE werden aus Abfragen resultierende Änderungen sofort in die Datenbank geschrieben (committed), wenn keine Fehler aufgetreten sind.
Ist AnAus FALSE muss der Benutzer die Änderungen über fbsql_commit() schreiben (commit) oder über fbsql_rollback() die Datentransaktion rückgängig machen (rollback).
Siehe auch: fbsql_commit() und fbsql_rollback()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_change_user() wechselt den eingeloggten Benutzer der momentan aktiven Verbindung oder der mit dem Parameter Verbindungskennung angegebenen Verbindung.
Wenn eine Datenbank angegeben wird, wird diese nach dem Benutzerwechsel verwendet ansonsten wird weiterhin die momentane Datenbank verwendet.
Wenn die Autorisation des neuen Benutzers und Passworts fehlschlägt, bleibt der momentan verbundene Benutzer aktiv.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE bei Erfolg zurück, andernfalls FALSE.
fbsql_close() beendet eine Verbindung mit dem FrontBase-Server, welche die angegebene Verbindungskennung hat.
Wenn Verbindungskennung nicht angegeben ist, wird die zuletzt geöffnete Verbindung beendet.
Die Benutzung von fbsql_close() ist normalerweise nicht nötig, da alle nicht-persistenten geöffneten Verbindungen automatisch am Ende der Scriptausführung geschlossen werden.
Beispiel 1. fbsql_close() example
Siehe auch: fbsql_connect() und fbsql_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
fbsql_commit() beendet die momentane Transaktion durch Schreiben aller inserts, updates und deletes auf den Datenträger und Freigabe aller von der Transaktion gesperrten Reihen und Tabellen.
Dieser Befehl wird nur benötigt, wenn autocommit auf FALSE gesetzt wurde.
Siehe auch: fbsql_autocommit() und fbsql_rollback()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert bei Erfolg eine positive FrontBase-Verbindungskennung oder eine Fehlermeldung.
fbsql_connect() stellt eine Verbindung zu einem FrontBase-Server her.
Die folgenden Standardwerte werden für fehlende, optionale Parameter gesetzt: hostname = 'NULL', username = '_SYSTEM 'und password = leeres Passwort.
In diesem Fall liefert die Funktion die Kennung der bereits bestehenden Verbindung zurück.
Die Verbindung wird geschlossen sobald die Scriptausführung beendet wird oder vorher, wenn fbsql_close() benutzt wird.
Beispiel 1. fbsql_connect() -Beispiel:
?php $link = fbsql_connect ("localhost", "_SYSTEM", "geheim") or die ("Konnte keine Verbindung herstellen !"); print ("Verbinden mit FrontBase erfolgreich"); fbsql_close ($link);?
Siehe auch: fbsql_pconnect() und fbsql_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_create_blob() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_create_clob() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_create_db() versucht eine neue Datenbank auf dem mit der Verbindungskennung spezifizierten Server anzulegen.
Beispiel 1. fbsql_create_db() Beispiel
?php $link = fbsql_pconnect ("localhost", "_SYSTEM", "geheim") or die ("Konnte nicht verbinden"); if (fbsql_create_db ("my_db")) {print("Datenbank erfolgreich erstellt\n");} else {printf("Fehler beim Erstellen der Datenbank: %s\n", fbsql_error ());}?
Siehe auch: fbsql_drop_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_create_clob() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1. fbsql_data_seek() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die positive FrontBase-Ergebniskennung des Abfrageergebnisses oder FALSE bei einem Fehler.
Wenn die optionale Verbindungskennung nicht angegeben ist, wir die Funktion nach einer geöffneten Verbindung zum FrontBase-Server suchen.
Dies geschiet so, als ob fbsql_connect() ohne Argumente aufgerufen wurde.
Siehe auch fbsql_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert:
Einen Integer-Wert des momentanen Datenbankstatus.
fbsql_db_status() fragt den momentanen Status der Datenbank, die mit Datenbankname spezifiziert wurde, ab.
Wenn Verbindungskennung nicht angegeben ist, wird die standardmäßige Verbindungskennung verwendet.
Der Rückgabewert ist einer der folgenden Konstanten:
FALSE - Der Ausführungshandler für den Host war ungültig.
Dieser Fehler tritt auf wenn die Verbindungskennung direkt zu einer Datenbank über eine Portnummer verbindet.
FBExec kann auf dem Server verfügbar sein, aber es wurde keine Verbindung wurde hergestellt.
FBSQL_UNKNOWN - Der Status ist unbekannt.
FBSQL_STOPPED - Die Datenbank läft nicht.
Benutzen Sie fbsql_start_db(), um die Datenbank zu starten.
FBSQL_STARTING - Die Datenbank startet.
FBSQL_RUNNING - Die Datenbank läft und kann für SQL-Operationen benutzt werden.
FBSQL_STOPPING - Die Datenbank stoppt.
FBSQL_NOEXEC - FBExec wird auf dem Server nicht ausgeführt und es ist nicht möglich, den Status der Datenbank auszulesen.
Siehe auch: fbsql_start_db() und fbsql_stop_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
fbsql_drop_db() entfernt eine ganze Datenbank von dem Server, der mit der Verbindungkennung assoziert ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Fehlernummer der letzten fbsql-Funktion oder 0 (zero), wenn kein Fehler aufgetreten ist.
Fehler, die vom FrontBase Datenbank-Backend kommen führen nicht zu Warnungen.
Stattdessen sollten Sie die Funktion fbsql_errno() verwenden, um die Fehlernummer auszulesen.
Wenn Sie diese Funktion verwenden wollen, sollten Sie den Wert überprüfen, bevor Sie eine weitere fbsql-Funktion ausführen.
?php fbsql_connect( "marliesle"); echo fbsql_errno() .": ".fbsql_error(). "BR"; fbsql_select_db("nicht_existierende_datenbank"); echo fbsql_errno() .": ".fbsql_error(). "BR"; $conn = fbsql_query("SELECT * FROM nicht_existierende_tabelle ;"); echo fbsql_errno() .": ".fbsql_error(). "BR";?
Siehe auch: fbsql_error() und fbsql_warnings().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Fehlertext der zuletzt ausgeführten fbsql-Funktion, oder '' (eine leere Zeichenkette), falls kein Fehler aufgetreten ist.
Fehler, die vom FrontBase-Server kommen, führen nicht mehr zu einer Ausgabe von Warnungen.
Stattdessen sollten Sie die Funktion fbsql_error() verwenden, um den Fehlertext zu erhalten.
Wenn Sie die Funktion verwenden wollen, sollten Sie den Wert überprüfen, bevor Sie eine weitere fbsql-Funktion aufrufen.
?php fbsql_connect( "marliesle"); echo fbsql_errno() .": ".fbsql_error(). "BR"; fbsql_select_db("nicht_existierende_datenbank"); echo fbsql_errno() .": ".fbsql_error(). "BR"; $conn = fbsql_query("SELECT * FROM nicht_existierende_tabelle ;"); echo fbsql_errno() .": ".fbsql_error(). "BR";?
Siehe auch: fbsql_errno() und fbsql_warnings().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_fetch_array() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_fetch_assoc() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_fetch_field() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_fetch_object() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_field_len() liefert die Länge des angegebenen Feldes zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ergebnis muss eine gültige Ergebniskennung sein und Feldindex der numerische Offset des Feldes.
z.B.
Der Feldindex des dritten Feldes ist 2, der Index des vierten 3 u.s.w.
Beispiel 1. fbsql_field_name() Beispiel
Das vorherige Beispiel würde folgende Ausgabe produzieren:
user_id passwort
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_field_type() ist ähnlich zur Funktion fbsql_field_name().
Die Argumente sind identisch, allerdings wird der Feldtyp stattdessen zurückgeliefert.
Der Feldtyp ist einer der folgenden Werte: "int", "real", "string", "blob", und andere näher in der FrontBase Dokumentation beschriebene Werte.
Beispiel 1. fbsql_field_type() Beispiel
?php fbsql_connect ("localhost", "_SYSTEM", ""); fbsql_select_db ("wisconsin"); $result = fbsql_query ("SELECT * FROM onek ;"); $fields = fbsql_num_fields ($result); $rows = fbsql_num_rows ($result); $i = 0; $table = fbsql_field_table ($result, $i); echo "Ihre '".$table ." 'Tabelle hat ".$fields. "Felder und ".$rows." Datensaetze BR "; echo "Die Tabelle hat die folgenden Felder BR"; while ($i $fields) {$type = fbsql_field_type ($result, $i); $name = fbsql_field_name ($result, $i); $len = fbsql_field_len ($result, $i); $flags = fbsql_field_flags ($result, $i); echo $type. "".$name." ".$len. "".$flags." BR "; $i++;} fbsql_close();?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_list_dbs() example
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
The function returns -1 if a error occurs.
Beispiel 1. fbsql_list_fields() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn mehr als eine SQL-Anweisung an den Server gesendet wird oder eine gespeicherte Prozedur mit mehreren Ergebnissen ausgeführt wird, liefert der Server mehrere Ergebnisse zurück.
Diese Funktion überprüft auf zusätzliche auf dem Server verfügbare Ergebnisse.
Wenn weitere Ergebnisse existieren, wird das existierende Ergebnis geleert und mit dem nächsten Ergebnis gefüllt.
Die Funktion liefert TRUE zurück, wenn ein zusätzliches Ergebnis verfügbar war, ansonsten wird FALSE zurückgeliefert.
Beispiel 1. fbsql_next_result() Beispiel
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_num_fields() liefert die Anzahl der Felder zurück.
Siehe auch: fbsql_db_query(), fbsql_query(), fbsql_fetch_field() und fbsql_num_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_num_rows() liefert die Anzahl der Datensaätze einer Ergebnismenge.
Diese Funktion ist nur für SELECT-Abfragen gültig.
Um die Anzahl der betroffenen Datensätze bei INSERT-, UPDATE - oder DELETE-Abfragen zu ermittelt, müssen Sie die Funktion fbsql_affected_rows() verwenden.
Beispiel 1. fbsql_num_rows() Beispiel
?php $link = fbsql_connect( "localhost", "username", "passwort"); fbsql_select_db("database", $link); $result = fbsql_query("SELECT * FROM table1 ;", $link); $num_rows = fbsql_num_rows($result); echo "$num_rows Rows\n";?
Siehe auch: fbsql_affected_rows(), fbsql_connect(), fbsql_select_db() und fbsql_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fbsql_query() sendet eine Abfrage an die momentan active Datenbank auf dem Server, der mit der Verbindungskennung spezifiziert ist.
Wenn die Verbindungskennung nicht angegeben ist, wird die zuletzt geöffnete Verbindung verwendet.
Dies geschieht in der gleichen Weise, als ob fbsql_connect() was ohne Argumente aufgerufen wird.
Anmerkung:
Der Abfrage-String soll immer mit einem Semikolon enden.
fbsql_query() liefert zur Überprüfung des Erfolgs der Abfrage TRUE (Nicht NULL) oder FALSE zurück.
Ein TRUE -Rückgabewert bestätigt, dass die Abfrage gültig war und vom Server ausgeführt werden konnte.
Über den Rückgabewert können nicht die betroffenen oder selektierten Datensätze ermittelt werden.
Es ist sogar möglich, dass die Abfrage erfolgreich war, aber keine Datensätze betroffen oder selektiert werden.
Die folgende Abfrage ist syntaktisch falsch, so dass fbsql_query() fehlschlägt und FALSE zurückliefert:
Beispiel 1. fbsql_query() Beispiel
?php $result = fbsql_query ("SELECT * WHERE 1=1") or die ("Abfrage gescheitert");?
Deshalb schlägt fbsql_query() fehl und liefert FALSE zurück:
Beispiel 2. fbsql_query() example
?php $result = fbsql_query ("SELECT my_col FROM my_tbl") or die ("Abfrage gescheitert");?
fbsql_query() schlägt ebenso fehl und liefert FALSE, wenn Sie keine Berechtigung zum Zugriff auf die verwiesene(n) Tabelle(n) haben.
Falls Sie eine DELETE-, INSERT-, REPLACE - oder UPDATE-Abfrage verwendet haben, können Sie fbsql_affected_rows() verwendet, um die betroffenen Datensätze herauszufinden.
Nur bei SELECT-Abfragen wird fbsql_query() eine neue Ergebniskennung zurück, die Sie an fbsql_result() übergeben können.
Wenn die Bearbeitung des Ergebnisses abgeschlossen ist, können Sie die belegten Resourcen durch den Aufruf von fbsql_free_result() freigeben.
Bei Scriptende wird der belegte Speicher automatisch freigegeben.
Siehe auch: fbsql_affected_rows(), fbsql_db_query(), fbsql_free_result(), fbsql_result(), fbsql_select_db() und fbsql_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_read_blob() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_read_clob() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE bei Erfolg zurück, bei einem Fehler FALSE.
fbsql_select_db() setzt die momentan aktuelle Datenbank auf dem mit der Verbindungskennung assozierten Server.
Wenn keine Verbindungskennung angegeben ist, wird die zuletzt geöffnete Verbindung verwendet.
Dies geschiet so, als ob fbsql_connect() aufgerufen wird.
Der Client kontaktiert FBExec, um die Portnummer für die Datenbankverbindung abzufragen.
Wenn der Datenbankname eine Nummer ist, wird FBExec nicht abgefragt und die Nummer als Portnummer verwendet.
Der FrontBase-Server kann über FrontBase -FBExec=No -port= port number database name. gestartet werden.
Jeder nachfolgende Aufruf von fbsql_query() wird auf der aktiven Datenbank ausgeführt.
Wenn die Datenbank mit einem Passwort geschützt ist, muss vorher fbsql_database_password() aufgerufen werden.
fbsql_connect(), fbsql_pconnect(), fbsql_database_password() und fbsql_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert bei Erfolg TRUE zurück, andernfalls FALSE.
fbsql_set_lob_mode() setzt den Modus für das Auslesen von LOB-Daten aus der Datenbank.
BLOB - und CLOB-Daten können in der FrontBase-Datenbank direkt oder indirekt gespeichert werden.
Direktgespeicherte LOB-Daten werden immer ohne Berücksichtigung des gesetzten LOB-Modus geholt.
Wenn die LOB-Daten kleiner als 512 Bytes sind, werden sie immer direkt gespeichert.
FBSQL_LOB_DIRECT - LOB-Daten werden direkt geholt.
Wenn Daten aus der Datenbank mit fbsql_fetch_row() oder einer anderen fetch-Funktion geholt werden, werden alle CLOB - und BLOB-Spalten als gewöhnliche Spalten geliefert.
Dies ist der Standardwert bei einem neuen FrontBase-Ergebnis
FBSQL_LOB_HANDLE - LOB-Daten werden als Datenhandles geholt.
Ein Handle wird als 27 Byte langer String mit der Formatierung "@'000000000000000000000000'" zurückgeliefert.
Bei direkt gespeicherten Daten werden die Daten an sich geliefert.
Siehe auch: fbsql_create_blob(), fbsql_create_clob(), fbsql_read_blob() und fbsql_read_clob().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
fbsql_db_status() und fbsql_stop_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch: fbsql_db_status() und fbsql_start_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. fbsql_tablename() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert bei eingeschalteten Warnmeldungen TRUE zurück, andernfalls FALSE.
fbsql_warnings() Aktiviert oder deaktiviert FrontBase-Warnungen.
Zurück
Zum Anfang
Nach vorne
Nach oben
filePro Funktionen
PHP Handbuch
Zurück
Nach vorne
Die Datei, auf die handle zeigt, wird geschlossen.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Der Datei-Zeiger muss gültig sein, d.h. die Datei, auf die gezeigt wird muss zuvor mit fopen() oder fsockopen() geöffnet worden sein.
Beispiel 1.
Ein einfaches Beispiel für fclose()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Forms Data Format Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_close() schließt das FDF Dokument.
Siehe auch fdf_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_create() Die Funktion fdf_create() erzeugt ein neues FDF Dokument.
Diese Funktion wird benötigt, wenn man Eingabefelder in einem PDF Dokument mit Daten belegen möchte.
Beispiel 1.
Füllen von Formularwerten in einem PDF Dokument
?php $outfdf = fdf_create(); fdf_set_value($outfdf, "band", $band, 0); fdf_set_file($outfdf, "http: / testfdf / resultlabel.pdf"); fdf_save($outfdf, "outtest.fdf"); fdf_close($outfdf); Header("Content-type: application / vnd.fdf"); $fp = fopen("outtest.fdf", "r"); fpassthru($fp); unlink("outtest.fdf");?
Siehe auch fdf_close(), fdf_save(), fdf_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_file() gibt den Wert des / F Schlüssels zurück.
Siehe auch fdf_set_file().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_get_status() gibt den Wert des / STATUS Schlüssels zurück.
Siehe auch fdf_set_status().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_get_value() gibt den Wert für den Parameter fieldname zurück.
Elemente eines Arrays können abgefragt werden, indem der optionale Parameter which Elemente eines Arrays können abgefragt werden, indem der optionale Parameter which übergeben wird.
Bei Nicht-Array-Feldern wird der Parameter which ignoriert.
Anmerkung:
Der optionale Parameter which und die Möglichkeit Arrays abzufragen wurden ab PHP-Version 4.3 hinzugefügt.
Siehe auch fdf_set_value().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_next_field_name() gibt den Namen des Feldes nach fieldname oder den Namen des ersten Feldes zurück, wenn der Parameter NULL ist.
Beispiel 1.
Siehe auch fdf_set_field(), fdf_get_field().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_open() öffnet eine Datei mit Formulardaten.
Diese Datei muss entweder die von einem PDF Formular zurückgegebenen Formulardaten oder Formulardaten, die mit fdf_create() und fdf_save() erzeugt wurden, enthalten.
Das Ergebnis eines per POST übergebenen PDF-Formulars kann verarbeitet werden, indem die Daten aus $HTTP_FDF_DATA in eine Datei geschrieben und mit Hilfe von fdf_open() zugänglich gemacht werden.
Ab PHP-Version 4.3 steht darüber hinaus die Funktion fdf_open_string() zur Verfügung, die die temporäre Dateierzeugung und -löschung übernimmt.
Beispiel 1.
Zugang zu den Formulardaten
?php / / Speichern der FDF Daten in eine temporäre Datei $fdffp = fopen( "test.fdf", "w"); fwrite($fdffp, $HTTP_FDF_DATA, strlen($HTTP_FDF_DATA)); fclose($fdffp); / / Öffnen der temporären Datei und Auswertung der Daten $fdf = fdf_open("test.fdf");... fdf_close($fdf);?
Siehe auch fdf_open_string(), fdf_close(), fdf_create() und fdf_save().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_save() function speichert ein FDF Dokument.
Das erzeugte Dokument wird in der Datei filename gespeichert.
Ohne den Parameter filename gibt fdf_save() das Dokument an der Standardausgabe aus.
Siehe auch fdf_save_string(), fdf_create() und fdf_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_ap() legt das Aussehen eines Feldes (d.h. den Wert des / AP Schlüssels) fest.
Mögliche Werte von face sind FDFNormalAP, FDFRolloverAP und FDFDownAP.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
In Acrobat 5.0 sind "Shift_JIS", "UHC", "GBK", "BigFive" gültige Werte für den Parameter encoding.
Ein leerer String setzt die Kodierung auf den voreingestellten Wert PDFDocEncoding / Unicode.
Die Funktion fdf_set_encoding() ist ab PHP-4.1.0 oder später verfügbar.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_file() Die Funktion fdf_set_file() wählt ein PDF-Dokument aus, in dem FDF-Formulardaten angezeigt werden sollen.
Der Parameter url muss als absolute URL angegeben werden.
Der Rahmen in den das Dokument angezeigt werden soll, kann mit dem optionalen Parameter target_frame oder der Funktion fdf_set_target_frame() festgelegt werden.
Beispiel 1.
FDF-Daten in einem anderen Dokument anzeigen
Siehe auch fdf_get_file() und fdf_set_target_frame().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_flags() setzt bestimmte Flags des Feldes fieldname.
Siehe auch fdf_set_opt().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fdf_set_javascript_action() weist dem Feld fieldname eine Javascript Aktion zu.
Siehe auch fdf_set_submit_form_action().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_opt() setzt Optionen des Feldes fieldname.
Siehe auch fdf_set_flags().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_status() Die Funktion fdf_set_status() setzt den Wert des / STATUS Schlüssels.
Dieser wird bei der Anzeige in einem Warnungsfeld angezeigt.
Siehe auch fdf_get_status().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_submit_form_action() setzt die 'Submit Form Action 'für das Feld fieldname.
Siehe auch fdf_set_javascript_action().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fdf_set_value() setzt den Wert value eines Feldes fieldname.
Der Parameter value wird als String, falls der übergebene Wert ein Array ist, als Array gespeichert.
Anmerkung:
In älteren Versionen des FDF-Toolkits legte der letzte Parameter fest, ob der Wert in einen PDF-Namen (isName = 1) konvertiert oder als PDf-String (isName = 0) behandelt werden sollte.
Dieser Parameter wird in Version 5.0 des Toolkits nicht mehr benutzt.
Aus Kompatibilitätsgründen wird der Parameter ab PHP-Version 4.3 als optional unterstützt aber ignoriert.
die Unterstützung für Arrays als Parameter value wurde ab PHP-Version 4.3 hinzugefügt.
Siehe auch fdf_get_value() und fdf_remove_item().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
FriBiDi Funktionen
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, falls der Dateizeiger am Ende der Datei steht oder ein Fehler aufgetreten ist, andernfalls FALSE.
Der Dateizeiger muss gültig sein, d.h. die Datei, auf die gezeigt wird, muss zuvor mit fopen(), popen() oder fsockopen() geöffnet worden sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion erzwingt das Schreiben des gesamten Ausgabepuffers in die von dem Dateizeiger handle angegebene Datei.
Gibt bei Erfolg TRUE, andernfalls FALSE zurück.
Der Dateizeiger muss gültig sein, und auf eine mittels fopen(), popen(), oder fsockopen() erfolgreich geöffnete Datei zeigen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen String zurück, welcher ein einzelnes Zeichen von der aktuellen Position des Dateizeigers handle enthält.
Gibt FALSE zurück, wenn der Dateizeiger am Ende der Datei steht (wie die Funktion feof()).
Der Dateizeiger muss gültig sein, d.h. die Datei, auf die gezeigt wird, muss zuvor mit fopen(), popen() oder fsockopen() geöffnet worden sein.
Siehe auch fread(), fopen(), popen(), fsockopen() und fgets().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion fgetcsv() ist ähnlich der Funktion fgets(), nur dass fgetcsv() die eingelesene Zeile auf Felder im CSV Format (kommaseparierte Felder) hin überprüft, und ein Array mit den gelesenen Feldern zurückgibt.
Ist der optionale dritte Parameter delimiter (Trennzeichen) nicht angegeben, wird standardmäßig das Komma benutzt.
Der optionale Parameter enclosure ist auf ein Zeichen limitiert und darf nicht null sein.
Enthält enclosure mehr als ein Zeichen, wird nur das erste verwendet.
Anmerkung:
Der Parameter enclosure wurde in PHP 4.3.0 eingeführt.
Der Parameter handle muss ein gültiger Dateizeiger sein, d.h. die Datei, auf die gezeigt wird, muss zuvor mit fopen(), popen() oder fsockopen() geöffnet worden sein.
Length muss größer sein als die längste in der CSV-Datei vorhandene Zeile (um das Erkennen von EndOfLine (Ende der Zeile) Zeichen zu ermöglichen).
fgetcsv() gibt bei Lesefehlern und am Dateiende FALSE zurück.
Anmerkung:
Sie wird nicht als Fehler behandelt.
Beispiel 1.
Lesen und Ausgeben des gesamten Inhalts einer CSV-Datei
?php $row = 1; / / Anzahl der Arrays $handle = fopen ("test.csv" ,"r"); / / Datei zum Lesen öffnen while ($data = fgetcsv ($handle, 1000, ",")) {/ / Daten werden aus der Datei / / in ein Array $data gelesen $num = count ($data); / / Felder im Array $data / / werden gezählt print" p $num fields in line $row: br \n"; $row++; / / Anzahl der Arrays wird / / inkrementiert for ($c=0; $c $num; $c++) {/ / FOR-Schleife, um Felder print $data[$c]. "br \n"; / / des Arrays auszugeben}} fclose ($handle);?
Siehe auch explode(), file() und pack().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt eine Zeile bis zu length -1 Bytes Länge zurück, welche aus der Datei von der aktuellen Position des Dateizeigers handle aus ausgelesen wird.
Die Zeile endet an einem Zeilenumbruch (welcher im Rückgabewert enthalten ist), EOF (Ende der Datei) oder bei length - 1 Bytes (je nachdem, was eher auftritt).
1024 Bytes gesetzt.
Wenn ein Fehler auftritt, wird FALSE zurückgegeben.
Häufig auftretende Fehler:
Wenn Sie an die C-Semantik von fgets() gewöhnt sind, sollten Sie auf die unterschiedliche Behandlung von EOF (genauer: wie EOF zurückgegeben wird) achten.
Der Datei-Zeiger fp muss gültig sein, d.h. die Datei, auf die gezeigt wird, muss zuvor mit fopen(), popen(), oder fsockopen() geöffnet worden sein.
Ein einfaches Beispiel:
Beispiel 1.
Eine Datei Zeile für Zeile einlesen
$handle = fopen ("/ tmp / inputfile.txt", "r"); while (!feof($handle)) {$buffer = fgets($handle, 4096); echo $buffer;} fclose ($handle);
Anmerkung:
Ist er nicht angegeben, wird als Zeilenlänge 1024 angenommen.
Seit PHP 4.3 wird bei einem fehlenden Parameter length so lange gelesen, bis das Ende der Zeile erreicht ist.
Ist der Großteil der Zeilen in der Datei größer als 8 kB, ist es effizienter, wenn Sie die maximale Zeilenlänge spezifizieren.
Anmerkung:
Diese Funktion ist seit PHP 4.3 "binary safe", was aus frühere Versionen nicht zutrifft.
Anmerkung:
Wenn Sie Probleme damit haben, dass PHP Zeilenendezeichen nicht erkennt, entweder beim Lesen von Dateien auf einem Macintosh oder bei Dateien die auf einem Macintosh erstellt wurden, können Sie die Option auto_detect_line_endings aktivieren.
Siehe auch fread(), fopen(), popen(), fgetc(), fsockopen() und socket_set_timeout().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist identisch mit der Funktion fgets(), außer dass fgetss() versucht, vorhandene HTML und PHP-Tags aus dem gelesenen Text zu entfernen.
Optional können mit dem dritten Parameter allowable_tags Tags spezifiziert werden, die nicht entfernt werden sollen.
PHP 4.0.0 hinzugefügt.
Wenn Sie Probleme damit haben, dass PHP Zeilenendezeichen nicht erkennt, entweder beim Lesen von Dateien auf einem Macintosh oder bei Dateien die auf einem Macintosh erstellt wurden, können Sie die Option auto_detect_line_endings aktivieren.
Siehe auch fgets(), fopen(), fsockopen(), popen() und strip_tags().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt Datum und Uhrzeit des letzten Zugriffs auf eine Datei zurück, oder FALSE Gibt Datum und Uhrzeit des letzten Zugriffs auf eine Datei zurück, oder FALSE wenn ein Fehler auftrat.
Das Datum wird als UNIX-Timestamp zurückgegeben.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Anmerkung:
Die atime einer Datei ist vorgesehen sich immer zu ändern, sobald Datenblöcke einer Datei geändert werden.
Das kann sich folgenschwer auf die Performance auswirken, wenn eine Anwendung regelmäßig auf eine große Anzahl Dateien oder Verzeichnisse zugreift.
Manche Unix Dateisysteme können mit deaktivierter atime-Aktualisierung gemountet werden, um die Performance solcher Applikationen zu erhöhen; USENET news spools sind ein häufiges Beispiel.
Auf solchen Dateisystemen wird diese Funktion nutzlos.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt Zeit der letzten Änderung des Dateizeigers Inode zurück, oder FALSE wenn ein Fehler auftrat.
Die Zeit wird als UNIX-Timestamp zurückgegeben.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Anmerkung:
Bei den meisten Unix Dateisystemen gilt eine Datei als geändert, sobald ihre Inode-Daten geändert wurden; d.h. wenn die Rechte, Eigentümer, Gruppe, oder andere Metadaten des Inodes aktualisiert werden.
Siehe auch filemtime() (das ist was Sie suchen, wenn Sie Fußzeilen mit "Zuletzt Aktualisiert "für Webseiten erstellen möchten) und fileatime().
Beachten Sie auch, dass in einigen Unix-Texten ctime als die Zeit der Erstellung der Datei beschrieben wird.
Das ist falsch.
Bei den meisten Unix Dateisystemen gibt es keine Zeitangabe für die Erstellung von Unix Dateien.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn die mit filename spezifizierte Datei existiert, andernfalls FALSE.
Diese Funktion funktioniert nicht bei entfernten Dateien; Die Datei, deren Existenz überprüft werden soll, muss über das Dateisystem des Servers erreichbar sein.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Verwenden von Windows shares:
Zum Prüfen von Dateien auf Windows shares verwenden Sie bitte / /computername / share / filename oder \\\\computername\share\filename.
Beispiel 1.
Testen, ob eine Datei existiert
Siehe auch is_readable(), is_writable(), is_file() und file().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist mit file() identisch, außer dass file_get_contents() die Datei in einem String zurückgibt.
Anmerkung:
Diese Funktion ist binary safe.
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Siehe auch: fgets(), file(), fread(), include() und readfile().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Gruppen ID einer Datei zurück, oder FALSE wenn ein Fehler auftrat.
Mit der Funktion posix_getgrgid() können Sie diese zu ihrem Gruppennamen auflösen.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Anmerkung:
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion file() ist identisch mit readfile(), außer dass die eingelesene Datei als Array zurückgegeben wird.
Der Zeilenumbruch bleibt erhalten.
Im Fehlerfall gibt file() FALSE zurück.
Anmerkung:
Jede Zeile in dem resultierenden Array enthält das Zeilenende ('\0'), weshalb Sie trim() verwenden müssen, falls Sie dieses Zeichen nicht vorhanden sein soll.
Anmerkung:
Wenn Sie Probleme damit haben, dass PHP Zeilenendezeichen nicht erkennt, entweder beim Lesen von Dateien auf einem Macintosh oder bei Dateien die auf einem Macintosh erstellt wurden, können Sie die Option auto_detect_line_endings aktivieren.
Optional kann der Parameter use_include_path benutzt und auf '1' gesetzt werden, wenn in dem include_path ebenfalls nach der Datei gesucht werden soll.
?php / / Liest eine Datei in ein Array.
Zeilennummern foreach ($lines as $line_num = $line) {echo "Line # b {$line_num} / b: ". htmlspecialchars($line)." br \n";} / / Ein anderes Beispiel:
Einlesen einer Webseite in einen String. / / Siehe auch file_get_contents(). $html = implode ('', file ('http: / /www.example.com / '));?
Anmerkung:
Ab PHP 4.3.0 können Sie file_get_contents() verwenden, um den Inhalt einer Datei als String zurückzugeben.
Mit PHP 4.3.0 ist file() "Binary Safe ".
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Siehe auch readfile(), fopen(), fsockopen(), popen(), file_get_contents() und include().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Inode-Nummer einer Datei zurück, oder FALSE wenn ein Fehler auftrat.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt Datum und Uhrzeit zurück, wann die Datei das letzte mal modifiziert wurde, oder FALSE wenn ein Fehler auftrat.
Das Datum wird als UNIX-Timestamp zurückgegeben, was für die Funktion date() sehr passend ist.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Anmerkung:
Diese Funktion gibt den Zeitpunkt zurück, an dem in die Datenblöcke einer Datei geschrieben wurde; d.h. den Zeitpunkt der Änderung des Inhalts der Datei.
Beispiel 1. filemtime() Beispiel
?php / / Gibt z.B. aus: somefile.txt was last modified:
Siehe auch filectime(), stat(), touch() und getlastmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Benutzer ID des Eigentümers einer Datei zurück, oder FALSE wenn ein Fehler auftrat.
Die Benutzer ID wird in numerischem Format zurückgegeben und kann mit der Funktion posix_getpwuid() zum Benutzernamen aufgelöst werden.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Zugriffsrechte einer Datei zurück, oder FALSE wenn ein Fehler auftrat.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Anzahl der Felder (Spalten) in der geöffneten filePro Datenbank zurück.
Siehe auch filepro().
Zurück
Zum Anfang
Nach vorne
filePro Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Namen des Feldes, das field_number entspricht, zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Typ des Feldes, das field_number entspricht, zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Breite des Feldes, das field_number entspricht, zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion lies und überprüft die Kartendatei, in der die Feldanzahl und die Feldinformationen gespeichert sind.
Es wird keine Sperrung durchgeführt, daher sollten Sie eine Veränderung der filePro Datenbank, während sie in PHP geöffnet sein könnte, vermeiden.
Zurück
Zum Anfang
Nach vorne
Nach oben
Funktionen des Dateisystems
PHP Handbuch
Zurück
Nach vorne
Gibt die Daten aus einem festgelegten Platz der Datenbank zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Anzahl der Reihen in der geöffneten filePro Datenbank zurück.
Siehe auch filepro().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Größe einer Datei in Bytes zurück, oder FALSE wenn ein Fehler auftrat.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Typ einer Datei zurück.
Mögliche Werte sind fifo, char, dir, block, link, file und unknown.
Gibt FALSE zurück, wenn ein Fehler auftrat. filetype() erzeugt auch eine E_NOTICE Meldung, wenn der stat-Aufruf fehlschlägt oder der Dateityp ubekannt ist.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Siehe auch: is_dir(), is_file(), is_link(), file_exists() und stat().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
D.h. alle zugreifende Programme müssen die gleiche Art und Weise der Verriegelung benutzen, oder es funktioniert nicht.
Der Parameter operation bestimmt die Art der Verriegelung und kann einen der folgenden Werte annehmen:
1 vor PHP 4.0.1).
2 vor PHP 4.0.1).
3 vor PHP 4.0.1).
4 vor PHP 4.0.1) zu operation hinzu.
flock() erlaubt es Ihnen ein einfaches Leser / Schreiber Modell zu erstellen, welches auf fast jeder Plattform benutzt werden kann (inkl. den meisten UNIX-Derivaten und auch Windows).
Das optionale dritte Argument ist auf TRUE gesetzt, wenn die Verriegelung sperren sollte (EWOULDBLOCK errno Bedingung).
flock() gibt TRUE bei Erfolg, FALSE wenn ein Fehler auftrat (z.B. wenn eine Verriegelung nicht erstellt werden konnte) zurück.
Anmerkung:
Da flock() einen Dateizeiger benötigt, könnten Sie eine spezielle Sperrdatei benutzen, um den Zugriff auf eine Datei zu schützen, welche Sie mittels Öffnen im Schreibmodus (mit dem Argument "w "or "w+" von fopen()) kürzen wollen.
Warnung
flock() funktioniert nicht auf NFS und verschiedenen anderen vernetzten Dateisystemen.
Für weitere Detail konsultieren Sie bitte Ihre Betriebssystemdokumentation.
Bei einigen Betriebssystemen ist flock() auf dem Prozesslevel implementiert.
Wenn Sie ein multithreaded Server API wie ISAPI benutzen können Sie sich nicht auf flock() verlassen, um Dateien vor anderen PHP-Skripten zu schützen, welche in parallelen Threads der gleichen Server-Instanz laufen!
flock() wird antiquierten Dateisystemen wie FAT und dessen Derivate nicht unterstützt, und gibt deshalb in solchen Umgebungen immer FALSE zurück (Dies ist speziell bei Windows 98 Benutzern der Fall).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert die ganze Zahl, die kleiner oder gleich dem Parameter number ist.
Siehe auch ceil() und round().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Unabhängig davon, wie PHP läuft (CGI oder WEB-Server), wird der gesamte Ausgabe-Puffer geleert.
Dabei wird versucht den ganzen Inhalt an den Browser des Benutzers zu schicken.
Zurück
Zum Anfang
Nach vorne
Funktionen zur Ausgabesteuerung
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fopen() bindet eine benannte Resource, welche mittels filename spezifiziert wurde, an einen Stream.
Hat filename die Form "schema: / /..." wird angenommen, dass es sich hier um eine URL handelt und PHP sucht nach einem Protokollhandler (auch als Wrapper bekannt) für dieses Schema.
Sind keine Wrapper für dieses Protokoll registriert, gibt PHP als Hilfe zum Verfolgen potentieller Probleme in Ihrem Skript einen Hinweis aus und setzt dann weiter fort, obwohl filename eine reguläre Datei spezifiziert.
Ist PHP zu dem Schluss gekommen, dass filename eine lokale Datei spezifiziert, wird es versuchen, einen Stream an dieser Datei zu öffnen.
Die Datei muss für PHP verfügbar sein, weshalb Sie sicherstellen müssen, dass die Dateirechte diesen Zugriff ermöglichen.
Wenn Sie safe_mode oder open_basedir aktiviert haben, können weitere Einschränkungen zutreffen.
Kam PHP zum Schluss, dass es sich bei filename um ein registriertes Protokoll handelt, und ist dieses Protokoll als eine Netzwerk URL registriert, prüft PHP, ob allow_url_fopen Kam PHP zum Schluss, dass es sich bei filename um ein registriertes Protokoll handelt, und ist dieses Protokoll als eine Netzwerk URL registriert, prüft PHP, ob allow_url_fopen aktiviert ist.
Ist es nicht aktiviert, gibt PHP eine Warnung aus, und der Aufruf von fopen wird scheitern.
Anmerkung:
Die Liste der unterstützten Wrapper finden Sie unter Anhang I.
mode spezifiziert den von Ihnen gewünschten Zugriffstyp auf den Stream, kann die folgenden Werte haben:
'r' - öffnet die Datei nur zum Lesen und positioniert den Dateizeiger auf den Anfang der Datei.
'r+' - Öffnet die Datei zum Lesen und Schreiben und setzt den Dateizeiger auf den Anfang der Datei.
'w' - Öffnet die Datei nur zum Schreiben und setzt den Dateizeiger auf den Anfang der Datei sowie die Länge der Datei auf 0 Byte.
Wenn die Datei nicht existiert wird versucht sie anzulegen.
'w+' - Öffnet die Datei zum Lesen und Schreiben und setzt den Dateizeiger auf den Anfang der Datei sowie die Länge der Datei auf 0 Byte.
Wenn die Datei nicht existiert, wird versucht sie anzulegen.
'a' - Öffnet die Datei nur zum Schreiben.
Positioniert den Dateizeiger auf das Ende der Datei.
Wenn die Datei nicht existiert, wird versucht sie anzulegen.
'a+' - Öffnet die Datei zum Lesen und Schreiben.
Positioniert den Dateizeiger auf das Ende der Datei.
Wenn die Datei nicht existiert, wird versucht sie anzulegen.
Sie können den optionalen Parameter use_include_path auf '1' oder TRUE setzten, wenn Sie die Datei auch im include_path suchen möchten.
Der optionale vierte Parameter zcontext wird zur Spezifikation von Einstellungsparametern und Callbacks verwendet.
Scheitert das Öffnen der Datei, gibt die Funktion FALSE zurück.
Beispiel 1. fopen()
Wenn Sie Probleme mit dem Lesen oder Schreiben von Dateien haben und PHP als Servermodul benutzen, stellen Sie zunächst sicher, dass die Dateien und Verzeichnisse die Sie benutzen wollen auch für den Server-Prozess zugänglich sind (Rechtevergabe).
Achten Sie auf Windows-Systemen darauf, dass Sie als Verzeichnistrenner normale Schrägstriche '/' benutzen um plattformunabhängig programmieren zu können.
Sollten Sie dennoch Backslashes verwenden, vergessen Sie nicht diese zu escapen '\\'
Siehe auch Anhang I, fclose(), fgets(), fsockopen(), file(), file_exists(), is_readable(), socket_set_timeout() und popen().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion liest alle Daten von der aktuellen Position des Dateizeigers bis EOF aus und schreibt die Daten in den Ausgabepuffer.
Wenn ein Fehler auftritt, gibt fpassthru() FALSE Wenn ein Fehler auftritt, gibt fpassthru() FALSE zurück.
Andernfalls gibt fpassthru() die Anzahl der von handle gelesenen und zur Ausgabe weitergeleiteten Zeichen zurück.
Der Dateizeiger muss gültig sein und auf eine erfolgreich durch fopen(), popen() oder fsockopen() geöffnete Datei zeigen.
Eventuell müssen Sie rewind() aufrufen, um den Dateizeiger auf den Beginn der Datei zurückzusetzen, wenn Sie bereits Daten in die Datei geschrieben haben.
Die Datei wird geschlossen, wenn fpassthru() die Datei komplett gelesen hat (hinterlässt nutzloses handle).
Wenn Sie den Inhalt einer Datei nur nur in den Ausgabepuffer schreiben wollen ohne diese ändern bzw. an eine bestimmte Stelle gehen wollen, sollten Sie besser readfile() benutzen, bei der Sie sich den Aufruf von fopen() ersparen.
Anmerkung:
Wenn Sie fpassthru() auf eine binäre Datei unter Windows anwenden, sollten Sie sicherstellen, dass die Datei im Binärmodus geöffnet wurde, indem Sie ein b an den Mode-Parameter von fopen() anhängen.
Auch wenn es Ihr System nicht verlangt, sollten Sie den b Flag bei Binärdateien verwenden, um die Portabilität Ihrer Skripte zu erhöhen.
Siehe auch readfile(), fopen(), popen() und fsockopen()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. sprintf(): zero-padded integers
Beispiel 2. sprintf(): formatting currency
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fputs() ist ein Alias für die Funktion fwrite(), und ist in jeder Hinsicht identisch mit ihr.
Beachten Sie, dass der Parameter length optional ist, und dass, wenn er nicht benutzt wird, die gesamte Zeichenkette geschrieben wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fread() liest length Bytes vom Dateizeiger handle.
Dateiende) erreicht wurde (was eben früher zutrifft).
?php / / liest den Inhalt einer Datei in einen String $filename = "/ usr / local / simi.txt"; $handle = fopen ($filename, "r"); $contents = fread ($handle, filesize ($filename)); fclose ($handle);?
Anmerkung:
Auf Systemen, welche zwischen Binär - und Textdateien (z.B.
Windows) unterscheiden, muss die Datei mit 'b 'im fopen() Mode-Parameter geöffnet werden.
Siehe auch fwrite(), fopen(), fsockopen(), popen(), fgets(), fgetss(), fscanf(), file() und fpassthru().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert das in month, day und year übergebene Datum im Kalender der Französischen Revolution in einen Tag im Julianischen Datum.
September 1792 bis 22.
September 1806 im Gregorianischen Kalender), dieser Zeitraum geht aber immer noch über die Lebensdauer des Revolutionskalenders hinaus.
Zurück
Zum Anfang
Nach vorne
Nach oben
gregoriantojd
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
FriBiDi Funktionen
Nach oben
FTP-Funktionen
PHP Handbuch
Zurück
Nach vorne
Die Funktion fscanf() ist sscanf() ähnlich, wobei sie ihren Input aus der mit handle angegebenen Datei nimmt, und entsprechend dem angegebenen format interpretiert.
Sind nur 2 Parameter angegeben, werden die analysierten Werte als Array zurückgegeben.
Werden auch optionale Parameter übergeben, gibt die Funktion die Anzahl der ermittelten Werte zurück.
Die optionalen Parameter müssen referenziert übergeben werden.
Leerzeichen, Tabulator, etc.) im Format String gelten mit irgendwelchen Whitespace-Zeichen des Input-Streams als übereinstimmend.
Das heißt, dass auch ein Tabulator \t im Format String mit einem einzigen Leerzeichen im Input-Stream als übereinstimmend gelten kann.
Beispiel 1. fscanf()
Tue etwas mit den Werten} fclose($handle);
Beispiel 2. users.txt
Anmerkung:
Vor PHP 4.3.0 war die maximale Anzahl der von der Datei eingelesenen Zeichen 512 (oder bis zu dem ersten \n, was zuerst eintrat).
Seit PHP 4.3.0 werden beliebig lange Zeilen gelesen und interprtiert.
Siehe auch fread(), fgets(), fgetss(), sscanf(), printf(), und sprintf().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese neue Position, angegeben in Bytes vom Begin der Datei an, wird definiert durch Hinzufügen von offset zu der Position spezifiziert durch whence, deren Werte wie folgt definiert sind:
SEEK_SET - Setzt Position gleich offset bytes.
SEEK_CUR - Setzt Position auf die aktuelle Stelle plus offset.
SEEK_END - Setzt die Position ans Ende der Datei plus offset. (Um zu einer Position vor EOF zu gelangen, übergeben Sie in offset einen negativen Wert.)
Wenn whence nicht angegeben wurde, wird SEEK_SET angenommen.
Bei Erfolg wird '0' zurückgegeben, andernfalls '-1 '.
Beachten Sie, dass die Überschreitung des Dateiendes (EOF) nicht als Fehler bewertet wird.
Diese Funktion sollte nicht auf Dateizeiger angewandt werden, die durch die Verwendung von "http: / /" oder "ftp: / / "bei der Funktion fopen() erhalten wurden.
Anmerkung:
Das whence -Argument wurde nach PHP 4.0.0 eingeführt.
Siehe auch ftell() und rewind().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Öffnet eine Socket-Verbindung zum Internet (AF_INET, unter Verwendung von TCP oder UDP) oder unter Unix (AF_UNIX).
Für eine Internet-Verbindung wird eine TCP-Socket-Verbindung zu hostname über den Port port hergestellt.
Für eine UDP-Verbindung müssen Sie das Protokoll udp: / /hostname explizit angeben.
Bei einer UNIX-Verbindung wird hostname als Socket-Pfad interpretiert, port muss in diesem Fall 0 sein.
Der optionale Parameter timeout kann benutzt werden, um eine Fehlerwartezeit (Timeout-Wert) für den Verbindungsaufbau (in Sekunden) zu setzen.
Die Funktion fsockopen() gibt einen Zeiger auf eine Datei zurück, der in Verbindung mit anderen Datei-Funktionen (wie z.B. fgets(), fgetss(), fputs(), fclose(), feof()) gebraucht werden kann.
Wenn der Aufruf der Funktion scheitert, gibt er FALSE / falsch zurück und wenn die optionalen errno und errstr Argumente vorhanden sind, enthalten sie den aktuellen System-Fehler, der beim Aufruf der System-Funktion connect() Wenn der Aufruf der Funktion scheitert, gibt er FALSE / falsch zurück und wenn die optionalen errno und errstr Argumente vorhanden sind, enthalten sie den aktuellen System-Fehler, der beim Aufruf der System-Funktion connect() (Verbindungsaufbau) erscheint bzw. passiert ist.
Wenn die erhaltene errno 0 ist und die Funktion FALSE / falsch zurück gibt, ist dies ein Hinweis, dass der Fehler vor dem connect() -Aufruf geschah.
Das ist ein Problem, dass häufig mit der Initialisierung des Sockets zusammen hängt.
Beachten Sie bitte, dass das errno und errstr -Argument als Referenz zu übergeben sind.
Abhängig von der vorhandenen Umgebung kann die Verbindung zu einer UNIX-Domäne oder der optionale Verbindungsaufbau-Zeitfehler nicht zur Verfügung stehen.
Voreingestellt ist der Verbindungsaufbau im Block-Modus.
Sie können dies auf Nicht-Block-Modus ändern, indem Sie socket_set_blocking() benutzen.
Beispiel 1. fsockopen() -Beispiel:
Beispiel 2.
Gebrauch einer UDP-Verbindung:
?php $fp = fsockopen( "udp: / /127.0.0.1", 13, $errno; $errstr); if (!$fp) {echo "Fehler: $errno - $errstr br \n";} else {fwrite($fp ,"\n"); echo fread($fp, 26); fclose($fp);}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Trägt die Statistiken der mittel des Dateizeigers handle geöffneten Datei zusammen.
Diese Funktion ist ähnlich der Funktion stat(), außer dass sie mit einem offenen Dateizeiger anstatt eines Dateinamens arbeitet.
Gibt die Statistiken einer Datei in Form eines Arrays mit den folgenden Elementen zurück:
Gerät
Inode
Anzahl Links
User id des Eigentümers
Gruppen id Eigentümer
Gerätetype wenn ein Inode-Gerät *
Größe in Bytes
Zeit des letzten Zugriffs
Zeit der letzten Modifikation
Zeit der letzten Änderung
Blockgröße für Dateisystem I / O *
Anzahl der Blöcke
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe clearstatcache() für weitere Einzelheiten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die aktuelle Position des Dateizeigers handle zurück, z.B. seinen Offset im Dateistream.
Wenn ein Fehler auftritt, wird FALSE zurückgegeben.
Der Dateizeiger muss gültig sein und auf eine erfolgreich durch fopen() oder popen() geöffnete Datei zeigen.
Siehe auch fopen(), popen(), fseek() und rewind().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Semaphor und Shared Memory Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE, ansonsten FALSE zurück gegeben.
Geht eine Verzeichnisebene höher.
Zurück
Zum Anfang
Nach vorne
FTP-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE, ansonsten FALSE zurück gegeben.
Wechselt in den durch Verzeichnis angegebenen Datei-Ordner.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg einen Stream zurück, sonst FALSE.
ftp_connect() stellt eine FTP-Verbindung zum angegebenen Host her.
Der Port -Parameter enthält optional einen alternativer Port für die Verbindung.
Fehlt er oder ist er NULL, wird der Standard-FTP-Port 21 benutzt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Falls erfolgreich wird TRUE, sonst FALSE zurück gegeben.
ftp_delete() löscht die per path angegebene Datei auf dem FTP-Server.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sofern erfolgreich wird TRUE, ansonsten FALSE zurück gegeben.
ftp_fget() lädt das remote_file vom FTP-Server und schreibt es in die per Datei-Pointer angegebene Datei fp.
Der Transfer-Modus-Parameter mode muss entweder FTP_ASCII oder FTP_BINARY sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE, sonst FALSE zurück gegeben.
ftp_fput() übertragt das per Datei-Zeiger fp benannte und geöffnete File zum FTP-Server.
Die übertragenen Daten werden in der über remote_file bestimmten Datei auf dem FTP-Server gespeichert.
Der mode -Übertragungs-Parameter muss entweder FTP_ASCII oder FTP_BINARY sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE, sonst FALSE zurück gegeben.
ftp_get() lädt das remote_file vom FTP-Server und speichert es unter local_file auf ihren lokalen Arbeitsplatz.
Der anzugebende Transfer-Parameter mode muss entweder FTP_ASCII oder FTP_BINARY sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Tabelle 1.
Beispiel 1. ftp_get_option() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn die Anmeldung erfolgreich war, wird TRUE, anderenfalls FALSE zurück gegeben.
Anmeldung beim angegebenen FTP-Stream.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird ein UNIX-Timestamp zurück gegeben, sonst -1.
ftp_mdtm() prüft den Zeitpunkt der letzten Dateiänderung und liefert diesen als UNIX-Timestamp zurück.
Beim Auftreten eines Fehlers wird -1 zurück gegeben.
Nicht alle FTP-Server unterstützen diese Funktionalität.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird der Name des erzeugten Ordners, ansonsten FALSE zurück gegeben.
Erzeugt das angegebene Verzeichnis.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1. ftp_nb_get() example
Beispiel 2.
Beispiel 3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1. ftp_nb_put() example
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Array aus Dateinamen oder - bei Fehler - FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE, ansonsten FALSE zurück gegeben.
Im passiven Modus werden Datenverbindungen durch den Client statt durch den Server initiiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE, sonst FALSE zurück gegeben.
ftp_put() speichert die per local_file bestimmte Datei auf den FTP-Server als Datei namens remote_file.
Der Übertragungs-Modus-Parameter mode muss entweder FTP_ASCII oder FTP_BINARY lauten.
Beispiel 1. ftp_put() -Beispiel:
$upload = ftp_put ($conn_id, "$destination_file", "$source_file", FTP_ASCII);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt das aktuelle Verzeichnis oder - im Fehlerfall - FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ftp_connect() schließt die per ftp_stream bezeichnete FTP-Sitzung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ftp_rawlist() führt den FTP LIST-Befehl aus und gibt das Ergebnis in einem Array zurück.
Jedes Array-Element entspricht einer Textzeile.
Die Ausgabe wird von PHP in keinster Weise ausgewertet.
Das System-Art-Merkmal, welches per ftp_systype() -Funktion zurück gegeben wird, kann benutzt werden um die Auswertungsart der Ergebnisrückgabe zu ermitteln.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Falls erfolgreich wird TRUE, sonst FALSE zurück gegeben.
ftp_rename() benennt die mit from angegebene Datei in to um.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE, ansonsten FALSE zurück gegeben.
Löscht das angegebene Verzeichnis.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Tabelle 1.
Beispiel 1. ftp_set_option() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei erfolgreicher Ausführung wird TRUE, sonst FALSE zurück gegeben
Sie sind nützlich, um Sachen wie Datei-Zugriffsrechte und Gruppen-Mitgliedschaften zu handhaben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Dateigrösse oder -1 bei Fehlern zurück.
Nicht alle FTP-Server unterstützen diese Funktionalität.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
FALSE bei einem Fehler.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Nimmt den Dateizeiger handle, und verkürzt die Datei auf die Länge size.
Diese Funktion gibt bei Erfolg TRUE, ansonsten FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt das Argument des an der arg_num stehenden Stelle in eine benutzer-definierte Liste zurück.
Der Aufruf von func_get_arg() ausserhalb einer Funktions-Definition erzeugt eine Warnung.
Ist arg_num grösser als die Anzahl der vorhandenen Argumente, wird eine Warnung aus - und FALSE zurück gegeben.
Argument ist: ". func_get_arg (1)." br \n";}} foo (1, 2, 3);?
func_get_arg() kann in Verbindung mit func_num_args() und func_get_args() gebraucht werden, um benutzer-definierte Funktionen mit variabler Argument-Liste zu erstellen.
Anmerkung:
Diese Funktion steht ab PHP 4 zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sollten sie dies ausserhalb einer eigenen (benutzer-definierten) Funktion anwenden, wird eine Warnung ausgegeben.
Argument ist: ". func_get_arg (1)." br \n";} $arg_list = func_get_args(); for ($i = 0; $i $numargs; $i++) {echo "Argument $i ist: ". $arg_list[$i]." br \n";}} foo (1, 2, 3);?
func_get_args() kann in Verbindung mit func_num_args() und func_get_arg() verwendet werden, um einer benutzer-definierten Funktion eine Argument-Liste mit variabler Länge zu übergeben.
Anmerkung:
Diese Funktion steht ab PHP 4 zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Falls func_num_args() ausserhalb einer benutzer-definierten Funktion Verwendung findet, wird eine Warnung ausgegeben.
?php function foo() {$numargs = func_num_args(); echo "Anzahl der Argumente: $numargs\n";} foo (1, 2, 3); / / Ausgabe: 'Anzahl der Argumente:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Prüft die Liste der definierten Funktionen auf das Vorhanden sein der Funktion mit dem Namen function_name.
Sofern vorhanden wird TRUE, sonst FALSE zurück gegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
fwrite() schreibt den Inhalt einer Zeichenkette string in die Datei, auf welche der handle Dateizeiger zeigt.
Wenn der length Parameter gegeben ist, wird das Schreiben nach length Bytes beendet, oder wenn das Dateiende (EOF) erreicht ist, je nachdem, was eher eintritt.
fwrite() gibt bei Erfolg die Anzahl der geschriebenen Bytes zurück, andernfalls FALSE.
Bedenken Sie, dass wenn der length Parameter gesetzt ist, die magic_quotes_runtime Konfigurations-Option ignoriert wird und somit keine Slashes mehr von der Zeichenkette string entfernt werden.
Anmerkung:
Auf Systemen, welche zwischen Binär - und Textdateien (z.B.
Windows) unterscheiden, muss die Datei mit 'b 'im fopen() Mode-Parameter geöffnet werden.
Beispiel 1.
Ein einfaches Beispiel für fwrite
?php $filename = 'test.txt'; $somecontent = "Add this to the file\n"; / / Sichergehen, dass die Datei existiert und beschreibbar ist if (is_writable($filename)) {/ / Wir öffnen $filename im "Anhänge "- Modus. / / Der Dateizeiger befindet sich am Ende der Datei, und / / dort wird $somecontent später mit fwrite() geschrieben. if (!$handle = fopen($filename, 'a')) {print "Cannot open file ($filename)"; exit;} / / Schreibe $somecontent in die geöffnete Datei. if (!fwrite($handle, $somecontent)) {print "Cannot write to file ($filename)"; exit;} print "Success, wrote ($somecontent) to file ($filename)"; fclose($handle);} else {print "The file $filename is not writable";}?
Siehe auch fread(), fopen(), fsockopen(), popen() und fputs().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
getallheaders() ist ein Alias für die Funktion apache_request_headers().
Die Funktion liefert ein assoziatives Array zurück, das alle HTTP-Header der aktuellen HTTP-Anfrage enthält.
Lesen Sie bitte die Dokumentation zu apache_request_headers() um mehr Informationen über die Funktionsweise zu erhalten.
Anmerkung:
In PHP 4.3.0 wurde aus getallheaders() ein Alias für Tatsächlich wurde die Funktion umbenannt.
Der Grund: diese Funktion funktioniert nur, wenn PHP als Modul für Apache kompiliert wurde.
Siehe auch apache_request_headers().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
get_browser() ermittelt die Möglichkeiten des auf das PHP-Skript zugreifenden Browsers.
Dies geschieht durch Auslesen der zum Browser vorhandenen Werte aus der Datei browscap.ini.
Dieses Verhalten können sie ändern (so z.B. den Namen der INI-Datei), indem sie den optionalen user_agent -Parameter an die get_browser() -Funktion übergeben.
Dazu gehören z.B. die Haupt - und Unterversions-Nummer des Browsers sowie TRUE / false-Werte für Browser - Fähigkeiten Dazu gehören z.B. die Haupt - und Unterversions-Nummer des Browsers sowie TRUE / false-Werte für Browser - Fähigkeiten (u.a.
Nicht gemeint ist hier die aktuell vorhandene Nutzung.
Ist der Browser so konfiguriert, dass er z.Zt. keine Cookies annehmen soll, wird trotzdem TRUE in Bezug auf die Cookie-Fähigkeiten zurückgegeben, wenn in der Datei browscap.ini der entsprechende Wert TRUE ist.
Das Format dieser Datei sollte selbsterklärend sein.
Das folgende Beispiel zeigt, wie man alle verfügbaren Informationen zu einem gerade benutzten Browser anzeigen könnte:
Beispiel 1. get_browser() -Beispiel:
?php function list_array ($array) {while (list ($key, $value) = each ($array)) {$str .= "b $key: / b $value br \n";} return $str;} echo "$HTTP_USER_AGENT hr \n"; $browser = get_browser(); echo list_array ((array) $browser);?
Die Ausgabe des obigen Skripts könnte so aussehen:
Mozilla / 4.5 [en] (X11; U; Linux 2.2.9 i586) hr b browser_name_pattern: / b Mozilla / 4\.5.* br b parent: / b Netscape 4.0 br b platform: / b Unknown br b majorver: / b 4 br b minorver: / b 5 br b browser: / b Netscape br b version: / b 4 br b frames: / b 1 br b tables: / b 1 br b cookies: / b 1 br b backgroundsounds: / b br b vbscript: / b br b javascript: / b 1 br b javaapplets: / b 1 br b activexcontrols: / b br b beta: / b br b crawler: / b br b authenticodeupdate: / b br b msn: / b br
Weitere Informationen (incl.
Bezugsquellen für browscap.ini -Dateien) finden sie in der PHP-FAQ unter http: / /www.php.net / FAQ.php.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt den derzeitigen Wert der Variablen der PHP-Konfiguration, die mit varname ausgewählt wurde oder FALSE bei einem Fehler.
Bringt keine Informationen über die Konfiguration, mit der PHP kompilert wurde, oder die aus der Apache-Konfiguration gelesen wird (mittels der php3_configuration_option Anweisungen).
Um herauszubekommen, ob ein configuration file, benutzt wird, sollte versucht werden, den Wert der cfg_file_path Einstellung zu erhalten.
Ist dieser Wert verfügbar, wird eine Konfigurationsdatei verwendet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt den Namen der Klasse zurück, von der obj eine Instanz ist.
Siehe auch get_parent_class(), is_subclass_of()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert ein String-Array zurück, das mit den Namen aller in der Klasse class_name definerten Methoden gefüllt ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert ein String-Array zurück, das mit den Standard-Elementen der Klasse class_name gefüllt ist.
Standard-Elemente sind all die Elemente, die bereits in der Klassendefinition mit 'var' definiert wurden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt den Namen des Besitzers des aktuellen PHP-Scripts an.
Siehe auch getmyuid(), getmypid(), getmyinode(), und getlastmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt das gegenwärtige Arbeitsverzeichnis zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wird kein Timestamp angegeben, wird die lokal gültige Zeit berücksichtigt.
"seconds" - Sekunden
"minutes" - Minuten
"hours" - Stunden
"mday" - Tag des Monats
"wday" - numerischer Tag der Woche: von 0 als Sonntag bis 6 als Samstag
"mon" - Monat als Zahl
"year" - Jahr als Zahl
"yday" - Tag des Jahres als Zahlwert, z.B. "299 "
"weekday" - ausgeschriebener Wochentag, z.B. "Friday "
"month" - ausgeschriebener Monatsname, z.B. "January "
Beispiel 1. getdate() Beispiel
$heute = getdate(); $monat = $heute['month']; $tag_monat = $heute['mday']; $Jahr = $heute['year']; echo "$monat $tag_monat, $jahr";
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein Array mit den Namen aller im aktuellen Skript definierten Klassen zurück.
Anmerkung:
In PHP 4.0.1pl2 werden drei zusätzliche Klassen am Anfang des Array zurückgegeben: stdClass (definiert in Zend / zend.c), OverloadedTestClass (definiert in ext / standard / basic_functions.c) und Directory (definiert in ext / standard / dir.c).
Abhängig von den Optionen, mit denen PHP kompiliert wurde, könnnen noch weitere Klassen vorhanden sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt den Wert der Umgebungsvariablen varname an oder FALSE bei einem Fehler.
Eine Liste aller Umgebungsvariablen wird mit phpinfo() Eine Liste aller Umgebungsvariablen wird mit phpinfo() angezeigt.
Ein Überlick über viele Umgebungsvariablen und deren Bedeutung findet sich unter den CGI Spezificationen, speziell auf der Seite der Umgebungsvariablen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion zeigt die Namen aller Funktionen, die im Modul, welches von module_name angezeigt wird, an.
Zum Beispiel würden diese Zeilen
print_r( get_extension_funcs("xml")); print_r(get_extension_funcs("gd"));
Siehe auch: get_loaded_extensions()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei einem Fehler wird die ip_address zurück gegeben.
Siehe auch: gethostbyname().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die IP-Adresse passend zu hostname zurück.
Siehe auch: gethostbyaddr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt eine Liste von IP-Adressen zurück, zu denen der angegebene Internet-Host hostname aufgelöst wurde.
Siehe auch gethostbyname(), gethostbyaddr(), checkdnsrr(), getmxrr(), und die named(8) Bedienungs-Anleitung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
get_html_translation_table() ermittelt die intern benutzte Übersetzungs-Tabelle, die von den Funktionen htmlspecialchars() und htmlentities() benutzt wird.
Es gibt zwei neue Parameter (HTML_ENTITIES und HTML_SPECIALCHARS), die es ihnen ermöglichen, die gewünschte Tabelle auszuwählen und wie bei den htmlspecialchars() bzw. htmlentities() -Funktionen können Sie optional den Quote-Stil, mit dem Sie arbeiten, angeben.
Voreingestellt ist der ENT_COMPAT-Modus.
Vergleichen Sie dazu die Modus-Beschreibung unter htmlspecialchars().
Beispiel 1.
Beispiel zur Übersetzungs-Tabelle
$trans = get_html_translation_table (HTML_ENTITIES); $str = "Hallo Frau Krämer"; $encoded = strtr ($str, $trans);
$trans = array_flip ($trans); $original = strtr ($str, $trans);
Diese Funktion wurde in PHP 4.0 neu hinzu gefügt.
Siehe auch htmlspecialchars(), htmlentities(), strtr() und array_flip().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Mit GetImageSize() ermitteln Sie die Daten jeder GIF -, JPG -, PNG oder SWF -Datei.
Es werden die Ausmaße in Abhängigkeit vom Grafik-Typ sowie die Höhe und Breite als ein String zurückgegeben.
Dieser kann innerhalb eines regulären HTML IMG -Tags verwendet werden.
Es wird ein Array aus 4 Elementen zurück gegeben.
Im Array-Index 0 steht die Breite.
Index 1 enthält die Höhe, 2 ein Flag je nach Grafik-Typ (1 = GIF, 2 = JPG, 3 = PNG, SWF = 4) und Index 3 die richtige Zeichenkette im Format "height=xxx width=xxx "zur Verwendung im IMG-Tag von HTML.
Beispiel 1.
Grafik-Ausmaße ermitteln per GetImageSize:
?php $size = GetImageSize ("img / flag.jpg");?
IMG SRC=" img / flag.jpg "?php echo $size[3];?
Mit dem optionalen imageinfo -Parameter können Sie weitere Informationen der Grafik-Datei auslesen.
Z.Zt. unterstützt dies die verschiedenen JPG Z.Zt. unterstützt dies die verschiedenen JPG APP-Markierungen per assoziativem Array.
Einige Programme nutzen diese Markierungen, um Text in diese Grafiken einzubinden.
Gebräuchlich ist die Einbettung von IPTC http: / /www.iptc.org / Informationen in die APP13-Marke.
Sie können iptcparse() benutzen, um die binäre APP13-Marke in ein lesbares Format zu übertragen.
Beispiel 2.
GetImageSize mit IPTC-Informationen
?php $size = GetImageSize ("testimg.jpg", $info); if (isset ($info["APP13"])) {$iptc = iptcparse ($info["APP13"]); var_dump ($iptc);}?
Anmerkung:
Dieser Befehl funktioniert auch ohne GD-Bibliothek.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion stellt ein assoziatives Array der Namen aller Dateien zur Verfügung, die mit include_once() in ein Script geladen wurden.
Die Indexe dieses Arrays sind die Dateinamen, die in include_once() benutzt wurden, ohne die Endung ".php ".
Anmerkung:
Ab PHP 4.0.1pl2 setzt diese Funktion voraus, dass die Dateien, die mit include_once aufgerufen wurden, die Endung ".php" haben.
Andere Endungen funktionieren nicht.
Siehe auch: require_once(), include_once() und get_required_files().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt die Uhrzeit der letzten Änderung der aktuellen Seite.
Der Wert wird als Unix-Timestamp angezeigt, welcher für date() benutzt werden kann.
Bringt FALSE bei einem Fehler.
Beispiel 1. getlastmod() Beispiel
/ / outputs e.g. 'Last modified:
March 04 1998 20:43:59 .' echo "Last modified: ".date ("F d Y H:i:s .", getlastmod());
Siehe auch date(), getmyuid(), get_current_user(), getmyinode() und getmypid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieser Funktion zeigt die Namen aller Module an, die in den PHP-Interpreter kompiliert und geladen wurden
Zum Beispiel gibt diese Zeile
print_r (get_loaded_extensions());
Array ([0] = xml [1] = wddx [2] = standard [3] = session [4] = posix [5] = pgsql [6] = pcre [7] = gd [8] = ftp [9] = db [10] = Calendar [11] = bcmath)
Siehe auch: get_extension_funcs()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt die aktuelle Konfiguration von magic_quotes_gpc. (0 für aus, 1 für an).
Siehe auch get_magic_quotes_runtime() und set_magic_quotes_runtime().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt die aktuelle Konfiguration von magic_quotes_runtime. (0 für aus, 1 für an).
Siehe auch get_magic_quotes_gpc() und set_magic_quotes_runtime().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setting use_include_path to 1 will result in PHP trying to open the file along the standard include path as per the include_path Setting use_include_path to 1 will result in PHP trying to open the file along the standard include path as per the include_path directive.
Beispiel 1.
Beispiel 2.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sucht im DNS nach MX-Datensätzen die zu hostname passen.
Gibt TRUE / wahr zurück, wenn irgendwelche Daten gefunden wurden, ansonsten - oder wenn ein Fehler auftrat - wird FALSE / falsch zurück gegeben.
Eine Liste der gefundenen MX-Einträge wird im Array mxhosts zurück gegeben.
Wenn das optionale weight -Array vorhanden ist, wird es mit den gefundenen Prioritäts-Informationen gefüllt.
See also checkdnsrr(), gethostbyname(), gethostbynamel(), gethostbyaddr(), und die named(8) Bedienungs-Anleitung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt den inode des aktuellen Scripts oder FALSE bei einem Fehler.
Siehe auch getmyuid(), get_current_user(), getmypid() und getlastmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt die aktuelle ID des PHP-Prozesses oder FALSE bei einem Fehler.
Achtung:
Wenn PHP als Server-Modul läuft, ist es nicht garantiert, dass Scripts unter verschiedenen PIDs laufen.
Siehe auch getmyuid(), get_current_user(), getmyinode() und getlastmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt die User-ID des aktuellen Scripts oder FALSE bei einem Fehler.
Siehe auch getmypid(), get_current_user(), getmyinode() und getlastmod().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein assoziatives Array der für das angegebene Objekt obj Diese Funktion gibt ein assoziatives Array der für das angegebene Objekt obj definierten Eigenschaften zurück.
Wenn Variablen der Klasse, von der obj eine Instanz ist, kein Wert zugewiesen wurde, werden diese nicht im Array zurückgegeben.
Beispiel 1.
Gebrauch von get_object_vars()
?php class Punkt2D {var $x, $y; var $bezeichnung; function Punkt2D($x, $y) {$this - x = $x; $this - y = $y;} function setzeBezeichnung($bezeichnung) {$this - bezeichnung = $bezeichnung;} function gibPunkt() {return array("x "= $this - x, "y" = $this - y, "bezeichnung "= $this - bezeichnung);}} $p1 = new Punkt2D(1.233, 3.445); print_r(get_object_vars($p1)); / / "$bezeichnung" ist deklariert, aber nicht definiert / / Array / / (/ / [x] = 1.233 / / [y] = 3.445 / /) $p1 - setzeBezeichnung("point #1"); print_r(get_object_vars($p1)); / / Array / / (/ / [x] = 1.233 / / [y] = 3.445 / / [bezeichnung] = point #1 / /)?
Siehe auch get_class_methods(), get_class_vars()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt den Namen der Elternklasse der Klasse zurück, von der obj eine Instanz ist.
Siehe auch get_class(), is_subclass_of()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
TCP, IP, UDP, RAW) anhand der Datei / etc / protocols zurück.
Siehe auch getprotobynumber().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion getprotobynumber() gibt den Protokoll-Namen passend zur angegebenen Protokoll - number anhand der Datei / etc / protocols zurück.
Siehe auch: getprotobyname().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert den höchsten Wert, den ein Aufruf der Funktion rand() auf dieser Plattform zurückgeben kann.
Siehe auch rand(), srand() mt_rand(), mt_srand() und mt_getrandmax().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion stellt ein assoziatives Array der Namen aller Dateien zur Verfügung, die mit require_once() in ein Script geladen wurden.
Dieses Beispiel
?php require_once( "local.php"); require_once(".. / inc / global.php"); for ($i=1; $i 5; $i++) include "util".$i ."php"; echo "Required_once files\n"; print_r (get_required_files()); echo "Included_once files\n"; print_r (get_included_files());
Anmerkung:
Andere Endungen funktionieren nicht.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dies ist eine Schnittstlle zu getrusage( 2).
Stellt ein assoziatives Array mit den Daten zur Verfügung, die der Systemaufruf ausgibt.
Wenn who 1 ist, wird getusage mit RUSAGE_CHILDREN aufgerufen.
Alle Einträge können über ihre Dukumentenfeldernamen aufgerufen werden.
Beispiel 1. getrusage() Beispiel
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dies geschieht anhand des angegebenen Wertes für protocol mittels der Datei / etc / services.
Siehe auch: getservbyport().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Inhalt von protocol ist entweder TCP oder UDP.
Siehe auch: getservbyname().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt einen übersetzten String zurück, falls einer in der Übersetzungstabelle gefunden wird, andernfalls den übergebenen Originalstring.
Als Alias für diese Funktion kann ein Unterstrich benutzt werden.
Beispiel 1. gettext() -check
?php / / Sprache auf "German" setzen putenv ("LANG=de"); / / Pfad zu den Übersetzungstabellen setzen bindtextdomain ("myPHPApp", ". / locale"); / / Textbereich auswählen textdomain ("myPHPApp"); / / Text ausgeben print (gettext ("Welcome to My PHP Application"));?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Es handelt sich um eine Schnittstelle zum Systemaufruf von gettimeofday( 2).
Folgende Arrayelemente sind vorhanden:
"sec" - Sekunden
"usec" - Microsekunden
"minuteswest" - Minuten westlich von Greenwich
"dsttime" - Art der Korrektur der Sommerzeit
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert den Namen des Typs der Variablen var zurück.
Mögliche Ergebnisse sind:
"double"
Siehe auch settype().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Steht ihr System in Deutschland (GMT + 01:00), wird im Beispiel unten (1.
Zeile "Dec 31 1997 23:00:00" zurück gibt.
Beispiel 1. gmdate() Beispiel
echo date ("M d Y H:i:s", mktime (0,0,0,1,1,1998)); echo gmdate("M d Y H:i:s", mktime (0,0,0,1,1,1998));
Siehe auch: date(), mktime(), gmmktime() und strftime().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die angegebenen Parameter werden aber als GMT-Datum / Zeit interpretiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bewirkt das gleiche wie strftime() mit dem Unterschied, dass die GMT-Zeit zurück gegeben wird.
In Deutschland (GMT + 01:00) wird im folgenden Beispiel bei strftime "Dez 31 1998 00:00:00", bei gmstrftime dagegen "Dec 31 1998 23:00:00 "ausgegeben.
Beispiel 1. gmstrftime() Beispiel
setlocale (LC_TIME, 'de_DE'); echo strftime ("%b %d %Y %H:%M:%S", mktime(0,0,0,12,31,98)) ."\n"; echo gmstrftime ("%b %d %Y %H:%M:%S", mktime(0,0,0,12,31,98)) ."\n";
Siehe auch strftime().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert das in month, day und year übergebene Datum im Gregorianischen Kalender in einen Tag im Julianischen Datum.
Chr. bis 9999 n.
Der Gregorianische Kalender wurde allerdings erst am 15.
Oktober nach dem bis dahin gültigen Julianischen Kalender) von Papst Gregor XIII. eingeführt, in einigen Ländern erst sehr viel später.
So übernahmen die Briten den Gregorianischen Kalender 1752, die UDSSR 1918 und Griechenland erst im Jahre 1923.
In den meisten europäischen Ländern wurde vor dem Gregorianischen der Julianische Kalender benutzt.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
frenchtojd
Nach oben
jddayofweek
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Zurück
Zum Anfang
Nach vorne
Zlib Komprimierungsfunktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. gzopen() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
header() wird zum Senden von HTTP Anfangsinformationen (Headern) benutzt.
Weitere Informationen über HTTP Header finden Sie unter HTTP / 1.1 specification.
Der optionale Parameter replace gibt an, ob der Header einen vorhergehenden Header ersetzten soll, oder ob ein zweiter Header des selben Typs hinzugefügt werden soll.
Sie können jedoch als das zweite Argument FALSE übergeben, und so mehrere Header desselben Typs erzwingen.
Zum Beispiel:
Der zweite optionale Parameter http_response_code spezifiziert den HTTP Response Code. (Dieser Parameter ist in PHP 4.3.0 und höher verfügbar.)
Es gibt zwei Spezialfälle von Header-Aufrufen.
Der erste ist ein Header, der mit "HTTP /" beginnt (ob groß - oder Kleinschreibung ist nicht relevant) und zum Herausfinden des zu sendenden HTTP Statuscodes verwendet wird.
Wenn Sie zum Beispiel Apache konfiguriert haben, um ein PHP Skript zum Bearbeiten von Anforderungen fehlender Dateien (mittels der ErrorDocument Direktive) zu verwenden, möchten Sie bestimmt sicherstellen, dass Ihr Skript den passenden Statuscode generiert.
Anmerkung:
Die HTTP Status Header Zeile wird immer die erste zum Client gesendete sein, egal ob der aktuelle header() - Aufruf der erste ist oder nicht.
Der Status kann mittels header() jederzeit mit einer neuen Statuszeile überschrieben werden, es sei denn, dass die HTTP Header bereits gesendet wurden.
Anmerkung:
In PHP 3 funktioniert dies nur, wenn PHP als Apache Modul kompiliert wurde.
Sie können den gleichen Effekt erzielen, wenn Sie den Status Header verwenden.
Der zweite Spezialfall ist der "Location:" Header.
Es wird nicht nur der Header an den Browser geschickt, sondern auch ein REDIRECT (302) Statuscode, wenn nicht bereits ein 3xx Statuscode gesendet wurde.
?php header( "Location: http: / /www.example.com / "); / / Umleitung des Browsers exit; / / Sicherstellen, dass nicht trotz Umleitung / / der nachfolgende Code ausgeführt wird.?
Anmerkung:
HTTP / 1.1 verlangt einen absoluten URI inkl. dem Schema, Hostnamen und absoluten Pfad als Argument von Location:, aber manche Clients akzeptieren auch relative URIs.
Gewöhnlich können Sie mittels $_SERVER[ 'HTTP_HOST'], $_SERVER['PHP_SELF'] und dirname() aus einem relativen Link einen absoluten URI selbst erstellen:
PHP-Skripte erzeugen oft dynamische Inhalte, die weder vom Browser noch von irgendeinem Proxy zwischen Web-Server und Client-Browser gepuffert ("gecached") werden sollen bzw. dürfen.
Bei vielen Proxies und Browsern kann das Cachen wie folgt unterbunden werden:
Mon, 26 Jul 1997 05:00:00 GMT"); / / Datum aus Vergangenheit header("Last-Modified: ". gmdate("D, d M Y H:i:s")." GMT"); / / immer geändert header("Cache-Control: no-store, no-cache, must-revalidate"); / / HTTP / 1.1 header("Cache-Control: post-check=0, pre-check=0", false); header("Pragma: no-cache"); / / HTTP / 1.0?
Anmerkung:
Es könnte auch sein, dass Ihre Seiten nicht zwischengespeichert werden, auch wenn Sie obigen Header nicht ausgeben.
Es gibt eine Anzahl Optionen, welche die Benutzer in deren Browser einstellen können, um das standardmäßige Verhalten bezüglich des Caching zu verändern.
Durch das Senden obiger Header sollten Sie irgendwelche Einstellungen, welche die Ausgabe Ihres Skriptes zwischenspeichern würden, außer Kraft setzen.
Weiters können Sie session_cache_limiter() und die Konfigurationsoption session.cache_limiter verwenden, um die korrekten Header bezüglich Caching automatisch generieren zu lassen, sollten Sie Sessions benutzen.
Beachten Sie, dass header() Beachten Sie, dass header() aufgerufen werden muss, bevor eine Ausgabe gesendet wurde, egal ob normale HTML Tags, leere Zeilen in einer Datei oder von PHP.
Ein weit verbreiteter Fehler ist mittels include(), require(), oder anderen Dateizugriffsmethoden Code zu lesen, und so unbewusst Leerzeichen oder Leerzeilen auszugeben, bevor header() aufgerufen wird.
Das gleiche Problem besteht auch bei Verwendung einer einzigen PHP / HTML Datei.
html ?php / / Dies funktioniert nicht.
Beachten Sie die / / obige Ausgabe noch vor dem header( )-Aufruf header('Location: http: / /www.example.com / ');?
Anmerkung:
In PHP 4 können Sie dieses Problem umgehen, indem Sie Output Buffering benutzen (mit dem Overhead, dass alle Ihre Ausgaben an den Browser gepuffert werden, bis Sie diese Senden).
Um dies zu tun, verwenden Sie in Ihrem Skript ob_start() und ob_end_flush(), oder setzten die Konfigurationsdirektive output_buffering in der php.ini bzw. in den Server Konfigurationsdateien.
Wollen Sie den Benutzer auffordern, die von Ihnen gesendeten Daten wie z.B. eine generierte PDF Datei zu speichern, können Sie den Header Content-Disposition verwenden, um einen empfohlenen Dateinamen anzubieten und den Browser zu zwingen, den Dialog zum Speichern anzuzeigen.
?php / / Wir werden eine PDF Datei ausgeben header( "Content-type: application / pdf"); / / Es wird downloaded.pdf benannt header("Content-Disposition: attachment; filename=downloaded.pdf"); / / Die originale PDF Datei heißt original.pdf readfile('original.pdf');?
Anmerkung:
Der Microsoft Internet Explorer 4.01 hat einen Bug, der diese Funktionalität verhindert, und es gibt keinen Workaround.
Auch in Microsoft Internet Explorer 5.5 existiert ein Bug, der dies behindert, dieser kann jedoch mittels einem Upgrade auf Service Pack 2 oder neuer behoben werden.
Anmerkung:
Ist safe mode aktiviert, wird die UID des Skriptes dem realm Teil des Headers WWW-Authenticate (für HTTP Authentifizierung verwendet) hinzugefügt, sollten Sie diesen Header setzen.
Siehe auch headers_sent(), setcookie() und den Teil HTTP Authentifizierung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
headers_sent() gibt TRUE zurück, wenn die HTTP-Header bereits gesendet wurden, ansonsten wird FALSE zurückgegeben.
Sind die optionalen Parameter file und line angegeben, werden der Dateiname und die Zeilennummer von wo die Ausgabe begann, in den Variablen file und line gespeichert.
Sobald der Header-Block gesendet wurde, können Sie keine weiteren Header-Zeilen mit der Funktion header() Sobald der Header-Block gesendet wurde, können Sie keine weiteren Header-Zeilen mit der Funktion header() hinzufügen.
Mittels dieser Funktion können Sie aber zumindest Fehlermeldungen bezüglich der HTTP Header vermeiden.
Eine andere Möglichkeit ist die Verwendung von Output Buffering.
Neue Parameter:
Die optionalen Parameter file und line wurden in PHP 4.3.0 eingeführt.
Beispiel 1.
Beispiele für headers_sent()
Beachten Sie, dass $filename und $linenum für / / einen späteren Einsatz übergeben werden. / / Weisen Sie ihnen davor keine Werte zu. if (!headers_sent($filename, $linenum)) {header ('Location: http: / /www.example.com / '); exit; / / Wahrscheinlich wollen Sie hier eine Fehlermeldung auslösen} else {print "Headers already sent in $filename on line $linenum\n ". "Cannot redirect, for now please click this a". "href=\"http: / /www.example.com\ "link / a instead\n"; exit;}?
Siehe auch ob_start(), trigger_error() und header() für detailliertere Informationen zu diesem Thema.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist gleich hebrev(), mit dem Unterschied, dass Zeilenumbrüche (\n) zu "br \n" umgewandelt werden.
Der optionale Parameter max_chars_per_line Der optionale Parameter max_chars_per_line entspricht der Zeichenzahl pro Ausgabe-Zeile.
Wortbrüche werden, soweit möglich, vermieden.
Siehe auch: hebrev().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der optionale Parameter max_chars_per_line entspricht der Zeichenzahl pro Ausgabe-Zeile.
Wortbrüche werden, soweit möglich, vermieden.
Siehe auch: hebrevc().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die dezimale Entsprechung der in hex_string übergebenen hexadezimalen Zahl.
Der größte konvertierbare Wert ist "7fffffff", das entspricht 2147483647 dezimal (2 hoch 32 minus 1).
Siehe auch dechex() sowie bindec() und octdec().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion highlight_file() erzeugt die Ausgabe des Codes der Datei filename mit hervorgehobener Syntax.
Dabei werden die Farben des in PHP eingebauten Syntax-Highlighter benutzt.
Beispiel 1.
Erzeugung einer hervorgehobenen URL
Zur Erzeugung einer URL, die Code eines ihm übermittelten Skripts hervorgehoben dargestellen kann, machen wir Gebrauch von der "ForceType "-Anweisung des Apachen um eine richtige URL zu erzeugen.
Zusätzlich benutzen wir die Funktion highlight_file(), um das Code-Listing wie gewünscht an zu zeigen.
In ihrer httpd.conf sollten sie folgendes hinzu fügen:
Jetzt erzeugen sie eine Datei namens "source" und speichern es in dem Root-Verzeichnis ihrer Web-Seite.
HTML HEAD TITLE Source Display / TITLE / HEAD BODY BGCOLOR=" white "?php $script = getenv ("PATH_TRANSLATED"); if(!$script) {echo" BR B Fehler:
Skript-Name nötig / B BR ";} else {if (ereg("(\.php_BAR_\.inc)$",$script)) {echo" H1 Source von: $PATH_INFO / H1 \n HR \n"; highlight_file($script);} else {echo "H1 ERROR:
Nur PHP oder Include-Skripte sind erlaubt / H1 ";}} echo" HR Erzeugt: ".date("Y / M/d H:i:s",time());? / BODY / HTML
URL benutzen, um eine farblich hervorgehobene Version des Skriptes "/ path / to / script.php" innerhalb ihrer Web-Seite zu zeigen.
http: / /ihr.server.de / source / pfad / zu / script.php
Siehe auch highlight_string() und show_source().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion highlight_string() gibt den String str mit hervorgehobener Syntax (Syntax highlighting) aus.
Dabei werden die Farben des in PHP eingebauten Syntax-Highlighter benutzt.
Siehe auch highlight_file() und show_source().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist völlig identisch zu htmlspecialchars(), ausser dass alle Zeichen, die HTML-Code-Entsprechungen haben, in diese Codes umgewandelt werden.
Wie bei htmlspecialchars() gibt es ein optionales zweites Argument, das die Behandlung von einfachen bzw. den doppelten Anführungszeichen beeinflusst.
Im Modus ENT_COMPAT (default) werden nur die doppelten, im Modus ENT_QUOTES beide Arten und im Modus ENT_NOQUOTES keine Anführungszeichen umgewandelt.
Gegenwärtig wird der ISO-8859-1-Zeichensatz verwendet.
Beachten Sie, dass das optionale 2.
Argument erst ab PHP 3.0.17 bzw.
PHP 4.0.3. verfügbar ist.
Wie auch bei htmlspecialchars(), kann man als dritten optionalen Parameter den Zeichensatz angeben, der zur konvertierung verwendet wird.
Diese Feature wurde in PHP 4.1.0 eingeführt.
Siehe auch htmlspecialchars() und nl2br().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Beispiel 1.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bestimmte Zeichen haben eine spezielle Bedeutung in HTML und sollten in HTML-Code dargestellt werden, um ihre Bedeutung zu behalten.
Diese Funktion liefert einen String zurück, in dem diese Darstellung / Umsetzung teilweise durchgeführt wird.
Die hier vorgenommenen Umsetzungen sind nützlich für die alltägliche Web-Programmierung.
Sofern Sie eine vollständige Umsetzung der HTML-Zeichen benötigen, sollten Sie statt dessen htmlentities() verwenden.
Sinnvoll beim Schutz von benutzerabhängigen Texteingaben (z.B. in Gästebuch-Formularen).
Argument (Quote-Stil) beeinflusst die Behandlung der einfachen und doppelten Anführungsstriche.
ENT_QUOTES behandelt beide und ENT_NOQUOTES keine Art( en) von Anführungszeichen.
Folgende Umsetzungen werden vorgenommen:
'' (kaufmännisches und) wird zu 'amp;'
'"' (doppelte Anführungszeichen) wird zu 'quot;', wenn ENT_NOQUOTES nicht gesetzt ist
'' '(einfaches Anführungszeichen) wird zu' #039; ', wenn ENT_QUOTES gesetzt ist
'' (kleiner als) wird zu 'lt;'
'' (grösser als) wird zu 'gt;'
Beispiel 1. htmlspecialchars() -Beispiel:
$neu = htmlspecialchars( "a href='test 'Test / a", ENT_QUOTES);
Beachten Sie, dass diese Funktion nur die o.a.
Umwandlungen durchführt.
Zur vollständigen Code-Umwandlung siehe htmlentities().
Beachten Sie auch, dass das optionale 2.
Argument erst ab PHP 3.0.17 bzw.
PHP 4.0.3. verfügbar ist.
Siehe auch htmlentities() und nl2br().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
iconv Funktionen
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. modifying an attribute
Beispiel 2. adding a completely new attribute
Anmerkung:
Beispiel 3. modifying Title attribute
Beispiel 4. modifying Title attribute
Beispiel 5. removing attribute
Anmerkung:
Anmerkung:
Anmerkung:
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
InterBase-Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beendet die Verbindung zu einer InterBase-DB, deren Verbindungs-ID mit der von ibase_connect() zurück gegebenen ID überein stimmt.
Wird die Verbindungs-ID weg gelassen, wird die zuletzt hergestellte Verbindung beendet.
Vorgenommene Transaktionen der Verbindung werden übertragen, andere werden zurück genommen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Stellt eine Verbindung zu einem InterBase-Server her.
Das database -Argument muss ein gültiger Pfad zu einer bestehenden Datenbank des Servers sein.
Die Parameter username und password können auch über die PHP-Konfigurations-Anweisungen ibase.default_user und ibase.default_password gesetzt werden.
Mittels dialect bestimmen sie den Default-Wert des anzuwendenden SQL-Dialekts für alle Anweisungen während einer Datenbank-Verbindung (default ist der Client-seitig höchst verfügbare Dialekt).
Wenn ibase_connect() mit den selben Argumenten erneut aufgerufen wird, wird keine neue Verbindung hergestellt, sondern die ID der bereits geöffneten Verbindung zurück gegeben.
Die Verbindung zum InterBase-Server wird am Ende des jeweiligen Skripts automatisch beendet, es sei denn, es wird vorher die Funktion ibase_close() aufgerufen.
Beispiel 1. ibase_connect() -Beispiel:
?php $dbh = ibase_connect ($host, $username, $password); $stmt = 'SELECT * FROM tblname'; $sth = ibase_query ($dbh, $stmt); while ($row = ibase_fetch_object ($sth)) {print $row - email. "\n";} ibase_close ($dbh);?
Anmerkung:
Buffers existiert seit PHP4-RC2.
Anmerkung:
Er funktioniert ab der InterBase-Version 6.
Anmerkung:
Er funktioniert ab der InterBase-Version 5.
Siehe auch: ibase_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Führt eine vorher per ibase_prepare() vorbereitete Abfrage aus.
Dies ist effizienter als der Gebrauch von ibase_query(), sofern sie mehrere ähnliche Abfragen durchführen wollen, bei denen sich immer nur einige Parameter ändern.
?php $updates = array( 1 = 'Erik', 5 = 'Phillip', 7 = 'Ludwig '); $query = ibase_prepare( "UPDATE FOO SET BAR =?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liest die Daten der per ibase_query() oder ibase_execute() gewonnenen result_id in ein Pseudo-Objekt ein.
Siehe auch ibase_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den nächsten Datensatz des per ibase_query() gewonnenen Zeigers in einem Array zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Speicher einer vorbereiteten Abfrage (siehe ibase_prepare()) wieder frei.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den durch den Aufruf von ibase_query() belegten Speicher wieder frei.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der zurück gegebene Integer-Wert stellt die Anzahl der Felder einer Ergebnis-Liste dar.
?php $dbh = ibase_connect ($host, $username, $password); $stmt = 'SELECT * FROM tblname'; $sth = ibase_query ($dbh, $stmt); if (ibase_num_fields($sth) 0) {while ($row = ibase_fetch_object ($sth)) {print $row - email. "\n";}} else {die ("Keine Ergebnisse für ihre Abfrage");} ibase_close ($dbh);?
Siehe auch: ibase_field_info().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ibase_pconnect() agiert ähnlich der Funktion ibase_connect() (mit zwei Ausnahmen).
Erstens wird beim Verbindungs-Aufbau versucht, eine bereits bestehende permanente Verbindung zu finden, die mit den selben Parametern aufgebaut worden ist.
Wird eine solche gefunden, wird statt eines neuen Verbindungs-Aufbaus die ID der bestehenden Verbindung zurück gegeben.
Zweitens wird beim Beenden des Skripts die Verbindung nicht beendet.
Statt dessen wird die Verbindung für den weiteren Gebrauch beibehalten (ibase_close() beendet keine Verbindung, die mittels ibase_pconnect() erzeugt wurde).
Diese Art der Verbindung wird deshalb auch 'persistent' (permanent) genannt.
Siehe auch ibase_connect() hinsichtlich der Bedeutung der dieser Funktion übergebenen Parameter.
Es sind die gleichen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Vorbereitung einer Abfrage für den folgenden Gebrauch von Parameter-Platzhaltern und für die eigentliche Ausführung (per ibase_execute()).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Erzeugt eine Anfrage auf eine InterBase-DB, deren Ergebnis mit ibase_fetch_row(), ibase_fetch_object(), ibase_free_result() und ibase_free_query() weiter verarbeitet werden kann.
Für reale Abfragen und Beispiele sehen sie unter ibase_prepare() und ibase_execute() nach.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Intern werden diese Felder durch die C-Funktion strftime() formatiert.
Der optionale Parameter columntype kann eine der Konstanten IBASE_TIMESTAMP, IBASE_DATE oder IBASE_TIME sein.
Fehlt er, wird per default von IBASE_TIMESTAMP ausgegangen (wegen der Abwärts-Kompatibilität).
?php / / InterBase 6 Zeit-Typ-Felder werden im / / Format '05 Stunden 37 Minuten' zurück gegeben. ibase_timefmt("%H Stunden %M Minuten", IBASE_TIME);?
Sie können über die PHP-Konfigurations-Anweisungen ibase.timestampformat, ibase.dateformat und ibase.timeformat den default-Wert anpassen.
Er hat erst ab InterBase-Version 6 eine Bedeutung.
Anmerkung:
Dadurch entsprechen die Namen eher ihrer eigentlichen Funktionalität.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
Ingres II Funktionen
PHP Handbuch
Zurück
Nach vorne
Die Funktion gibt die aktuelle Einstellung von ob_iconv_handler() als Array zurück Bei einem Fehler wird.
FALSE zurückgegeben.
Siehe auch: iconv_set_encoding() und ob_iconv_handler().
Zurück
Zum Anfang
Nach vorne
iconv Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion konvertiert die in Zeichensatz in_charset kodierte Zeichenkette string in eine Zeichenkette mit Kodierung out_charset.
Es wird die konvertierte Zeichenkette zurückgeliefert oder FALSE, wenn ein Fehler aufgetreten ist.
Beispiel 1. iconv() Beispiel:
echo iconv( "ISO-8859-1" ,"UTF-8" ,"Dies ist ein Test .");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion ändert den Wert von type in charset und gibt TRUE bei Erfolg oder FALSE bei einem Fehler in der Ausführung zurück.
Beispiel 1. iconv_set_encoding() Beispiel:
Siehe auch: iconv_get_encoding() und ob_iconv_handler().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
result_id ist eine gültige Ergebniskennung, die von ifx_query() oder ifx_prepare() zurückgegeben wurde.
Gibt die Anzahl der Datensätze zurück, die von der Abfrage mit der Ergebniskennung result_id betroffen sind.
Bei inserts, updates und deletes wird die Anzahl der tatsächlich betroffenen Datensätze (sqlerrd[2]) zurückgegeben.
Bei selects wird die Anzahl geschätzt (sqlerrd[0]).
Verlassen Sie sich nicht darauf.
Der Datenbankserver kann niemals die exakte Anzahl der Datensätze angeben, die ein SELECT zurückgeben wird, weil er zu diesem Zeitpunkt noch nicht einmal mit dem Holen der Datensätze begonnen hat (erst nach einem "PREPARE", wenn der Optimierer den Abfrageplan erstellt hat).
Diese Funktion ist nützlich, um Abfrageergebnisse nach einem ifx_prepare() auf eine vernünftige Größe zu begrenzen.
Siehe auch: ifx_num_rows()
Beispiel 1.
Fehler...} $rowcount = ifx_affected_rows ($rid); if ($rowcount 1000) {printf ("Zu viele Datensätze in der Ergebnismenge (%d)\n br ", $rowcount); die ("Bitte begrenzen Sie Ihre Abfrage br \n");}
Zurück
Zum Anfang
Nach vorne
Informix Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den Standardmodus für BLOBs bei allen SELECT Abfragen.
Modus "0" bedeutet, dass Byte-BLOBs im Speicher gehalten werden und Modus "1 "bedeutet, dass Byte-BLOBs in einer Datei gespeichert werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den Standard Byte-Modus für alle SELECT Abfragen.
Modus "0" gibt eine blob-id zurück und Modus "1 "gibt ein Ergebnis vom Typ VARCHAR mit einem Textinhalt zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt immer TRUE zurück.
ifx_close() schliesst die Verbindung zu der Informix Datenbank, die mit der angegebenen Verbindungskennung verknüpft ist.
Falls keine Verbindungskennung angegeben ist, wird die zuletzt geöffnete Verbindung angenommen.
Beachten Sie, dass dies normalerweise nicht notwendig ist, da nichtpersistente Verbindungen automatisch mit dem Ende des Skripts geschlossen werden.
ifx_close() schliesst keine persistenten Verbindungen, die mit ifx_pconnect() geöffnet wurden.
Siehe auch: ifx_connect() und ifx_pconnect().
Beispiel 1.
Eine Informix Verbindung schliessen
$conn_id = ifx_connect ("mydb@ol_srv", "itsme", "mypassword");... einige Abfragen und mehr... ifx_close($conn_id);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg eine Verbindungskennung zurück oder FALSE, falls ein Fehler aufgetreten ist.
ifx_connect() erstellt eine Verbindung zu einem Informix Server.
Alle Argumente sind optional und wenn sie fehlen, werden die Standardeinstellungen benutzt, die in der Konfigurationsdatei angegeben wurden: ifx.default_host für den Host (Informix Bibliotheken benutzen die Umgebungsvariable INFORMIXSERVER falls nichts anderes angegeben ist), ifx.default_user für den Benutzer, ifx.default_password für das Passwort (dies bleibt leer, falls kein Passwort definiert ist).
Falls ein zweiter Aufruf von ifx_connect() mit denselben Verbindungsoptionen erfolgt, wird keine neue Verbindung aufgebaut, stattdessen wird die Verbindungskennung der bereits geöffneten Verbindung zurückgegeben.
Die Verbindung zum Server wird geschlossen, sobald die Ausführung des Skripts beendet ist, es sei denn, sie wurde schon früher durch einen expliziten Aufruf von ifx_close() geschlossen.
Siehe auch ifx_pconnect() und ifx_close().
Beispiel 1.
Zu einer Informix Datenbank verbinden
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dupliziert das gegebene BLOB. bid ist die ID des BLOB Objekts.
Gibt bei Erfolg eine neue Objekt-ID für das BLOB zurück oder FALSE, falls ein Fehler auftrat.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Erzeugt ein BLOB.
Typ:
Modus:
0 = Der Inhalt des BLOB wird in den Speicher geschrieben, 1 = der Inhalt des BLOB wird in eine Datei geschrieben,
Zeiger auf denInhalt, falls Modus = 1:
Gibt bei einem Fehler FALSE zurück, anderenfalls die ID des neuen BLOBs.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Erzeugt ein Zeichen-Objekt mit dem Inhalt param.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Erfolg wird TRUE zurückgegeben, bei einem Fehler FALSE.
Führt eine zuvor bereitgestellte Abfrage aus oder öffnet einen Cursor dafür.
Bei einem Fehler wird result_id nicht freigegeben.
Die exakte Anzahl der betroffenen Datensätze für Abfragen, die keine SELECTs sind, wird gesetzt und kann mit ifx_affected_rows() ermittelt werden.
Siehe auch: ifx_prepare().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Informix Fehlercodes (SQLSTATE SQLCODE) sind wie folgt formatiert:
mit x = Leerzeichen: kein Fehler
Fehler
Keine Daten mehr
Warnung
?: undefiniert
Falls anstelle des Zeichens "x" etwas anderes als ein Leerzeichen angezeigt wird, beschreiben SQLSTATE und SQLCODE den Fehler genauer.
Schauen Sie im Informix Handbuch nach den Beschreibungen von SQLSTATE und SQLCODE.
Die Funktion gibt einen String zurück, der in einem Zeichen einen allgemeinen Status der Abfrage zurückgibt, und die Zustände von SQLSTATE und SQLCODE, die mit der letzten ausgeführten Abfrage verknüpft sind.
Das Format dieses Strings ist: "(char) [SQLSTATE=(zwei Ziffern) (drei Ziffern) SQLCODE=(eine Ziffer)]".
Das erste Zeichen kann ein '' (Leerzeichen) (kein Fehler), ein 'W' (der Befehl verursachte eine Warnung), ein 'E' (ein Fehler ist bei der Ausführung des Befehls aufgetreten) oder ein 'N' (der Befehl lieferte keine Daten zurück) sein.
Siehe auch: ifx_errormsg()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Informix-Fehlermeldung des zuletzt aufgetretenen Fehlers zurück, oder, falls der optionale Parameter "errorcode" angegeben wurde, die Fehlermeldung, die mit mit "errorcode" korrespondiert.
Siehe auch: ifx_error()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein assoziatives Array zurück, das die gelesene Zeile enthält oder FALSE, falls es keine Zeilen mehr zu lesen gibt.
Dann werden Blobs als Zeichenketten zurückgegeben.
Bei einem Fehler wird FALSE zurückgegeben.
result_id ist eine gültige Ergebniskennung, die von ifx_query() oder ifx_prepare() (nur bei SELECT Abfragen!) zurückgegeben wurde.
Der Wert dieses Parameters kann "NEXT", "PREVIOUS", "CURRENT", "FIRST", "LAST" oder eine Zahl sein.
Falls Sie eine Zahl angeben, werden die zu holenden Zeilen "absolut" angegeben.
Dieser Parameter ist optional und gilt nur für SCROLL Cursors.
ifx_fetch_row() holt eine Zeile aus der Ergebnismenge, die mit der angegebenen Ergebniskennung verknüpft ist.
Die Zeile wird als Array zurückgegeben.
Jede Spalte der Ergebnismenge wird in einer Arraykomponente gespeichert, beginnend bei Offset 0, mit dem Spaltennamen als Index.
Aufeinanderfolgende Aufrufe von ifx_fetch_row() geben die jeweils nächste Zeile der Ergebnismenge zurück oder FALSE, falls es keine Zeile mehr gibt.
Beispiel 1.
Fehler...} $row = ifx_fetch_row ($rid, "NEXT"); while (is_array($row)) {for(reset($row); $fieldname=key($row); next($row)) {$fieldvalue = $row[$fieldname]; printf ("%s = %s ,", $fieldname, $fieldvalue);} printf("\n br "); $row = ifx_fetch_row ($rid, "NEXT");} ifx_free_result ($rid);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein assoziatives Array für das mit result_id angegebene Abfrageergebnis zurück, mit den Feldnamen als Schlüssel und den SQL-Eigenschaften der Felder als Daten.
Die Informix SQL Eigenschaften jedes Feldes der Ergebnismenge werden als assoziatives Array zurückgegeben.
Die Eigenschaften sind wie folgt codiert: "SQLTYPE;length;precision;scale;ISNULLABLE" mit SQLTYPE = der Informix Typ, wie etwa "SQLVCHAR "usw. und ISNULLABLE = "Y" or "N ".
Beispiel 1.
Informix SQL Feldeigenschaften
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt für das Abfrageergebnis result_id ein assoziatives Array zurück mit den Feldnamen als Schlüssel und den SQL Feldtypen als Daten.
Bei einem Fehler wird FALSE zurückgegeben.
Beispiel 1.
Feldnamen und SQL Feldtypen
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Löscht das Blob Objekt, das durch die angegebene blob-id bid identifiziert wird.
Bei Erfolg wird TRUE zurückgegeben, bei einem Fehler FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Löscht das durch die Objekt Id bid bezeichnete CHAR Objekt.
TRUE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den belegten Speicher, der mit der Ergebniskennung result_id verknüpft ist, wieder frei.
Bei einem Fehler wird FALSE zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Inhalt des Large Objects zurück, das durch die gegebene Objekt-ID bid bestimmt wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Inhalt des durch die Objekt-ID bid gegebenen Zeichen-Objekts zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
result_id ist eine gültige Ergebniskennung, die von ifx_query() oder ifx_prepare() zurückgegeben wurde.
Diese Funktion gibt nach einer Abfrage, die mit result_id verknüpft ist, eine Pseudo-Zeile (assoziatives Array) mit sqlca.sqlerrd[0]... sqlca.sqlerrd[5] zurück.
Bei INSERTs, UPDATEs und DELETEs sind die zurückgegebenen Werte die, die der Server nach dem Ausführen der Abfrage setzt.
Dadurch bekommt man Zugriff auf die Anzahl der betroffenen Zeilen und auf den Eingabewert eines Serial-Feldes.
Bei SELECTs sind das die Werte, die nach einem PREPARE-Kommando gespeichert wurden.
Hier hat man Zugriff auf die *geschätzte* Anzahl der betroffenen Zeilen.
Der Gebrauch dieser Funktion erspart den Overhead für die Ausführung einer "select dbinfo('sqlca.sqlerrdx') "-Abfrage, weil hier die Werte gelesen werden, die der ifx-Treiber im passenden Moment gespeichert hat.
Beispiel 1.
Informix sqlca.sqlerrd[ x] Werte ermitteln
/* angenommen, das erste Feld von 'sometable' ist vom Typ SERIAL * / $qid = ifx_query("insert into sometable values (0, '2nd column', 'another column') ", $connid); if (! $qid) {... error...} $sqlca = ifx_getsqlca ($qid); $serial_value = $sqlca["sqlerrd1"]; echo "Der Wert des SERIAL-Feldes der eingefügten Zeile ist:". $serial_value br \n";
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Anzahl der gelesenen Zeilen aus oder FALSE bei einem Fehler.
Gibt alle Zeilen der durch result_id bestimmten Abfrage fornmatiert in einer HTML-Tabelle zurück.
Das optionale zweite Argument ist ein String mit table -Tag Optionen.
Beispiel 1.
Informix Ergebnisse als HTML Tabellen
Fehler...} $rowcount = ifx_affected_rows ($rid); if ($rowcount 1000) {printf ("Zu viele Zeilen in der Ergebnismenge (%d)\n br ", $rowcount); die ("Bitte beschränken Sie die Abfrage br \n");} if (! ifx_do($rid) {...
Fehler...} ifx_htmltbl_result ($rid, "border=\"2\""); ifx_free_result($rid);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Hiermit wird festgelegt, wie Nullwerte in einer Ergebnismenge dargestellt werden sollen.
Modus "0" gibt "" (einen leerren String), und Modus "1 "gibt" NULL zurück ".
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Anzahl der Spalten in dem durch result_id bestimmten Abfrageergebnis zurück oder FALSE, falls ein Fehler auftritt.
Nachdem eine Abfrage vorbereitet oder ausgeführt wurde, liefert diese Funktion die Anzahl der Spalten in der Abfrage.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt nach der Ausführung von ifx_query() oder ifx_do() die Anzahl der Zeilen in der durch result_id gegebenen Ergebnismenge zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei einem erfolgreichen Verbindungsaufbau eine positive Informix Verbindungskennung zurück oder FALSE, falls ein Fehler auftrat.
ifx_pconnect() verhält sich sehr ähnlich wie ifx_connect() mit hauptsächlich zwei Unterschieden:
Diese Funktion verhält sich exakt wie ifx_connect() wenn PHP nicht als Apache-Modul läuft.
Bei einem Verbindungsaufbau wird zuerst versucht, eine bereits geöffnete (persistente) Verbindung zu finden, die mit denselben Angaben für Host, Benutzername und Passwort geöffnet wurde.
Wird eine solche Verbindung gefunden, so wird deren Verbindungskennung zurückgegeben, anstatt eine neue Verbindung zu öffnen.
Zweitens wird die Verbindung zum SQL-Server nicht geschlossen, wenn die Ausführung des Skripts beendet ist.
Stattdessen bleibt sie für die weitere Benutzung offen (ifx_close() schliesst keine Verbindung, die mit ifx_pconnect() geöffnet wurde).
Aus diesem Grunde werden solche Verbindungen 'persistent' genannt.
Siehe auch: ifx_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen Integerwert, result_id zurück, der von der Funktion ifx_do() Gibt einen Integerwert, result_id zurück, der von der Funktion ifx_do() benutzt wird.
Die Anzahl der betroffenen Datensätze, die mit der Funktion affected_rows abfragt werden kann, wird gesetzt.
Bereitet die Abfrage query für die Verbindung conn_id vor.
Bei SELECT Abfragen wird ein Cursor deklariert und geöffnet.
Mit dem optionalen Parameter cursor_def können Sie einen "scroll" - und / oder "hold "-Cursor definieren.
Beides sind Bitmasken, die entweder IFX_SCROLL oder IFX_HOLD oder beides, mit ODER verknüpft, sein können.
Für jeden Anfragetyp wird die geschätzte Anzahl der betroffenen Datensätze gespeichert und kann mit ifx_affected_rows() abgefragt werden.
Diese Spaltennamen sollten Sie in der Abfrage durch ein "?" ersetzen.
Falls die Inhalte der TEXT (oder BYTE) Spalten es erlauben, können Sie auch "ifx_textasvarchar(1) "und "ifx_byteasvarchar(1)" benutzen.
Damit können Sie TEXT (oder BYTE) Spalten wie gewöhnliche (aber lange) VARCHAR Spalten in SELECT Abfragen behandeln und müssen sich nicht um blob-ids kümmern.
Mit ifx_textasvarchar( 0) oder ifx_byteasvarchar(0) (die Standardeinstellung), geben SELECT Abfragen BLOB Spalten als blob-ids (Integerwerte) zurück.
Mit den blob-Funktionen (siehe unten) können Sie die Werte eines BLOB als String oder Datei erhalten.
Siehe auch: ifx_do().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg einen positiven Integerwert als Ergebniskennung zurück oder FALSE, falls ein Fehler auftrat.
Die Ergebniskennung, "result-id", wird von anderen Funktionen benutzt.
Die Zahl der betroffenen Zeilen wird für spätere Abfragen mit ifx_affected_rows() gesetzt.
ifx_query() schickt eine Abfrage an die gegenwärtig aktive Datenbank auf dem Server, die durch die angegebene Verbindungskennung bezeichnet wird.
Auf der Verbindung conn_id wird eine query ausgeführt.
Bei SELECT-Abfragen wird ein Cursor deklariert und geöffnet.
Mit dem optionalen Parameter cursor_type können Sie bestimmen, ob dies ein "scroll" - und / oder ein "hold "-Cursor sein soll.
Dies ist eine Bitmaske, die entweder die Werte IFX_SCROLL, IFX_HOLD oder beides (mit OR verknüpft) annehmen kann.
Andere Abfragen auuser SELECTs werden unverzüglich ausgeführt.
IFX_SCROLL und IFX_HOLD sind symbolische Konstanten und als solche sollten sie nicht in Anführungszeichen eingeschlossen werden.
Wenn Sie den Parameter weglassen, definieren Sie einen ganz normalen sequentiellen Cursor.
Für jeden Abfragetyp wird die Anzahl der betroffenen Zeilen (geschätzt oder wirklich) für spätere Abfragen mit ifx_affected_rows() gespeichert.
Falls Sie BLOB-Felder (BYTE oder TEXT) in einem UPDATE haben, können Sie den Parameter blobidarray benutzen, der die entsprechenden blob-ids enthält und Sie sollten diese Felder in der Abfrage durch "?" ersetzen.
Falls der Inhalt der TEXT - (oder BYTE) Spalte es erlaubt, können Sie auch "ifx_textasvarchar(1) "und "ifx_byteasvarchar(1)" benutzen.
Damit können Sie TEXT - oder BYTE-Felder behandeln, als wären sie normale (nur sehr lange) VARCHAR-Felder in SELECT-Abfragen und Sie brauchen sich nicht um blob-ids kümmern.
Mit ifx_textasvarchar( 0) oder ifx_byteasvarchar(0) (der Standardeinstellung) werden für BLOB-Spalten in SELECT-Abfragen die blob-ids (Integerwerte) zurückgegeben.
Sie können die Inhalte der BLOBs mit den BLOB-Funktionen als Zeichenketten oder Dateien erhalten (siehe weiter unten).
Siehe auch: ifx_connect().
Beispiel 1.
Gibt alle Zeilen der "orders "-Tabelle als HTML-Tabelle zurück
ifx_textasvarchar( 1); / / "text mode "bei blobs benutzen $res_id = ifx_query("select * from orders", $conn_id); if (! $res_id) {printf("Kann orders nicht abfragen: %s\n br %s br \n", ifx_error()); ifx_errormsg(); die;} ifx_htmltbl_result($res_id, "border=\"1\""); ifx_free_result($res_id);
Beispiel 2.
Ein paar Werte in die "catalog "-Tabelle einfügen
Fehler...} / / Speicher freigeben ifx_free_result($res_id);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Returns FALSE on error otherwise TRUE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Returns FALSE on error otherwise TRUE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Return FALSE on error otherwise TRUE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Returns FALSE on error otherwise TRUE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
InterBase-Funktionen
PHP Handbuch
Zurück
Nach vorne
Mit dieser Funktion wird der Wert dafür gesetzt, ob der Abbruch einer Client-Verbindung die weitere Abarbeitung eines Skripts beenden soll.
Die Funktion kann auch ohne Argument aufgerufen werden, um nur die aktuelle Einstellung zu erfahren.
Dort werden auch die Werte für den optionalen Parameter setting näher erläutert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
W und h benennen die Breite und Höhe der Ellipse, s und e den Start - bzw.
Endwinkel des Bogens in Grad.
Mit col bestimmen Sie die Farbe der Ellipse.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die linke obere Ecke des Zeichens wird durch x / y bestimmt.
Ist font als 1, 2, 3, 4 oder 5 definiert, wird ein eingebauter Font genutzt (je grösser die Nummer, desto grösser der Font).
Beachten Sie auch imageloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Koordinaten des Zeichens werden durch x / y bestimmt.
Ist font als 1, 2, 3, 4 oder 5 definiert, wird ein eingebauter Font genutzt (je grösser die Nummer, desto grösser der Font).
Beachten Sie auch imageloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageColorAllocate() gibt eine Farb-ID, die durch die angegebenen RGB -Werte bestimmt wird, zurück.
Der Parameter im wird ihnen von der imagecreate() -Funktion zurück gegeben.
ImageColorAllocate() muss für jede Farbe aufgerufen werden, die innerhalb der Grafik im verwendet werden soll.
$weiss = ImageColorAllocate ($im, 255, 255, 255); $schwarz = ImageColorAllocate ($im, 0, 0, 0);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ermittelt den Farb-Wert eines Pixels an den Koordinaten x / y der mit im bestimmten Grafik.
Beachten Sie auch imagecolorset() und imagecolorsforindex().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Index der Farbwert-Palette des Bildes im zurück, der den angegebenen RGB -Werten am nächsten kommt.
Die "Entfernung" zwischen der angeforderten Farbe und jedem Farb-Paletten-Wert wird berechnet, als ob die angegebenen RGB -Werte Punkte in einem dreidimensionalen Raum darstellen.
Siehe auch imagecolorexact().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion ImageColorDeAllocate() löscht eine vorher über ImageColorAllocate() ermittelte Farbe.
$weiss = ImageColorAllocate( $im, 255, 255, 255); ImageColorDeAllocate($im, $weiss);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Index der angegebenen Farbe in der Farb-Palette des Bildes im zurück.
Existiert die Farbe in der Bild-Farb-Palette nicht, wird -1 zurück gegeben.
Siehe auch imagecolorclosest().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ermittelt garantiert einen Farb-Index zu der angegebenen Farbe, nämlich entweder den exakten oder den nächst möglichen Wert.
Siehe auch imagecolorclosest() und imagecolorexact().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Hierdurch setzen Sie den Farbwert der Palette auf die angegebene Farbe.
Dies ist nützlich bei Aktionen wie "Fülle Farbe X mit Farbe Y" (Flood-Fill-Effekt) ohne den sonst notwendigen Aufwand für solche Aktionen betreiben zu müssen.
Siehe auch imagecolorat().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein assoziatives Array mit Rot-, Grün - und Blau-Werten zurück, die die Werte des Farb-Paletten-Index von im darstellen.
Siehe auch imagecolorat() und imagecolorexact().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ergibt die Anzahl der Farben der Palette des angegebenen Bildes im.
Siehe auch imagecolorat() und imagecolorsforindex().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageColorTransparent() setzt die transparente Farbe des Bildes im auf die Farbe col.
Im ist der Bild-Pointer, der von ImageCreate() zurück gegeben wird und col ist ein Zeiger auf die Farbe, die von ImageColorAllocate() ermittelt wird.
Es wird ein Zeiger auf die neue - jetzt transparente - Farbe (oder die aktuelle, falls keine Farbe angegeben wurde) zurück gegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der zu kopierende Teil wird angegeben über die x / y-Koordinaten src_x und src_y.
Der Ausschnitt wird an die x / y-Koordinaten dst_x und dst_y kopiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageCopyResized() kopiert einen rechteckigen Ausschnitt eines Bildes in ein anderes.
Dst_im gibt das Zielbild, src_im die Bildquelle an.
Unterscheiden sich die Angaben der Quelle und des Ziels bezogen auf die Koordinaten, Höhe oder Breite, wird das Teilbild entsprechend gedehnt oder geschrumpft.
Die Koordinaten beziehen sich auf die linke obere Ecke.
Sie können hiermit auch Teilbilder innerhalb ein - und desselben Bildes kopieren, sofern dst_im und src_im Sie können hiermit auch Teilbilder innerhalb ein - und desselben Bildes kopieren, sofern dst_im und src_im gleich sind.
Falls sich dabei aber die kopierten Teile überlappen, führt das zu unvorhersehbaren Ergebnissen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageCreateFromGIF() gibt den Bezeichner auf ein Bild zurück, der das aus der angegebenen Datei eingelesene Bild darstellt.
Im Fehlerfall gibt ImageCreateFromGIF() eine leere Zeichenkette zurück.
Zudem wird eine Fehlermeldung erzeugt, die im Browser als Verbindungsabbruch dargestellt wird.
Zum besseren Debuggen wird das folgende Beispiel einen GIF-Fehler erzeugen:
Beispiel 1.
Beispiel, um die Handhabung eines Fehlers bei der Bilderzeugung zu sehen (Dank an vic@zymsys.com):
function LoadGif ($imgname) {$im = @ImageCreateFromGIF ($imgname); / * Versuch, Datei zu öffnen * / if (!$im) {/ * Prüfen, ob fehlgeschlagen * / $im = ImageCreate (150, 30); / * Erzeugen eines leeren Bildes * / $bgc = ImageColorAllocate ($im, 255, 255, 255); $tc = ImageColorAllocate ($im, 0, 0, 0); ImageFilledRectangle ($im, 0, 0, 150, 30, $bgc); / * Ausgabe einer Fehlermeldung * / ImageString($im, 1, 5, 5, "Fehler beim Öffnen von: $imgname", $tc);} return $im;}
Anmerkung:
ACHTUNG:
Ab Version 1.6 wurde die komplette GIF-Unterstützung aus der GD-Bibliothek entfernt.
Diese Funktion ist also nur verfügbar, wenn Sie eine Version vor 1.6 verwenden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageCreateFromJPEG() gibt den Bezeichner auf ein Bild zurück, der das aus der angegebenen Datei eingelesene Bild darstellt.
Im Fehlerfall gibt ImageCreateFromJPEG() eine leere Zeichenkette zurück.
Zudem wird eine Fehlermeldung erzeugt, die im Browser als Verbindungsabbruch dargestellt wird.
Zum besseren Debuggen wird das folgende Beispiel einen JPEG-Fehler erzeugen:
Beispiel 1.
Beispiel, um die Handhabung eines Fehlers bei der Bilderzeugung zu sehen (Dank an vic@zymsys.com):
function LoadJpeg ($imgname) {$im = @ImageCreateFromJPEG ($imgname); / * Versuch, Datei zu öffnen * / if (!$im) {/ * Prüfen, ob fehlgeschlagen * / $im = ImageCreate (150, 30); / * Erzeugen eines leeren Bildes * / $bgc = ImageColorAllocate ($im, 255, 255, 255); $tc = ImageColorAllocate ($im, 0, 0, 0); ImageFilledRectangle ($im, 0, 0, 150, 30, $bgc); / * Ausgabe einer Fehlermeldung * / ImageString($im, 1, 5, 5, "Fehler beim Öffnen von: $imgname", $tc);} return $im;}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageCreateFromPNG() gibt den Bezeichner auf ein Bild zurück, der das aus der angegebenen Datei eingelesene Bild darstellt.
Im Fehlerfall gibt ImageCreateFromPNG() eine leere Zeichenkette zurück.
Zudem wird eine Fehlermeldung erzeugt, die im Browser als Verbindungsabbruch dargestellt wird.
Zum besseren Debuggen wird das folgende Beispiel einen JPEG-Fehler erzeugen:
Beispiel 1.
Beispiel, um die Handhabung eines Fehlers bei der Bilderzeugung zu sehen (Dank an vic@zymsys.com):
function Loadpng ($imgname) {$im = @ImageCreateFromPNG ($imgname); / * Versuch, Datei zu öffnen * / if (!$im) {/ * Prüfen, ob fehlgeschlagen * / $im = ImageCreate (150, 30); / * Erzeugen eines leeren Bildes * / $bgc = ImageColorAllocate ($im, 255, 255, 255); $tc = ImageColorAllocate ($im, 0, 0, 0); ImageFilledRectangle ($im, 0, 0, 150, 30, $bgc); / * Ausgabe einer Fehlermeldung * / ImageString($im, 1, 5, 5, "Fehler beim Öffnen von: $imgname", $tc);} return $im;}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Anmerkung:
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageCreate() gibt den Zeiger auf ein neues Bild zurück.
Dieser Zeiger stellt ein leeres Bild mit der Größe x_size und y_size dar.
Beispiel 1.
Erzeugung eines neuen GD-Bild-Streams und Ausgabe des Bildes:
?php header ("Content-type: image / png"); $im = @ImageCreate (50, 100) or die ("Kann keinen neuen GD-Bild-Stream erzeugen"); $background_color = ImageColorAllocate ($im, 255, 255, 255); $text_color = ImageColorAllocate ($im, 233, 14, 91); ImageString ($im, 1, 5, 5, "Ein Test-String", $text_color); ImagePNG ($im);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch imageline().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Im ist der Bezeichner, der ihnen beim Aufruf der Funktion ImageCreate() zurück gegeben worden ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Points[ 0] ist die X-Koordinate (x0), points[1] die Y-Koordinate (y0) des ersten Eckunktes.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die obere linke Eck-Koordinate wird mittels x1 und y1, die untere rechte Eck-Koordinate mittels x2 und y2 definiert.
0, 0 ist dabei die linke obere Ecke des Bildes im.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageFill() bewirkt das Füllen eines Bildes beginnend bei der Koordinate x, y (oben links ist 0, 0) mit der Farbe col im Bild im.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageFillToBorder() bewirkt eine Farb-Füllung in einem Bereich, dessen Grenze durch die Farbe in border definiert wird.
Der Bereich wird gefüllt mit der Farbe col.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ermittelt die Höhe eines Zeichens (in Pixel) im angegebenen Font.
Siehe auch imagefontwidth() und imageloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Zeichenbreite des angegebenen Fonts in Pixeln zurück.
Siehe auch imagefontheight() und imageloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anzugeben ist der Eingabe-Gammawert inputgamma und der Ausgabe-Gammawert outputgamma.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageGIF() erzeugt eine Datei im Format GIF aus im.
Im ist das Ergebnis der imagecreate() -Funktion.
In diesem Fall wird das Bild im GIF89a -Format ausgegeben.
Falls er fehlt, werden die Bilddaten direkt ausgegeben.
Durch Verwendung der Funktion header() mit der "content-type"-Angabe "image / gif "können Sie PHP-Skripte erstellen, welche die GIF -Ausgabe direkt vornehmen.
ACHTUNG:
Diese Funktion ist also nur verfügbar, wenn Sie eine Version vor 1.6 verwenden.
Um trotzdem portable PHP-Anwendungen schreiben zu können, kann mit folgendem Code-Stück automatisch geprüft werden, welches Bildformat in der mitgebundenen GD-Bibliothek nutzbar ist.
Ersetzen Sie hierfür die Codesequenz Header( "Content-type: image / gif"); ImageGif($im); durch die flexiblere Folge:
?php if (function_exists("imagegif")) {Header("Content-type: image / gif"); ImageGif($im);} elseif (function_exists("imagejpeg")) {Header("Content-type: image / jpeg"); ImageJpeg($im, "", 0.5);} elseif (function_exists("imagepng")) {Header("Content-type: image / png"); ImagePng($im);} else die("Keine Grafik-Unterstützung vorhanden");?
Anmerkung:
In PHP 4 ab Version 4.0.2 haben Sie alternativ zum Test per function_exists() auch die Möglichkeit, mit der imagetypes() -Funktion die unterstützten Bildformate abzutesten.
if (ImageTypes() IMG_GIF) {Header("Content-type: image / gif"); ImageGif($im);} elseif (ImageTypes() IMG_JPG) {... etc.
Siehe auch imagepng(), imagejpeg(), imagetypes().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Mit der Funktion imageInterlace() setzen Sie das Bit für die interlaced-Darstellung eines Bildes auf An (1) oder Aus (0).
Als Rückgabewert erhalten Sie die aktuelle Einstellung des Interlaced-Modus.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageJPEG() erzeugt die Datei filename im JPEG -Format aus dem Zeiger auf im.
Das Argument im wurde ihnen vorher durch den Aufruf der Funktion ImageCreate() mitgeteilt.
Die Angabe des Dateinamens filename ist optional.
Fehlt er, werden die erzeugten Bilddaten direkt ausgegeben.
Um die Angabe des Dateinamen zu umgehen, dennoch aber den Parameter als solchen zu nutzen, können Sie einen Leerstring ('') benutzen.
Durch Verwendung der Funktion header() mit der "content-type"-Angabe "image / jpeg "können Sie PHP-Skripte erstellen, welche die JPEG -Ausgabe direkt vornehmen.
Anmerkung:
Die JPEG-Unterstützung können Sie nur verwenden, wenn Sie PHP mit einer GD-Bibliothek ab Version 1.8 kompiliert haben.
Siehe auch imagepng(), imagegif(), imagetypes().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Linienfarbe wird durch col festgelegt.
Siehe auch imagecreate() und imagecolorallocate().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dessen Wert ist immer grösser als 5, um Konflikte mit den eingebauten Fonts zu vermeiden.
Das Font-Datei-Format unterliegt binären Abhängigkeiten und ist von Rechner-Typ zu Rechner-Typ unterschiedlich.
Das bedeutet, dass Sie die Font-Dateien immer auf dem Rechner-Typ erzeugen müssen, auf dem diese Verwendung finden.
Tabelle 1.
Font-Datei-Format
Byte-Position
C Daten-Typ
Beschreibung
Byte 0-3
Anzahl der Zeichen des Font
Byte 4-7
Wert des ersten Zeichens des Fonts (meist 32 für Leerzeichen)
Byte 8-11
Pixel-Breite jedes Zeichens
Byte 12-15
Pixel-Höhe jedes Zeichens
Byte 16 -
Zeichen
Zeichen-Daten als Array, ein Byte je Pixel für jedes Zeichen; in der Summe also (Anzahl-Zeichen * Breite * Höhe )-Bytes.
Siehe auch imagefontwidth() und imagefontheight().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImagePNG() erzeugt eine Datei im Format PNG aus im.
Im ist das Ergebnis der imagecreate() -Funktion.
Durch Verwendung der Funktion header() mit der "content-type"-Angabe "image / png "können Sie PHP-Skripte erstellen, welche die PNG -Ausgabe direkt vornehmen.
Diese Funktion ist also nur verfügbar, wenn Sie eine Version ab 1.6 verwenden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Points[ 0] = x0, Points[1] = y0, Points[2] = x1, Points[3] = y1 usw.
Siehe auch imagecreate() und imagefilledpolygon().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Size ist die Größe in Pixel.
Space ermöglicht ihnen, den vorgegebenen Wert für den Zeichen-Zwischenraum eines Fonts anzugeben.
Dieser Wert wird zum Normal-Wert hinzu gezählt und kann auch negativ sein.
Tightness ermöglicht ihnen die Kontrolle über die Breite eines Leerzeichens.
Der angegebene Wert wird zur normalen Zeichenbreite hinzu gezählt und kann auch negativ sein.
Angle (Winkel) wird in Grad angegeben und beinhaltet den Drehungswinkel des auszugebenden Textes.
Die Parameter space und tightness haben als Einheit die Zeichenbreite, wobei der Wert 1 gleich 1 / 1000stel der Breite des Zeichens 'm' entspricht (Maß 'em').
Die Parameter space, tightness und angle sind optional.
Das umgebende Rechteck wird berechnet unter Verwendung der für die Zeichen-Abmessungen verfügbaren Informationen und unterscheidet sich immer etwas von den aktuellen Raster-Werten des Textes.
Ist der Winkel (angle) mit 0 angegeben, können Sie davon ausgehen, dass der Text in jede Richtung immer 1 Pixel mehr braucht als sonst.
Diese Funktion gibt ein Array zurück, welches die folgenden Elemente enthält:
untere linke x-Koordinate
untere linke y-Koordinate
obere rechte x-Koordinate
obere rechte y-Koordinate
Siehe auch imagepstext().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Falls Sie Veränderungen an einem Font (Größe, Dicke usw.) vornehmen wollen, den ursprüglichen Font aber noch brauchen, sollten Sie diese Funktion benutzen.
Eine Kopie dieses Fonts können Sie nicht verwenden.
Sie können aber bereits vor dem Kopieren Veränderungen vornehmen.
Falls Sie diese Funktion benutzen, müssen Sie die so erzeugten Fonts selbst freigeben und zwar in umgekehrter Reihenfolge, ansonsten wird ihr Skript 'hängen'.
Falls alles klappt, wird ihnen ein gültiger Font-Index zurück gegeben, den Sie weiter verwenden können.
Falls nicht, wird FALSE zurück und eine Fehlermeldung ausgegeben.
Siehe auch imagepsloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Lädt einen Zeichen-Beschreibungs-Vektor aus einer Datei und verändert die Vektor-Beschreibung des Fonts.
Zeichens aufweist, werden Sie dies oft anpassen wollen, sofern Sie eine andere Sprache als Englisch benutzen.
Das genaue Dateiformat ist in der Dokumentation zu T1Lib beschrieben.
T1Lib wird mit zwei gebrauchsfertigen Beschreibungsdateien (IsoLatin1.enc und IsoLatin2.enc) ausgeliefert.
Dadurch wird immer die richtige Datei geladen und die Zeichen haben damit die richtige Beschreibung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der mit font_index angegebene Font wird gedehnt (extend ist größer als der Font) oder verkleinert (extend ist kleiner als der Font).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch imagepsloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn alles in Ordnung ist, wird ein gültiger Zeiger (Index) zurück gegeben, auf den Sie immer wieder zurück greifen können; ansonsten wird FALSE zurück und eine Fehlermeldung ausgegeben.
Siehe auch imagepsfreefont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der mit font_index angegebene Font wird um den Faktor slant "verschrägt" (italic!).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Size wird in Pixel ausgedrückt.
Foreground ist die Text-Ausgabefarbe (Vordergrund).
Background ist die Farbe, zu der ein Farbübergang versucht werden soll.
Dabei wird kein Pixel mit der Farbe Background ausgegeben, so dass das Bild im Hintergrund keine festen Farben benötigt.
Die Koordinaten x und y definieren den Ursprung (bzw. den Referenz-Punkt) des ersten Zeichens (ungefähr die linke untere Ecke).
Dies ist anders als bei der ImageString() -Funktion, wo x und y die obere linke Ecke des ersten Zeichens angeben.
Lesen Sie in der Dokumentation zu PostScript und seines Maßsystems nach, falls Sie die Funktionsweise nicht verstehen.
Space ermöglicht ihnen, die Vorgabe des Wertes für den Zeichen-Zwischenraum zu verändern.
Der angegebene Wert wird addiert und kann auch negativ sein.
Tightness ermöglicht die Kontrolle über die Breite des Leerzeichens.
Der Wert wird addiert und kann auch negativ sein.
Angle wird in Grad angegeben und hat die entsprechende Drehung des Ausgabetextes zur Folge.
Antialias_steps Antialias_steps erlaubt die Kontrolle über die Anzahl der Farben, mit der der Farbübergang vom Text zum Hintergrundbild vorgenommen werden soll.
Möglich sind Werte von 4 bis 16.
Der höhere Wert wird empfohlen bei Textgrössen kleiner als 20, wo der Effekt bei der Textqualität deutlich sichtbar ist.
Bei grösseren Werten als 20 werden 4 Farben empfohlen.
Das ist weniger rechenintensiv.
Die Parameter space und tightness werden in 1 / 1000-stel der Breite des Buchstabens "m" (Einheit 'em') angegeben.
Die Parameter space, tightness, angle und antialias sind optional.
Diese Funktion gibt ein Array mit den folgenden Werten zurück:
untere linke X-Koordinate
untere linke Y-Koordinate
obere rechte X-Koordinate
obere rechte Y-Koordinate
Siehe auch imagepsbbox().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Ende liegt bei der unteren rechten Koordinate X2 und Y2.
Dabei ist 0, 0 die linke obere Ecke des Bildes im.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dabei ist die Koordinate 0, 0 die linke obere Ecke des Bildes im.
Siehe auch imagecreate() und imagecolorallocate().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. imagesetstyle() example
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Koordinaten 0, 0 geben die linke obere Ecke des Bildes im an.
Hat font den Wert 1, 2, 3, 4 oder 5 wird ein interner Font benutzt.
Siehe auch imageloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die linke obere Ecke von im ist dabei 0, 0.
Hat font den Wert 1, 2, 3, 4 oder 5 wird ein interner Font benutzt.
Siehe auch imageloadfont().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageSX() ermittelt die Breite des Bildes, das durch im referenziert wird.
Siehe auch imagecreate() und imagesy().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageSY() ermittelt die Höhe des Bildes, das durch im referenziert wird.
Siehe auch imagecreate() und imagesx().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion errechnet die Grösse des Bereichs für eine True-Type-Textausgabe.
Der zu messende Text
Die Font-Größe
Der Name der TTF-Datei (kann auch eine URL sein)
Der Winkel, in dem text ausgegeben wird
untere linke Ecke, X-Position
untere linke Ecke, Y-Position
untere rechte Ecke, X-Position
untere rechte Ecke, Y-Position
obere rechte Ecke, X-Position
obere rechte Ecke, Y-Position
obere linke Ecke, X-Position
obere linke Ecke, Y-Position
Diese Funktion erfordert sowohl die GD - als auch die FreeType -Bibliothek.
Siehe auch imagettftext().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ImageTTFText() zeichnet den Text text in das per im angegebene Bild, beginnend bei den Koordinaten x und y (oben links ist 0, 0) mit einem Ausgabewinkel von angle in der Farbe col unter Verwendung der TTF-Datei, die mittels fontfile benannt wurde.
Die per x und y angegebenen Koordinaten definieren den Startpunkt des ersten Zeichens (in etwa die linke untere Ecke).
Das ist anders als bei der ImageString() -Funktion, bei der x und y die obere rechte Ecke des ersten Zeichens darstellen.
Eine Drehung von 90 Grad entspricht also einer Text-Ausrichtung von unten nach oben (von 6 nach 12 Uhr).
Fontfile ist der Pfad zur TTF-Datei, die Sie verwenden wollen.
Text ist der auszugebende String, der auch UTF-8-Zeichenfolgen enthalten darf (z.B. #123;)
Col ist der Farbindex.
Verwenden Sie den negativen Index-Wert, führt das zum Aufheben des Farbüberlaufs (Antialiasing).
ImageTTFText() gibt ein Array aus acht Elementen zurück, das die vier Ecken des Textausgabe-Bereichs enthält (wie ImageTTFBBox()).
Die Reihenfolge ist dabei oben links, oben rechts, unten rechts und unten links.
Deshalb gibt oben links die linke Ecke bei horizontaler Sichtweise an.
Das Beispiel-Skript erzeugt eine schwarze GIF-Grafik von 400x30 Pixel mit dem weissen Text "Teste..." im TT-Font Arial.
ImageTTFText
?php Header ("Content-type: image / gif"); $im = imagecreate (400, 30); $black = ImageColorAllocate ($im, 0, 0, 0); $white = ImageColorAllocate ($im, 255, 255, 255); ImageTTFText ($im, 20, 0, 10, 20, $white, "/ path / arial.ttf", "Teste...
Omega: #937; "); ImageGif ($im); ImageDestroy ($im);?
Diese Funktion erfordert sowohl die GD - als auch die FreeType -Bibliothek.
Siehe auch imagettfbbox().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der von dieser Funktion zurück gegebene Bit-Wert stellt die von der in der aktuellen PHP-Kompilation enthaltenen GD-Version unterstützten Grafik-Formate dar.
IMG_GIF, IMG_JPG, IMG_PNG oder IMG_WBMP.
Um das Vorhanden sein der GD-Unterstützung zu testen, können Sie folgendes machen:
ImageTypes
?php if (ImageTypes() IMG_PNG) {echo "PNG-Unterstützung ist vorhanden .";}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. image_type_to_mime_type (file)
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Konvertiert einen String in einen quoted-printable kodierten String (gemäß RFC2045, Abschnitt 6.7).
Siehe auch imap_qprint().
Zurück
Zum Anfang
Nach vorne
IMAP, POP3 und NNTP Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert in Form eines String-Arrays alle IMAP alert-Medlungen, die seit Beginn dieses Requests bzw. dem letzten Aufruf der Funktion aufgetreten sind.
Durch den Aufruf der Funktion wird der alert-Stack gelöscht, so dass weitere Aufrufe zunächst bis zum Auftreten eines neuen alerts kein Ergebnis liefern.
Die IMAP-Spezifikationen verlangen, dass diese Meldungen an den Benutzer weitergegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
imap_append() fügt den String aus message als neue Nachricht an die durch mbox imap_append() fügt den String aus message als neue Nachricht an die durch mbox spezifizierte Mailbox an.
Wenn der optionale flags spezifiziert wird, so werden die Flags der Nachricht in der Mailbox entsprechend gesetzt.
Beispiel 1. imap_append() Beispiel
Der Cyrus IMAP Server erwartet zwingend "\r\n" als Zeilenende-Kennung, ein einfaches "\n "wird nicht richtig verarbeitet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die imap_base64() Funktion decodiert BASE64 codierten Text (gemäß RFC2045, Abschnitt 6.8).
Der decodierte Text wird als String zurückgegeben.
Siehe auch imap_binary().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Konvertiert 8Bit-Text in einen BASE64-kodierten String (gemäß RFC2045, Abschnitt 6.8).
Siehe auch imap_base64().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
imap_body() liefert den Körper der Nachricht mit der Nummer msg_number im aktuellen Postfach.
Die optionalen flags können eine Bitmaske enthalten, die sich aus folgenden Werten zusammensetzt:
FT_UID - msg_number ist eine UID
FT_PEEK - Das \Seen-Flag wird nicht beeinflußt.
FT_INTERNAL - Die Nachricht wird im internen Format zurückgegeben eine CRLF-Umwandlung findet nicht statt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die imap_check() Funktion prüft den Status des aktuellen Postfach und liefert die entsprechenden Felder in einem Objekt mit folgenden Attributen zurück:
Date - Datum der letzten Änderung des Postfach-Inhalts
POP, IMAP, NNTP
Mailbox - Name des Postfachs
Nmsgs - Anzahl der Nachrichten im Postfach
Recent - Anzahl der neuen Nachrichten im Postfach
Beispiel 1. imap_check() Beispiel
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion löscht die übergebenen Flags für eine oder mehrere Nachrichten.
Mögliche Flags sind "\\Seen", "\\Answered", "\\Flagged", "\\Deleted", "\\Draft", und "\\Recent" (siehe auch RFC2060)
Enthält options den Wert ST_UID, so werden die übergebenen Nachrichtennummern als UIDs anstelle von Indizes interpretiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schließt eine IMAP-Verbindung.
Mit dem optionalen flag CL_EXPUNGE kann ein Bereinigen (physikalisches Löschen aller zum Löschen markierten Nachrichten) ausgelöst werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
imap_createmailbox() legt ein über den Parameter mbox spezifiziertes neues Postfach an.
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Siehe auch imap_renamemailbox() and imap_deletemailbox() sowie imap_open() für das Format des Parameters mbox.
Beispiel 1. imap_createmailbox() Beispiel
$mbox = imap_open ("{your.imap.host}", "username", "password", OP_HALFOPEN) _BAR_ _BAR_ die ("can't connect: ".imap_last_error()); $name1 = "phpnewbox"; $name2 = imap_utf7_encode ("phpnewböx"); $newname = $name1; echo "Newname will be '$name1 'br \n"; # we will now create a new mailbox "phptestbox "in your inbox folder, # check its status after creation and finaly remove it to restore # your inbox to its initial state if (@imap_createmailbox ($mbox,imap_utf7_encode ("{your.imap.host}INBOX.$newname"))) {$status = @imap_status($mbox ,"{your.imap.host}INBOX.$newname",SA_ALL); if($status) {print("your new mailbox '$name1' has the following status: br \n"); print("Messages:". $status - messages). "br \n"; print("Recent:". $status - recent). "br \n"; print("Unseen:". $status - unseen). "br \n"; print("UIDnext:". $status - uidnext). "br \n"; print("UIDvalidity :". $status - uidvalidity)." br \n"; if (imap_renamemailbox ($mbox ,"{your.imap.host}INBOX.$newname", "{your.imap.host}INBOX.$name2")) {echo "renamed new mailbox from '$name1 'to '$name2' br \n"; $newname=$name2;} else {print "imap_renamemailbox on new mailbox failed: ".imap_last_error (). "br \n";}} else {print "imap_status on new mailbox failed: ".imap_last_error()." br \n";} if (@imap_deletemailbox($mbox ,"{your.imap.host}INBOX.$newname")) {print "new mailbox removed to restore initial state br \n";} else {print "imap_deletemailbox on new mailbox failed: ".implode ("br \n", imap_errors())." br \n";}} else {print "could not create new mailbox: ".implode ("br \n",imap_errors())." br \n";} imap_close($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert immer TRUE, eventuelle Fehler können nicht erkannt werden!
Die imap_delete() Funktion merkt die mit msg_number angegebene Nachricht des aktuellen Postfachs zum Löschen vor.
Enthält der optionale Parameter flags den Wert FT_UID, so wird der Parameter msg_number als UID interpretiert.
Die Nachricht verbleibt zunächst noch im Postfach, endgültig gelöscht wird sie (zusammen mit allen anderen entsprechend markierten Nachrichten) durch Aufruf der Funktion imap_expunge() oder durch imap_close() mit dem optionalen Flag CL_EXPUNGE.
Beispiel 1. imap_delete() Beispiel
$mbox = imap_open ("{your.imap.host}INBOX", "username", "password") _BAR_ _BAR_ die ("can't connect: ". imap_last_error()); $check = imap_mailboxmsginfo ($mbox); print "Messages before delete:". $check - Nmsgs. "br \n"; imap_delete ($mbox, 1); $check = imap_mailboxmsginfo ($mbox); print "Messages after delete: ". $check - Nmsgs." br \n "; imap_expunge ($mbox); $check = imap_mailboxmsginfo ($mbox); print "Messages after expunge:". $check - Nmsgs. "br \n"; imap_close ($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
imap_deletemailbox() löscht das angegebene Postfach inclusive aller darin enthaltener Nachrichten und Unter-Postfächer.
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Siehe auch imap_createmailbox() und imap_renamemailbox() sowie imap_open() für das Format des mbox Parameters.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert in Form eines String-Arrays alle seit Beginn des Requests bzw. seit dem letzten Aufruf von imap_errors() aufgetretenen Fehlermeldung.
Der Fehler-Stack wird dabei gelöscht, so dass folgende Aufrufe von imap_errors() bzw. imap_last_errors() bis zum mächsten aufgetretenen Fehler kein Ergebnis liefern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
imap_expunge() löscht endgültig alle von den Funktionen imap_delete(), imap_mail_move() oder imap_setflag_full() zum Löschen vorgemerkten Nachrichten.
Diese Funktion liefert immer TRUE, eventuelle Fehler können nicht erkannt werden!
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert einen bestimmten Teil einer MIME-kodierten Nachricht als String.
Die Nummer des gewünschten Teils besteht aus von Punkten getrennten Zahlen, die den Index des Teils gemäß der IMAP4-Spezifikationen bezeichnen.
Der Inhalt wird dabei von dieser Funktion nicht dekodiert.
Die Bitmaske flags kann aus folgenden Werten zusammengesetzt werden:
FT_UID - msg_number enthält eine UID
FT_PEEK - Das \Seen Flag der Nachricht wird nicht verändert
FT_INTERNAL - Das Ergebnis wird ohne jeden Versuch einer Konvertierung der Zeilenenden zurückgegeben
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Bitmaske flags kann aus folgenden Werten zusammengesetzt werden:
FT_UID msgno enthält eine UID
FT_PREFETCHTEXT Der Körper der Nachricht wird ebenfalls angefordert, hierdurch wird ein zus.
Zugriff vermieden, wenn z.B. für eine Save-Operation der gesamte Text einer Nachricht benötigt wird
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert ausgewählte Headerfelder der in sequence übergebenen Nachrichten und liefert sie in einem Array mit je einem Objekt pro Nachricht zurück. sequence enthält eine Sequenz von Nachrichten-Indizes oder, bei gesetztem FT_UID in flags, von UIDs.
Die einzelnen Objekte des zurückgegeben Arrays enthalten dabei folgende Informationen:
subject - Betreff
from - Absender
date - Sendedatum
references - bezieht sich auf Message-ID
size - Größe in Byte
uid - UID der Nachricht im Postfach
msgno - Index der Nachricht im Postfach
recent - Flag gesetzt
flagged - Flag gesetzt
answered - Flag gesetzt
deleted - Flag gesetzt
seen - Flag gesetzt
draft - Flag gesetzt
Beispiel 1. imap_fetch_overview() Beispiel
$mbox = imap_open ("{your.imap.host:143}", "username", "password") _BAR_ _BAR_ die ("can't connect: ". imap_last_error()); $overview = imap_fetch_overview ($mbox, "2,4:6", 0); if (is_array ($overview)) {reset ($overview); while (list ($key, $val) = each ($overview)) {print $val - msgno." - ". $val - date." - ". $val - subject. "\n";}} imap_close ($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert die gesamten Strukturinformationen zu einer gegebenen Nachricht.
Das zurückgegebene Objekt enthält den Umschlag, die internen Daten, Größe und Flags der Nachricht sowie ein (rekursives) Array von ähnlichen Objekten für jeden enthaltenen MIME-Teil der Nachricht.
Enthält der optionale Parameter flags den Wert FT_UID, so wird msg_number als UID anstelle eines Index interpretiert.
Das zurückgegebene Objekt verfügt über die folgenden Attribute:
Tabelle 1.
Zurückgegebene Objekte von imap_fetchstructure()
Primärer MIME-Typ des Nachrichten-Teils
Transfer-Kodierung
Wahr, wenn das Feld subtype gesetzt ist
MIME Subtyp
Wahr, wenn ein Beschreibungsstring existiert
Inhalt des Bechreibungsstrings
Wahr, wenn ein Identifikationsstring existiert
Identificationsstring
Anzahl der Zeilen dieses Teils
Größe des Teils in Byte
Wahr, wenn der Dispositionsstring gesetzt ist
Dispositionsstring
Wahr, wenn Dispositions-Parameterwerte gesetzt sind
Array der DispositionsParameter
Wahr, wenn Parameter gesetzt sind
Array der MIME Parameter
dparameters ist ein Array von Objekten mit jeweils einem "attribute" und einem "value "Attribut.
Die Elemente des parts Array entsprechen dem von der Funktion zurückgegebenen Objekt (usf.).
Tabelle 2.
Tabelle 3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
imap_getmailboxes() liefert ein Array zurück, das für jedes gefundene Postfach ein Objekt mit de Attributen name, delimiter und attributes enthält. name enthält dabei den vollständigen Pfadnamen des Postfachs, delimiter das verwendete Trennzeichen zwischen Postfach-Ebenen, und attributes besteht aus einer Bitmaske, die einzelne Eigenschaften des Postfachs beschreibt:
LATT_NOINFERIORS - es existieren keine weiteren Postfächer unterhalb dieses Postfachs
LATT_NOSELECT - Dieses "Postfach" ist nur ein Behälter für weitere Postfächer.
Es kann selbst keine Nachrichten enthalten und somit auch nicht geöffnet werden.
LATT_MARKED - Dieses Postfach wurde markiert (nur bei UW-IMAPD).
LATT_UNMARKED - Dieses Postfach wurde nicht markiert (nur bei UW-IMAPD).
Namen von Postfächern, die Zeichen außerhalb des druckbaren ASCII-Bereiches enthalten, können mit Hilfe der Funktion imap_utf7_decode() dekodiert werden.
ref sollte normalerweise nur die Spezifikation des Servers in der in imap_open() beschriebenen Form enthalten.
Über pat kann ein Startpunkt innerhalb der Postfach-Hierachie vorgegeben werden.
Wünschen Sie die Ausgabe aller Postfächer, so übergeben Sie als pat '*'.
'*' - entspricht beliebig vielen Zeichen (incl. des Trennzeichens zw.
'%' - entspricht beliebig vielen Zeichen innerhalb eines Postfach-Namens
$mbox = imap_open ("{your.imap.host}", "username", "password", OP_HALFOPEN) _BAR_ _BAR_ die ("can't connect: ". imap_last_error()); $list = imap_getmailboxes ($mbox, "{your.imap.host}", "*"); if (is_array ($list)) {reset ($list); while (list ($key, $val) = each ($list)) {print "($key)"; print imap_utf7_decode ($val - name). ","; print "'". $val - delimiter."' ,"; print $val - attributes. "br \n";}} else {print "imap_getmailboxes failed:". imap_last_error(). "\n";} imap_close ($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. imap_get_quota() example
Beispiel 2. imap_get_quota() 4.3 or greater example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. imap_get_quotaroot() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entspricht weitgehend imap_getmailboxes(), allerdings werden nur Postfächer zurückgegeben, die der aktuelle Benutzer auch abboniert hat.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
1024 Zeichen) bcc[] (Inhalt der Bcc Zeile, bestehend aus:) personal adl mailbox host1024 Zeichen) bcc[] (Inhalt der Bcc Zeile, bestehend aus:) personal adl mailbox host reply_toaddress (Inhalt der reply_to:
Zeile, formatiert auf max. subjectlength Zeichen)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert ein String-Array, das je Nachricht einen String mit vorformatierten Informationen aus dem Nachrichtenheader enthält.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert den vollständigen Text der zuletzt aufgetretenen Fehlermeldung dieses Requests.
Der Zustand des Fehlerstacks wird durch diese Funktion nicht verändert, weitere Aufrufe von imap_last_error() liefern somit weiter dasselbe Ergebis, solange keine weiteren Fehler aufgetreten sind.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. imap_list() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Namen der gefundenen Postfächer als String-Array. ref und pat werden in imap_getmailboxes() beschrieben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entspricht weitgehend imap_listmailbox(), allerdings werden nur Postfächer zurückgegeben, die der aktuelle Benutzer auch abboniert hat.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert dieselben Informationen wie imap_status() sowie zusätzlich die Größe des Postfachs in Bytes.
Diese wird aus der Summe der Größe der einzelnen Nachrichten gebildet, deshalb benötigt diese Funktion mehr Zeit zur Ausführung als imap_status().
Tabelle 1.
Felder des Rückgabe-Objekts
Datum der letzten Änderung
Name des Postfachs
Anzahl der Nachrichten
Anzahl neuer Nachrichten
Anzahl ungelesener Nachrichten
Größe des Postfachs in Byte
Beispiel 1. imap_mailboxmsginfo() Beispiel
$mbox = imap_open ("{your.imap.host}INBOX", "username", "password") _BAR_ _BAR_ die ("can't connect: ". imap_last_error()); $check = imap_mailboxmsginfo ($mbox); if ($check) {print "Date:". $check - Date. "br \n"; print "Driver:". $check - Driver. "br \n"; print "Mailbox:". $check - Mailbox. "br \n"; print "Messages:". $check - Nmsgs. "br \n"; print "Recent: ". $check - Recent." br \n"; print "Size: ". $check - Size." br \n";} else {print "imap_check() failed: ". imap_lasterror()." br \n";} imap_close ($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion kopiert die in msglist angegebenen Nachrichten in das Postfach mbox. msglist kann eine einzelne Nachrichtennummer oder Aufzählungen und Bereiche gemäß RFC2060 enthalten.
Die Bitmaske flags kann aus den foldengen Werten zusammengesetzt werden.
CP_UID - Die Nummern in msglist entsprechen den UIDs der gewünschten Nachrichten
CP_MOVE - Die ursprunglichen Nachrichten werden nach dem Kopieren gelöscht. copying
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
This function is currently not available for PHP4 on WIN32.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion verschiebt die in msglist angegebenen Nachrichten in das Postfach mbox. msglist kann eine einzelne Nachrichtennummer oder Aufzählungen und Bereiche gemäß RFC2060 enthalten.
Die Bitmaske flags kann den foldengen Wert enthalten:
CP_UID - Die Nummern in msglist entsprechen den UIDs der gewünschten Nachrichten
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die decodierten Teilstücke werden in einem Array von Objekten zurückgegeben, wobei jedes Objekt die Felder "text" für den decodierten Teiltext und "charset "für den zugehörigen Zeichensatz enthält.
Nichtcodierte Teile des Headerfeldes werden dabei durch den Wert "default" beschrieben.
Im folgenden Beispiel besteht das Headerfeld aus zwei Teilstücken, wobei das erste nach ISO-8859-1 codiert ist:
Beispiel 1. imap_mime_header_decode() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert den aktuellen Index einer Nachricht innerhalb eines Postfachs aus der eindeutigen UID.
Sie ist somit die Umkehrung der Funktion imap_uid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Anzahl der Nachrichten im aktuellen Postfach
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Anzahl der neu hinzugekommenen Nachrichten im aktuellen Postfach
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
FALSE bei evtl. auftretenden Fehlern.
Liefert ein IMAP-Streamhandle oder FALSE bei Fehlern.
Der Name eines Postfachs setzt sich zusammen aus der Bezeichnung des Servers und dem Pfad des Postfachs auf diesem Server.
Der spezielle Name INBOX steht dabei als Synonym für das persönliche Postfach des jeweiligen Benutzers.
Die Bezeichnung des Servers setzt sich zusammen aus dem eigentlichen Servernamen oder der entsprechenden IP-Adresse sowie das gewünschte Protokoll (getrennt durch '/') und optional der zu benutzende Port (getrennt durch ':').
Die gesamte Serverbezeichnung wird in '{' und '} 'eingeschlossen und muss immer mit angegeben werden.
Umlaute oder das 'ß', so muss er mit Hilfe der Funktion imap_utf7_encode() codiert werden.
Der optionale Parameter flags kann sich aus den folgenden Bitmasken zusammensetzen:
OP_READONLY - Über diese Verbindung darf nur lesend zugegriffen werden
OP_ANONYMOUS - Bei NNTP-Verbindungen wird die Datei .newsrc nicht aktualisiert
OP_HALFOPEN - es wird eine IMAP - oder NNTP-Verbindung aufgebaut, aber noch kein Postfach ausgewählt
CL_EXPUNGE - beim Schließen der Verbindung werden alle zum Löschen vorgemerkte Nachrichten endgültig gelöscht (siehe auch imap_delete() und imap_expunge())
Das folgende Beispiel stellt eine Verbindung zu einem lokalen IMAP-Server (IMAP = Port 143) her:
$mbox = imap_open ("{localhost / pop3:110}INBOX", "user_id", "password");
$nntp = imap_open ("{localhost / nntp:119}comp.test", "", "");
Beispiel 1. imap_open() Beispiel
$mbox = imap_open ("{your.imap.host:143}", "username", "password"); echo "p h1 Mailboxes / h1 \n"; $folders = imap_listmailbox ($mbox, "{your.imap.host:143}", "*"); if ($folders == false) echo "Call failed br \n"; else while (list ($key, $val) = each ($folders)) echo $val." br \n"; echo "p h1 Headers in INBOX / h1 \n"; $headers = imap_headers ($mbox); if ($headers == false) echo "Call failed br \n"; else while (list ($key, $val) = each ($headers)) echo $val." br n"; imap_close ($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE, wenn die aktuelle Verbindung noch verfügbar ist, sonst FALSE.
Die imap_ping() Funktion schickt ein Ping-Signal an den Mailserver und prüft so die Verfügbarkeit der Verbindung.
Auf diese Weise kann die Verbindung zu einem Server aufrechterhalten werden, der Verbindungen nach einer gewissen Zeit ohne Aktivität automatisch beendet (da PHP-Scripte i.A. nicht sehr lange laufen, kann ich mir kaum vorstellen, das jemand diese Funktion wirklich benötigt).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Konvertiert einen quoted-printable kodierten String (gemäß RFC2045, Abschnitt 6.7) in einen 8bit-String.
Siehe auch imap_8bit().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion imap_renamemailbox() ändert den Namen eines Postfachs.
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Siehe auch imap_createmailbox() und imap_deletemailbox() sowie imap_open() für das Format der Parameter old_mbox und new_mbox.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Mit Hilfe dieser Funktion kann auf IMAP - und NNTP-Servern ein anderes Postfach als das bisher aktuelle ausgewählt werden.
Der optionale Parameter flags kann sich aus den folgenden Bitmasken zusammensetzen:
OP_READONLY - Auf das Postfach soll nur lesend zugegriffen werden
OP_ANONYMOUS - Bei NNTP-Verbindungen wird die persönliche .newsrc Datei nicht aktualisiert
OP_HALFOPEN - bei IMAP - oder NNTP-Servern wird in den allgemeinen Verbindungsstatus ohne aktuelles Postfach zurückgeschaltet
CL_EXPUNGE - beim Schließen der Verbindung werden alle zum Löschen vorgemerkte Nachrichten endgültig gelöscht (siehe auch imap_delete() und imap_expunge())
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion zerlegt einen Adress-String gemäß RFC822 und liefert ein Array von Objekten mit einem Eintrag je erkannter Adresse.
Die Address-Objekte bestehen dabei jeweils aus den folgenden vier String-Elementen:
mailbox - Name des Postfachs (Username)
host - Hostname
personal - Realer Name des Empfängers
Beispiel 1. imap_rfc822_parse_adrlist() Beispiel
$address_string = "Hartmut Holzgraefe hartmut@php.net, postmaster@somedomain.net, root"; $address_array = imap_rfc822_parse_adrlist ($address_string, "somedomain.net"); if (! is_array ($address_array)) die ("somethings wrong\n"); reset ($address_array); while (list ($key, $val) = each ($address_array)) {print "mailbox:". $val - mailbox. "br \n"; print "host:". $val - host. "br \n"; print "personal:". $val - personal. "br \n"; print "adl:". $val - adl. "p \n";}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bildet aus Realnamen, Postfach und Server eine korekt formatierte Mail-Adresse gemäß RFC822.
Beispiel 1. imap_rfc822_write_address() Beispiel
print imap_rfc822_write_address ("hartmut", "cvs.php.net", "Hartmut Holzgraefe);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sie gibt aber nur die Namen der Postfächer zurück, in denen irgendwo der Text content vorkommt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion durchsucht die Nachrichten des aktuellen Postfachs und liefert ein Array mit den Nummern der Nachrichten, die mit den angegebenen Kriterien übereinstimmen.
Der Parameter criteria enthält einen String, der sich aus den folgenden Suchbegriffen zusammensetzen kann
ALL - liefert alle Nachrichten, die den restlichen Kriterien entsprechen
ANSWERED - das \\ANSWERED Flag der Nachricht ist gesetzt
Feld der Nachricht enthält "string"
Feld der Nachricht enthält ein Datum, das vor dem in "date" angegebenen liegt
BODY "string" - Im Inhalt der Nachricht ist "string "enthalten
Feld der Nachricht enthält "string"
DELETED - Die Nachricht ist zum Löschen vorgemerkt
FLAGGED - Das \\FLAGGED (wichtig bzw. dringend) Flag der Nachricht ist gesetzt
Feld der Nachricht enthält "string"
KEYWORD "string" - Das Feld Keyword: enthält "string "
NEW - die Nachricht ist neu
OLD - die Nachricht ist nicht neu
ON "date" - Das Datum in Date: entspricht "date "
RECENT - Das \\RECENT Flag ist gesetzt
SEEN - Das \\SEEN Flag ist gesetzt, die Nachricht wurde bereits einmal abgerufen
Feld der Nachricht
SUBJECT "string" - "string "ist Teil des Betreffs der Nachricht
TEXT "string" - "string "ist Teil der Nachricht (Kopf oder Inhalt)
Feld der Nachricht enthält "string"
UNANSWERED - Die Nachricht wurde nicht beantwortet, das \\Answered Flag ist nicht gesetzt
UNDELETED - Die Nachricht ist nicht zum Löschen vorgemerkt
UNFLAGGED - Die Nachricht ist nicht als 'wichtig' markiert
UNKEYWORD "string" - "string "ist nicht Schlüsselwort der Nachricht
UNSEEN - Die Nachricht wurde bisher nicht gelesen
Um zum Beispiel alle unbeantworteten Nachrichten von Mama zu finden übergeben Sie als criteria: "UNANSWERED FROM Mama".
Die Suche scheint nicht zwischen Groß - und Kleinschreibung zu unterscheiden.
Die Liste der Suchbegriffe entstand nach Inspektion der UW c-client Sourcen und ist vermutlich nicht vollständig (siehe auch RFC 2060, Abschnitt 6.4.4).
Enthält der optionale Parameter flags den Wert SE_UID, so werden UIDs anstelle von laufenden Nachrichtennummern zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion setzt die übergebenen Flags für eine oder mehrere Nachrichten.
Mögliche Flags sind "\\Seen", "\\Answered", "\\Flagged", "\\Deleted", "\\Draft", und "\\Recent" (siehe auch RFC2060)
Enthält options den Wert ST_UID, so werden die übergebenen Nachrichtennummern als UIDs anstelle von Indizes interpretiert.
Beispiel 1. imap_setflag_full() Beispiel
$mbox = imap_open ("{your.imap.host:143}", "username", "password") _BAR_ _BAR_ die ("can't connect: ". imap_last_error()); $status = imap_setflag_full ($mbox, "2,5", "\\Seen \\Flagged"); if (!$status) echo imap_last_error(); imap_close ($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. imap_set_quota() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert die Indizes der Nachrichten eines Postfachs als sortiertes Array zurück.
SORTDATE Versanddatum der Nachricht
SORTFROM Benutzername des ersten From:
SORTTO Benutzername des ersten To:
Ist reverse ungleich 0, so werden die Nachrichten in umgekehrter Reihenfolge übergeben.
Die Bitmaske options kann aus folgenden werten zusammengesetzt werden:
SE_NOPREFETCH Es werden keine Nachrichten im Cache gehalten
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Im der Bitmaske options können dabei folgende Funktionen ausgewählt werden, die den Inhalt des zurückgegebenen Objekts beeinflussen:
SA_MESSAGES - das Feld messages wird mit der Anzahl der enthaltenen Nachrichten gefüllt
SA_RECENT - das Feld recent wird mit der Anzahl der neuen Nachrichten gefüllt
SA_UNSEEN - das Feld unseen wird mit der Anzahl der noch nicht abgerufenen Nachrichten gefüllt
SA_UIDNEXT - das Feld uidnext wird mit der UID gefüllt, die die nächste in diesem Postfach abgelegte Nachricht erhalten wird
SA_UIDVALIDITY - das Feld uidvalidity wird mit einer Konstanten gefüllt, die sich immer dann verändern wird, wenn die UIDs der Nachrichten im Postfach sich vermutlich verändert haben
SA_ALL - es werden alle beschriebenen Felder gefüllt
Status - flags wird ebenfalls gesetzt und enthält eine Bitmaske aus den oben genannten Werten, die die tatsächlich zurückgegebenen Informationen beschreibt.
Beispiel 1. imap_status() Beispiel
$mbox = imap_open ("{your.imap.host}", "username", "password", OP_HALFOPEN) _BAR_ _BAR_ die ("can't connect: ". imap_last_error()); $status = imap_status ($mbox, "{your.imap.host}INBOX", SA_ALL); if($status) {print ("Messages:". $status - messages). "br \n"; print ("Recent:". $status - recent). "br \n"; print ("Unseen:". $status - unseen). "br \n"; print ("UIDnext:". $status - uidnext). "br \n"; print ("UIDvalidity:". $status - uidvalidity). "br \n";} else {print "imap_status failed:". imap_lasterror(). "\n";} imap_close ($mbox);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Abbonieren eines Postfachs.
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ermittelt die UID zu einem gegebenen Nachrichten-Index.
Während die Nachrichten-Indices einfach von eins an aufsteigend durchnummeriert sind und sich z.B. bei Löschoperationen ändern können, ist die UID einer Nachricht innerhalb eines Postfachs unveränderbar eindeutig. (Siehe auch imap_msgno()).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion nimmt eine evtl. durch die Funktionen imap_delete() oder imap_mail_move() gesetzte Löschmarkierung für die durch msg_number spezifizierte Nachricht zurück.
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Abbonement eines Postfachs beenden.
Liefert TRUE bei Erfolg und FALSE bei Fehlern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dekodiert den String text aus dem modifizierten UTF-7 Format in 8Bit-Text.
Liefert den dekodierten Text oder FALSE, wenn die Eingabe nicht gemäß modifiziertem UTF-7 formatiert war.
Diese Funktion wird benötigt, um Postfachnamen zu decodieren, die internationale Sonderzeichen, wie z.B. unsere Umlaute, enthalten.
(siehe RFC2152 für UTF-7 und RFC2060, Abschnitt 5.1.3 für modifiziertes UTF-7)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Konvertiert den in data übergebenen Text in das modifizierte UTF-7 Format.
Diese Funktion wird benötigt, um Postfachnamen darzustellen, die internationale Sonderzeichen, wie z.B. unsere Umlaute, enthalten.
(siehe RFC2152 für UTF-7 und RFC2060, Abschnitt 5.1.3 für modifiziertes UTF-7)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Konvertiert den übergebenen String in das UTF8-Format gemäß RFC2044.
Zurück
Zum Anfang
Nach vorne
Nach oben
Informix Funktionen
PHP Handbuch
Zurück
Nach vorne
Gibt einen String zurück, dessen Inhalt allen Array-Elementen in der fortlaufenden Reihenfolge ihres Vorkommens im Array entspricht.
Beispiel 1. implode() -Beispiel:
$Trennung_durch_Doppelpunkt = implode (":", $array);
Siehe auch explode(), join() und split().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sucht in haystack nach needle und gibt bei Erfolg TRUE zurück, andernfalls FALSE.
Ist der dritte Parameter strict auf TRUE gesetzt, prüft in_array() auch die Typen von needle in haystack.
Anmerkung:
Anmerkung:
In den PHP Versionen vor 4.2.0 durfte needle kein Array sein
Beispiel 1. in_array()
Die zweite Bedingung schlägt fehl, da in_array() die Groß - / Kleinschreibung berücksichtigt, daher wird das obige Programm folgendes ausgeben:
Beispiel 2. in_array() mit strict
?php $a = array( '1.10', 12.4, 1.13); if (in_array('12.4', $a, TRUE)) echo "'12.4 'gefunden mit strict check\n"; if (in_array(1.13, $a, TRUE)) echo "1.13 gefunden mit strict check\n";?
Dies wird folgendes anzeigen:
1.13 gefunden mit strict check
Beispiel 3. in_array() mit einem Array als needle
?php $a = array( array('p', 'h'), array('p', 'r'), 'o'); if (in_array(array ('p', 'h'), $a)) echo "'ph 'wurde gefunden\n"; if (in_array(array ('f', 'i'), $a)) echo "'fi' wurde nicht gefunden\n"; if (in_array('o', $a)) echo "'o 'wurde gefunden\n";? / / Dies wird folgendes anzeigen: 'ph' wurde gefunden 'o 'wurde gefunden
Siehe auch array_search().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Die include() -Anweisung bindet die angegebene Datei ein und wertet sie aus.
Die untenstehende Dokumentation gilt ebenso für require().
Diese beiden Konstrukte sind in jeder Hinsicht gleichwertig mit der einen Ausnahme: der Umgang mit Fehlern. include() erzeugt ein Warning während require() in einem Fatal Error Diese beiden Konstrukte sind in jeder Hinsicht gleichwertig mit der einen Ausnahme: der Umgang mit Fehlern. include() erzeugt ein Warning während require() in einem Fatal Error endet.
Mit anderen Worten, verwenden Sie require(), wenn Sie möchten, dass eine fehlende Datei die Ausführung ihres Skripts beendet. include() verhält sich anders, ihr Skript wird weiterhin ausgeführt.
Stellen Sie außerdem sicher, dass Sie einen gültigen include_path gesetzt haben.
Wenn eine Datei eingebunden wird, erbt der enthaltene Code den Geltungsbereich von Variablen der Zeile in der die Anweisung steht.
Ab dieser Zeile stehen alle verfügbaren Variablen in der aufgerufenen Datei im aufrufenden Skript zur Verfügung.
Beispiel 12-3.
Grundlegende include() Beispiel
vars.php ?php $color = 'green'; $fruit = 'appel';? test.php ?php echo "A $color $fruit"; / / A include 'vars.php'; echo "A $color $fruit"; / / A green apple?
Steht include im aufrufenden Skript innerhalb einer Funktion, verhält sich der gesamte Code der aufgerufenen Datei genau so, als ob Sie diesen Code innerhalb dieser Funktion definiert hätten.
Aus diesem Grund hat dieser Code den Geltungsbereich der Variablen dieser Funktion.
Beispiel 12-4.
Include innerhalb einer Funktion
?php function foo() {global $color; include 'vars.php'; echo "A $color $fruit";} / * vars.php ist im Geltungsbereich von foo(), * * d.h. $fruit steht außerhalb dieses Bereichs * * NICHT zur Verfügung. $color schon, da wir * * diese Variable als global definiert haben * / foo(); / / A green apple echo "A $color $fruit"; / / A green?
Beim Einbinden einer Datei wechselt der Parser vom PHP-Modus zu Beginn der Zieldatei in den HTML-Modus und kehrt am Ende der eingebunden Datei wieder in den PHP-Modus zurück.
Deshalb muss jeglicher Code innerhalb der eingebundenen Datei, der als PHP-Code ausgeführt werden soll, von gültigen PHP-Start - und Ende-Tags eingefaßt sein.
Wenn "URL fopen wrappers" in PHP aktiviert sind (in der Standardkonfiguration ist das der Fall) können Sie als Pfad der einzubindenden Datei auch eine URL (via HTTP oder anderen unterstützen Wrappern - eine Liste der unterstützen Protokolle finden Sie unter Anhang I) statt einer lokalen Pfadangabe angeben.
Falls der Zielserver die Zieldatei als PHP-Code interpretiert, können Sie an die einzubindende Datei Variablen in einem Request-String übergeben, genauso wie bei HTTP GET.
Streng genommen ist das nicht das Gleiche, wie diese Datei einzubinden und diesem den Geltungsbereich des Vater-Skripts zu vererben; das Skript wird auf dem Remote-Server ausgeführt und danach wird das Ergebnis in das lokale Skript eingebunden.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Beispiel 12-5. include() über HTTP
?php / * Dieses Beispiel geht davon aus, dass www.example.com so konfiguriert * * ist, dass .php-Dateien geparst werden und keine .txt Dateien.
Also meint * * 'Funkt' hier, dass die Variablen $foo und $bar innerhalb der * * angeforderten Datei zur Verfügung stehen * / / / Funkt. nicht; file.txt wird von www.example.com nicht als PHP geparst include 'http: / /www.example.com / file.txt?foo=1 bar=2'; / / Funkt. nicht; schaut nach einer lokalen Datei namens / / 'file.php?foo=1 bar=2 'im lokalen Dateisystem include 'file.php?foo=1 bar=2'; / / Funkt include 'http: / /www.example.com / file.php?foo=1 bar=2'; $foo = 1; $bar = 2; include 'file.txt'; / / Funkt. include 'file.php'; / / Funkt.?
Da include() und require() spezielle Sprachkonstrukte sind, müssen Sie diese innerhalb einer bedingten Anweisung in einen Anweisungsblock setzen.
Beispiel 12-6. include() und bedingte Blöcke
?php / / Das ist FALSCH und führt nicht zum gewünschten Ergebnis. if ($bedingung) include $datei; else include $andere_datei; / / Das ist KORREKT. if ($bedingung) {include $datei;} else {include $andere_datei;}?
Der Umgang mit Returns:
Es ist möglich eine return() Es ist möglich eine return() -Anweisung innerhalb einer eingebunden Datei anzugeben, um die Ausführung innerhalb dieser Datei abzubrechen und zum aufrufenden Skript zurück zu kehren.
Ebenso ist die Rückgabe von Werten aus einer eingebunden Datei möglich.
Sie können den Wert eines include-Aufrufs auf die gleiche Art und Weise nutzen, wie Sie es bei einer Funktion machen würden.
Anmerkung:
In diesem Fall gilt return() für diese Funktion und nicht für die ganze Datei.
Beispiel 12-7. include() und die return() Anweisung
return.php ?php $var = 'PHP'; return $var;? noreturn.php ?php $var = 'PHP';? testreturns.php ?php $foo = include 'return.php'; echo $foo; / / gibt 'PHP' aus $bar = include 'noreturn.php'; echo $bar; / / gibt 1 aus?
$bar hat den Wert 1, weil include erfolgreich war.
Beachten Sie die Unterschiede in den obigen Beispielen.
Das erste nutzt return() innerhalb der eingebundenen Datei im Gensatzt zum zweiten Beispiel.
Weitere Möglichkeiten Dateien in Variablen "einzubinden" bieten ihnen die Funktionen fopen() und file() oder include() im Zusammenspiel mit den Funktionen zur Ausgabesteuerung.
Siehe auch require(), require_once(), include_once(), readfile(), virtual() und include_path.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Die Anweisung include_once() schließt zur Ausführungszeit die angegebene Datei ein und wertet diese aus.
Dies ist ähnlich der include() -Anweisung; mit dem Unterschied, dass einmal eingebundener Code nicht nochmals eingebunden wird.
Wie der Name vermuten lässt, wird ie Datei nur ein einziges Mal eingebunden.
include_once() sollten Sie in den Fällen benutzen, wenn die gleiche Datei in einem bestimmten Bereich mehrmals eingebunden und interpretiert werden soll und Sie sicher stellen wollen, dass diese Datei nur exakt einmal eingebunden wird, um Probleme mit Wiederholungen bei Funktions-Definitionen und Wertzuweisungen zu Variablen zu vermeiden, usw.
Weitere Beispiele zu require_once() und include_once() können Sie dem PEAR -Code entnehmen, welcher im aktuellsten PHP-Source-Code enthalten ist.
Anmerkung:
Windows) das Verhalten von include_once() und require_once() nicht unbedingt ihren Erwartungen entspricht.
Beispiel 12-9. include_once() und Groß - / Kleinschreibung
include_once( "a.php"); / / bindet a.php ein include_once("A.php"); / / bindet a.php auf Windows nochmal ein!
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Siehe auch include(), require(), require_once(), get_required_files(), get_included_files(), readfile() und virtual().
Zurück
Zum Anfang
Nach vorne
Nach oben
Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_autocommit() wird vor dem Öffnen einer Transaktion aufgerufen (vor dem ersten Aufruf der Funktion ingres_query() oder gleich nach einem Aufruf von ingres_rollback() oder ingres_autocommit()) um in den "autocommit "Modus des Servers ein - oder auszuschalten (beim Beginn eines Skripts ist der autocommit-Modus ausgeschaltet).
Wenn der autocommit-Modus eingeschaltet ist, wird jede Abfrage automatisch sofort vom Server commited, so als würde die Funktion ingres_commit() nach jedem Aufruf von ingres_query() aufgerufen werden.
Siehe auch ingres_query(), ingres_rollback() und ingres_commit().
Zurück
Zum Anfang
Nach vorne
Ingres II Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Gibt bei Erfolg TRUE zurück, bei einem Fehler FALSE.
ingres_close() schliesst die Verbindung zu dem Ingres Datenbankserver, der mit der übergebenen Verbindunkskennung verknüpft ist.
Falls der Parameter link nicht angegeben wurde, wird die zuletzt geöffnete Verbindung geschlossen.
ingres_close() ist normalerweise nicht nötig, weil es keine persistenten Verbindungen schliesst und weil alle nicht-persistenten Verbindungen automatisch zum Ende des Skripts geschlossen werden.
Siehe auch ingres_connect() und ingres_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_commit() schliesst die aktuell offene Transaktion ab, indem alle Veränderungen in die Datenbank übernommen werden.
Dadurch wird die Transaktion beendet.
Eine neue Transaktion kann geöffnet werden, indem man eine neue Abfrage mit ingres_query() an den Datenbankserver schickt.
Sie können auch den Server automatisch nach jeder Abfrage einen Commit ausführen lassen, wenn sie die Funktion ingres_autocommit() aufrufen, bevor Sie die Transaktion öffnen.
Siehe auch ingres_query(), ingres_rollback() und ingres_autocommit().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Gibt bei Erfolg eine Ingres II Verbindungskennung zurück, oder FALSE, wenn ein Fehler auftritt.
ingres_connect() öffnet eine Verbindung zu dem Ingres Datenbankserver, der im database Argument angegeben ist und die Syntax [node_id: :]dbname[ / svr_class] hat.
Wenn einige Parameter fehlen, benutzt ingres_connect() die Werte, die in der php.ini für ingres.default_database, ingres.default_user und ingres.default_password eingetragen sind.
Die Verbindung wird geschlossen, wenn das Skript zuende ist oder wenn die Funktion ingres_close() mit der aktuellen Verbindungskennung aufgerufen wird.
Alle anderen Ingres-Funktionen benutzen standardmässig die zuletzt geöffnete Verbindung, so dass Sie den Rückgabewert nur dann speichern müssen, wenn Sie mehr als eine Verbindung zur gleichen Zeit benutzen.
Beispiel 1. ingres_connect() Beispiel
?php $link = ingres_connect ("mydb", "user", "pass") or die ("Verbindung fehlgeschlagen"); print ("Verbindungsaufbau erfolgreich"); ingres_close ($link);?
Beispiel 2. ingres_connect() Beispiel mit der aktuellen Verbindungskennung
?php ingres_connect ("mydb", "user", "pass") or die ("Verbindung fehlgeschlagen"); print ("Verbindungsaufbau erfolgreich"); ingres_close ();?
Siehe auch ingres_pconnect() und ingres_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_fetch_array() Gibt ein Array zurück, das die die entsprechende Zeile der Ergebnismenge enthält oder FALSE falls das die Ergebnismenge keine Zeilen mehr enthält.
Diese Funktion ist eine erweiterte Version der Funktion ingres_fetch_row().
Zusätzlich zur Speicherung der Daten unter numerischen Indizes werden die Daten auch unter assoziativen Indizes im Ergebnisarray gespeichert, in dem die Feldnamen als Schlüssel benutzt werden.
Falls eine oder mehrere Spalten der Ergebnismenge dieselben Feldnamen haben, bekommt die letzte Spalte die Priorität.
Um auf die anderen Spalten zuzugreifen, müssen sie entweder den numerischen Index der Spalte benutzen oder Aliase für die Spalten machen.
result_type kann INGRES_NUM für ein numerisches Array sein oder INGRES_ASSOC für ein assoziatives Array, oder INGRES_BOTH (Standard).
Von der Geschwindigkeit her ist diese Funktion identisch zu ingres_fetch_object(), und fast so schnell wie ingres_fetch_row() (der Unterschied ist zu vernachlässigen).
Beispiel 1. ingres_fetch_array() Beispiel
?php ingres_connect ($database, $user, $password); ingres_query ("select * from table"); while ($row = ingres_fetch_array()) {echo $row["user_id"]; # benutzt ein assoziatives Array echo $row["fullname"]; echo $row[1]; # benutzt ein numerisches Array echo $row[2];}?
See also ingres_query(), ingres_num_fields(), ingres_field_name(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_fetch_object() Gibt ein Objekt zurück, das mit der geholten Zeile einer Ergebnismenge korrespondiert oder FALSE, wenn es keine Zeilen mehr in der Egebnismenge gibt.
Diese Funktion ist ähnlich zu ingres_fetch_array(), mit einem Unterschied - ein Objekt wird anstelle eines Arrays zurückgegeben.
Indirekt heisst das, dass Sie die Daten nur über ihre Feldnamen ansprechen können und nicht über ihre Offsets (Zahlen sind unzulässige Namen für Objekteigenschaften).
Das optionale Argument result_type ist eine Konstante, die die folgenden Werte annehmen kann:
INGRES_ASSOC, INGRES_NUM und INGRES_BOTH.
Diese Funktion ist von der Geschwindigkeit her identisch zu ingres_fetch_array(), und fast so schnell wie ingres_fetch_row() (der Unterschied ist zu vernachlässigen).
Beispiel 1. ingres_fetch_object() Beispiel
Siehe auch ingres_query(), ingres_num_fields(), ingres_field_name(), ingres_fetch_array() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_fetch_row() gibt ein Array zurück, das die entsprechende Zeile der Ergebnismenge enthält oder FALSE, falls es keine Zeilen mehr in der Ergebnismenge gibt.
Jede Spalte ist unter einem Array-Offset, beginnend mit 1, gespeichert.
Aufeinanderfolgende Aufrufe von ingres_fetch_row() würden immer die nächste Zeile der Ergebnismenge zurückgeben oder FALSE, wenn es keine Zeilen mehr gibt.
Beispiel 1. ingres_fetch_row() Beispiel
Siehe auch ingres_num_fields(), ingres_query(), ingres_fetch_array() und ingres_fetch_object().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_field_length() gibt die Länge eines Feldes zurück.
Das ist die Anzahl der Bytes, die der Server zum Speichern des Feldes belegt.
Für genauere Informationen schauen sie in den Ingres / OpenAPI User Guide - Appendix C.
index ist die Feldnummer und muss zwischen 1 und dem Wert liegen, den die Funktion ingres_num_fields() zurückgibt.
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_field_name() gibt den Namen eines Feldes in einer Ergebnismenge zurück oder FALSE, falls ein Fehler aufgetreten ist.
index gibt die Nummer des Feldes an und muss zwischen 1 und dem Wert, der von ingres_num_fields() zurückgegeben wird, liegen.
Siehe auch ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_field_nullable() gibt TRUE zurück, falls in dieser Spalte NULL -Werte zugelasssen sind und FALSE, falls das nicht erlaubt ist.
index ist die Feldnummer und muss zwischen 1 und dem Wert liegen, den die Funktion ingres_num_fields() zurückgibt.
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_field_precision() gibt die Genauigkeit eines Feldes zurück.
Dieser Rückgabewert wird nur für Dezimalzahlen, Fliesskommazahlen und monetäre SQL Datentypen benutzt.
Wenn Sie es genauer wissen wollen, schauen Sie sich den Ingres / OpenAPI User Guide - Appendix C an.
index ist die Feldnummer und muss zwischen 1 und dem Wert liegen, den die Funktion ingres_num_fields() zurückgibt.
Siehe auch ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_field_scale() gibt den Skalar eines Feldes zurück.Dieser Rückgabewert wird nur für Dezimalzahlen, Fliesskommazahlen und monetäre SQL Datentypen benutzt.
Für nähere Informationen schauen Sie sich den Ingres / OpenAPI User Guide - Appendix C an.
index ist die Feldnummer und muss zwischen 1 und dem Wert liegen, den die Funktion ingres_num_fields() zurückgibt.
Siehe auch ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_field_type() gibt den Typ eines Feldes in einer Ergebnismenge zurück oder FALSE, wenn ein Fehler aufgetreten ist.
Beispiele von Rückgabewerten sind: "IIAPI_BYTE_TYPE", "IIAPI_CHA_TYPE", "IIAPI_DTE_TYPE", "IIAPI_FLT_TYPE", "IIAPI_INT_TYPE", "IIAPI_VCH_TYPE".
Einige dieser Typen können, in Abhängigkeit von der Feldlänge, mehrere SQL Typen umfassen. (siehe ingres_field_length()).
Beispielsweise kann "IIAPI_FLT_TYPE" entweder float4 oder float8 sein.
Genauere Informationen darüber finden Sie in dem Ingres / OpenAPI User Guide - Appendix C.
index ist die Feldnummer und muss zwischen 1 und dem Wert liegen, den die Funktion ingres_num_fields() zurückgibt.
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_num_fields() liefert die Anzahl der Felder in der Ergebnismenge zurück, die vom Ingres Server nach einem Aufruf von ingres_query() zurückgegeben wurde.
See also ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Bei delete-, insert - or update-queries, gibt ingres_num_rows() die Anzahl der durch diese Abfragen betroffenen Datensätze zurück.
Bei den anderen Abfragen gibt ingres_num_rows() die Anzahl der Datensätze in der Ergebnismenge zurück.
Anmerkung:
Diese Funktion dient hauptsächlich dazu, die Anzahl der veränderten Datensätze in einer Datenbank festzustellen.
Wenn diese Funktion aufgerufen wird, bevor ingres_fetch_array(), ingres_fetch_object() oder ingres_fetch_row() aufgerufen wurde, löscht der Server die Ergebnisdaten so dass das Skript sie nicht auslesen kann.
Sie sollten stattdessen die Daten der Ergebnismenge mit einer dieser fetch-Funktionen in einer Schleife auslesen, solange, bis keine Datensätze mehr zum Lesen da sind und damit die Schleifenbedingung FALSE wird.
Siehe auch ingres_query(), ingres_fetch_array(), ingres_fetch_object() und ingres_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Gibt bei Erfolg eine Ingres II Verbindungskennung zurück oder oder FALSE, wenn ein Fehler aufgetreten ist.
Zu den Details über die Parameter siehe ingres_connect() und die Beispiele.
Es gibt nur zwei Unterschiede zwischen den Funktionen ingres_pconnect() und ingres_connect():
Zum ersten: beim Verbindungsaufbau schaut die Funktion zuerst, ob schon eine geöffnete persistente Verbindung besteht, die mit denselben Parametern geöffnet wurde.
Falls eine gefunden wird, wird ein Identifizierer zurückgegeben, anstatt eine neue Verbindung zu öffnen.
Die Verbindung zum Ingres Server wird nicht geschlossen wenn die Ausführung des Skripts beendet ist, sondern die Verbindung bleibt zum weiteren Gebrauch offen (ingres_close() schliesst die Verbindungen, die mit ingres_pconnect() geöffnet wurden nicht).
Darum wird diese Art der Verbindung 'persistent' genannt.
Siehe auch ingres_connect() und ingres_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Gibt bei Erfolg TRUE zurück und bei einem Fehler FALSE.
ingres_query() sendet die übergebene query an den Ingres Server.
Diese Abfrage muss ein gültiger SQL-String sein (Siehe die Ingres Dokumentation).
Die Abfrage wird zu einem Teil der aktuell offenen Transaktion.
Falls keine Transaktion geöffnet ist, öffnet ingres_query() eine neue Transaktion.
Um diese zu schliessen, können Sie entweder ingres_commit() aufrufen, um die gemachten Änderungen in die Datenbank zu schreiben, oder Sie rufen ingres_rollback() auf, um diese Änderungen zrückzusetzen.
Wenn das Skript beendet wird, wird jede offene Transaktion zurückgesetzt (indem die Funktion ingres_rollback() aufgerufen wird).
Sie können auch die Funktion ingres_autocommit() benutzen, bevor Sie eine neue Transaktion öffnen, damit werden alle einzelnen SQL-Abfrage sofort gesendet.
Einige SQL Abfragen können mit dieser Funktion nicht gesendet werden:
close (siehe ingres_close())
commit (siehe ingres_commit())
connect (siehe ingres_connect())
disconnect (siehe ingres_close())
rollback (siehe ingres_rollback())
set autocommit (siehe ingres_autocommit())
und alle Abfragen, die Cursors benutzen, werden nicht unterstützt
Beispiel 1. ingres_query() example
Siehe auch ingres_fetch_array(), ingres_fetch_object(), ingres_fetch_row(), ingres_commit(), ingres_rollback() und ingres_autocommit().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
ingres_rollback() setzt die aktuell geöffnete Transaktion zurück und macht alle Änderungen, die in der Transaktion bereits durchgeführt wurden, wieder rückgängig.
Diese Funktion schliesst die Transaktion.
Eine Neue Transaktion kann geöffnet werden, wenn man mit ingres_query() eine neue Abfrage an den Datenbankserver schickt.
Siehe auch ingres_query(), ingres_commit() und ingres_autocommit().
Zurück
Zum Anfang
Nach vorne
Nach oben
IRC Gateway Funktionen
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Tabelle 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert den Parameter var zu einem integer, wobei base als Basis benutzt wird (Default ist base =10).
var kann ein Ausdruck oder eine einfache Variable sein, nicht jedoch ein Array oder Objekt.
Siehe auch doubleval(), strval(), settype() und Typ-Veränderungen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion ip2long() erzeugt aus einer im Punkt-Format angegebenen IP-V4-Adresse eine ausgeschriebene Adress-Angabe.
Beispiel 1. ip2long() -Beispiel:
?php $ip = gethostbyname( "www.example.com"); $out = "Die folgenden URLs sind gleich: br \n"; $out .= "http: / /www.example.com /, http: / /".$ip ." /, and http: / /".ip2long($ip) ." / br \n"; echo $out;?
Siehe auch: long2ip().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ircg_disconnect() beendet die Verbindung connection zu einem IRC-Server, die mittels der Funktion ircg-pconnect() hergestellt wurde
Siehe auch: ircg_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ircg_fetch_error_msg() Liefet den Fehler der Verbindung connection der letzten aufgerufenen ircg Funktion zurück.
Anmerkung:
Die Fehlernummer wird im ersten Element des Arrays zurückgeliefert, der Fehlertext im zweiten Parameter.
Beispiel 1. ircg_fetch_error_msg() Beispiel
if (!ircg_join ($id, "#php")) {$error = ircg_fetch_error_msg($id); print ("Can 't join channel #php.
Errorcode: $error[ 0] Description: $error[1]");}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion ircg_get_username() liefert den aktuellen Benutzernamen für die Verbindung connection zurück.
Ist die Verbindung ungültig, oder wurde die Verbindung abgebrochen, liefert ircg_get_username() FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wandelt den HTML-String html_string für die Ausgabe um.
Dies ist beispielsweise sinnvoll, wenn in einem Channel über HTML oder Beispiele diskutiert wird.
Siehe auch:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Function fügt den Benutzer nick zur persönlichen Liste der ignorierten Benutzer auf dem verbundenen IRC-Server connection hinzu.
Dadurch werden von diesem Benutzer keine Nachrichten mehr angezeigt.
Siehe auch: ircg_ignore_del().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entfernt den Benutzer nick von der Liste der ignorierten Personen auf dem verbunden IRC-Server connection.
Siehe auch: ircg_ignore_add().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ircg_is_conn_alive() gibt den Wert TRUE zurück, wenn die Verbindung connection zum IRC-Server besteht, oder FALSE falls keine gültige Verbindung mehr besteht.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Betritt den Channel channel auf dem IRC-Server connection.
Siehe auch:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Entfernt den Benutzer nick vom Channel channel auf dem verbundenen IRC-Server connection. reason gibt den Grund an, warum der User aus dem Channel geworfen wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wählt ein über die Funktion ircg_register_format() definiertes Format string zur Formatierung der Ausgabe von IRC-Server Nachrichten und Ereignissen aus.
Unter dem Namen ircg steht ein Standardformat zur Verfügung.
Siehe auch: ircg_register_format_messages()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ircg_msg() sendet eine Nachricht an einen Channel oder Benutzer auf dem IRC-Server connection.
Der Parameter recipient, beginnend mit einem # oder sendet die Nachricht an einen Channel, andere Angaben werden als Benutzername interpretiert.
Wird der optionale Parameter suppress auf TRUE gesetzt, wird die Ausgabe der Nachricht auf der eigenen Verbindung unterbunden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ändert den Benutzernamen auf dem IRC-Server connection auf den neuen Benutzernamen nick.
liefert bei erfolgreicher Änderung TRUE oder FALSE falls der name nicht geändert werden konnte.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion ircg_nickname_escape() formatiert einen Benutzernamen nick in einen IRC konformes Format, und liefert den umgewandelten Namen zurück.
Siehe auch: ircg_nickname_unescape()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Function ircg_nickname_unescape() liefert einen decodierten Benutzernamen zurück, der über den Parameter nick übergeben wurde.
Siehe auch: ircg_nickname_escape()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sendet eine Nachricht message zum angegebenen Benutzer nick auf dem verbunden IRC-Server connection.
Siehe auch:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
ircg_pconnect() Stellt eine Verbindung zum einem IRC Server her, und liefert eine Verbindunskennung.
Der Parameter username muss angeben werden, er legt den Benutzernamen auf dem Server fest. server_ip und server_port sind optional.
Werden diese nicht angegben wird für server_ip der Wert 127.0.0.1 (localhost) und für server_port der Wert 6667 gesetzt.
Anmerkung:
Der Parameter server_ip muss aus einer IP-Adresse in numerischer Form bestehen.
Momentan gibt die Funktion ircg_pconnect() unabhängig davon, ob eine Verbindung zu Stande kam oder nicht, einen gültigen Wert zurück.
Die Ausgabe der IRC Meldungen und Ereignisse wird mit einem formatierten String, der vor dem Aufruf mit der Funktion ircg_register_format_messages() im Parameter msg_format definiert.
user_settings
Siehe auch: ircg_disconnect(), ircg_is_conn_alive(), ircg_register_format_messages().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dabei ist es möglich mehrere Formate (Layer) zu definieren, die mit der Funktion ircg_lookup_format_messages() ausgewählt werden können.
Die Funktionen für die Ausgabe werden in dem Array messages in folgender Reihenfolge übergeben:
Erhalten einer privaten Nachricht
Private Nachricht gesendet
Ein Benutzer verlässt den Channel
Ein Benutzer betritt den Channel
Ein Benutzer wurde aus dem Channel geworfen (gekicked)
Fehler
schwerer Fehler
Ende der Benutzerliste (wird beim Betreten eines Channels gesendet)
Meldung beim eigenen Betreten eines Channels
Ein Benutzer ändert seinen Namen
Ein Benutzer beendet die Verbindung zum IRC-Server
Eine grössere Anzahl von Benutzern betritt den Channel (z.B.
Bei netsplit / join)
Ein Benutzer aus der Liste bei massenhaftem Betreten eines Channels
Ende des massenhaften Betretens eines Channels
Benutzerinformation
Serverinformation
Information über Inaktivität
Information über den Channel
Ende Meldung bei Information über Channel (Listenende)
Benachrichtigung über Änderung des voice-Attributs
Benachrichtung über Änderung des Operator-Attributs
für den Channel gesperrter Benutzer
Ende der Liste gesperrter Benutzer
%f - von
%t - an
%r - vollständige Nachricht
%m - umgewandelte Nachricht
%j - für Javascript umgewandelte Nachricht
2 - decodierter Benutzername
Siehe auch: ircg_lookup_format_messages().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt die Verbindung für die Ausgabe.
Alle Meldungen des verbundenen IRC-Servers, der über den Parameter connection spezifiziert wurde, werden über die in der Funktion ircg_register_format_messages() angegebenen Formatierungen ausgegeben.
Siehe auch: ircg_register_format_messages() and ircg_lookup_format_messages().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion ircg_set_file() legt eine Logdatei path für die Verbindung connection an, in der alle Ausgaben geloggt werden. ircg_set_file() liefert bei Auftreten eines Fehler FALSE zurück, ansonsten TRUE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Im Falle eines Verbindungsabruchs der Verbindung connection sendet ircg_set_on_die() auf einem Irc-Server, der über host und port (Hinweis, der Parameter host muss eine gültige IPv4-Adresse enthalten) angegeben wird, die Zeichenkette data.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ändert das Thema (Topic) für den Channel channel des verbundenen IRC-Servers connection in new_topic.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch:
Zurück
Zum Anfang
Nach vorne
Nach oben
Java
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE, wenn var ein Array ist, sonst FALSE.
Siehe auch is_double(), is_float(), is_int(), is_integer(), is_real(), is_string(), is_long(), und is_object().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE, wenn var vom Typ bool ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn der Dateiname existiert und es sich hierbei um ein Verzeichnis handelt.
Ist filename ein relativer Dateiname, so wird er auch relativ zu dem aktuellen Verzeichnis geprüft.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Siehe auch chdir(), dir, opendir(), is_file() und is_link().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch is_array(), is_float(), is_int(), is_integer(), is_real(), is_string(), is_long() und is_object().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn die Datei existiert und ausführbar ist.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Anmerkung:
Diese Funktion ist unter Win32 nicht verfügbar.
Siehe auch is_file() und is_link().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn die Datei existiert und eine reguläre Datei ist.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Diese Funktion arbeitet nicht mit entfernten Dateien; der Zugriff auf die zu prüfende Datei muss über das Dateisystem des Servers erfolgen.
Siehe auch is_dir() und is_link().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ein Synonym für is_double().
Siehe auch is_double(), is_real(), is_int(), is_integer(), is_string(), is_object(), is_array() und is_long().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch is_double(), is_float(), is_int(), is_string(), is_real(), is_object(), is_array() und is_long().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ein Synonym für is_int().
Siehe auch is_double(), is_float(), is_integer(), is_string(), is_real(), is_object(), is_array() und is_long().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn der Dateiname existiert und es sich um einen symbolischen Link handelt.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Siehe auch is_dir(), is_file() und readlink().
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch is_double(), is_float(), is_int(), is_real(), is_string(), is_object(), is_array() und is_integer().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
See also is_bool(), is_double(), is_float(), is_int(), is_real(), is_string(), is_object(), is_array(), and is_integer().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE, wenn var ein Objekt enthält, sonst FALSE.
Siehe auch is_long(), is_int(), is_integer(), is_float(), is_double(), is_real(), is_string() und is_array().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück wenn die Datei existiert und lesbar ist.
Bedenken Sie, dass PHP mit der Benutzer ID auf die Datei zugreift, unter welcher der Webserver läuft (oftmals ist dieses 'nobody').
Beschränkungen durch safe_mode werden nicht berücksichtigt.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Siehe auch is_writable().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch is_long(), is_int(), is_integer(), is_float(), is_double(), is_object(), is_string() und is_array().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
PHP-Resorucen werden von PHP-internen Funktione erzeugt und freigegeben.
Unterläst der Benutzer die Freigabe in seinem Code, so kann diese durch den speziellen Datentyp resource dennoch angestossen werden, sobald die Resource-Variable nicht mehr referenziert wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert TRUE, wenn die Variable oder das Array-Element var existiert, sonst FALSE.
Wird eine Variable oder ein Array-Element mit unset() freigegeben, so liefert isset() anschließend ebenfalls FALSE.
echo isset ($a); / / false $a = "test"; echo isset ($a); / / true unset ($a); echo isset ($a); / / false
Siehe auch empty() und unset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert TRUE, wenn var vom Typ string ist, sonst FALSE.
Siehe auch is_long(), is_int(), is_integer(), is_float(), is_double(), is_real(), is_object() und is_array().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ergibt TRUE, falls das Objekt obj zu einer Subklasse von superclass gehört, ansonsten FALSE.
Siehe auch get_class(), get_parent_class()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn die Datei filename mittels HTTP POST upgeloaded wurde.
Zum Beispiel / etc / passwd.
Diese Prüfung ist speziell dort interessant, wo irgendeine Aktion mit upgeloadeten Dateien deren Inhalt dem User zugänglich machen könnte (oder auch anderen Usern auf dem selben System).
is_uploaded_file() ist in PHP 3 nur nach Version 3.0.16, und in PHP 4 nur nach Version 4.0.2 verfügbar.
Sollten Sie eine frühere Version benutzen, können Sie sich mit der folgenden Funktion weiterhelfen:
Anmerkung:
Das folgende Beispiel funktioniert nicht in Versionen nach PHP 4.0.2.
Das liegt an der internen Funktionalität von PHP, welche sich nach dieser Version geändert hat.
Dateiname '$HTTP_POST_FILES[userfile]' .";}?
Siehe auch move_uploaded_file(), und das Kapitel Steuerung von Dateiuploads für ein einfaches Anwendungsbeispiel.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE zurück, wenn die Datei existiert und nicht schreibgeschützt ist.
So können Sie überprüfen, ob in ein Verzeichnis geschrieben werden kann.
Bedenken Sie, dass PHP mit der Benutzer ID auf die Datei zugreift, unter welcher der Webserver läuft (oftmals ist dieses 'nobody').
Beschränkungen durch safe_mode werden nicht berücksichtigt.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Diese Funktion ist nicht für remote Dateien geeignet, die zu prüfende Datei muss über das Dateisystem des Servers verfügbar sein.
Siehe auch is_readable().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dies ist ein Alias für is_writable()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beschreibung void java_last_exception_clear (void)
Zurück
Zum Anfang
Nach vorne
Java
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das nachstehende Beispiel demonstriert die Verarbeitung von Java Exceptions aus PHP heraus:
Beispiel 1.
Verarbeitung von Java Exceptions
Zurück
Zum Anfang
Nach vorne
Nach oben
LDAP Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion bestimmt den Wochentag für den in julianday übergebenen Tag im Julianischen Datum.
Die Ausgabe erfolgt in Abhängigkeit von mode als integer oder string.
Tabelle 1.
Mögliche mode Werte
Bedeutung
Nummer des Tages als integer (0=Sontag, 1=Montag,...)
Tagesname als String (Englisch-Gregorianisch)
abgekürzter Tagesname als String (Englisch-Gregorianisch)
Zurück
Zum Anfang
Nach vorne
gregoriantojd
Nach oben
jdmonthname
PHP Handbuch
Zurück
Nach vorne
Die Ausgabe erfolgt als String in Abhängigkeit von mode.
Tabelle 1.
Mögliche mode Werte
Bedeutung
Gregorianisch (Abk.)
Gregorianisch
Julianisch - (Abk.)
Julianisch
Jüdisch
Französisch revolutionär
Zurück
Zum Anfang
Nach vorne
jddayofweek
Nach oben
jdtofrench
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert den in julianday angegebenen Tag im Julianischen Datum in einen String, der das entsprechnde Datum im Kalender der Französischen Revolution in der Form "MM / DD / YYYY" enthält.
Zurück
Zum Anfang
Nach vorne
jdmonthname
Nach oben
jdtogregorian
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert den in julianday angegebenen Tag im Julianischen Datum in einen String, der das Datum nach dem Gregorianischen Kalender in der Form "MM / DD / YYYY" enthält.
Zurück
Zum Anfang
Nach vorne
jdtofrench
Nach oben
jdtojewish
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert den in julianday angegebenen Tag im Julianischen Datum in einen String, der das entsprechnde Datum im Jüdischen Kalender in der Form "MM / DD / YYYY" enthält.
Zurück
Zum Anfang
Nach vorne
jdtogregorian
Nach oben
jdtojulian
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert den in julianday angegebenen Tag im Julianischen Datum in einen String, der das entsprechnde Datum im Julianischen Kalender in der Form "MM / DD / YYYY" enthält.
Zurück
Zum Anfang
Nach vorne
jdtojewish
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liegt jday außerhalb des darstellbaren Zeitbereichs (Gregorianische Jahre von 1970 bis 2037 bzw.
Siehe auch unixtojd().
Diese Funktion ist nur in PHP-Versionen nach PHP4RC1 verfügbar.
Zurück
Zum Anfang
Nach vorne
jdtojulian
Nach oben
jewishtojd
PHP Handbuch
Zurück
Nach vorne
Gültige Daten beginnen mit dem Jahr 1 (3761 v.
Der Jüdische Kalender ist bereits seit mehreren Jahrtausenden im Gebrauch, wobei ein neuer Monat jeweils mit der ersten Beobachtung des Neumonds beginnt.
Zurück
Zum Anfang
Nach vorne
Nach oben
juliantojd
PHP Handbuch
Zurück
Nach vorne
join() ist ein Alias von implode() (die Funktionalität ist also vollkommen identisch).
Siehe auch explode(), implode() und split().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion konvertiert das in month, day und year übergebene Datum im Gregorianischen Kalender in einen Tag im Julianischen Datum.
Der Julianische Kalender wurde allerdings erst 46 v.Chr. eingeführt, und die Details der Anwendung stabilisierten sich frühestens im Jahre 8 n.
Chr., z.
Weiterhin betrachteten nicht alle Kulturen, die sich nach diesem Kalender richteten, den Januar als den ersten Monat des Jahres.
Zurück
Zum Anfang
Nach vorne
jewishtojd
Nach oben
PHP Handbuch
Zurück
Nach vorne
key() liefert das Index Element der aktuellen Position im Array.
Siehe auch current() und next().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sortiert ein Array nach Schlüsseln in umgekehrter Reihenfolge, wobei die Zuordnungen zwischen Schlüssel und Wert erhalten bleiben.
Dies ist hauptsächlich bei assoziativen Arrays hilfreich.
Beispiel 1. krsort()
$fruits = array ("d"= "Zitrone", "a"= "Orange", "b"= "Banane", "c"= "Apfel"); krsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
Dieses Beispiel würde folgendes ausgeben:
d = Zitrone c = Apfel b = Banane a = Orange
Sie können das Verhalten der Sortierung mittels dem optionalen Parameter sort_flags beeinflussen, für Details siehe sort().
Siehe auch asort(), arsort(), ksort(), sort(), natsort() und rsort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sortiert ein Array nach Schlüsseln, wobei die Zuordnungen zwischen Schlüssel und Wert erhalten bleiben.
Dies ist hauptsächlich bei assoziativen Arrays hilfreich.
Beispiel 1. ksort()
$fruits = array ("d"= "Zitrone", "a"= "Orange", "b"= "Banane", "c"= "Apfel"); ksort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
Dieses Beispiel würde folgendes ausgeben:
a = Orange b = Banane c = Apfel d = Zitrone
Sie können das Verhalten der Sortierung mittels dem optionalen Parameter sort_flags beeinflussen, für Details siehe sort().
Siehe auch asort(), arsort(), krsort(), uksort(), sort(), natsort() und rsort().
Anmerkung:
Der zweite Parameter wurde mit PHP 4 eingeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
LDAP Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Die ldap_add() Funktion wird benutzt um Einträge einem Verzeichnis hinzuzufügen.
Die DN des Eintrags, der hinzugefügt werden soll wird durch dn bestimmt.
Das Array eintrag bestimmt die Informationen des Eintrags.
Die Werte in den Einträgen werden durch individuelle Merkmale indiziert.
Im Fall von mehreren Werten für ein Merkmal werden diese durch die Verwendung von Zahlen indiziert, die bei 0 beginnen.
eintrag[ "merkmal1"] = wert eintrag["merkmal2"][0] = wert1 eintrag["merkmal2"][1] = wert2
Beispiel 1.
Komplettes Beispiel mit authentifiziertem bind
?php $ds=ldap_connect( "localhost"); / / Annahme: der LDAP Server befindet / / sich auf diesem Host if ($ds) {/ / bind mit passendem dn für aktulisierenden Zugriff $r=ldap_bind($ds ,"cn=root, o=Meine Firma, c=DE", "geheim"); / / Daten vorbereiten $info["cn"]="Hans Mustermann"; $info["sn"]="Mustermann"; $info["mail"]="MustermannH@firma.de"; $info["objectclass"]="person"; / / hinzufügen der Daten zum Verzeichnis $r=ldap_add($ds, "cn=Hans Mustermann, o=Meine Firma, c=DE", $info); ldap_close($ds);} else {echo "Verbindung zum LDAP Server nicht möglich !";}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bindung für ein LDAP Verzeichnis mit angegebenem RDN und Kennwort.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Die ldap_bind() Funktion führt eine bind Operation auf einem Verzeichnis aus.
Die Parameter bind_rdn und bind_kennwort sind optional, wenn diese fehlen wird ein anonymes bind versucht.
Beispiel 1.
Verwenden von LDAP Bind
?php / / verwenden von ldap bind $ldaprdn = 'uname'; / / ldap rdn oder dn $ldappass = 'password'; / / entsprechendes password / / verbinden zum ldap server $ldapconn = ldap_connect("ldap.example.com") or die("Keine Verbindung zum LDAP server möglich ."); if ($ldapconn) {/ / binden zum ldap server $ldapbind = ldap_bind($ldapconn, $ldaprdn, $ldappass); / / Bindung überpfrüfen if ($ldapbind) {echo "LDAP bind erfolgreich.. .";} else {echo "LDAP bind fehlgeschlagen.. .";}}?
Beispiel 2.
Anonymes LDAP Bind
?php / /verwenden von anonymen ldap bind / / verbinden zum ldap server $ldapconn = ldap_connect( "ldap.example.com") or die("Could not connect to LDAP server ."); if ($ldapconn) {/ / anonymes binding $ldapbind = ldap_bind($ldapconn); if ($ldapbind) {echo "anonymes LDAP bind erfolgreich.. .";} else {echo "anonymes LDAP bind fehlgeschlagen.. .";}}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Die ldap_close() Funktion schließt die Verbindung zum LDAP Server die zur Verbindungs-Kennung gehört.
Der Aufruf dieser Funktion ist intern identisch zu ldap_unbind().
Die LDAP API benutzt den Aufruf ldap_unbind(), so dass Sie vielleicht diese Funktion benutzen sollten, anstatt ldap_close() zu verwenden.
Anmerkung:
Diese Funktion ist ein Alias für ldap_unbind().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: wahr, wenn der wert gefunden wird, ansonsten FALSE.
Tritt ein Fehler auf, wird -1 zurückgegeben.
ldap_compare() vergleicht den wert eines merkmal mit dem Wert des gleichen Merkmals in dem LDAP Verzeichniseintrag der durch dn bestimmt wurde.
Das folgende Beispiel zeigt, wie überprüft wird, ob ein gegebenes Kennwort mit dem Kennwort übereinstimmt oder nicht, das in dem durch DN bestimmten Eíntrag gespeichert ist.
Beispiel 1.
Komplettes Beispiel einer Kennwort-Überprüfung
?php $ds=ldap_connect( "localhost"); / / Annahme: der LDAP Server befindet / / sich auf diesem Host if ($ds) {/ / binden if(ldap_bind($ds)) {/ / Daten vobereiten $dn = "cn=Helga Olsen, ou=Meine Einheit, o=Meine Firma, c=FI"; $value = "Geheimes Kennwort"; $attr = "kennwort"; / / vergleiche die Werte $r=ldap_compare($ds, $dn, $attr, $value); if ($r === -1) {echo "Fehler: ".ldap_error($ds);} elseif ($r === TRUE) {echo "Kennwort korrekt .";} elseif ($r === FALSE) {echo "Falsch geraten!
Kennwort nicht korrekt .";}} else {echo "Keine Bindung zum LDAP Server möglich .";} ldap_close($ds);} else {echo "Keine Verbindung zum LDAP Server möglich .";}?
Warnung
ldap_compare() kann NICHT für Vergleiche von BINÄREN Werten benutzt werden!
Anmerkung:
Diese Funktion wurde in 4.0.2 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Eine positive Verbindungs-Kennung im Erfolgsfall, FALSE im Fehlerfall.
Die ldap_connect() Funktion stellt eine Verbindung zu einem LDAP Server auf einem bestimmten hostname und port her.
Beide Argumente sind optional.
Werden keine Argumente angegeben, wird die Verbindungs-Kennung einer schon geöffneten Verbindung zurückgeliefert.
Wird nur der hostname angegeben, wird für den Port der Standarport 389 benutzt.
Bei Verwendung von OpenLDAP 2.x.x können Sie eine URL statt des Hostnamens angeben.
Um LDAP mit SSL-Unterstützzung zu verwenden, übersetzen Sie OpenLDAP mit SSL-Unterstützung, PHP mit SSL und verwenden ldaps: / /Hostname / als Host Argument.
Das Port Argument wird bei der Verwendung von URLs nicht benutzt.
Anmerkung:
URL und SSL Unterstützung wurden in 4.0.4 hinzugefügt
Beispiel 1.
Verbindung zu einem LDAP server.
?php / / LDAP Variablen $ldaphost = "ldap.example.com"; / / Ihr ldap servers $ldapport = 389; / / Die Portnummer ihres ldap servers / / Verbindung zu LDAP $ldapconn = ldap_connect ($ldaphost, $ldapport) or die ("Keine Verbindung zu {$ldaphost} möglich");?
Beispiel 2.
Sichere Verbindung zu einem LDAP server.
?php / * Stellen Sie sicher, dass Sie den korrekten Host angeben, an dem Sie Ihr Sicherheitszertifikat übermittelt haben * / $ldaphost = "ldaps: / /ldap.example.com /"; / / Verbindung zu LDAP $ldapconn = ldap_connect ($ldaphost) or die ("Keine Verbindung zu {$ldaphost} möglich ");?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anzahl der Einträge im Ergebnis, FALSE im Fehlerfall.
Die Ergebnis-Kennung bezeichnet das interne LDAP Ergebnis.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Die ldap_delete() Funktion löscht einen einzelnen Eintrag aus einem LDAP Verzeichnis, das im dn angegeben wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die ldap_dn2ufn() Funktion wird verwendet um einen DN, angegeben mit dn, in einer benutzerfreundlicheren Form darzustellen, wobei die Typen-Namen wegfallen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Fehlertext.
Diese Funktion liefert den Fehlertext der die fehlernummer erklärt.
Während LDAP Fehlernummern standardisiert sind, liefern unterschiedliche Bibliotheken unterschiedliche oder sogar lokalspezifische Fehlermeldungen.
Deshalb sollten Sie nie auf eine spezielle Fehlermeldung prüfen, sondern immer eine Fehlernummer verwenden.
Siehe auch ldap_errno() und ldap_error().
Beispiel 1.
Aufzählung aller LDAP Fehlermeldungen
?php for( $i=0; $i 100; $i++) {printf("Fehler $i: %s br \n", ldap_err2str($i));}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
LDAP Fehlernummer des letzten LDAP Kommandos für diese Verbindung.
Diese Funktion liefert die standardisierte Fehlernummer des zuletzt ausgeführten LDAP Kommandos für die angegebene Vebindungs-Kennung.
Diese Nummer kann mit der Funktion ldap_err2str() in einen Fehlertext konvertiert werden.
Solange Sie die Stufe der Fehlerwarnungen in Ihrer php.ini nicht herabsetzen oder vor Ihre LDAP Komanndos ein @ (at) setzen um die Ausgabe von Fehlermeldungen zu unterdrücken, werden die aufgetretenen Fehler auch in Ihrer HTML Ausgabe zu sehen sein.
Beispiel 1.
Erzeugen und Abfangen eines Fehlers
?php / / Dieses Beispiel enhält einen Fehler, der abgefangen wird. $ld = ldap_connect( "localhost"); $bind = ldap_bind($ld); / / Syntax Fehler im Filterausdruck (errno 87), / / müsste "objectclass=* "heißen, um zu funktionieren. $res = @ldap_search($ld, "o=Meine Firma, c=DE", "objectclass"); if (!$res) {printf("LDAP-Fehlernummer: %s br \n", ldap_errno($ld)); printf("LDAP-Fehler: %s br \n", ldap_error($ld)); die("Argh! br \n");} $info = ldap_get_entries($ld, $res); printf("%d Übereinstimmende Einträge. br \n", $info["count"]);?
Siehe auch ldap_err2str() und ldap_error().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Fehlertext
Während LDAP Fehlernummern standardisiert sind, liefern unterschiedliche Bibliotheken unterschiedliche oder sogar lokalspezifische Fehlermeldungen.
Deshalb sollten Sie nie auf eine spezielle Fehlermeldung prüfen, sondern immer eine Fehlernummer verwenden.
Solange Sie die Stufe der Fehlerwarnungen in Ihrer php.ini nicht herabsetzen oder vor Ihre LDAP Komanndos ein @ (at) setzen, um die Ausgabe von Fehlermeldungen zu unterdrücken, werden die aufgetretenen Fehler auch in Ihrer HTML Ausgabe zu sehen sein.
Siehe auch ldap_err2str() und ldap_errno().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die ldap_explode_dn() Funktion wird benutzt um einen von ldap_get_dn() gelieferten DN aufzuteilen und in dessen Bestandteile zu zerlegen.
Der Parameter mit_merkmal wird benutzt, um zu bestimmen, ob die RDNs nur mit Werten oder zusätlich mit ihren Merkmalen angefragt werden.
Merkmal = Wert Format) zu erhalten, setzen Sie mit_merkmal auf 0, um nur Werte zu erhalten auf 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall das erste Merkmal des Eintrags, im Fehlerfall FALSE.
Die ldap_first_attribute() Funktion liefert das erste Merkmal eines Eintrags der durch die Ergebnis-Eintrag-Kennung angegeben wurde.
Der Parameter ber-Kennung ist die Kennung eines internen Speicherort-Zeiger.
Die Übergabe erfolgt per Referenz.
Die gleiche ber-Kennung wird an die Funktion ldap_next_attribute() weitergegeben, die diesen Zeiger dann verändert.
Siehe auch ldap_get_attributes()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall die Ergebnis-Eintrag-Kennung für den ersten Eintrag, FALSE im Fehlerfall.
Die ldap_first_entry() Funktion gibt die Eintrag-Kennung für den ersten Eintrag im Ergebnis zurück.
Diese Eintrag-Kennung wird dann an die Funktion ldap_next_entry() weitergegeben, um sukzessiv die Einträge des Ergebnisses zu erhalten.
Siehe auch ldap_get_entries().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Diesen Speicher können Sie mit der Funktion ldap_free_result() mir Angabe der entsprechenden Ergebnis-Kennung wieder freigeben.
Typischerweise wird nach Beendigung des Skripts wird der gesamte Ergebnis-Speicher automatisch freigegeben.
Falls Ihr Skript sukzessive Suchoperationen durchführt, die große Ergebnismengen liefern, können Sie ldap_free_result() aufrufen, um den Speicherverbrauch zur Laufzeit niedrig zu halten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall wird die gesamte Information eines Eintrags in einem multidimensionalen Array zurückgegeben; im Fehlerfall FALSE.
Die ldap_get_attributes() Die ldap_get_attributes() Funktion wird verwendet um das Lesen der Merkmale und Werte eines Eintrags im Suchergebnis zu vereinfachen.
Der Rückgabewert ist ein multidimensionales Array aus Merkmalen und Werten.
Nachdem Sie einen bestimmten Eintrag in dem Verzeichnis lokalisiert haben, können Sie mit dieser Funktion herausfinden, welche Informationen für diesen Eintrag verfügbar sind.
Diese Funktion würden Sie in einer Anwendung verwenden, die Verzeichniseinträge "durchstöbert" und / oder wo Sie die Struktur der Verzeichniseinträge nicht kennen.
In vielen Anwendungen suchen Sie nach einem bestimmten Merkmal wie einer email-Adresse oder einem Nachnamen und interessieren sich nicht dafür, welche anderen Daten verfügbar sind.
return_value[ "count"] = Anzahl der Merkmale des Eintrags return_value[0] = das erste Merkmal return_value[n] = das n-te Merkmal return_value["merkmal"]["count"] = Anzahl der Werte des Merkmals return_value["merkmal"][0] = der erste Wert des Merkmals return_value["merkmal"][i] = der i+1-te Wert des Merkmals
Beispiel 1.
Anzeigen der Liste der Merkmale für einen ausgewählten Verzeichnis-Eintrag
/ / $ds die Verbindungs-Kennung für das Verzeichnis / * $sr ein gültiges Suchergebnis eines früheren Aufrufs einer der ldap Verzeichnis Suchfunktionen * / $entry = ldap_first_entry( $ds, $sr); $attrs = ldap_get_attributes($ds, $entry); echo $attrs["count"]. "Merkmale für diesen Eintrag: p"; for ($i=0; $i $attrs["count"]; $i++) echo $attrs[$i]. "br";
Siehe auch ldap_first_attribute() und ldap_next_attribute()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall der DN des Ergebnis-Eintrags, im Fehlerfall FALSE.
Die ldap_get_dn() Funktion wird verwendet, um den DN eines Eintrags im Ergebnis herauszufinden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall wird die gesamte Information des Ergebnisses in einem multidimensionalen Array zurückgegeben; im Fehlerfall FALSE.
Die ldap_get_entries() Funktion wird verwendet um das Lesen mehrfacher Einträge des Ergebnisses, angegeben mit Ergebnis-Kennung zu vereinfachen und danach werden die Merkmale und mehfachen Werte gelesen.
Durch einen Funktionsaufruf wird die gesamte Information in einem multidimensionalen Array zurückgegeben.
Die Struktur dieses Array sieht wie folgt aus.
Der Merkmal-Index wird in Kleinbuchstaben umgewandelt. (Verzeichnis-Server unterscheiden nicht zwischen Groß - / Kleinschreibung hinsichtlich der Merkmake, aber der Unterschied ist wichtig, wenn diese Merkmale als Array-Indizes benutzt werden.)
return_value[ "count"] = Anzahl der Einträge im Ergebnis return_value[0]: bezieht sich auf Einzelheiten des ersten Eintrags return_value[i]["dn"] = DN des i-ten Eintrags im Ergebnis return_value[i]["count"] = Anzahl der Merkmale im i-ten Eintrag return_value[i][j] = das j-te Merkmal des i-ten Eintrags im Ergebnis return_value[i]["merkmal"]["count"] = Anzahl der Werte für das Merkmal im i-ten Eintrag return_value[i]["merkmal"][j] = der j-te Wert des Merkmals im i-ten Eintrag
Siehe auch ldap_first_entry() und ldap_next_entry()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt retval auf den Wert der gewählten Option.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Der Parameter option Der Parameter option kann einer der folgenden sein:
Beschrieben sind diese unter draft-ietf-ldapext-ldap-c - api-xx.txt
Anmerkung:
Wurde in PHP 4.0.4 hinzugefügt.
Beispiel 1.
Prüfen der Protokollversion
/ / $ds eine gültige Verbindungs-Kennung für einen Verzeichnis-Server if (ldap_get_option($ds, LDAP_OPT_PROTOCOL_VERSION, $version)) echo "Sie benutzen die Protokollversion $version"; else echo "Protokollversion konnte nicht bestimmt werden";
Siehe auch ldap_set_option().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall ein Array der Werte des Merkmals, FALSE im Fehlerfall.
Der Eintrag wird durch Ergebnis-Eintrag-Kennung bestimmt.
Die Anzahl der Werte kann über die Indexierung von "count" des resultierenden Arrays bestimmt werden.
Der Zugriff auf einzelne Werte erfolgt durch einen ganzzahligen Index im Array.
Der erste Indexwert ist 0.
Da diese Funktion eine Ergebnis-Eintrag-Kennung benötigt, muss ein Aufruf einer der LDAP Suchfunktionen und einer der Funktionen, die einen einzelnen Eintrag liefern, vorausgehen.
Ihre Anwendung wird entweder hart codiert sein, um bestimmte Merkmale (wie z.B.: "Nachname "oder "Mail") zu suchen, oder Sie müssen die Funktion ldap_get_attributes() benutzen, um herauszufinden, welche Merkmale für einen gegebenen Eintrag vorhanden sind.
LDAP erlaubt mehr als einen Eintrag für ein Merkmal, so dass es z.B. sein kann, dass der Verzeichnis-Eintrag einer Person mehrere Email-Adressen enthält, die alle mit dem Merkmal "mail" bezeichnet sind.
return_value[ "count"] = Anzahl der Werte eines Merkmals return_value[0] = der erste Wert des Merkmals return_value[i] = der i-te Wert des Merkmals
Beispiel 1.
Liste aller Werte des Merkmals "mail" für einen Verzeichnis - Eintrag
/ / $ds gültige Verbindungs-Kennung für einen Verzeichnis-Server / / $sr gültiges Suchergebnis eines früheren Aufrufs einer der ldap / / Verzeichnis Suchfunktionen / / $entry gültige Eintrag-Kennung eines früheren Aufrufs einer / / der Funktionen, die einen Verzeichnis-Eintrag zurückgeben $values = ldap_get_values( $ds, $entry ,"mail"); echo $values["count"]. "Email-Adressen für diesen Eintrag. p"; for ($i=0; $i $values["count"]; $i++) echo $values[$i]. "br";
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall ein Array der Werte des Merkmals, FALSE im Fehlerfall.
Der Eintrag wird durch Ergebnis-Eintrag-Kennung Der Eintrag wird durch Ergebnis-Eintrag-Kennung bestimmt.
Die Anzahl der Werte kann über die Indexierung von "count" des resultierenden Arrays bestimmt werden.
Der Zugriff auf einzelne Werte erfolgt durch einen ganzzahligen Index im Array.
Der erste Indexwert ist 0.
Diese Funktion wird exakt gleich benutzt wie die Funktion ldap_get_values() mit der Aussnahme, dass hier binäre Daten statt Textdaten behandelt werden.
Anmerkung:
Diese Funktion wurde in 4.0 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall eine Such-Ergebnis-Kennung,im Fehlerfall FALSE.
Die ldap_list() Funktion führt die Suche für einen gegebenen filter im Verzeichnis mit der Reichweite von LDAP_SCOPE_ONELEVEL durch.
LDAP_SCOPE_ONELEVEL bedeutet, dass die Suche nur Informationen liefert, die direkt unterhalb der Stufe liegen, die durch die Angabe des basis_dn im Auruf bestimmt wird. (Das entspricht der Eingabe von "ls", die eine Liste von Dateien und Verzeichnissen des aktuellen Arbeitsverzeichnisses anzeigt.)
Der Aufruf dieser Funktion nimmt 5 optionale Parameter entgegen.
Siehe die Anmerkungen zu ldap_search().
Anmerkung:
Diese wahlfreien Parameter wurden in 4.0.2 hinzugefügt: attrsonly, größenbegrenzung, zeitbegrenzung, deref.
Beispiel 1.
Erzeugung einer Liste aller Organisationseinheiten einer Organisation
/ / $ds gültige Verbindungs-Kennung für einen Verzeichnis-Server $basis_dn = "o=Meine Firma, c=DE"; $nur_dieses = array("ou"); $sr=ldap_list($ds, $basis_dn, "ou=*", $nur_dieses); $info = ldap_get_entries($ds, $sr); for ($i=0; $i $info["count"]; $i++) echo $info[$i]["ou"][0];
Anmerkung:
Seit der Version 4.0.5 ist es außerdem möglich parallele Suchen durchzuführen.
Für Details siehe ldap_search().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Diese Funktion fügt Merkmal( e) zum angegebenen dn hinzu.
Die Änderung wird auf der Merkmalsebene durchgeführt im Gegensatz zur Objektebene.
Das Hinzufügen auf der Objektebene wird durch die Funktion ldap_add() geleistet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Diese Funktion löscht ein oder mehrere Merkmale vom angegebenen dn.
Die Änderung wird auf der Merkmalsebene durchgeführt im Gegensatz zur Objektebene.
Das Löschen auf Objektebene wird durch die Funktion ldap_delete() geleistet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Die ldap_modify() Funktion wird verwendet, um bestehende Einträge in einem LDAP-Verzeichnis zu ändern.
Die Struktur des Eintrags ist die gleiche wie bei ldap_add().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Diese Funktion ersetzt ein oder mehrere Merkmale vom angegebenen dn.
Die Änderung wird auf der Merkmalsebene durchgeführt im Gegensatz zur Objektebene.
Änderungen auf der Objektebene werden mit der Funktion ldap_modify() ausgeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: im Erfolgsfall das nächste Merkmal eines Eintrags, im Fehlerfall FALSE.
Die ldap_next_attribute() Die ldap_next_attribute() Funktion wird aufgerufen, um die Merkmale eines Eintrags zu erhalten.
Der interne Status des Zeigers wird durch die ber_Kennung bestimmt.
Diese wird mittels Referenz an die Funktion weitergegeben.
Der erste Aufruf von ldap_next_attribute() erfolgt mit der Ergebnis-Eintrag-Kennung, die von ldap_first_attribute() zurückgegeben wurde.
Siehe auch ldap_get_attributes()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Im Erfolgsfall wird die Eintrags-Kennung für den nächsten Eintrag des Ergebnisses zurückgegeben.
Wenn keine weiteren Einträge im Ergebnis vorhanden sind wird FALSE zurückgegeben.
Die ldap_next_entry() Funktion wird verwendet, um die Einträge zu erhalten, die im Ergebnis gespeichert sind.
Wiederholtes aufrufen von ldap_next_entry() liefert einen Eintrag nach dem anderen, solange bis kein Eintrag mehr vorliegt.
Der erste Aufruf von ldap_next_entry() erfolgt nach dem Aufruf von ldap_first_entry() mit der Ergebnis-Eintrag-Kennung, die von ldap_first_entry() zurückgegeben wurde.
Siehe auch ldap_get_entries()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Im Erfolgsfall eine Such-Ergebnis-Kennung, FALSE im Fehlerfall.
Die ldap_read() Funktion führt die Suche für einen gegebenen filter im Verzeichnis mit der Reichweite von LDAP_SCOPE_BASE durch.
Das entpricht dem Lesen eines Eintrags in einem Verzeichnis.
Ein leerer Filter ist nicht erlaubt.
Wenn Sie wirklich alle Informationen für einen Eintrag erhalten möchten, müssen Sie einen Filter der Art "objectClass=*" verwenden.
Kennen Sie die Typen der Einträge die auf dem Verzeichnis-Server benutzt werden, können Sie einen passenden Filter wie z.B ." objectClass=inetOrgPerson "verwenden.
Der Aufruf dieser Funktion nimmt 5 optionale Argumente entgegen.
Siehe Anmerkungen zu ldap_search().
Anmerkung:
Diese wahlfreien Argumente wurden in 4.0.2 hinzugefügt: nur_werte, größenbegrenzung, zeitbegrenzung, deref.
Seit der Version 4.0.5 ist es außerdem möglich parallele Suchen durchzuführen.
Für Details siehe ldap_search().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Eintrag, der durch dn gegeben ist, wird umbenannt / gelöscht.
Der neue RDN wird durch neuerrdn bestimmt, der neue Eltern - / übergeordnete Eintrag wird durch neueeltern bestimmt.
Wenn das Argument löschealtenrdn TRUE ist, wird der alte Wert / die alten Werte von RDN enfernt, andernfalls wird der alte Wert / die alten Werte als nicht-eindeutige( r) (non - distinguished) Werte des Eintrags beibehalten.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Anmerkung:
Diese Funktion arbeitet zum gegenwärtigen Zeitpunkt nur mit LDAPv3.
Sie müssen ldap_set_option() vorher benutzen um für eine Bindung LDAPv3 nutzen zu können.
Wurde in PHP 4.0.5 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: eine Such-Ergebnis-Kennung im Erfolgsfall, FALSE im Fehlerfall.
Die ldap_search() Funktion führt die Suche für einen gegebenen Filter im Verzeichnis mit der Reichweite von LDAP_SCOPE_SUBTREE durch.
Das ist äquivalent zu einer Suche im ganzen Verzeichnis. base_dn legt den Basis DN für das Verzeichnis fest.
Der optionale vierte Parameter kann benutzt werden, um die Rückgabewerte des Servers so einzuschränken, dass nur die tatsächlich benötigten Merkmale und ihre zugehörigen Werte in der Ergebnismenge enthalten sind.
Dieses Vorgehen ist um einiges effizienter als die standardmäßige Vorgehensweise (diese liefert alle Merkmale und alle zugehörigen Werte).
Aus diesem Grund ist die Angabe des vierten Parameters als gute Praxis zu empfehlen.
Beachten Sie, dass der "dn" immer zurückgeliefert wird, ohne Rücksicht darauf, welche Merkmalstypen angefragt wurden.
Beachten Sie weiterhin, dass manche Verzeichnis-Server so konfiguriert sind, dass sie nicht mehr als eine vorbestimmte Anzahl an Einträgen zurückliefern.
Sollte dies der Fall sein, zeigt Ihnen der Server an, dass nur eine Teilmenge des Ergebnisses zurückgeliefert wurde.
Diesen Hinweis erhalten Sie auch, wenn Sie den sechsten Parameter größenbegrenzung mit angegeben hatten, um die Anzahl der angefragten Einträge einzuschränken.
Der fünfte Parameter nur_werte sollte auf 1 gesetzt werden, wenn Sie nur Merkmalstypen erhalten möchten.
Das ist das Standard Verhalten.
Mit dem sechsten Parameter größenbegrenzung ist es möglich, die Anzahl der Einträge, die Sie erhalten, zu begrenzen.
Wenn Sie diesen Wert auf 0 setzen, bedeutet dies keine Beschränkung der Ergegnismenge.
ANMERKUNG:
Dieser Parameter kann eine serverseitig gesetzte Beschränkung NICHT überschreiben.
Sie haben nur die Möglichkeit die Beschränkung noch weiter herabzusetzen.
Der siebte Parameter zeitbegrenzung legt die Zahl in Sekunden fest, die auf die Suche verwendet wird.
Wenn Sie diesen Wert auf 0 setzen, bedeutet dies keine Beschränkung der Zeit.
ANMERKUNG:
Dieser Parameter kann eine serverseitig gesetzte Zeitbegrenzung NICHT überschreiben.
Sie haben nur die Möglichkeit die Beschränkung noch weiter herabzusetzen.
Der achte Parameter deref gibt an, wie Aliase während einer Suche behandelt werden.
Wert kann einer der folgenden sein:
LDAP_DEREF_NEVER - (Standard) Aliase werden nie aufgelöst.
LDAP_DEREF_SEARCHING - Aliase sollen während der Suche aufgelöst werden, aber nicht dann, wenn das Basisobjekt der Suche ermittelt wird.
LDAP_DEREF_FINDING - Aliase sollen aufgelöst werden, wenn das Basisobjekt ermiitelt wird, aber nicht während der Suche.
LDAP_DEREF_ALWAYS - Aliase sollen immer aufgelöst werden.
Anmerkung:
Diese optionalen Parameter wurden in 4.0.2 hinzugefügt: nur_werte, größenbegrenzung, zeitbegrenzung, deref.
Der Suchfilter kann einfach oder kompliziert sein, wenn sie boolsche Operatoren in dem Format verwenden, wie in der LDAP Dokumentation beschrieben (siehe Netscape Directory SDK für die vollständige Information über Filter).
Das untenstehende Beispiel liefert die Organisationseinheit, den Familiennamen, den Vornamen und die Email-Addresse aller Personen in "Meine Firma" deren Familien - oder Vorname die Zeichenkette $person enhält.
In diesem Beispiel wird ein boolscher Filter verwendet, um den Server zu veranlassen, nach Informationen in mehr als einem Merkmal zu suchen.
Beispiel 1.
LDAP Suche
/ / $ds gültige Verbindungs-Kennung für einen Verzeichnis-Server / / $person ein Teil oder der vollständige Name einer Person, z.B. "Jo" $dn = "o=Meine Firma, c=DE"; $filter="(_BAR_(sn=$person*)(vorname=$person*))"; $justthese = array ("ou", "sn", "vorname", "mail"); $sr=ldap_search($ds, $dn, $filter, $justthese); $info = ldap_get_entries($ds, $sr); print $info["count"]. "gefundene Einträge p";
Seit der Version 4.0.5 ist es außerdem möglich parallele Suchen durchzuführen.
Um dies zu verwirklichen benutzen Sie als erstes Argument einen Array von Verbindungs-Kennungen, statt einer einzelnen Verbindungs-Kennung.
Falls Sie nicht den gleichen Basis DN und den gleichen Filter für alle Suchen verwenden möchten, können Sie ebenso einen Array von Basis DNs und / oder einen Array von Filtern benutzen.
Diese Arrays müssen die gleiche Größe wie das Array der Verbindungs-Kennungen haben, da die ersten Einträge der Arrays für eine Suche verwendet werden, die zweiten Einträge für eine andere Suche und so weiter.
Wenn Sie parallel suchen erhalten Sie ein Array von Such-Ergebnis-Kennungen, außer im Fall eines Fehlers, dann liefert der Eintrag zur entsprechenden Suche FALSE Wenn Sie parallel suchen erhalten Sie ein Array von Such-Ergebnis-Kennungen, außer im Fall eines Fehlers, dann liefert der Eintrag zur entsprechenden Suche FALSE zurück.
Das entspricht ganz genau dem Wert der normalerweise zurückgeliefert wird, außer dass Sie immer eine Ergebnis-Kennung erhalten, wenn Sie eine Suche durchgeführt haben.
Es treten einige seltene Fälle auf, wo eine normale Suche FALSE zurückgibt, während die parallele Suche eine Kennung zurückliefert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den Wert der bestimmten Option auf neuerwert .Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Der Parameter option Der Parameter option kann einer der folgenden sein:
Hier eine kurze Beschreibung, schauen Sie unter draft-ietf-ldapext-ldap-c - api-xx.txt nach Details.
Die Optionen LDAP_OPT_DEREF, LDAP_OPT_SIZELIMIT, LDAP_OPT_TIMELIMIT, LDAP_OPT_PROTOCOL_VERSION und LDAP_OPT_ERROR_NUMBER haben einen ganzzahligen Wert, LDAP_OPT_REFERRALS und LDAP_OPT_RESTART haben einen boolschen Wert und die Optionen LDAP_OPT_HOST_NAME, LDAP_OPT_ERROR_STRING und LDAP_OPT_MATCHED_DN bestehen aus einer Zeichenkette.
Das erste Beispiel veranschaulicht deren Gebrauch.
Die Optionen LDAP_OPT_SERVER_CONTROLS and LDAP_OPT_CLIENT_CONTROLS benötigen eine Kontrolliste, d.h. der Wert muss ein Array aus Kontrollen sein.
Eine Kontrolle besteht aus einer oid die die Kontrolle identifiziert, einem wahlweisen wert, und einem wahlweisen Kennzeichen für criticality.
Dieses Array enthält ein Element mit dem Schlüssel oid und einer Zeichenkette als Wert und zwei optionalen Elementen.
Der vorgegebene Wert von iscritical ist FALSE falls Sie nichts angeben.
Schauen Sie sich das zweite Beispiel weiter unten an.
Anmerkung:
Diese Funktion steht nur zur Verfügung, wenn Sie OpenLDAP 2.x.x ODER Netscape Directory SDK x.x verwenden und wurde in PHP 4.0.4 hinzugefügt.
Beispiel 1.
Setzen der Protokollversion
/ / $ds ist eine gültige Verbindungs-Kennung für einen Verzeichnis - / / Server if (ldap_set_option($ds, LDAP_OPT_PROTOCOL_VERSION, 3)) echo "Verwenden von LDAPv3"; else echo "Kann das Protokoll nicht auf Version 3 setzen";
Beispiel 2.
Setzen der Server Kontrollen
/ / $ds ist eine gültige Verbingund-Kennung für einen Verzeichnis - / / Server / / Kontrolle ohne Wert $ctrl1 = array( "oid "= "1.2.752.58.10.1", "iscritical" = TRUE); / / iscritical hat den vorgegebenen Wert FALSE $ctrl2 = array("oid "= "1.2.752.58.1.10", "value" = "magic"); / / Versuch, beide Kontrollen zu setzen if (!ldap_set_option($ds, LDAP_OPT_SERVER_CONTROLS, array($ctrl1, $ctrl2))) echo "Kann die Server Kontrollen nicht setzen";
Siehe auch ldap_get_option().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Die ldap_unbind() Funktion führt ein unbind auf ein LDAP Verzeichnis aus.
Zurück
Zum Anfang
Nach vorne
Nach oben
Mail Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion errechnet die Differenz zwischen den als Argumente übergebenen zwei Strings.
Ist einer der Strings länger als die zulässigen 255 Zeichen, wird -1 zurück gegeben.
Die Levenshtein-Differenz ist definiert als die minimale Anzahl an Zeichen, die ersetzt, eingefügt oder gelöscht werden müssen um den str1 nach str2 umzusetzen.
Die Komplexität des Algorithmus ist O( m*n), wobei n und m der Länge der Strings str1 und str2 (viel besser als bei der Funktion similar_text(), wo sie O(max(n,m)**3) beträgt).
Siehe auch soundex(), similar_text() und metaphone().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
link() erzeugt einen absoluten Link mit dem Ziel target.
Siehe auch symlink() um symbolische Links zu erstellen und readlink() zusammen mit linkinfo().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
linkinfo() gibt das st_dev Feld des UNIX C stat structure resultierend aus dem lstat System Call zurück.
Diese Funktion wird benutzt, um zu verifizieren ob ein Link (auf den mit path gezeigt wird) wirklich existiert (Hierbei wird die gleiche Methode benutzt, die in dem S_ISLNK Makro in stat.h definiert ist).
Gibt 0 oder FALSE zurück wenn ein Fehler auftrat.
Siehe auch symlink(), link(), und readlink().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wie array() ist auch dies keine wirkliche Funktion, sondern ein Sprachkonstrukt. list() wird verwendet, um eine Liste von Variablen innerhalb einer Operation zuzuweisen.
Beispiel 1. list()
?php $info = array( 'coffee', 'brown', 'caffeine'); / / Auflisten aller Variablen list($drink, $color, $power) = $info; print "$drink is $color and $power makes it special.\n"; / / Ein paar davon auflisten list($drink,, $power) = $info; print "$drink has $power.\n"; / / Oder nur die dritte ausgeben list (,, $power) = $info; print "I need $power!\n";?
Beispiel 2. list()
table tr th Mitarbeitername / th th Gehalt / th / tr ?php $result = mysql_query ("SELECT id, name, salary FROM employees",$conn); while (list ($id, $name, $salary) = mysql_fetch_row ($result)) {print ("tr \n"." td a href=\"info.php?id=$id\ "$name / a / td \n"." td $salary / td \n". "/ tr \n");}? / table
Warnung
list() weist die Werte von rechts beginnend zu.
Wenn Sie einfache Variablen benutzen, brauchen Sie sich nicht darum zu kümmern.
Wenn Sie jedoch Arrays mit Indizes verwenden, erwarten Sie gewöhnlich die Reihenfolge der Indizes in dem Array genau so, wie Sie sie in list() geschrieben haben (von links nach rechts), was jedoch nicht der Fall ist.
Es wird in der umgekehrten Reihenfolge zugewiesen.
Beispiel 3. list() mit Array Indizes verwenden
Siehe auch each(), array() und extract().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. localeconv() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die localtime() -Funktion gibt ein Array zurück, welches hinsichtlich seiner Struktur identisch ist mit dem des Funktionsaufrufs in C.
Fehlt dieser, wird die aktuelle Zeit genommen.
Ist dieser 0 oder nicht gesetzt, wird das Werte-Array als reguläres, numerisch indiziertes Array zurück gegeben.
Ist er dagegen 1, liefert localtime() ein assoziatives Array zurück, welches alle Elemente der Struktur des localtime-Aufrufs in C enthält.
Die Bezeichner der verschiedenen Schlüssel dieses assoziatien Arrays lauten:
"tm_sec" - Sekunde
"tm_min" - Minute
"tm_hour" - Stunde
"tm_mday" - Tag des Monats
"tm_mon" - Monat des Jahres, beginnt bei 0 für Januar
"tm_year" - Jahr seit 1900
"tm_wday" - Tag der Woche
"tm_yday" - Tag des Jahres
"tm_isdst" - für das Datum ist die Sommerzeit zu berücksichtigen
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch log().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert den natürlichen Logarithmus (zur Basis e) des Parameters arg.
Siehe auch exp() und log10().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion long2ip() erzeugt eine Internet Adresse im Punkt-Format (also: www.xxx.yyy.zzz) anhand einer richtigen - ausgeschriebenen - Adress-Angabe.
Siehe auch: ip2long().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ermittelt statistische Informationen über eine Datei oder symbolischen Link, spezifiziert in filename.
Diese Funktion ist identisch mit der Funktion stat(), außer dass wenn der Parameter filename ein symbolischer Link ist, dessen Status zurückgegeben wird und nicht der Status der Datei, auf die der symbolische Link zeigt.
Gibt einen Array mit statistischen Informationen über die Datei als Array-Elemente zurück:
Laufwerk
Anzahl der Links
Benutzer ID des Inhabers
Gruppen ID des Inhabers
Laufwerkstyp wenn inode Laufwerk *
Größe in Bytes
Zeitpunkt des letzten Zugriffs
Zeitpunkt der letzten Modifikation
Zeitpunkt der letzen Änderung
Blockgröße für das Dateisystem I / O *
Anzahl der zugewiesenen Blöcke
lstat() ist nicht für remote Dateien geeignet.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Es wird Leerraum ab Stringanfang entfernt und der um diesen gekürzte String zurück gegeben.
Als Leerraum gelten die Zeichen "\n", "\r", "\t", "\v", "\0" und das Leerzeichen.
Siehe auch chop(), rtrim() und trim().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mail() veschickt die Nachricht in message an den Empfänger in to.
Mehrere Empfänger können angegeben werden, indem ein Komma zwischen die Adressen in to gesetzt wird.
Beispiel 1.
Verschicken von Mail.
mail( "rasmus@lerdorf.on.ca", "My Subject", "Line 1\nLine 2\nLine 3");
Wenn ein vierter String-Parameter übergeben wird, dann wird dieser an das Ende des Mail-Headers gehängt.
Mehrfache Header werden durch einen Zeilenumbruch getrennt.
Beispiel 2.
Verschicke Mail mit zusätzlichen Headers.
mail( "nobody@aol.com", "the subject", $message, "From: webmaster@$SERVER_NAME\nReply-To: webmaster@$SERVER_NAME\nX-Mailer:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
Mathematische Funktionen
PHP Handbuch
Zurück
Nach vorne
max() liefert den numerisch größten Eingabewert zurück.
Ist der erste Parameter ein Array, so wird der größte Wert innerhalb dieses Array zurückgegeben.
Die Anzahl der Eingabe-Parameter ist nur durch den verfügbaren Hauptspeicher begrenzt.
Ist mindestens einer der Eingabewerte vom Typ double, so werden alle Werte als double behandelt und der Rückgabewert ist ebenfalls vom Typ double.
Anderenfalls werden alle Eingabewerte als int behandelt und auch ein int zurückgegeben.
Siehe auch min().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_convert_case() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_convert_encoding() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_convert_kana() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_convert_variables() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. convmap example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_detect_encoding() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1.
Beispiel 2. mb_detect_order() examples
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_convert_kana() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. convmap example
Beispiel 2. mb_encode_numericentity() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_internal_encoding() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_output_handler() example
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_preferred_mime_string() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_strimwidth() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_strtolower() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_strtoupper() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_substitute_character() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mb_substr_count() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
MCAL Funktionen
PHP Handbuch
Zurück
Nach vorne
Returns the uid of the newly inserted event.
Zurück
Zum Anfang
Nach vorne
MCAL Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schließt einen offenen mcal-Stream.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_date_compare() Compares the two given dates, returns 0, 0, 0 if a b, a==b, a b respectively
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_day_of_week() returns the day of the week of the given date
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_day_of_year() returns the day of the year of the given date
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_delete_event() deletes the calendar event specified by the uid.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_event_fetch_current_stream_event() returns the current stream 's event structure as an object containing:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_fetch_event() holt ein Ereignis aus dem Kalender-Stream, der in id angegeben wurde.
Zeigt ein Ereignis-Objekt an,welches aus folgendem besteht:
int id - ID des Ereignisses.
int public - TRUE wenn das Ereignis öffentlich ist, FALSE wenn es privat ist.
string category - Kategorie des Ereignisses.
string title - Titel des Ereignisses.
string description - Beschreibung des Ereignisses.
int alarm - Anzahl der Minuten, bevor das Ereignis einen Alarm bzw. eine Erinnerung sendet.
object start - Objekt, welches einen Eintrag zu Datum und Uhrzeit enthält.
object end - Objekt, welches einen Eintrag zu Datum und Uhrzeit enthält.
int recur_type - Typ des erneuten Auftretens
int recur_interval - Zeitabstand bis zum erneuten Auftretens
datetime recur_enddate - Enddatum des erneuten Auftretens
int recur_data - Daten des erneuten Auftretens
int year - Jahr
int month - Monat
int mday - Tag des Monats
int hour - Stunde
int min - Minuten
int sec - Sekunden
int alarm - Minuten bis zum Zeitpunkt, wenn ein Eintrag einen Alarm sendet
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_is_leap_year() returns 1 if the given year is a leap year, 1 if not.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Returns an array of event ID 's that are between the start and end dates, or if just a stream is given, uses the start and end dates in the global event structure.
mcal_list_events() function takes in an optional beginning date and an end date for a calendar stream.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bringt bei Erfolg einen MCAL-Stream und FALSE bei einem Fehler.
mcal_open() öffnet eine MCAL-Verbidnung zu dem angegebenen calendar Speicher.
Wenn der optionale Parameter options benutzt wird, wird options auch an die Mailbox weitergegeben.
Die interne Ereignisstruktur der Streams wird auch bei der Verbindung initialisiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mcal_snooze() turns off an alarm for a calendar event specified by the uid.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Returns TRUE on success and FALSE on error.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Description int mcal_week_of_year (int day, int month, int year)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_create_iv() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_enc_get_algorithms_name() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_enc_get_modes_name() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_enc_get_supported_key_sizes() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_encrypt() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_get_block_size() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_get_cipher_name() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_create_iv() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_get_block_size() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_list_algorithms() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_list_modes() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mcrypt_module_open() Example
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
Hash Funktionen
PHP Handbuch
Zurück
Nach vorne
ZurÃ¼ck
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Berechnet den MD5-Code von str unter Verwendung des RSA Data Security, Inc. MD5 Message-Digest Algorithmus
Siehe auch: crc32().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mdecrypt_generic() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Errechnet den metaphone-Schlüssel von str.
Genau wie soundex() berechnet metaphone den gleichen Schlüssel für ähnlich klingende Wörter.
Die durch metaphone erzeugten Schlüüsel sind von variabler Länge.
Der Metaphone-Algorithmus wurde entwickelt von Lawrence Philips lphilips@verity.com und ist beschrieben in ["Practical Algorithms for Programmers", Binstock Rex, Addison Wesley, 1995].
Diese Funktion ist ab PHP 4.0 verfügbar.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch function_exists()
Zurück
Zum Anfang
Nach vorne
Nach oben
ClibPDF Funktionen
PHP Handbuch
Zurück
Nach vorne
mhash_count() gibt die höchsten verfügbaren Hash Id zurück.
Hashes sind von 0 bis zu der Hash Id nummeriert.
Beispiel 1.
Alle Hashes durchlaufen
?php $nr = mhash_count(); for ($i = 0; $i = $nr; $i++) {echo sprintf ("Die Blockgrösse von %s ist %d\n", mhash_get_hash_name ($i), mhash_get_block_size ($i));}?
Zurück
Zum Anfang
Nach vorne
Hash Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
mhash_get_block_size() gibt die Groesse des übergebenen Hashs.
mhash_get_block_size() nimmt ein Argument, den Hash und gibt die Grösse in Byte oder FALSE, wenn Hash nicht existiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mhash_get_hash_name() wird verwendet um den Namen eines Hashes zu erfahren.
mhash_get_hash_name() nimmt die Hash Id als Argument und gibt den Namen des Hashs zurück oder FALSE, wenn der Hash nicht existiert.
Mhash_get_hash_name Beispiel
Das Beispiel oben gibt aus:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mhash() verwendet eine Hash Funktion abhängig von hash auf data und gibt den resultierenden Hash zurück (wird auch Digest genannt).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Msec stellt den Mikrosekunden-Teil dar.
Diese Funktion ist nur auf Systemen möglich, die den Systemaufruf gettimeofday() unterstützen.
Beide Teile des Strings werden in Sekunden zurückgegen.
Beispiel 1. microtime() Beispiel
function getmicrotime() {list($usec, $sec) = explode( "",microtime()); return ((float)$usec + (float)$sec);} $time_start = getmicrotime(); for ($i=0; $i 1000; $i++) {/ /mach nichts,1000 mal} $time_end = getmicrotime(); $time = $time_end - $time_start; echo "Nichts getan in $time Sekunden";
Siehe auch time().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
Microsoft SQL Server Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
min() liefert den numerisch kleinsten Eingabewert zurück.
Ist der erste Parameter ein Array, so wird der kleinste Wert innerhalb dieses Array zurückgegeben.
Anderenfalls müssen mindestens zwei Parameter übergeben werden, und min() liefert den Wert des kleinsten Parameters zurück.
Die Anzahl der Eingabe-Parameter ist nur durch den verfügbaren Hauptspeicher begrenzt.
Anderenfalls werden alle Eingabewerte als int behandelt und auch ein int zurückgegeben.
Siehe auch max().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Versucht ein Verzeichnis mit dem spezifiziertem Namen zu erstellen.
Bedenken Sie, dass sie wahrscheinlich den Mode als oktalen Wert spezifizieren wollen, was bedeutet, dass er eine voranstehende Null haben sollte.
Der Mode wird ebenfalls mit der aktuellen umask modifiziert, welchen Sie mittels umask() ändern können.
Anmerkung:
Mode wird unter Windows ignoriert, und wurde in PHP 4.2.0 optional.
Mode ist standardmäßig 0777 was den weitestmöglichen Zugriff bedeutet.
Weitere Informationen zu den Modi finden Sie auf der Seite chmod().
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch rmdir().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung:
Diese unterscheidet sich von der Reihenfolge des UNIX-Befehls mktime().
Das ist eine häufige Fehlerursache in Scripts.
Gibt den UNIX Timestamp / Zeitstempel an Hand der gegebenen Argumente zurück.
Der Zeitstempel ist ein long-integer-Wert, der die Anzahl der Sekunden zwischen der UNIX Epoche (January 1 1970) und der angegebenen Zeit enthält.
Sie werden dann ersetzt mit den Werten der lokalen Systemzeit bzw. des lokalen Systemdatums.
0 bedeutet Winter - / Normalzeit, -1 (Vorgabewert) heißt, dass nicht bekannt ist, ob Sommer - oder Winterzeit herrscht.
Falls nicht bekannt ist (-1), ob Sommer - oder Winterzeit herrscht, versucht PHP selbst dies herauszufinden.
Das kann zu unerwarteten (aber richtigen) Ergebnissen führen.
mktime() ist hilfreich bei Datumsberechnungen und -überprüfungen, da automatisch das korrekte Datum für ungültige Angaben berechnet wird.
So wird in den folgenden Beispielen immer die Zeichenkette "Jan-01-1998" ausgegeben.
Beispiel 1. mktime() Beispiel
echo date ("M-d-Y", mktime(0,0,0,12,32,1997)); echo date ("M-d-Y", mktime(0,0,0,13,1,1997)); echo date ("M-d-Y", mktime(0,0,0,1,1,1998)); echo date ("M-d-Y", mktime(0,0,0,1,1,98));
Der letzte Tag eines gegebenen Monats kann als der Tag "0" des nächsten Monats ausgedrückt werden (nicht als der Tag "-1").
Jedes der folgenden Beispiele gibt die Zeichenkette "Letzter Tag im Feb.
2000 ist der 29. "zurück.
Beispiel 2.
Letzter Tag des nächsten Monats
2000 ist der %d .", $lastday); $lastday = mktime(0,0,0,4,-31,2000); echo strftime ("Letzter Tag im Feb.
Datumsangaben, bei denen das Jahr, der Monat und Tag gleich Null sind, werden als ungültig angesehen (ansonsten als 30.11.1999, was nicht gewollt sein kann).
Siehe auch date() und time().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1. money_format() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion prüft, ob die mit filename bezeichnete Datei eine gültige Upload-Datei ist (d.h., dass sie mittels PHP's HTTP POST Upload-Mechanismus upgeloaded wurde).
Ist die Datei gültig, wird sie zum in destination bezeichneten Dateinamen verschoben.
Wenn filename keine gültige Datei ist, wird keine Aktion ausgeführt, und move_uploaded_file() gibt FALSE zurück.
Wenn filename eine gültige Datei ist, jedoch aus irgendeinem Grund nicht verschoben werden kann, wird keine Aktion ausgeführt, und move_uploaded_file() gibt FALSE zurück.
Zusätzlich wird eine Warnung ausgegeben.
Diese Prüfung ist speziell dort interessant, wo irgendeine Aktion mit upgeloadeten Dateien deren Inhalt dem User zugänglich machen könnte (oder auch anderen Usern auf dem selben System).
Anmerkung:
Wenn Safe Mode aktiviert ist, überprüft PHP, ob die Dateien / Verzeichnisse die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Dies ist nicht unsicher, da move_uploaded_file() nur mit via PHP hochgeladenen Dateien arbeitet.
Warnung
Sollte die Zieldatei bereits existieren, wird sie überschrieben.
Siehe auch is_uploaded_file(), und das Kapitel Steuerung von Dateiuploads für ein einfaches Anwendungsbeispiel.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Mohawk Software Session Handler Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein assoziatives Array [Wert, Session] für alle Sessions mit einer Variablen namens name zurück.
Wird verwendet, um Sessions mit allgemeinen Attributen zu durchsuchen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
B. die Anzahl der Zeilen, die von einem SELECT zurückgeliefert wurden, die Anzahl der Zeilen, die durch einen UPDATE geändert wurden oder die Anzahl der Zeilen, die von einem DELETE gelöscht wurden.)
Siehe auch: msql_query().
Zurück
Zum Anfang
Nach vorne
mSQL Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, bei einem Fehler FALSE.
msql_close() schliesst die mit der angegebenen Verbindungskennung verknüpfte Verbindung zum mSQL Datenbankserver.
Falls die Verbindungskennung nicht angegeben ist, wird die zuletzt geöffnete Verbindung geschlossen.
Beachten Sie, dass diese Funktion normalerweise nicht notwendig ist, weil geöffnete nicht-persistente Verbindungen automatisch geschlossen werden, wenn die Ausführung des Skripts beendet ist.
msql_close() schliesst keine persistenten Verbindungen, die mit msql_pconnect() geöffnet wurden.
Siehe auch: msql_connect() und msql_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg eine positive Zahl als Verbindungskennung zurück oder FALSE bei einem Fehler.
msql_connect() erzeugt eine Verbindung zu einem mSQL Datenbankserver.
Die Angabe eines Hostnamens als Argument ist optional.
Wenn der Hostname fehlt, wird localhost angenommen.
Falls msql_connect() ein zweites Mal mit denselben Argumenten aufgerufen wird, wird keine neue Verbindung erzeugt, stattdessen wird die Verbindungskennung der aktuell geöffneten Verbindung zurückgegeben.
Die Verbindung zum Server wird geschlossen, sobald die Ausführung des Skripts beendet ist, es sei denn, die Verbindung wurde zuvor durch einen expliziten Aufruf von msql_close() beendet.
Siehe auch msql_pconnect(), msql_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_create_db() erzeugt eine neue Datenbank auf dem mSQL-Server, die mit der angegebenen Verbindungskennung verknüpft ist.
Siehe auch: msql_drop_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Identisch mit msql_create_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, bei Fehler FALSE.
msql_data_seek() bewegt den internen Datensatzzeiger in der mSQL Ergebnismenge, die mit der angegebenen Ergebniskennung verknüpft ist, zu der übergebenen Zeile.
Der nächste Aufruf von msql_fetch_row() gibt diese Zeile zurück.
Siehe auch: msql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_dbname() gibt den Namen der Datenbank zurück, die auf Position i in der Ergebnismenge gespeichert ist, die von der Funktion msql_listdbs() zurückgegeben wird.
Die Funktion msql_numrows() kann benutzt werden, um zu sehen, wieviele Datenbanknamen verfügbar sind.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
msql_drop_db() löscht die Datenbank, die mit der übergebenen Verbindungskennung verknüpft ist, vollständig vom Server.
Siehe auch: msql_create_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe msql_drop_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Fehler, die von mSQL zurückgeliefert werden, geben keine Warnungen mehr aus.
Benutzen Sie diese Funktion, um die Fehlermeldungen zu erhalten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Inhalte des gelesenen Datensatzes in einem Array zurück oder FALSE, falls kein Datensatz mehr gelesen werden kann.
msql_fetch_array() ist eine erweiterte Version von msql_fetch_row().
Zusätzlich zur Speicherung der Daten in einem nummerischen Array speichert diese Funktion den Datensatz auch mit assoziativen Indizes, indem sie die Feldnamen als Schlüssel benutzt.
Das zweite, optionale Argument result_type in msql_fetch_array() ist eine Konstante, die die folgenden Werte annehmen kann:
MSQL_ASSOC, MSQL_NUM, und MYSQL_BOTH.
Seien Sie vorsichtig, wenn Sie ein Abfrageergebnis haben, das einen Datensatz zurückliefert, das nur ein Feld enthält, welches den Wert 0 (oder einen leeren String oder NULL) enthält.
Wichtig zu bemerken ist, dass msql_fetch_array() NICHT wesentlich langsamer als msql_fetch_row() ist, obwohl es einen zusätzlichen, wichtigen Ergebniswert zurückgibt.
Für weitere Einzelheiten siehe auch msql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Objekt mit Feldinformationen zurück
msql_fetch_field() kann benutzt werden, um Informationen über Felder in einem bestimmten Abfrageergebnis zu erhalten.
Falls der Feldname nicht angegeben wurde, wird ein Objekt mit Informationen über das nächste, noch nicht mit msql_fetch_field() geholte Feld zurückgegeben.
Die Eigenschaften dieses Objekts sind:
name - Spaltenname
table - Tabellenname, zu der die Spalte gehört
not_null - 1 falls die Spalte keine NULL -Werte erlaubt
primary_key - 1 falls das Feld ein Primärschlüssel ist
unique - 1 falls die Spalte ein eindeutiger Schlüssel ist
type - der Typ der Spalteninhalte
Siehe auch msql_field_seek().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Objekt zurück, dessen Eigenschaften mit den Spalten der geholten Zeile korrespondieren oder FALSE, falls keine Zeilen mehr geholt werden können.
msql_fetch_object() ist ähnlich wie msql_fetch_array(), mit einem Unterschied - dass ein Objekt anstelle eines Arrays zurückgegeben wird.
Indirekt bdeutet das, dass man auf die Daten nur über die Feldnamen zugreifen kann, und nicht über ihre Feldnummern. (Ziffern sind unzulässige Namen für Eigenschaften.)
Das optionale zweite Argument result_type in msql_fetch_array() ist eine Konstante, die die folgenden Werte annehmen kann:
MSQL_ASSOC, MSQL_NUM, und MSQL_BOTH.
Von der Geschwindigkeit her ist die Funktion identisch zu msql_fetch_array(), und fast so schnell wie msql_fetch_row() (der Unterschied ist unerheblich).
Siehe auch: msql_fetch_array() und msql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Array mit einem Element für jede Spalte des Datensatzes zurück, oder FALSE, falls kein Datensatz mehr geholt werden kann.
msql_fetch_row() holt einen Datensatz des Abfrageergebnisses, das mit dem Ergebnisbezeichner verknüpft ist.
Der Datensatz wird als Array zurückgegeben.
Alle Spalteninhalte des Ergebnisses werden unter einem nummerischen Index, der bei 0 beginnt, gespeichert.
Aufeinanderfolgende Aufrufe von msql_fetch_row() geben jeweils die nächste Zeile des Abfrageergebnisses zurück, oder FALSE, wenn keine Datensätze mehr gelesen werden können.
Siehe auch: msql_fetch_array(), msql_fetch_object(), msql_data_seek() und msql_result().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_fieldflags() gibt die Flags für das angegebene Feld zurück.
Im Moment ist das entweder "not NULL", "primary key", eine Kombination der beiden Flags oder "" (ein leerer String).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_fieldlen() gibt die Länge des angegebenen Feldes zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_fieldname() Gibt den Namen des bezeichneten Feldes zurück. query_identifier ist die Ergebniskennung und field ist der Index des Feldes. msql_fieldname($result, 2); gibt den Namen des dritten Feldes des Abfrageergebnisses zurück, das mit der Ergebniskennung verknüpft ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den internen Feld-Zeiger auf das angegebenen Feld.
Falls der nächste Aufruf von msql_fetch_field() keinen Index enthält, wird dieses Feld zurückgegeben.
Siehe auch: msql_fetch_field().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Namen der Tabelle zurück, aus welcher das Feld field einer Ergebnismenge stammt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_fieldtype() ist ähnlich wie die Funktion msql_fieldname().
Die Argumente sind identisch, nur wird hier der Typ des Feldes zurückgegeben.
Das kann "int", "char" oder "real "sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_free_result() gibt den Speicher, den das mit query_identifier verknüpfte Ergebnis belegt hat, frei.
Wenn PHP ein Skript beendet, wird dieser Speicher automatisch freigegeben, so dass man diese Funktion nur aufrufen muss, um sicher zu sein, nicht zuviel Speicherplatz während der Laufzeit des Skripts zu belegen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe msql_free_result()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt eine positive Zahl als mSQL Ergebniskennung für diese Abfrage zurück oder FALSE bei einem Fehler
msql() wählt eine Datenbank aus und führt auf ihr eine Abfrage aus.
Wenn keine Verbindung gefunden wird, wird versucht, eine zu erzeugen, so als würde msql_connect() ohne Argumente aufgerufen. (siehe msql_connect()).
Zurück
Zum Anfang
Nach vorne
Nach oben
MySQL Funktionen
PHP Handbuch
Zurück
Nach vorne
msql_list_dbs() gibt einen Ergebnisbezeichner zurück, der die Namen aller Datenbanken, die auf dem mSQL-Server liegen, enthält.
Mit der Funktion msql_dbname() kann dieser Ergebnisbezeichner durchlaufen werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe msql_list_dbs().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_list_fields() liefert Informationen über die angegebene Tabelle.
Argumente sind der Name der Datenbank und der Tabellenname.
Ein Ergebnisbezeichner wird zurückgegeben, der mit msql_fieldflags(), msql_fieldlen(), msql_fieldname() und msql_fieldtype() benutzt werden kann.
Ein Ergebnisbezeichner ist eine positive Ganzzahl.
Die Funktion gibt -1 zurück, falls ein Fehler auftritt.
Ein String, der den Fehler beschreibt, wird in $phperrmsg geschrieben und auf dem Bildschirm ausgegeben, es sei denn, die Funktion wurde als @msql_list_fields() aufgerufen.
Siehe auch msql_error().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe msql_list_fields().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_list_tables() hat als Argumente einen Datenbanknamen und liefert einen Ergebnisbezeichner, fast genauso, wie die Funktion msql().
Die Funktion msql_tablename() sollte benutzt werden, um die aktuellen Tabellennamen aus dem Ergebnisbezeichner zu erhalten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe msql_list_tables().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_num_fields() Gibt die Anzahl der Felder in einem Abfrageergebnis zurück.
Siehe auch: msql(), msql_query(), msql_fetch_field() und msql_num_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Identisch zu msql_num_fields().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_num_rows() Gibt die Anzahl der Zeilen eines Abfrageergebnisses zurück.
Siehe auch: msql(), msql_query() und msql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Identisch zu msql_num_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg eine positive Zahl als mSQL Verbindungskennung für die persistente Verbindung zurück, oder FALSE bei einem Fehler.
msql_pconnect() verhält sich sehr ähnlich wie msql_connect(), mit zwei grossen Unterschieden.
Erstens, wenn die Verbindung aufgebaut wird, prüft die Funktion zuerst, ob eine geöffnete persistente Verbindung zu demselben Host besteht.
Wird eine Verbindung gefunden, wird deren Verbindungskennung zurückgegeben anstatt eine neue Verbindung aufzubauen.
Zweitens, die Verbindung zum mSQL-Server wird nicht geschlossen, wenn die Ausführung des Skripts beendet ist.
Stattdessen bleibt die Verbindung für den späteren Gebrauch offen. (msql_close() schliesst keine Verbindungen, die mit msql_pconnect() erzeugt wurden).
Darum wird diese Verbindungsart als 'persistent' bezeichnet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_query() schickt eine Datenbankabfrage an die aktuelle Datenbank auf dem Server, die mit der angegebenen Verbindungskennung verknüpft ist.
Wenn keine Verbindungskennung angegeben ist, wird die zuletzt geöffnete Verbindung angenommen.
Falls keine Verbindung geöffnet ist, versucht die Funktion, eine Verbindung aufzubauen, die sie so benutzt, als wäre msql_connect() aufgerufen worden.
Gibt bei Erfolg eine positive Zahl als mSQL Verbindungskennung zurück oder FALSE bei einem Fehler.
Beispiel 1. msql_query()
?php $link = msql_connect( "dbserver") or die("Kann nicht zum msql Server verbinden: ".msql_error()); msql_select_db("db", $link) or die("Kann Datenbank 'db 'nicht auswählen: ".msql_error()); $result = msql_query("SELECT * FROM table WHERE id=1", $link); if (!$result) {die("Abfrage fehlgeschlagen: ".msql_error());} while ($row = msql_fetch_array($result)) {echo $row["id"];}?
Siehe auch: msql(), msql_select_db() und msql_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe sql_regcase().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Wert zurück, der in der übergebenen Zeile und Spalte des bezeichneten mSQL-Abfrageergebnisses steht.
msql_result() gibt den Inhalt einer Tabellenzelle des mSQL-Abfrageergebnisses zurück.
Das field Argument kann sowohl der Index als auch der Feldname des Feldes sein, oder, ein mit dem Tabellennamen qualifizierter Feldname (Tabellenname.Feldname).
Falls der Spaltenname ein Alias ist ('select foo as bar from.. .'), wird der Aliasname anstatt des Feldnamens angegeben.
Wenn man mit grossen Abfrageergebnissen arbeitet, sollte man die Benutzung der Funktionen in Betracht ziehen, die ganze Zeilen aus der Tabelle auslesen (siehe unten).
Weil diese Funktionen die Inhalte von verschiedene Tabellenzellen in einem Funktionsaufruf holen, sind sie VIEL schneller als msql_result().
Beachten Sie auch, dass die Angabe eines nummerischen Index für das field Argument viel schneller ist, als die Angabe eines Feldnamens oder eines Tabellenname.Feldname Arguments.
Empfohlene Alternativen mit hoher Ausführungsgeschwindigkeit: msql_fetch_row(), msql_fetch_array() und msql_fetch_object().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, FALSE bei einem Fehler.
msql_select_db() wählt die aktuell aktive Datenbank, die mit der übergebenen Verbindungskennung verknüpft ist, auf dem Server aus.
Falls keine Verbindungskennung angegeben wurde, wird die zuletzt geöffnete Verbindung angenommen.
Falls keine Verbindung geöffnet ist, versucht die Funktion eine Verbindung aufzubauen und zu benutzen, so als wäre msql_connect() aufgerufen worden.
Jeder nachfolgende Aufruf von msql_query() bezieht sich auf die aktive Datenbank.
Siehe auch: msql_connect(), msql_pconnect() und msql_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe msql_select_db().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msql_tablename() hat als Argumente einen Ergebnisbezeichner, der von der Funktion msql_list_tables() zurückgegeben wurde, und einen Integerwert und gibt den Namen einer Tabelle zurück.
Die Funktion msql_numrows() kann benutzt werden, um die Anzahl der Tabellen in dem Ergebnisbezeichner festzustellen.
Beispiel 1. msql_tablename() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Microsoft SQL Server Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE und bei Auftreten eines Fehlers FALSE zurück.
mssql_close() schließt die Verbindung zu der MS SQL Server Datenbank, die zur angegebenen Verbindungs-Kennung gehört.
Wenn keine Verbindungs-Kennung angegeben wird, wird von der zuletzt geöffneten Verbindung ausgegangen.
Beachten Sie, dass dies normalerweise nicht nötig ist, weil nichtpersistente offene Verbindungen automatisch nach Ausführung des PHP-Skripts geschlossen werden.
mssql_close() schließt keine mittels mssql_pconnect() aufgebauten persistenten Verbindungen.
Siehe auch: mssql_connect() und mssql_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg eine positive MS SQL Verbindungs-Kennung oder bei Auftreten eines Fehlers FALSE zurück.
mssql_connect() baut eine Verbindung zu einem MS SQL Server auf.
Das Argument Servername muss ein gültiger Servername sein, der in der 'interfaces '-Datei definiert ist.
Falls mssql_connect() zum zweiten Mal mit den selben Argumenten aufgerufen wird, wird keine neue Verbindung aufgebaut, sondern stattdessen die Verbindungs-Kennung der bereits bestehenden Verbindung zurückgegeben.
Die Verbindung zum Server wird geschlossen, sobald die Ausführung des Skripts abgeschlossen ist, wenn sie nicht schon vorher durch einen expliziten Aufruf von mssql_close() geschlossen wurde.
Siehe auch: mssql_pconnect() und mssql_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE und bei Auftreten eines Fehlers FALSE zurück.
mssql_data_seek() bewegt den internen Datensatz-Zeiger des mit der angegebenen Ergebnis-Kennung verbundenen Ergebnisses zur angegebenen Zeilennummer.
Beim nächsten Aufruf von mssql_fetch_row() wird nun dieser Datensatz zurückgeben.
Siehe auch: mssql_data_seek().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Array mit dem gelieferten Datensatz zurück oder FALSE, wenn es keine weiteren Datensätze gibt.
mssql_fetch_array() ist die erweiterte Version von mssql_fetch_row().
Zusätzlich zum Speichern der Daten in den numerischen Indizes des Ergebnisarrays, speichert sie die Daten unter Verwendung der Feldnamen als Schlüssel auch in assoziativen Indizes.
Wichtige Anmerkung: die Verwendung von mssql_fetch_array() ist nur unwesentlich langsamer als die Verwendung von mssql_fetch_row(), bietet aber wesentlich mehr.
Weitere Einzelheiten, siehe auch: mssql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Objekt mit Informationen über ein Feld zurück.
mssql_fetch_field() wird verwendet, um im Ergebnis einer Anfrage Informationen über Felder zu erhalten.
Wurde kein Feld-Offset angegeben, wird das nächste Feld, das noch nicht abgefragt wurde, geliefert.
Die Eigenschaften dieses Objekts sind:
Wenn das Feld das Ergebnis einer Funktion ist, wird diese Eigenschaft auf computed#N gesetzt, wobei #N eine fortlaufende Nummer ist.
column_source - die Tabelle, zu der das Feld gehört
max_length - maximale Feldbreite
numeric - 1, wenn es sich um ein numerisches Feld handelt
Siehe auch: mssql_field_seek().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Objekt mit den Eigenschaften des gelieferten Datensatzes zurück oder FALSE, wenn es keine weiteren Datensätze gibt.
mssql_fetch_object() ist mssql_fetch_array() ähnlich, aber es besteht ein Unterschied: statt eines Arrays wird ein Objekt zurückgegeben.
Indirekt bedeutet das, dass nur über die Feldnamen auf die Daten zugegriffen werden kann, nicht aber über ihre Offsets (Zahlen sind als Namen von Eigenschaften nicht erlaubt).
Was die Geschwindigkeit betrifft, ist diese Funktion mit mssql_fetch_array() identisch und fast genauso schnell wie mssql_fetch_row() (der Unterschied ist unbedeutend).
Siehe auch: mssql_fetch-array() und mssql_fetch-row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Array mit dem gelieferten Datensatz zurück oder FALSE, wenn es keinen weiteren Datensatz gibt.
mssql_fetch_row() liefert einen Datensatz von dem Ergebnis, das zur angegebenen Ergebnis -Kennung gehört.
Der Datensatz wird als Array zurückgegeben.
Jedes Feld des Ergebnisses wird in einem Array-Offset gespeichert, der bei Offset 0 beginnt.
Ein nachfolgender Aufruf von mssql_fetch_rows() gibt den nächsten Datensatz aus dem Ergebnis zurück oder FALSE, wenn es keine weiteren Datensätze gibt.
Siehe auch: mssql_fetch_array(), mssql_fetch_object(), mssql_data_seek(), mssql_fetch_lengths() und mssql_result().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beschreibung int mssql_field_name (int Ergebnis [, int Offset])
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sucht bis zum angegebenen Feld-Offset.
Wenn der nächste Aufruf von mssql_fetch_field() keinen Feld-Offset enthält, wird dieses Feld zurückgegeben.
Siehe auch: mssql_fetch_field().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beschreibung string mssql_field_type (int Ergebnis [, int Offset])
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mssql_free_result() brauchen Sie nur aufrufen, wenn Sie sich über zu großen Speicherbedarf zur Laufzeit ihres Skripts Sorgen machen.
Der Ergebnisspeicher wird automatisch bei Beendigung des Skripts freigegeben.
Sie können mssql_free_result() mit der Ergebnis -Kennung als Argument aufrufen und damit den zugehörigen Ergebnisspeicher freigeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beschreibung string mssql_get_last_message (void)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beschreibung void mssql_min_error_severity (int Schwellenwert)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beschreibung void mssql_min_message_severity (int Schwellenwert)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wird mehr als eine SQL-Anweisung an den Server geschickt oder eine Stored Procedure mit mehreren Ergebnissen ausgeführt, dann liefert der Server mehrere Ergebnisse.
Diese Funktion prüft, ob vom Server noch weitere Ergebnisse angeboten werden.
Wenn es ein weiteres Ergebnis gibt, gibt sie das existierende Ergebnis frei und bereitet das nächste Ergebnis vor.
Liegt ein weiteres Ergebnis vor, gibt die Funktion TRUE, andernfalls FALSE zurück.
Beispiel 1. mssql_next_result() Beispiel
?php $link = mssql_connect ("localhost", "benutzer", "geheim"); mssql_select_db("MyDB", $link); $SQL = "Select * from table1 select * from table2"; $rs = mssql_query($SQL, $link); do {while ($row = mssql_fetch_row($rs)) {}} while (mssql_next_result($rs)); mssql_free_result($rs); mssql_close ($link);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mssql_num_fields() Gibt die Anzahl der Felder eines Ergebnisses zurück.
Siehe auch: mssql_db_query(), mssql_query(), mssql_fetch_field() und mssql_num_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mssql_num_rows() Gibt die Anzahl der Datensätze eines Ergebnisses zurück.
Siehe auch: mssql_db_query(), mssql_query() und mssql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg eine positive persistente MS SQL Verbindungs-Kennung oder, bei Auftreten eines Fehlers, FALSE zurück.
mssql_pconnect() verhält sich, von zwei wesentlichen Unterschieden abgesehen, fast genauso wie mssql_connect().
Die Funktion wird beim Verbindungsaufbau zunächst versuchen, eine (persistente) Verbindung zu finden, die unter dem selben Host, Benutzername und Passwort geöffnet wurde.
Wenn eine solche gefunden wird, gibt sie deren Kennung zurück, statt eine neue Verbindung aufzubauen.
Zweitens: die Verbindung zum SQL Server wird bei Beendigung des Skripts nicht geschlossen.
Stattdessen bleibt die Verbindung für eine spätere Verwendung bestehen (mssql_close() schließt keine Verbindungen, die mittels mssql_pconnect() aufgebaut wurden).
Eine solche Verbindung wird deshalb als 'persistent' bezeichnet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg eine positive Ergebnis-Kennung oder, bei Auftreten eines Fehlers, FALSE zurück.
mssql_query() sendet eine Anfrage an die gerade aktive Datenbank auf dem Server, die zur angegebenen Verbindungs-Kennung gehört.
Wenn keine Verbindungs-Kennung angegeben wird, wird von der zuletzt geöffneten Verbindung ausgegangen.
Wenn es keine offene Verbindung gibt, versucht die Funktion eine Verbindung aufzubauen, als wäre mssql_connect() aufgerufen worden, und diese zu benutzen.
Siehe auch: mssql_db_query(), mssql_select_db() und mssql_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mssql_result() gibt den Inhalt einer Zelle des angegebenen MS SQL Ergebnisdatensatzes zurück.
Das Argument Feld Das Argument Feld kann der Feld-Offset, der Feldname oder vom Format tabellenname.feldname sein.
Wurde ein Alias angegeben ('select foo as bar from.. .'), wird statt des Feldnamens dieser Alias verwendet.
Wenn Sie mit einer großen Anzahl von Ergebnisdatensätzen arbeiten, sollten Sie in Erwägung ziehen, eine der Funktionen zu verwenden, die komplette Datensätze liefern (siehe unten).
Diese Funktionen sind VIEL schneller als mssql_result(), weil sie bei einem Funktionsaufruf den Inhalt mehrerer Datenzellen liefern.
Beachten Sie auch, dass die Angabe eines numerischen Offsets als Feldargument viel schneller ist, als die Angabe eines Feldnamens oder des Arguments tabellenname.feldname.
Empfohlene leistungsfähige Alternativen: mssql_fetch_row(), mssql_fetch_array() und mssql_fetch_object().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE und bei Auftreten eines Fehlers FALSE zurück.
mssql_select_db() setzt auf dem Server die aktuelle Datenbank, auf die sich die angegebene Verbindungs-Kennung mssql_select_db() setzt auf dem Server die aktuelle Datenbank, auf die sich die angegebene Verbindungs-Kennung bezieht.
Wurde keine Verbindungs-Kennung angegeben, wird die zuletzt geöffnete Verbindung angenommen.
Wenn es keine offene Verbindung gibt, versucht die Funktion eine Verbindung aufzubauen, als wäre mssql_connect() aufgerufen worden, und diese zu benutzen.
Jeder folgende Aufruf von mssql_query() bezieht sich auf die geöffnete Datenbank.
Siehe auch: mssql_connect(), mssql_pconnect() und mssql_query()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert den höchsten Wert, den ein Aufruf der Funktion mt_rand() auf dieser Plattform zurückgeben kann.
Siehe auch mt_rand(), mt_srand() rand(), srand() and getrandmax().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die PHP rand() Funktion benutzt den in der jeweiligen libc enthaltenen Zufallsgenerator.
Gerade in älteren libc-Versionen ist dieser aber oft langsam und die Qualität der erzeugten Pseudozufalls-Sequenzen ist unbefriedigend bis unbekannt.
Die Funktion mt_rand() bietet einen Drop-In Ersatz für die von der libc bereitgestellten Funktionen.
Sie benutzt einen Zufallsgenerator mit bekannter Characteristik, den sogenannten "Mersenne Twister", der Pseudozufalls-Sequenzen generiert, die auch kryptografischen Ansprüchen genügen sollten und viermal so schnell arbeitet wie der typische libc-Algorithmus.
Weitere Informationen zum Mersenne Twister und zur optimierten Implementation finden sich unter http: / /www.math.keio.ac.jp / ~matumoto / emt.html und???.
Ohne die optionalen Parameter min und max liefert mt_rand() eine Pseudo-Zufallszahl zwischen 0 und einem plattformabhängigen Maximalwert, der mit mt_getrandmax() ermittelt werden kann.
Benutzen Sie unbedingt mt_srand(), um vor dem ersten Aufruf von mt_rand() einen neuen Startwert festzulegen, ansonsten erhalten Sie bei jedem Programmlauf dieselbe Sequenz von Werten.
Anmerkung:
In PHP-Versionen vor 3.0.7 hatte der zweite Parameter max nicht den Maximalwert sondern die Größe des Werteintervalls an, d.h. in diesen älteren Version muss statt mt_rand( min,max) mt_rand(min,max-min) benutzt werden, um dasselbe Ergebnis zu erhalten.
Siehe auch mt_srand(), mt_getrandmax(), srand(), rand() und getrandmax().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Legt einen internen Startwert für den Zufallsgenerator in mt_rand() fest.
Gleiche Startwerte führen auch jeweils zu derselben Pseudo-Zufallssequenzen daher ist es üblich, diese über die aktuelle Uhrzeit festzulegen:
/ / seed with microseconds since last "whole" second mt_srand((double)microtime()*1000000); $randval = mt_rand();
Siehe auch mt_rand(), mt_getrandmax(), srand(), rand() und getrandmax().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
Netzwerk Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_affected_rows() liefert die Anzahl betroffener Datensätze durch die letzte INSERT, UPDATE oder DELETE Anfrage an den Server, die mit der angegebenen Verbindungs-Kennung mysql_affected_rows() liefert die Anzahl betroffener Datensätze durch die letzte INSERT, UPDATE oder DELETE Anfrage an den Server, die mit der angegebenen Verbindungs-Kennung assoziiert wird.
Wird die Verbindungskennung nicht angegeben, wird die letzte durch mysql_connect() geöffnete Verbindung angenommen.
Anmerkung:
Falls Sie Transaktionen verwenden, müssen Sie mysql_affected_rows() unmittelbar nach Ihrer INSERT, UPDATE, oder DELETE Anfrage aufrufen, nicht nach dem Commit.
Diese Funktion wird aber trotzdem Null (0) zurückliefern.
Anmerkung:
Benutzen Sie UPDATE wird MySQL keine Spalten aktualisieren, bei denen der neue dem alten Wert entpspricht.
Das kann dazu führen, dass mysql_affected_rows() nicht die tatsächliche Anzahl der betroffenen Zeilen liefert, sondern nur die, die wörtlich durch die Anfrage betroffen sind.
Diese Funktion arbeitet nicht in Verbindung mit SELECT-Anfragen, sondern nur bei Anweisungen, die Datensätze verändern.
Um die Anzahl der gelieferten Datensätze einer SELECT-Anfrage zu erhalten, benutzen Sie die Funktion mysql_num_rows().
Falls die letze Anfrage fehlschlägt, liefert diese Funktion -1 zurück.
Beispiel 1.
?php / * Verbindung zur Datenabank * / mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die ("Keine Verbindung möglich: ":. mysql_error()); / * Das sollte die korrekte Anzahl gelöschter Datensätze liefern * / mysql_query("DELETE FROM mytable WHERE id 10"); printf ("Datensätze gelöscht: %d\n", mysql_affected_rows()); / * Ohne where Bedingung in einer Delete-Anweisung sollte 0 zurückgegeben werden * / mysql_query("DELETE FROM mytable"); printf ("Datensätze gelöscht: %d\n", mysql_affected_rows());?
Das obige Beispiel gibt folgendes aus:
Datensätze gelöscht:
10 Datensätze gelöscht:
Beispiel 2.
?php / * Verbindung zur Datenabank * / mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die ("Keine Verbindung möglich: ":. mysql_error()); / * Update von Datensätzen * / mysql_query("UPDATE mytable SET used=1 WHERE id 10"); printf ("Veränderte Datensätze: %d\n", mysql_affected_rows()); mysql_query("COMMIT");?
Das obige Beispiel gibt folgendes aus:
Veränderte Datensätze:
Siehe auch: mysql_num_rows(), mysql_info().
Zurück
Zum Anfang
Nach vorne
MySQL Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_change_user() ändert den angemeldeten Benutzer der aktuellen, aktiven Datenbank-Verbindung, oder für die Verbindung, die mit dem optionalen Parameter Verbindungs-Kennung bestimmt wurde.
Wurde eine Datenbank angegeben, wird diese zur aktiven Datenbank, nachdem der Benutzer gewechselt hat.
Anmerkung:
Diese Funktion wurde mit PHP 3.0.13 eingeführt und erfordert MySQL 3.23.3 oder höher.
In PHP 4 steht diese Funktion nicht zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. mysql_client_encoding() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
mysql_close() schließt die Verbindung zum MySQL-Server, die mit der angegebenen Verbindungs-Kennung verknüpft ist.
Wird die Verbindungs-Kennung nicht angegeben, wird die zuletzt geöffnete Verbindung geschlossen.
Die Verwendung von mysql_close() Die Verwendung von mysql_close() ist für gewöhnlich nicht notwendig, weil offene, nicht persistente Verbindungen automatisch mit Beendigung des PHP-Skripts geschlossen werden.
Siehe auch Freigabe von Resourcen.
Beispiel 1.
Verbindung zum Datenbankserver schließen
?php $link = mysql_connect ("localhost", "mysql_user", "mysql_password") or exit ("keine Verbindung möglich: ".mysql_error()); print ("Verbindung erfolgreich"); mysql_close ($link);?
Siehe auch: mysql_connect() und mysql_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Eine MySQL Verbindungs-Kennung im Erfolgsfall oder FALSE im Fehlerfall.
mysql_connect() öffnet eine Verbindung zu einem MySQL Server.
Server = 'localhost:3306', Benutzername = Name des Benutzers dem der Server-Prozess gehört und Benutzerkennwort = leeres Kennwort.
Der Parameter Server kann zudem die Portnummer enthalten, z.B. "hostname:port" oder den Pfad zu einem Socket z.B. ": / pfad / zum / socket" für Zugriffe auf dem lokalen Rechner.
Anmerkung:
Unterstützung für ":port" wurde in PHP PHP 3.0B4 hinzugefügt.
Unterstützung für ": / pfad / zum / socket" wurde in PHP 3.0.10 hinzugefügt.
Eine Fehlermeldung beim Verbindungsaufbau kann unterdrückt werden, wenn dem Funktionsnamen ein @ voran gestellt wird.
Für den Fall, dass ein zweiter Aufruf von mysql_connect() mit den gleichen Argumenten erfolgt, wird keine neue Verbindung aufgebaut, sondern die Verbindungs-Kennung der schon bestehenden Verbindung zurückgeliefert.
Der Parameter neue_Verbindung beeinflusst dieses Verhalten und mysql_connect() öffnet immer eine neue Verbindung, sogar dann, wenn mysql_connect() zu einem früheren Zeitpunkt mit den gleichen Parametern aufgerufen wurde.
Der Parameter client_flags kann eine Kombination der Konstanten MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE oder MYSQL_CLIENT_INTERACTIVE sein.
Anmerkung:
Der Parameter neue_Verbindung steht seit PHP 4.2.0 zur Verfügung.
Der optionale Parameter client_flags steht seit PHP 4.3.0 zur Verfügung.
Die Verbindung zum Datenbank-Server wird geschlossen, sobald die Ausführung des PHP-Skripts beendet ist oder vorher explizit die Funktion mysql_close() aufgerufen wird.
Beispiel 1.
Verbindung zum Datenbanksserver öffnen
?php $link = mysql_connect ("localhost", "mysql_user", "mysql_password") or die ("keine Verbindung möglich: ".mysql_error()); print ("Verbindung erfolgreich"); mysql_close ($link);?
Siehe auch mysql_pconnect() und mysql_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_create_db() versucht eine neue Datenbank auf dem Server anzulegen, der mit der angegebenen Verbindungs-Kennung assoziiert wird.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1.
Anlegen einer Datenbank
?php $link = mysql_pconnect ("localhost", "mysql_user", "mysql_password") or die ("keine Verbindung möglich: ". mysql_error()); if (mysql_create_db ("meine_db")) {print ("Datenbank erfolgreich angelegt\n");} else {printf ("Fehler beim Anlegen der Datenbank: %s\n", mysql_error ());}?
Für Abwärtskompatibilität kann auch mysql_createdb() verwendet werden.
Diese Funktion ist jedoch veraltet.
Anmerkung:
Die Funktion mysql_create_db() ist veraltet.
Sie sollten lieber die Funktion mysql_query() benutzen und eine SQL CREATE DATABASE Anweisung absetzen.
Siehe auch: mysql_drop_db() und mysql_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
mysql_data_seek() bewegt den internen Datensatz-Zeiger eines Anfrageergebnisses zum Datensatz mit der übergebenen Nummer.
Der nächste Aufruf von mysql_fetch_row() liefert den entsprechenden Datensatz.
Die Datensatznummer Die Datensatznummer beginnt bei 0.
Die Datensatznummer sollte ein Wert im Bereich zwischen 0 und mysql_num_rows - 1 sein.
Anmerkung:
Die Funktion mysql_data_seek() kann nur zusammen mit mysql_query() benutzt werden und nicht mit mysql_unbuffered_query().
Beispiel 1.
Positionieren des Datensatzzeigers
?php $link = mysql_pconnect ("localhost", "mysql_user", "mysql_password") or die ("Keine Verbindung möglich: ". mysql_error()); mysql_select_db ("samp_db") or die ("Auswahl der Datenbank nicht möglich:". mysql_error()); $query = "SELECT nach_name, vor_name FROM freunde"; $result = mysql_query ($query) or die ("Anfrage fehlgeschlagen"); / * holen der Zeilen in umgekehrter Reihenfolge * / for ($i = mysql_num_rows ($result) - 1; $i =0; $i- -) {if (!mysql_data_seek ($result, $i)) {echo "Cannot seek to row $i. mysql_error(). "\n"; continue;} if( !($row = mysql_fetch_object ($result))) continue; echo "$row - nach_name $row - vor_name br / \n";} mysql_free_result ($result);?
Siehe auch: mysql_query() und mysql_num_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_db_name() erwartet als ersten Parameter eine Ergebnis-Kennung eines vorhergehenden Aufrufs der Funktion mysql_list_dbs().
Der Parameter Datensatz ist ein Index innerhalb der Ergebnismenge.
Falls ein Fehler auftritt ist der Rückgabewert FALSE.
Um die Art des Fehlers zu bestimmen, benutzen Sie die Funktionen mysql_errno() und mysql_error().
Beispiel 1. mysql_db_name() Beispiel
Für Abwärtskompatibilität kann auch mysql_dbname() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Eine positive MySQL Ergebnis-Resource für das Anfrageergebnis, oder FALSE im Fehlerfall.
Diese Funktion gibt für INSERT / UPDATE / DELETE Queries ebnfalls TRUE / FALSE zurück, um Erfolg / Misserfolg anzuzeigen.
msql_db_query() bestimmt eine Datenbank und führt eine Anfrage an diese aus.
Wenn dies fehlschlägt, wird versucht eine Verbindung aufzubauen, auf die gleiche Art und Weise wie beim Aufruf von mysql_connect() ohne Angabe von Argumenten.
In anderen Worten ausgedrückt:
Sie müssen selbst (manuell) sicherstellen, dass Sie wieder Ihre vorherige Datenbank benutzen.
Sie sollten sich angewöhnen in Ihren SQL-Queries die Schreibweise datenbank.tabelle zu verwenden statt diese Funktion zu benutzen.
Siehe auch: mysql_connect() und mysql_query().
Anmerkung:
Diese Funktion ist seit PHP 4.0.6 veraltet.
Verwenden Sie diese Funktion nicht.
Stattdessen sollten Sie die Funktionen mysql_select_db() und mysql_query() verwenden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
mysql_drop_db() versucht eine komplette Datenbank vom Server, der mit der übergebenen Verbindungs-Kennung assoziiert wird, zu löschen.
Zur Abwärtskompatibilität kann auch die Funktion mysql_dropdb() verwendet werden.
Diese Funktion ist jedoch veraltet.
Anmerkung:
Die Funktion mysql_drop_db() ist veraltet.
Stattdessen sollte mit der Funktion mysql_query() der SQL-Befehl DROP DATABASE ausgeführt werden.
Siehe auch: mysql_create_db() mysql_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Fehlernummer der letzten MySQL Funktion, oder 0 (Null) falls kein Fehler aufgetreten ist.
Fehler, die vom MySQL Server kommen, führen nicht mehr zu einer Ausgabe von Warnungen.
Stattdessen sollten Sie die Funktion mysql_errno() verwenden, um die Fehlernummer zu erhalten.
Wenn Sie diese Funktion verwenden wollen, sollten Sie den Wert überprüfen, bevor Sie eine weitere MySQL Funktion aufrufen.
Beispiel 1. mysql_errno Beispiel
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); mysql_select_db("db_nicht_vorhanden"); echo mysql_errno(). ":". mysql_error(). "\n"; mysql_select_db("kossu"); mysql_query("SELECT * FROM nicht_vorhandene_tabelle"); echo mysql_errno(). ":". mysql_error(). "\n";?
Das obige Beispiel führt zu dieser Ausgabe:
Unknown database 'db_nicht_vorhanden' 1146:
Table 'kossu.nicht_vorhandene_tabelle' doesn 't exist
Anmerkung:
Bei Angabe des optionalen Parameters wird die angegebene Verbindung benutzt um den Fehlercode zu erhalten.
Fehlt diese Angabe, wird die zuletzt geöffnete Verbindung genutzt.
Siehe auch: mysql_error()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Fehlertext der letzten MySQL Funktion, oder '' (eine leere Zeichenkette), falls kein Fehler aufgetreten ist.
Fehler, die vom MySQL Server kommen, führen nicht mehr zu einer Ausgabe von Warnungen.
Stattdessen sollten Sie die Funktion mysql_error() verwenden, um den Fehlertext zu erhalten.
Wenn Sie diese Funktion verwenden wollen, sollten Sie den Wert überprüfen, bevor Sie eine weitere MySQL Funktion aufrufen.
Beispiel 1. mysql_error Beispiel
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); mysql_select_db("db_nicht_vorhanden"); echo mysql_errno(). ":". mysql_error(). "\n"; mysql_select_db("kossu"); mysql_query("SELECT * FROM nicht_vorhandene_tabelle"); echo mysql_errno(). ":". mysql_error(). "\n";?
Das Beispiel oben führt zu dieser Ausgabe:
Unknown database 'db_nicht_vorhanden' 1146:
Table 'kossu.nicht_vorhandene_tabelle' doesn 't exist
Anmerkung:
Bei Angabe des optionalen Parameters wird die angegebene Verbindung benutzt um den Fehlercode zu erhalten.
Fehlt diese Angabe, wird die zuletzt geöffnete Verbindung genutzt.
Siehe auch: mysql_errno()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Funktion ist identisch zur Funktion mysql_real_escape_string() ausgenommen, dass mysql_real_escape_string() eine Verbindungs-Kennung benötigt und den String entsprechend zum aktuellen Zeichensatz maskiert.
Der Funktion mysql_escape_string() kann keine Verbindungs-Kennung übergeben werden und der aktuelle Zeichensatz wird nicht berücksichtigt.
Beispiel 1. mysql_escape_string() Beispiel
Das Beispiel oben führt zu dieser Ausgabe:
Siehe auch: mysql_real_escape_string(), addslashes() und die magic_quotes_gpc Einstellung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert ein Array das dem aktuellen Datensatz entspricht oder FALSE, wenn keine weiteren Datensätze vorliegen.
mysql_fetch_array() ist eine erweiterte Version von mysql_fetch_row().
Als Schlüssel für die assoziativen Indizes werden die Feldnamen benutzt.
Falls zwei oder mehrere Spalten des Ergebnisses den gleichen Feldnamen haben, dann wird nur der Wert der letzten Spalte im Array unter diesem Feldnamen abgelegt.
Um auch auf die anderen gleichnamigen Spalten zugreifen zu können, müssen Sie den numerischen Index der Spalte verwenden oder einen Alias für die Spalte vergeben.
Falls Sie Aliase für Spalten verwenden, können Sie auf die Inhalte dieser Spalten nicht über ihren ursprünglichen Namen zugreifen. (In folgendem Beispiel können Sie 'field 'nicht benutzen).
Beispiel 1.
select tone.field as foo ttwo.field as bar from tone, ttwo
Zu betonen ist, dass der Gebrauch von mysql_fetch_array() nicht signifikant langsamer ist als mysql_fetch_row(), obwohl die Funktion einen sichtlichen Mehrwert bietet.
Das optionale zweite Argumente Ergebnistyp in mysql_fetch_array() ist eine Konstante und kann die folgenden Werte annehmen:
MYSQL_ASSOC, MYSQL_NUM und MYSQL_BOTH.
Diese Eigenschaft steht seit PHP 3.0.7 zur Verfügung.
MYSQL_BOTH ist der Standard für diesen Paramater.
Verwenden Sie MYSQL_BOTH, erhalten Sie ein Array mit assoziativen und numerischen Indizes.
Bei MYSQL_NUM erhalten Sie nur numerische Indizes (genau wie bei mysql_fetch_row()).
Beispiel 2. mysql_fetch_array mit MYSQL_NUM
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Keine Verbindung möglich: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_NUM)) {printf ("ID: %s Name: %s", $row[0], $row[1]);} mysql_free_result($result);?
Beispiel 3. mysql_fetch_array mit MYSQL_ASSOC
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Keine Verbindung möglich: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {printf ("ID: %s Name: %s", $row["id"], $row["name"]);} mysql_free_result($result);?
Beispiel 4. mysql_fetch_array mit MYSQL_BOTH
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Keine Verbindung möglich: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {printf ("ID: %s Name: %s", $row[0], $row["name"]);} mysql_free_result($result);?
Für weitere Details, siehe auch mysql_fetch_row() und mysql_fetch_assoc()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sind keine weiteren Datensätze vorhanden gibt diese Funktion FALSE zurück.
mysql_fetch_assoc() entspricht in der Funktionsweise exakt dem Aufruf von mysql_fetch_array() mit Angabe von MYSQL_ASSOC als optionalen zweiten Parameter.
Diese Funktion liefert Ihnen nur ein assoziatives Array.
Das war das ursprüngliche Verhalten von mysql_fetch_array().
Falls Sie sowohl numerische, als auch assoziative Indizes benötigen, verwenden Sie mysql_fetch_array().
Falls zwei oder mehrere Felder des Ergebnisses den gleichen Feldnamen haben, dann wird nur der Wert des letzten Felds im Array unter diesem Feldnamen abgelegt.
Um auch auf die anderen, gleichnamigen, Felder zugreifen zu können, müssen Sie entweder numerische Indizes und damit mysql_fetch_row() benutzen, oder Aliase für Ihre Felder anlegen.
Zur Verwendung von Aliasen schauen Sie sich das Beispiel unter der Beschreibung von mysql_fetch_array() an.
Zu betonen ist, dass der Gebrauch von mysql_fetch_assoc() nicht signifikant langsamer ist als mysql_fetch_row(), obwohl die Funktion einen sichtlichen Mehrwert bietet.
Beispiel 1.
Ein ausführliches Beispiel zu mysql_fetch_assoc()
?php $conn = mysql_connect( "localhost", "mysql_user", "mysql_password"); if (!$conn) {echo "Keine Verbindung zur DB: ". mysql_error(); exit;} if (!mysql_select_db("mydbname")) {echo "Kann mydbname nicht auswählen:". mysql_error(); exit;} $sql = "SELECT id as userid, fullname, userstatus FROM sometable WHERE userstatus = 1"; $result = mysql_query($sql); if (!$result) {echo "Anfrage ($sql) konnte nicht ausgeführt werden: ". mysql_error(); exit;} if (mysql_num_rows($result) == 0) {echo "Keine Zeilen gefunden, nichts auszugeben, daher Abbruch"; exit;} / / Solange eine Zeile mit Daten existiert, wird dies in dem / / assoziativen Array $row abgelegt. / / Anmerkung:
Wenn Sie nur eine Zeile erwarten, brauchen Sie keine Schleife. / / Anmerkung:
Wenn Sie extract( $row) inner halb der folgenden / / Schleife verwenden, können Sie damit die Variablen / / $userid, $fullname und $userstatus erzeugen. while ($row = mysql_fetch_assoc($result)) {echo $row["userid"]; echo $row["fullname"]; echo $row["userstatus"];} mysql_free_result($result);?
Für weitere Details, siehe auch mysql_fetch_row(), mysql_fetch_array(), mysql_query() und mysql_error()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ein Objekt mit Feldinformationen.
mysql_fetch_field() kann benutzt werden, um Informationen über Felder in einem bestimmten Anfrageergebnis zu erhalten.
Wenn der Feld-Offset nicht angegeben wird, werden die Information des nächsten, noch nicht mit mysql_fetch_field() erfragten Feldes, geliefert.
Die Eigenschaften des Objekts sind:
name - Feldname
table - Name der Tabelle zu der das Feld gehört
max_length - maximale Länge des Feldes
not_null - 1, wenn das Feld nicht NULL sein kann
primary_key - 1, wenn das Feld ein primary key ist
unique_key - 1, wenn das Feld ein unique key ist
multiple_key - 1, wenn das Feld ein non-unique key ist
numeric - 1, wenn das Feld vom Typ 'numeric' ist
blob - 1, wenn das Feld vom Typ 'BLOB' ist
type - der Typ des Feldes
unsigned - 1, wenn das Feld vorzeichenlos ist
zerofill - 1, wenn das Feld zero-filled ist
Beispiel 1. mysql_fetch_field()
?php mysql_connect( 'localhost:3306', $user, $password) or die ("Keine Verbindung möglich: ". mysql_error()); mysql_select_db("database"); $result = mysql_query("select * from table") or die("Anfrage fehlgeschlagen:". mysql_error()); / * Metadaten der Felder * / $i = 0; while ($i mysql_num_fields($result)) {echo "Information für Feld $i: br / \n"; $meta = mysql_fetch_field($result); if (!$meta) {echo "Keine Information vorhanden br / \n";} echo "pre blob: $meta - blob max_length: $meta - max_length multiple_key: $meta - multiple_key name: $meta - name not_null: $meta - not_null numeric: $meta - numeric primary_key: $meta - primary_key table: $meta - table type: $meta - type unique_key: $meta - unique_key unsigned: $meta - unsigned zerofill: $meta - zerofill / pre"; $i++;} mysql_free_result($result);?
Siehe auch mysql_field_seek().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert ein Array, das die Länge eines jeden Feldes in dem zuletzt mit mysql_fetch_row() geholten Datensatz enthält, oder FALSE im Fehlerfall.
mysql_fetch_lengths() speichert die Länge jedes Ergebnisfelds in dem mit mysql_fetch_row(), mysql_fetch_array() und mysql_fetch_object() zuletzt geholten Datensatz in einem Array, dessen Offset bei 0 beginnt.
Siehe auch: mysql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert ein Objekt mit Eigenschaften, die den Feldern des geholten Datensatzes entsprechen, oder FALSE wenn keine weiteren Datensätze vorhanden sind.
mysql_fetch_object() ähnelt mysql_fetch_array(), mit einem Unterschied - ein Objekt wird zurück geliefert anstatt eines Arrays.
Indirekt bedeutet dies, dass Sie die Daten nur mit ihren Feldnamen und nicht mit dem Offset ansprechen können (Nummern sind ungültige Namen für Eigenschaften).
?php / * das ist gültig * / echo $row - field; / * das ist ungültig* / echo $row - 0;?
Unter Berücksichtigung der Ausführungsgeschwindigkeit ist diese Funktion identisch zu mysql_fetch_array() und fast so schnell wie mysql_fetch_row() (der Unterschied ist unwesentlich).
Beispiel 1. mysql_fetch_object() Beispiel
Siehe auch: mysql_fetch_array() und mysql_fetch_row().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ein Array das der Ergebniszeile entspricht oder FALSE wenn keine weiteren Zeilen verfügbar sind.
mysql_fetch_row() liefert einen Datensatz aus dem Anfrageergebnis mit der übergebenen Kennung.
Der Datensatz wird als Array geliefert.
Jedes Feld wird in einem Array-Offset abgelegt, der Offset beginnt bei 0.
Wiederholtes Aufrufen von mysql_fetch_row() liefert den nächsten Datensatz des Anfrageergebnisses oder FALSE, wenn keine weiteren Datensätze verfügbar sind.
Siehe auch: mysql_fetch_array(), mysql_fetch_object(), mysql_data_seek(), mysql_fetch_lengths() und mysql_result().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_field_flags() liefert die Flags des Feldes mit dem übergebenen Offset.
Die Flags werden als einzelne Worte pro Flag und durch ein einziges Leerzeichen getrennt geliefert, so dass sie leicht mit explode() getrennt werden können.
Die folgenden Flags werden geliefert, wenn Ihre Version von MySQL diese unterstützt: "not_null", "primary_key", "unique_key", "multiple_key", "blob", "unsigned", "zerofill", "binary", "enum", "auto_increment", "timestamp".
Für Abwärtskompatibilität kann mysql_fieldflags() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_field_len() liefert die Länge des angegebenen Feldes.
Für Abwärtskompatibilität kann mysql_fieldlen() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Paramater Ergebnis-Kennung muss eine gültige Ergebnis-Kennung sein und Feldindex bestimmt den numerischen Offset des Feldes.
Der Feldindex beginnt bei 0.
Der Index des dritten Feldes ist demnach 2, der Index des vierten Feldes 3 und so weiter.
Beispiel 1. mysql_field_name() Beispiel
/* Die Tabelle users enthält drei Felder: user_id username password * / $link = mysql_connect( 'localhost', "mysql_user", "mysql_password"); mysql_select_db($dbname, $link) or die("Auswahl der Datenabnk $dbname fehlgeschlagen: ". mysql_error()); $res = mysql_query("select * from users", $link); echo mysql_field_name($res, 0). "\n"; echo mysql_field_name($res, 2);
Das oben angeführte Beispiel liefert die folgende Ausgabe:
Für Abwärtskompatibilität kann mysql_fieldname() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den Feldzeiger auf den angegeben Feldoffset.
Wird beim nächsten Aufruf von mysql_fetch_field() kein Feldoffset übergeben, wird der Feldoffset zurückgeliefert, der bei mysql_field_seek() angegeben wurde.
Siehe auch: mysql_fetch_field().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Namen der Tabelle, die das genannte Feld enthält.
Für Abwärtskompatibilität kann mysql_fieldtable() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_field_type() ist ähnlich zu mysql_field_name().
Die Argumente sind identisch, aber stattdessen wird der Typ des Feldes zurückgegeben.
Eine ausführliche Beschreibung aller Typen finden Sie in der MySQL Dokumentation.
Beispiel 1.
MySQL-Feldtypen
?php mysql_connect( "localhost", "mysql_username", "mysql_password"); mysql_select_db("mysql"); $result = mysql_query("SELECT * FROM func"); $fields = mysql_num_fields($result); $rows = mysql_num_rows($result); $table = mysql_field_table($result, 0); echo "Die Tabelle '".$table ."'hat ".$fields. "Felder und ".$rows." Datensätze:\n"; echo "Die Tabelle hat folgende Felder:\n"; for ($i=0; $i $fields; $i++) {$type = mysql_field_type($result, $i); $name = mysql_field_name($result, $i); $len = mysql_field_len($result, $i); $flags = mysql_field_flags($result, $i); echo $type. "".$name." ".$len. "".$flags ."\n";} mysql_free_result($result); mysql_close();?
Das oben angeführte Beispiel führt zu dieser Ausgabe:
Die Tabelle 'func' hat 4 Felder und 1 Datensätze Die Tabelle hat folgende Felder: string name 64 not_null primary_key binary int ret 1 not_null string dl 128 not_null string type 9 not_null enum
Für Abwärtskompatibilität kann mysql_fieldtype() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_free_result() gibt den Speicher frei, der mit der Ergebnis-Kennung assoziert ist.
Die Funktion muss nur dann aufgerufen werden, wenn Sie sich bei Anfragen, die große Ergebnismengen liefern, Sorgen über den Speicherverbrauch zur Laufzeit des PHP-Skripts machen.
Nach Ablauf des PHP-Skripts wird der Speicher ohnehin freigegeben.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Für Abwärtskompatibilität kann mysql_freeresult() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_get_client_info() liefert eine Zeichenkette mit der Version der Client-Bibliothek.
Beispiel 1. mysql_get_client_info Beispiel
Das obige Beispiel gibt folgendes aus:
Siehe auch: mysql_get_host_info(), mysql_get_proto_info() und mysql_get_server_info().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Hostname des Servers ist ebenfalls enthalten.
Fehlt der Parameter Verbindungs-Kennung, wird die zuletzt hergestellte Verbindung benutzt.
Beispiel 1. mysql_get_host_info Beispiel
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Keine Verbindung möglich: ". mysql_error()); printf ("MySQL host info: %s\n", mysql_get_host_info());?
Das obige Beispiel gibt folgendes aus:
See also: mysql_get_client_info(), mysql_get_proto_info() und mysql_get_server_info().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_get_proto_info() liefert die Protokollversion, die die Vebindung Verbindungs-Kennung nutzt.
Fehlt der Parameter Verbindungs-Kennung, wird die zuletzt hergestellte Verbindung benutzt.
Beispiel 1. mysql_get_proto_info Beispiel
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Keine Verbindung möglich: ". mysql_error()); printf ("MySQL protocol version: %s\n", mysql_get_proto_info());?
Das obige Beispiel gibt folgendes aus:
See also: mysql_get_client_info(), mysql_get_host_info() und mysql_get_server_info().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_get_server_info() liefert die Serverversion, die die Vebindung mit der Verbindungs-Kennung nutzt.
Fehlt die Verbindungs-Kennung, wird die zuletzt hergestellte Verbindung benutzt.
Beispiel 1. mysql_get_server_info Beispiel
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Keine Verbindung möglich: ". mysql_error()); printf ("MySQL server version: %s\n", mysql_get_server_info());?
Das obige Beispiel gibt folgendes aus:
Siehe auch: mysql_get_client_info(), mysql_get_host_info() und mysql_get_proto_info().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_info() gibt genaue Informationen über die zuletzt ausgeführte Abfrage zurück, die über den Parameter Verbindungs-Kennung ausgeführt wurde.
Wird der optionale Parameter Verbindungs-Kennung nicht angegeben, so wird die letzte offene Verbindung benutzt.
mysql_info() liefert nur eine Information für die unten aufgeführten Befehle, ansonsten FALSE .Das Zeichenformat hängt von der gegebenen Anweisung ab. given statement.
Beispiel 1.
MySQL-Befehle mit mysql_info()
Siehe auch: mysql_affected_rows()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_insert_id() liefert die ID, die bei der letzten INSERT-Operation für ein Feld vom Typ AUTO_INCREMENT vergeben wurde.
Wenn die Verbindungs-Kennung nicht angegeben wird, wird die zuletzt geöffnete Verbindung angenommen.
mysql_insert_id() liefert 0, wenn die vorhergehende Abfrage keinen AUTO_INCREMENT Wert erzeugt hat.
Falls Sie den Wert zur späteren Verwendung speichern möchten, stellen Sie sicher, dass Sie mysql_insert_id() direkt nach der Abfrage aufrufen, die einen Wert erzeugt hat.
Anmerkung:
Dieser wird zwischen Abfragen nicht zurückgesetzt.
Warnung
mysql_insert_id() konvertiert den Typ der Rückgabe der nativen MySQL C API Funktion mysql_insert_id() in den Typ long (als int in PHP bezeichnet).
Falls Ihre AUTO_INCREMENT Spalte vom Typ BIGINT ist, ist der Wert den mysql_insert_id() Falls Ihre AUTO_INCREMENT Spalte vom Typ BIGINT ist, ist der Wert den mysql_insert_id() liefert, nicht korrekt.
Verwenden Sie in diesem Fall stattdessen die MySQL interne SQL Funktion LAST_INSERT_ID() in einer SQL-Abfrage.
Beispiel 1. mysql_insert_id Beispiel
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Keine Verbindung möglich: ". mysql_error()); mysql_select_db("mydb"); mysql_query("INSERT INTO mytable (product) values ('kossu')"); printf ("Der letzte eingefügte Datensatz hat die ID %d\n", mysql_insert_id());?
Siehe auch: mysql_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_list_dbs() liefert eine Ergebnis-Kennung, die alle Datenbanken auf dem Datenbankserver enthält.
Um diese Ergebnis-Kennung zu durchlaufen benutzen Sie die Funktion mysql_tablename(), oder irgendeine der Funktionen, die mit Ergebnistabellen umgehen kann.
Beispiel 1. mysql_list_dbs() Beispiel
Das oben gezeigte Beispiel liefert die folgende Ausgabe:
database1 database2 database3
Anmerkung:
Dieser Code funktioniert genauso leicht mit mysql_fetch_row() oder anderen, ähnlichen Funktionen.
Für Abwärtskompatibilität kann mysql_listdbs() verwendet werden.
Diese Funktion ist jedoch veraltet.
Siehe auch: mysql_db_name().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_list_fields() fordert Information über den angegebenen Tabellennamen an.
Argumente sind der Datenbankname und der Tabellenname.
Die zurückgelieferte Ergebnis-Kennung kann von den Funktionen mysql_field_flags(), mysql_field_len(), mysql_field_name() und mysql_field_type() verwendet werden.
Beispiel 1. mysql_list_fields() Beispiel
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $fields = mysql_list_fields("database1", "table1", $link); $columns = mysql_num_fields($fields); for ($i = 0; $i $columns; $i++) {echo mysql_field_name($fields, $i). "\n";;}
Das oben gezeigte Beispiel liefert die folgende Ausgabe:
Für Abwärtskompatibilität kann mysql_listfields() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_list_processes() liefert eine Ergebniskennung, die alle laufenden MySQL-Prozesse enthält.
Beispiel 1. mysql_list_processes() Beispiel
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $result = mysql_list_processes($link); while ($row = mysql_fetch_row($result)) {printf("%s %s %s %s %s\n", $row["Id"], $row["Host"], $row["db"], $row["Command"], $row["Time"]);} mysql_free_result ($result);
Das oben gezeigte Beispiel liefert folgende Ausgabe:
Siehe auch: mysql_thread_id()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_list_tables() benötigt die Angabe eines Datenbanknamens und liefert eine Ergebniskennung ähnlich wie die Funktion mysql_query().
Um den aktuellen Tabellennamen aus der Ergebniskennung zu erhalten, können Sie die Funktion mysql_tablename() benutzen, oder irgendeine andere Funktion, die mit Ergebnistabellen umgehen kann, z.B.: mysql_fetch_assoc().
Der Parameter Datenbankname ist der Name der Datenbank, von der die Liste der Tabellen angefordert wird.
Tritt ein Fehler auf, gibt mysql_list_tables() returns FALSE zurück.
Für Abwärtskompatibilität kann mysql_listtables() verwendet werden.
Diese Funktion ist jedoch veraltet.
Beispiel 1. mysql_list_tables Beispiel
?php $dbname = 'mysql_dbname'; if (!mysql_connect('mysql_host', 'mysql_user', 'mysql_password')) {print 'Keine Verbindung zur Datenbank möglich'; exit;} $result = mysql_list_tables($dbname); if (!$result) {print "DB Fehler, Tabellen können nicht angezeigt werden\n"; print 'MySQL Fehler:'. mysql_error(); exit;} while ($row = mysql_fetch_row($result)) {print "Tabelle: $row[0]\n";} mysql_free_result($result);?
Siehe auch: mysql_list_dbs() und mysql_tablename().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_num_fields() liefert die Anzahl der Felder in einem Ergebnis.
Siehe auch: mysql_select_db(), mysql_query(), mysql_fetch_field() und mysql_num_rows().
Für Abwärtskompatibilität kann mysql_numfields() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_num_rows() liefert die Anzahl der Datensätze einer Ergebnismenge.
Diese Funktion ist nur gültig für SELECT Befehle.
Haben Sie eine INSERT, UPDATE oder DELETE Abfrage ausgeführt und möchten die Anzahl der betroffenen Datensätze ermitteln, verwenden Sie die Funktion mysql_affected_rows().
Beispiel 1. mysql_num_rows() Beispiel
Anmerkung:
Wenn Sie mysql_unbuffered_query() verwenden, liefert mysql_num_rows() solange nicht den korrekten Wert, bis Sie alle Zeilen der Ergebnismenge erhalten haben.
Siehe auch: mysql_affected_rows(), mysql_connect(), mysql_data_seek(), mysql_select_db() und mysql_query().
Für Abwärtskompatibilität kann mysql_numrows() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Eine positive, MySQL-persistente Verbindungs-Kennung im Erfolgsfall oder FALSE im Fehlerfall.
mysql_pconnect() baut eine Verbindung zu einem MySQL Server auf.
Server = 'localhost:3306', Benutzername = Name des Benutzers dem der Server-Prozess gehört und Benutzerkennwort = leeres Kennwort.
Der Parameter client_flags kann eine Kombination der Konstanten MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE oder MYSQL_CLIENT_INTERACTIVE sein.
Der Parameter Server kann ausserdem eine Portnummer enthalten, z.B. "hostname:port" oder den Pfad zu einem Socket z.B. ": / pfad / zu / socket" für Zugriffe auf dem lokalen Rechner.
Anmerkung:
Unterstützung für ":port" wurde in PHP 3.0B4 hinzugefügt.
Unterstützung für ": / pfad / zum / socket" wurde in PHP 3.0.10 hinzugefügt.
mysql_pconnect() verhält sich sehr ähnlich zu mysql_connect(), weist aber zwei wesentliche Unterschiede auf.
Erstens: vor dem Verbindungsaufbau wird zunächst versucht eine offene (persistente) Verbindung zum gleichen Host, mit dem gleichen Benutzernamen und Benutzerkennwort zu finden.
Wenn das gelingt, wird die Verbindungskennung dieser Verbindung zurückgeliefert anstatt eine neue Verbindung aufzubauen.
Zweitens: die Verbindung zum SQL Server wird beim Beenden des PHP-Skripts nicht geschlossen.
Sie bleibt zur zukünftigen Verwendung bestehen. (mysql_close() schließt keine von mysql_pconnect() geöffneten Verbindungen).
Der optionale Parameter client_flags steht seit PHP 4.3.0 zur Verfügung.
Deshalb wird dieser Verbindungstyp 'persistent' genannt.
Anmerkung:
Beachten Sie, dass diese Art der Verbindung nur funktioniert. wenn Sie PHP als Modul-Version benutzen.
Für mehr Informationen schauen Sie unter Persistente Datenbankverbindungen nach.
Warnung
Dadurch sollten Sie sicherstellen, dass Sie die Anzahl der Verbindungen, die MySQL maximal erlaubt, nicht überschreiten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_ping() überprüft, ob die Verbindung zum Server funktioniert oder nicht.
Ist die Verbindung abgebrochen wird ein automatischer Reconnect versucht.
Rückgabewert: mysql_ping() gibt TRUE zurück, wenn die Verbindung zum Server funktioniert, ansonsten FALSE.
Siehe auch: mysql_thread_id(), mysql_list_processes().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_query() sendet eine Anfrage an die zur Zeit aktiven Datenbank, die mit der angegebenen Verbindungs-Kennung mysql_query() sendet eine Anfrage an die zur Zeit aktiven Datenbank, die mit der angegebenen Verbindungs-Kennung assoziiert wird.
Wird die Verbindungs-Kennung nicht angegeben, wird die zuletzt geöffnete Verbindung angenommen.
Wenn keine offene Verbindung besteht, wird versucht eine Verbindung aufzubauen, wie beim Aufruf von mysql_connect() ohne Argumente und diese wird dann benutzt.
Der optionale Parameter Ergebnis-Modus kann MYSQL_USE_RESULT oder MYSQL_STORE_RESULT sein.
Der Vorgabewert ist MYSQL_STORE_RESULT, damit wird das Ergebnis zwischengespeichert.
Siehe auch mysql_unbuffered_query() für das das entgegengesetzte Verhalten.
Anmerkung:
Die Anfrage sollte nicht mit einem Semikolon enden.
Nur für SELECT, EXPLAIN, SHOW oder DESCRIBE Anweisungen liefert mysql_query() eine Ressourcen-Kennung oder FALSE, falls die Anfrage nicht korrekt ausgeführt wurde.
Für alle anderen SQL Anweisungen ist der Rückgabewert von mysql_query() im Erfolgsfall TRUE, im Fehlerfall FALSE.
Ein Rückgabewert ungleich FALSE bedeutet, dass die Anfrage gültig war und vom Server ausgeführt werden konnte.
Das alleine sagt jedoch überhaupt nichts über die Anzahl veränderter oder gelieferter Datensätze aus.
Es ist durchaus möglich, dass eine Anfrage erfolgreich war, ohne einen einzigen Datensatz zur verändern oder zu liefern.
Die folgende Anfrage ist syntaktisch falsch, deshalb liefert mysql_query() FALSE zurück:
Beispiel 1. mysql_query()
php $result = mysql_query ("SELECT * WHERE 1=1") or die ("Ungültige Abfrage: ". mysql_error());?
Deshalb schlägt mysql_query() fehl und liefert FALSE:
Beispiel 2. mysql_query()
?php $result = mysql_query ("SELECT my_col FROM my_tbl") or die ("Ungültige Abfrage: ". mysql_error());?
mysql_query() schlägt ebenso fehl und liefert FALSE, wenn Sie keine Berechtigung zum Zugriff auf die verwiesene(n) Tabelle(n) haben.
Falls Sie DELETE, INSERT, REPLACE, oder UPDATE benutzt haben, können Sie die Anzahl der betroffenen Datensätze mit mysql_affected_rows() feststellen.
Nur bei SELECT, EXPLAIN, SHOW oder DESCRIBE Anweisungen liefert mysql_query() eine neue Ergebnis-Kennung, die Sie an die Funktion mysql_fetch_array() und andere Funktionen, die mit Ergebnistabellen umgehen können, übergeben können.
Sind sie mit der Bearbeitung Ihrer Ergebnisse fertig, können Sie die belegten Resourcen durch den Aufruf von mysql_free_result() freigeben.
Ist die Ausführung des Skripts abgeschlossen, wird der belegte Speicher automatisch freigegeben.
Siehe auch: mysql_num_rows() mysql_affected_rows(), mysql_unbuffered_query(), mysql_free_result(), mysql_fetch_array(), mysql_fetch_row(), mysql_fetch_assoc(), mysql_result(), mysql_select_db() und mysql_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Die Zeichen% und _ werden von mysql_real_escape_string() nicht maskiert.
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $item = "Zak's und Derick's Laptop"; $escaped_item = mysql_real_escape_string($item); printf ("Escaped string: %s\n", $escaped_item);?
Das Beispiel oben führt zu dieser Ausgabe:
Zak\' s und Derick\ 's Laptop
Siehe auch: mysql_escape_string(), mysql_character_set_name().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_result() liefert den Inhalt eines Felds aus einem Anfrageergebnis.
Das Argument Feld kann der Feldname, der Feldoffset ein Bezeichner in der Form 'Tabellenname.Feldname.' sein.
Wenn das Feld einen Alias besitzt ('select foo as bar from.. .') muss der Alias anstatt des Feldnamens verwendet werden.
Wenn auf Anfrageergebnisse mit vielen Datensätzen zugegriffen werden soll, sollten Sie Funktionen, die auf ganze Datensätze zugreifen,in Betracht ziehen (siehe unten).
Diese Funktionen liefern bei einem einzigen Aufruf den Inhalt mehrerer Felder und sind aus diesem Grund SEHR viel schneller als mysql_result().
Beachten Sie auch, dass die Angabe eines numerischen Offsets für ein Feld sehr viel schneller ist als die Angabe eines Feldnamens oder tabellenname.feldname.
Aufrufe von mysql_result() sollten nicht mit Aufrufen anderer Funktionen verschachtelt werden, die auch auf das Ergebnis zugreifen.
Empfohlende, leistungsfähigere Alternativen: mysql_fetch_row(), mysql_fetch_array() und mysql_fetch_object().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
mysql_select_db() aktiviert die Datenbank auf dem Server zu dem die Verbindung mit der übergegebenen Verbindungs-Kennung besteht.
Fehlt die Verbindungs-Kennung wird die zuletzt geöffnete Verbindung verwendet.
Wenn keine Verbindung existiert, wird versucht eine Verbindung aufzubauen, wie beim Aufruf von mysql_connect() ohne Angabe von Argumenten.
Jeder weitere Aufruf von mysql_query() benutzt diese aktive Datenbank.
Siehe auch: mysql_connect(), mysql_pconnect() und mysql_query().
Für Abwärtskompatibilität kann mysql_selectdb() verwendet werden.
Diese Funktion ist jedoch veraltet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_stat() liefert den momentanen Serverstatus zurück.
Für eine komplette Liste der anderen Statusvariablen sollte der SQL-Befehl SHOW STATUS verwendet werden.
Beispiel 1. mysql_stat() Beispiel
Das oben gezeigte Beispiel liefert die folgende Ausgabe:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_tablename() ermittelt aus einer Ergebnis-Kennung, die von mysql_list_tables() geliefert wurde, sowie einem Index vom Typ integer, den Namen der Tabelle.
Die Funktion mysql_num_rows() kann verwendet werden, um die Anzahl der Tabellen in der Ergebnis-Kennung zu ermitteln.
Beispiel 1. mysql_tablename() Bespiel
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); $result = mysql_list_tables("mydb"); for ($i = 0; $i mysql_num_rows($result); $i++) printf ("Table: %s\n", mysql_tablename($result, $i)); mysql_free_result($result);??
Siehe auch: mysql_list_tables().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_thread_id() liefert die aktuelle Thread ID.
Ist die Verbindung abgerissen und Sie bauen diese wieder mit mysql_ping() auf, wechselt die Thread ID.
Das bedeutet, Sie sollten die Thread ID nicht abfragen und für eine spätere Verwendung speichern.
Sie sollten diese zu einem Zeitpunkt abfragen an dem Sie die Thread ID verwenden möchten.
Beispiel 1. mysql_thread_id() Beispiel
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $thread_id = mysql_thread_id($link); if ($thread_id) {printf ("Aktuelle Thread ID ist %d\n", $thread_id);}?
Das obige Beispiel gibt folgendes aus:
Aktuelle Thread ID ist 73
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
mysql_unbuffered_query() sendet eine SQL Anfrage an MySQL, ohne dass die Datensätze des Ergebnisses automatisch geholt und gepuffert werden, wie es bei der Verwendung von mysql_query() der Fall ist.
Einerseits spart dieses Vorgehen eine erhebliche Menge an Speicher bei SQL Anfragen ein, die große Ergebnismengen liefern.
Sie müssen nicht darauf warten, bis die gesamte SQL Anfrage abgeschlossen ist.
Wird auf verschiedene Datenbanken gleichzeitig zugegriffen, muss der optionale Parameter Verbindungs-Kennung angegeben werden.
Der optionale Parameter Ergebnis-Modus kann MYSQL_USE_RESULT oder MYSQL_STORE_RESULT sein.
Der Vorgabewert ist MYSQL_USE_RESULT, damit wird das Ergebnis nicht zwischengespeichert.
Siehe auch mysql_query() für das das entgegengesetzte Verhalten.
Anmerkung:
Die Vorteile von mysql_unbuffered_query() haben ihren Preis:
Auf ein Ergebnis von mysql_unbuffered_query() kann die Funktion mysql_num_rows() nicht angewendet werden.
Erst dann können Sie eine neue SQL Anfrage an MySQL absetzen.
Siehe auch: mysql_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
Mohawk Software Session Handler Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion implementiert einen Sortieralgorithmus, welcher alphanumerische Zeichenketten reiht, wie es auch ein Mensch tun würde.
Das wird als "natürliche Reihenfolge" bezeichnet.
natcasesort() arbeitet wie natsort(), nur dass es die Groß / Kleinschreibung ignoriert.
Ein Beispiel für den Unterschied zwischen diesem und dem normalen Sortieralgorithmus für Strings eines Computers finden Sie in natsort().
Detailliertere Informationen finden Sie auf Martin Pool 's Natural Order String Comparison Seite.
Siehe auch sort(), natsort(), strnatcmp() und strnatcasecmp().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion implementiert einen Sortieralgorithmus, welcher alphanumerische Zeichenketten reiht, wie es auch ein Mensch tun würde.
Hier ein Beispiel für den Unterschied zwischen diesem und dem normalen Sortieralgorithmus für Strings eines Computers (verwendet in sort()):
Beispiel 1. natsort()
?php $array1 = $array2 = array ("img12.png", "img10.png", "img2.png", "img1.png"); sort ($array1); echo "Standardsortierung\n"; print_r ($array1); natsort ($array2); echo "\nSortieren mit natürlicher Reihenfolge\n"; print_r ($array2);?
Der obige Code wird folgendes anzeigen:
Standardsortierung Array ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Sortieren mit natürlicher Reihenfolge Array ([3] = img1.png [2] = img2.png [1] = img10.png [0] = img12.png)
Anmerkung:
Wenn Sie die Index / Wert Assoziationen beibehalten wollen, denken Sie an die Verwendung von usort( $arr, 'strnatcmp').
Siehe auch natcasesort(), strnatcmp() und strnatcasecmp().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. ncurses_getmouse() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. ncurses_mousemask() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sind keine Elemente mehr vorhanden, wird FALSE zurückgegeben.
next() verhält sich ähnlich wie current(), mit einem Unterschied.
Der interne Zeiger wird um ein Element vorgerückt, bevor das Element zurückgegeben wird, d.h. es wird das nächste Element zurückgegeben, und der interne Zeiger um eins erhöht.
Zeigt der interne Zeiger hinter das Ende der Elementliste, wird FALSE zurückgegeben.
Warnung
Enthält das Array leere Elemente oder Elemente mit dem Schlüssel 0, wird für diese Elemente ebenfalls FALSE Enthält das Array leere Elemente oder Elemente mit dem Schlüssel 0, wird für diese Elemente ebenfalls FALSE zurückgegeben.
Um ein Array, das leere Elemente oder Elemente mit dem Schlüssel 0 enthalten könnte richtig durchzugehen, verwenden Sie die Funktion each().
Siehe auch current(), end(), prev() und reset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den string mit einem eingefügten 'br /' vor dem Neue-Zeile-Zeichen zurück.
Siehe auch htmlspecialchars() und htmlentities() and wordwrap().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
ODBC Funktionen
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1. number_format() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion verwirft den Inhalt des Ausgabe-Puffers und deaktiviert die Pufferung.
Siehe auch ob_start() und ob_end_flush().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Inhalt des Ausgabe-Puffers (sofern vorhanden) wird abgeschickt und die Pufferung der Ausgabe deaktiviert.
Falls sie mit dem Puffer-Inhalt weiter arbeiten möchten, müssen sie diesen erst per ob_get_contents() zwischen speichern bevor sie ob_end_flush() aufrufen, da dadurch der Puffer geleert wird.
Siehe auch ob_start(), ob_get_contents() und ob_end_clean().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Damit wird der Inhalt des Ausgabe-Puffers zurück gegeben (oder FALSE, wenn die Ausgabe-Pufferung nicht aktiv ist).
Siehe auch ob_start(), ob_end_flush() und ob_end_clean().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1. ob_gzhandler() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Fumktion konvertiert die in Zeichensatz internal_encoding kodierte Zeichenkette in output_encoding.
internal_encoding und output_encoding sollten über die Funktion iconv_set_encoding() oder über die Konfigurationsdatei definiert werden.
Beispiel 1. ob_iconv_handler() Beispiel:
Siehe auch: iconv_get_encoding() und iconv_set_encoding().
Zurück
Zum Anfang
Nach vorne
Nach oben
Grafik-Funktionen
PHP Handbuch
Zurück
Nach vorne
ob_implicit_flush() schaltet die implizite Ausgabe an oder aus (wenn kein flag angegeben wurde, wird per default "Ein "angenommen).
Die implizite Puffer-Ausgabe erzeugt eine Ausgabe nach jedem Ausgabe-Befehl, so dass keine Extra-Aufrufe von flush() mehr erforderlich sind.
Der aktuelle Puffer-Inhalt wird ausgegeben, so als ob die Funktion ob_end_flush() aufgerufen wurde.
Siehe auch flush(), ob_start() und ob_end_flush().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion schaltet die Pufferung von Ausgaben ein.
Solange die Ausgabe-Pufferung aktiv ist, erfolgt keine Ausgabe bei der Skript-Ausführung.
Statt dessen werden alle Ausgaben in einem internen Puffer gespeichert.
Der Inhalt diese internen Puffers kann in eine String-Variable kopiert werden (per ob_get_contents()).
Die Ausgabe erfolgt erst bei Aufruf von ob_end_flush() und sobald der Puffer-Inhalt per ob_end_clean() verworfen wird.
Siehe auch ob_get_contents(), ob_end_flush(), ob_end_clean() und ob_implicit_flush().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
OCIBindByName() bindet die PHP Variable variable an den Oracle Platzhalter ph_name.
Es wird genutzt um den benötigten Speicherplatz fuer die Ein / Ausgabe zu Laufzeit festzulegen. length gibt dabei die maximale Grösse des Speicherplatzes an.
Wenn length auf -1 gesetzt wird, nimmt OCIBindByName() die Grösse des Inhalts von variable als maximale Grösse.
Wenn ein abstrakter Datentyp wie (LOB / ROWID / BFILE) gebunden werden soll, muss zuerst OCINewDescriptor() verwendet werden. length gilt nicht für abstrakte Datentypen und sollte denn auf -1 gesetzt sein. type zeigt Oracle, welchen Typ wir binden wollen.
Mögliche Typen sind:
OCI_B_FILE (Binärdatei), OCI_B_CFILE (Textdatei), OCI_B_CLOB (Text-LOB), OCI_B_BLOB (Binär-LOB) and OCI_B_ROWID (ROWID).
Beispiel 1.
?php / * OCIBindByPos example thies@thieso.net (980221) trägt 3 Datensätze in emp ein und benutzt ROWID für das UPDATE nach dem INSERT * / $conn = OCILogon("scott" ,"tiger"); $stmt = OCIParse($conn ,"insert into emp (empno, ename) ". "values (:empno,:ename)". "returning ROWID into :rid"); $data = array(1111 = "Larry", 2222 = "Bill", 3333 = "Jim"); $rowid = OCINewDescriptor($conn,OCI_D_ROWID); OCIBindByName($stmt ,":empno", $empno,32); OCIBindByName($stmt ,":ename", $ename,32); OCIBindByName($stmt ,":rid", $rowid,-1,OCI_B_ROWID); $update = OCIParse($conn ,"update emp set sal = :sal where ROWID = :rid"); OCIBindByName($update ,":rid", $rowid,-1,OCI_B_ROWID); OCIBindByName($update ,":sal", $sal,32); $sal = 10000; while (list($empno,$ename) = each($data)) {OCIExecute($stmt); OCIExecute($update);} $rowid - free(); OCIFreeStatement($update); OCIFreeStatement($stmt); $stmt = OCIParse($conn ,"select * from emp where empno in (1111,2222,3333)"); OCIExecute($stmt); while (OCIFetchInto($stmt, $arr,OCI_ASSOC)) {var_dump($arr);} OCIFreeStatement($stmt); / * delete our "junk "from the emp table.... * / $stmt = OCIParse($conn ,"delete from emp where empno in (1111,2222,3333)"); OCIExecute($stmt); OCIFreeStatement($stmt); OCILogoff($conn);?
Zurück
Zum Anfang
Nach vorne
Oracle 8 Funktionen
Nach oben
ocicancel
PHP Handbuch
Zurück
Nach vorne
Wenn keine weiteren Zeilen gefetched werden sollen, kann der Cursor durch OCICancel() abgebrochen werden.
Zurück
Zum Anfang
Nach vorne
ocibindbyname
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
ocicancel
Nach oben
ocicollassign
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicollassign
Nach oben
ocicollgetelem
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
Nach oben
ocicollassignelem
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicollassignelem
Nach oben
ocicollmax
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicollgetelem
Nach oben
ocicollsize
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicollmax
Nach oben
ocicolltrim
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicollsize
Nach oben
ocicolumnisnull
PHP Handbuch
Zurück
Nach vorne
OCIColumnIsNULL() gibt TRUE zurück, wenn die Spalte col vom Statement stmt NULL ist.
Für den Parameter column kann wahlweise die Splatennummer (beginnend bei 1) oder der Spaltenname genommen werden.
Zurück
Zum Anfang
Nach vorne
ocicolltrim
Nach oben
ocicolumnname
PHP Handbuch
Zurück
Nach vorne
OCIColumnName() liefert den Name einer Spalte zurück passend zu der Spaltennummer (beginnend bei 1).
Beispiel 1.
?php print "HTML PRE \n"; $conn = OCILogon("scott", "tiger"); $stmt = OCIParse($conn ,"select * from emp"); OCIExecute($stmt); print" TABLE BORDER=\"1\ ""; print "TR"; print "TH Name / TH"; print "TH Type / TH"; print "TH Length / TH"; print "/ TR"; $ncols = OCINumCols($stmt); for ($i = 1; $i = $ncols; $i+ +) {$column_name = OCIColumnName($stmt,$i); $column_type = OCIColumnType($stmt,$i); $column_size = OCIColumnSize($stmt,$i); print "TR"; print "TD $column_name / TD"; print "TD $column_type / TD"; print "TD $column_size / TD"; print "/ TR";} OCIFreeStatement($stmt); OCILogoff($conn); print "/ PRE"; print "/ HTML \n";?
Bitte beachten Sie auch OCINumCols(), OCIColumnType(), und OCIColumnSize().
Zurück
Zum Anfang
Nach vorne
ocicolumnisnull
Nach oben
ocicolumnprecision
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicolumnname
Nach oben
ocicolumnscale
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicolumnprecision
Nach oben
ocicolumnsize
PHP Handbuch
Zurück
Nach vorne
OCIColumnSize() gibt die grösse einer Oracle Spalte zurück.
Für den Parameter column kann wahlweise die Splatennummer (beginnend bei 1) oder der Spaltenname genommen werden.
Beispiel 1.
Beachte bitte auch OCINumCols(), OCIColumnName(), und OCIColumnSize().
Zurück
Zum Anfang
Nach vorne
ocicolumnscale
Nach oben
ocicolumntype
PHP Handbuch
Zurück
Nach vorne
OCIColumnType() liefert den Datentyp einer Spalte zurück passend zu der Spaltennummer (beginnend bei 1).
Beispiel 1.
?php print "HTML PRE \n"; $conn = OCILogon("scott", "tiger"); $stmt = OCIParse($conn ,"select * from emp"); OCIExecute($stmt); print" TABLE BORDER=\"1\ ""; print "TR"; print "TH Name / TH"; print "TH Type / TH"; print "TH Length / TH"; print "/ TR"; $ncols = OCINumCols($stmt); for ($i = 1; $i = $ncols; $i+ +) {$column_name = OCIColumnName($stmt,$i); $column_type = OCIColumnType($stmt,$i); $column_size = OCIColumnSize($stmt,$i); print "TR"; print "TD $column_name / TD"; print "TD $column_type / TD"; print "TD $column_size / TD"; print "/ TR";} OCIFreeStatement($stmt); OCILogoff($conn); print "/ PRE"; print "/ HTML \n";?
Bitte beachten Sie auch OCINumCols(), OCIColumnName(), und OCIColumnSize().
Zurück
Zum Anfang
Nach vorne
ocicolumnsize
Nach oben
ocicolumntyperaw
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocicolumntype
Nach oben
ocicommit
PHP Handbuch
Zurück
Nach vorne
OCICommit() schreibt alle Datenbankänderungen seit dem letzten implizit oder explizitem Commit der Verbindungskennung fest.
Zurück
Zum Anfang
Nach vorne
ocicolumntyperaw
Nach oben
ocidefinebyname
PHP Handbuch
Zurück
Nach vorne
OCIDefineByName() legt eine PHP Variable als Ziel für den Inhalt einer Spalte nach dem Fetchen fest.
Es ist zu beachten, dass Oracle alle Spalten GROSSBUCHSTABIG ausliefert.
Daher erwartet OCIDefineByName() den Parameter Spaltenname grossbuchstabig.
Wird ein Spaltenname benutzt, der nicht im SELECT vorhanden ist, wird keine Fehlermeldung ausgegeben.
Soll ein abstrakter Datentyp (LOB / ROWID / BFILE) definiert werden, so muss er zuerst angefordert werden mit der OCINewDescriptor() Funktion.
In diesem Zusammenhang ist auch die OCIBindByName() zu beachten.
Beispiel 1.
?php / * OCIDefineByPos example thies@thieso.net (980219) * / $conn = OCILogon("scott" ,"tiger"); $stmt = OCIParse($conn ,"select empno, ename from emp"); / * the define MUST be done BEFORE ociexecute! * / OCIDefineByName($stmt ,"EMPNO", $empno); OCIDefineByName($stmt ,"ENAME", $ename); OCIExecute($stmt); while (OCIFetch($stmt)) {echo "empno :".$empno ."\n"; echo "ename :".$ename ."\n";} OCIFreeStatement($stmt); OCILogoff($conn);?
Zurück
Zum Anfang
Nach vorne
ocicommit
Nach oben
ocierror
PHP Handbuch
Zurück
Nach vorne
OCIError() liefert den letzten Fehler.
Ist der optionale Parameter stmt _BAR_ conn nicht angegeben, wird der zuletzt aufgetretene Fehler zurückgeliefert.
Ist kein Fehler gefunden, gibt OCIError() FALSE zurück.
OCIError() gibt den Fehler als assoziatives Array zurück, wobei code den Oracle Fehlercode und message den Fehlerstring beinhaltet.
Zurück
Zum Anfang
Nach vorne
ocidefinebyname
Nach oben
ociexecute
PHP Handbuch
Zurück
Nach vorne
OCIExecute() führt ein vorbereitetes Statement aus (beachte OCIParse()).
Der optionale Parameter mode ermöglicht die Wahl des Ausführungsmodus.
Voreingestellt ist OCI_COMMIT_ON_SUCCESS, wenn das Statement aber nicht gleich endgültig gemacht werden soll, ist OCI_DEFAULT zu verwenden.
Zurück
Zum Anfang
Nach vorne
ocierror
Nach oben
ocifetch
PHP Handbuch
Zurück
Nach vorne
OCIFetch() fetcht die nächste Ergebniszeile eines SELECTs in den internen Ergebnispuffer.
Zurück
Zum Anfang
Nach vorne
ociexecute
Nach oben
ocifetchinto
PHP Handbuch
Zurück
Nach vorne
OCIFetchInto() fetcht die nächste Zeile eines SELECT Ergebnisses in das result Array.
OCIFetchInto() überschreibt dabei den Inhalt in result.
Voreingestellt beinhaltet dann result ein bei 0 beginnendes indiziertes Array mit allen Spalten, welche nicht NULL sind.
Der mode Parameter erlaubt die Art der Form des result Arrays zu ändern.
Dabei können verschiedene Parameter benutzt werden, es reicht, diese einfach zu addieren (z.B.
OCI_ASSOC+OCI_RETURN_NULLS).
Verfügbare Parameter sind:
OCI_ASSOC Gibt ein assoziatives Array zurück.
OCI_NUM Gibt ein indiziertes Array zurück, beginnend bei 0. (voreingestellt)
OCI_RETURN_LOBS Gibt den Wert eines LOBs zurück, anstatt nur des Descriptors.
Zurück
Zum Anfang
Nach vorne
ocifetch
Nach oben
ocifetchstatement
PHP Handbuch
Zurück
Nach vorne
OCIFetchStatement() fetcht alle zurückgelieferten Reihen eines SELECT in ein Array.
Dabei liefert OCIFetchStatement() die Anzahl der zurückgelieferten Zeilen zurück.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
ocifetchinto
Nach oben
ocifreecollection
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocifetchstatement
Nach oben
ocifreecursor
PHP Handbuch
Zurück
Nach vorne
OCIFreeCursor() gibt TRUE zurück, wenn die Aktion erfolgreich war, FALSE, wenn nicht.
Zurück
Zum Anfang
Nach vorne
ocifreecollection
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
ocifreecursor
Nach oben
ocifreestatement
PHP Handbuch
Zurück
Nach vorne
OCIFreeStatement() gibt TRUE zurück, wenn es erfolgreich war, FALSE, wenn nicht.
Zurück
Zum Anfang
Nach vorne
Nach oben
ociinternaldebug
PHP Handbuch
Zurück
Nach vorne
OCIInternalDebug() aktiviert die interne Debugausgabe. onoff kann auf 0 gesetzt werden, um die Ausgabe abzuschalten und auf 1, um sie anzuschalten.
Zurück
Zum Anfang
Nach vorne
ocifreestatement
Nach oben
ociloadlob
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ociinternaldebug
Nach oben
ocilogoff
PHP Handbuch
Zurück
Nach vorne
OCILogOff() schliesst die Verbindung zu Oracle.
Zurück
Zum Anfang
Nach vorne
ociloadlob
Nach oben
ocilogon
PHP Handbuch
Zurück
Nach vorne
OCILogon() gibt bei erfolgreicher Verbindung einen Verbindungsindex zurück.
Der optionale dritte Parameter kann auf die lokale Oracleinstanz gesetzt werden oder auf die, zu welcher sich verbunden werden soll.
Wird der dritte Parameter nicht gesetzt nimmt PHP automatisch den Wert aus der Umgebungsvariable ORACLE_SID oder TWO_TASK.
Verbindungen werden gemeinsam wärend eines Skriptes genutzt, wenn OCILogon() benutzt wird.
Das heisst, dass commits und rollbacks sich auf alle offenen Transaktionen im Skript auswirken, ausser wenn explizit mehrere Verbindungen aufgebaut werden.
Dies Beispiel zeigt, wie die Verbindungen gemeinsam genutzt werden.
Beispiel 1.
?php print "HTML PRE"; $db = ""; $c1 = ocilogon("scott" ,"tiger",$db); $c2 = ocilogon("scott" ,"tiger",$db); function create_table($conn) {$stmt = ociparse($conn ,"create table scott.hallo (test varchar2(64))"); ociexecute($stmt); echo $conn. "created table\n\n";} function drop_table($conn) {$stmt = ociparse($conn ,"drop table scott.hallo"); ociexecute($stmt); echo $conn." dropped table\n\n";} function insert_data($conn) {$stmt = ociparse($conn ,"insert into scott.hallo values('$conn '_BAR_ _BAR_' '_BAR_ _BAR_ to_char(sysdate ,'DD-MON-YY HH24:MI:SS'))"); ociexecute($stmt,OCI_DEFAULT); echo $conn. "inserted hallo\n\n";} function delete_data($conn) {$stmt = ociparse($conn ,"delete from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn." deleted hallo\n\n";} function commit($conn) {ocicommit($conn); echo $conn. "commited\n\n";} function rollback($conn) {ocirollback($conn); echo $conn." rollback\n\n";} function select_data($conn) {$stmt = ociparse($conn ,"select * from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn ."----selecting\n\n"; while (ocifetch($stmt)) echo $conn. "".ociresult($stmt ,"TEST")." \n\n"; echo $conn ."----done\n\n";} create_table($c1); insert_data($c1); / / trägt eine Zeile ein und benutzt dabei c1 insert_data($c2); / / trägt eine Zeile ein und benutzt dabei c2 select_data($c1); / / die Ergebnisse beider Eintragungen wird zurückgegeben select_data($c2); rollback($c1); / / Rollback benutzt c1 select_data($c1); / / ein Rollback auf beide Eintragungen select_data($c2); insert_data($c2); / / trägt eine Zeile ein und benutzt dabei c2 commit($c2); / / der commit für c2 select_data($c1); / / das Ergebnis der Eintragung über c2 wird zurückgegeben delete_data($c1); / / löschen aller Zeilen über c1 select_data($c1); / / keine Zeile zurückgegeben select_data($c2); / / keine Zeile zurückgegeben commit($c1); / / commit für c1 select_data($c1); / / keine Zeile zurückgegeben select_data($c2); / / keine Zeile zurückgegeben drop_table($c1); print "/ PRE / HTML";?
Bitte beachte auch OCIPLogon() und OCINLogon().
Zurück
Zum Anfang
Nach vorne
ocilogoff
Nach oben
ocinewcollection
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocilogon
Nach oben
ocinewcursor
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
?php / / suppose your stored procedure info.output returns a ref cursor in :data $conn = OCILogon( "scott" ,"tiger"); $curs = OCINewCursor($conn); $stmt = OCIParse($conn ,"begin info.output(:data); end ;"); ocibindbyname($stmt ,"data", $curs,-1,OCI_B_CURSOR); ociexecute($stmt); ociexecute($curs); while (OCIFetchInto($curs, $data)) {var_dump($data);} OCIFreeCursor($stmt); OCIFreeStatement($curs); OCILogoff($conn);?
Beispiel 2.
?php print "HTML BODY"; $conn = OCILogon("scott" ,"tiger"); $count_cursor = "CURSOR(select count(empno) num_emps from emp ". "where emp.deptno = dept.deptno) as EMPCNT from dept"; $stmt = OCIParse($conn ,"select deptno,dname,$count_cursor"); ociexecute($stmt); print" TABLE BORDER=\"1\ ""; print "TR"; print "TH DEPT NAME / TH"; print "TH DEPT # / TH"; print "TH # EMPLOYEES / TH"; print "/ TR"; while (OCIFetchInto($stmt, $data,OCI_ASSOC)) {print "TR"; $dname = $data["DNAME"]; $deptno = $data["DEPTNO"]; print "TD $dname / TD"; print "TD $deptno / TD"; ociexecute($data ["EMPCNT "]); while (OCIFetchInto($data ["EMPCNT"], $subdata,OCI_ASSOC)) {$num_emps = $subdata["NUM_EMPS"]; print "TD $num_emps / TD";} print "/ TR";} print "/ TABLE"; print "/ BODY / HTML"; OCIFreeStatement($stmt); OCILogoff($conn);?
Zurück
Zum Anfang
Nach vorne
ocinewcollection
Nach oben
ocinewdescriptor
PHP Handbuch
Zurück
Nach vorne
OCINewDescriptor() Allocates storage to hold descriptors or LOB locators.
Valid values for the valid type are OCI_D_FILE, OCI_D_LOB, OCI_D_ROWID.
For LOB desriptors, the methods load, save, and savefile are associated with the descriptor, for BFILE only the load method exists.
Beispiel 1.
?php / * This script demonstrates file upload to LOB columns * The formfield used for this example looks like this * form action=" upload.php3 "method="post" enctype="multipart / form-data "* input type="file" name="lob_upload "*... * / if(!isset($lob_upload) _BAR_ _BAR_ $lob_upload == 'none') {? form action="upload.php3" method="post "enctype="multipart / form-data" Upload file: input type="file "name="lob_upload" br input type="submit "value="Upload" - input type="reset "/ form ?php} else {/ / $lob_upload contains the temporary filename of the uploaded file $conn = OCILogon($user, $password); $lob = OCINewDescriptor($conn, OCI_D_LOB); $stmt = OCIParse($conn ,"insert into $table (id, the_blob) values(my_seq.NEXTVAL, EMPTY_BLOB()) returning the_blob into :the_blob"); OCIBindByName($stmt, ':the_blob', $lob, -1, OCI_B_BLOB); OCIExecute($stmt); if($lob - savefile($lob_upload)) {OCICommit($conn); echo "Blob successfully uploaded\n"; }else {echo "Couldn't upload Blob\n";} OCIFreeDescriptor($lob); OCIFreeStatement($stmt); OCILogoff($conn);}?
Zurück
Zum Anfang
Nach vorne
ocinewcursor
Nach oben
ocinlogon
PHP Handbuch
Zurück
Nach vorne
OCINogon() gibt bei erfolgreicher Verbindung einen Verbindungsindex zurück.
Der optionale dritte Parameter kann auf die lokale Oracleinstanz gesetzt werden oder auf die, zu welcher sich verbunden werden soll.
Wird der dritte Parameter nicht gesetzt nimmt PHP automatisch den Wert aus der Umgebungsvariable ORACLE_SID oder TWO_TASK.
OCINLogon() erzeugt eine neue Verbindung mit einer neuen Oracle Session, dies ist zum Beispiel erforderlich, wenn man mit voneinander getrennten Transaktionen arbeitet.
Normalerweise wird die Oracle Session gemeinsam genutzt, wenn man OCILogon() oder auf Webserverebene OCIPLogon().
Wenn man allerdings unterschiedliche Verbindungen mit OCINLogon() öffnet, beeinflussen sich die Commits und Rollbacks der einzelnen Datenbankverbindungen nicht.
Dieses Beispiel zeigt, dass es sich um unterschiedliche Verbindungen handelt:
Beispiel 1.
?php print "HTML PRE"; $db = ""; $c1 = ocilogon("scott" ,"tiger",$db); $c2 = ocinlogon("scott" ,"tiger",$db); function create_table($conn) {$stmt = ociparse($conn ,"create table scott.hallo (test varchar2(64))"); ociexecute($stmt); echo $conn. "created table\n\n";} function drop_table($conn) {$stmt = ociparse($conn ,"drop table scott.hallo"); ociexecute($stmt); echo $conn." dropped table\n\n";} function insert_data($conn) {$stmt = ociparse($conn ,"insert into scott.hallo values('$conn '_BAR_ _BAR_' '_BAR_ _BAR_ to_char(sysdate ,'DD-MON-YY HH24:MI:SS'))"); ociexecute($stmt,OCI_DEFAULT); echo $conn. "inserted hallo\n\n";} function delete_data($conn) {$stmt = ociparse($conn ,"delete from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn." deleted hallo\n\n";} function commit($conn) {ocicommit($conn); echo $conn. "commited\n\n";} function rollback($conn) {ocirollback($conn); echo $conn." rollback\n\n";} function select_data($conn) {$stmt = ociparse($conn ,"select * from scott.hallo"); ociexecute($stmt,OCI_DEFAULT); echo $conn ."----selecting\n\n"; while (ocifetch($stmt)) echo $conn. "".ociresult($stmt ,"TEST")." \n\n"; echo $conn ."----done\n\n";} create_table($c1); insert_data($c1); select_data($c1); select_data($c2); rollback($c1); select_data($c1); select_data($c2); insert_data($c2); commit($c2); select_data($c1); delete_data($c1); select_data($c1); select_data($c2); commit($c1); select_data($c1); select_data($c2); drop_table($c1); print "/ PRE / HTML";?
Bitte beachten OCILogon() und OCIPLogon().
Zurück
Zum Anfang
Nach vorne
ocinewdescriptor
Nach oben
ocinumcols
PHP Handbuch
Zurück
Nach vorne
OCINumCols() gibt die Anzahl der Spalten in einem Statement zurück.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
ocinlogon
Nach oben
ociparse
PHP Handbuch
Zurück
Nach vorne
OCIParse() analysiert die query und benutzt dabei die conn.
Es liefert TRUE zurück, wenn die Abfrage gültig ist, FALSE, wenn nicht. query kann jede Form einer gültigen SQL Anfrage sein.
Zurück
Zum Anfang
Nach vorne
ocinumcols
Nach oben
ociplogon
PHP Handbuch
Zurück
Nach vorne
OCIPLogon() gibt bei erfolgreicher Öffnung einer persistenten Verbindung einen Verbindungsindex zurück.
Der optionale dritte Parameter kann auf die lokale Oracleinstanz gesetzt werden oder auf die, zu welcher sich verbunden werden soll.
Wird der dritte Parameter nicht gesetzt nimmt PHP automatisch den Wert aus der Umgebungsvariable ORACLE_SID oder TWO_TASK.
Bitte ebenfalls beachten OCILogon() und OCINLogon().
Zurück
Zum Anfang
Nach vorne
ociparse
Nach oben
ociresult
PHP Handbuch
Zurück
Nach vorne
OCIResult() gibt den Inhalt der Spalte mit dem Spaltenname in der aktuellen Zeile zurück (dazu wichtig OCIFetch()).
OCIResult() gibt alles als Zeichenkette zurück, ausser es sind abstrakte Datentypen (ROWIDs, LOBs and FILEs).
Zurück
Zum Anfang
Nach vorne
ociplogon
Nach oben
ocirollback
PHP Handbuch
Zurück
Nach vorne
OCIRollback() macht alle Änderungen seid dem letzten Commit rückgängig und gibt auch Sperren auf den Tabellen frei.
Mit der Verbindungskennung legt man die Datenbankverbindung fest, für welche diese Aktion gelten soll.
Zurück
Zum Anfang
Nach vorne
ociresult
Nach oben
ocirowcount
PHP Handbuch
Zurück
Nach vorne
OCIRowCounts() gibt die Anzahl der betroffenen Zeilen zum Beispiel einer UPDATE Aktion zurück.
Sie gibt nicht die Anzahl der zurückgelieferten Zeilen von einem SELECT Statements zurück!
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
ocirollback
Nach oben
ocisavelob
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocisavelob
Nach oben
ociserverversion
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocirowcount
Nach oben
ocisavelobfile
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
ocisavelobfile
Nach oben
ocisetprefetch
PHP Handbuch
Zurück
Nach vorne
OCISetPrefetch() setzt sie Anzahl der Zeilen fest, welche bereits vorab gefetcht werden sollen.
Der Grundwert ist 1.
Zurück
Zum Anfang
Nach vorne
ociserverversion
Nach oben
ocistatementtype
PHP Handbuch
Zurück
Nach vorne
OCIStatementType() kann folgende Werte liefern:
Beispiel 1.
Beispiel:
Zurück
Zum Anfang
Nach vorne
ocisetprefetch
Nach oben
ociwritelobtofile
PHP Handbuch
Zurück
Nach vorne
Kommt noch.
Zurück
Zum Anfang
Nach vorne
ocistatementtype
Nach oben
OpenSSL Funktionen
PHP Handbuch
Zurück
Nach vorne
Liefert die dezimale Entsprechung der in octal_string übergebenen oktalen Zahl.
Der größte konvertierbare Wert ist "17777777777", das entspricht 2147483647 dezimal (2 hoch 32 minus 1).
Siehe auch decoct() sowie bindec() und hexdec().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ohne den Parameter OnOff gibt odbc_autocommit() den aktuellen autocommit-Status für die Datenbankverbindung connection_id zurück.
Wenn autocommit aktiviert ist, wird TRUE zurückgeliefert, FALSE wenn es deaktiviert ist oder ein Fehler auftritt.
In der Standardeinstellung ist autocommit für eine Datenbankverbindung aktiviert.
Das Deaktivieren von autocommit enspricht dem Durchführen einer Transaktion.
Siehe auch odbc_commit() und odbc_rollback().
Zurück
Zum Anfang
Nach vorne
ODBC Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
(Betrifft die ODBC SQL Typen:
BINARY, VARBINARY und LONGVARBINARY)
ODBC_BINMODE_PASSTHRU: gibt Binärdaten direkt zum Output durch
ODBC_BINMODE_RETURN: liefert die Binärdaten unverändert zurück
ODBC_BINMODE_CONVERT: konvertiert die Binärdaten zu Zeichen und liefere sie zurück
Im ODBC_BINMODE_CONVERT werden die Binärdaten zu Character-C-data gewandelt.
Jedes Byte (8 Bits) der ursprünglichen Daten wird zu zwei ASCII-Zeichen, die der hexadezimalen Darstellung des Wertes entsprechen.
Der Binärwert 00000001 wird zum Beispiel zu "01" gewandelt, der Binärwert 11111111 zu "FF ".
Tabelle 1.
Die Benutzung von LONGVARBINARY
Resultat
Direkte Ausgabe
Direkte Ausgabe
Direkte Ausgabe
Direkte Ausgabe
Direkte Ausgabe
Direkte Ausgabe
Rückgabe als CHAR-Werte
Wenn odbc_fetch_into() genutzt wird, wird bei direkter Ausgabe ein leerer String als Spaltenwert zurückgeliefert.
Wenn result_id gleich 0 ist, wird die Einstellung als Defaultwert für die nächsten Transaktionen gesetzt.
Anmerkung:
Der Defahltwert für longreadlen ist 4096, für odbc_binmode() ODBC_BINMODE_RETURN, also die unveränderte Rückgabe.
Das Verhalten von LONGVARBINARY wird ebenfalls durch die Funktion odbc_longreadlen() bestimmt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_close_all() beendet alle bestehenden Verbindungen zu allen Datenbankservern.
Anmerkung:
Wie odbc_close() scheitert auch dieser Befehl, wenn auf einer Datenbankverbindung noch Transaktionen ausstehen oder aktiv sind.
In diesem Fall bleibt die betroffene Verbindung auch nach dem odbc_close_all() bestehen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_close() beendete die Verbindung zum Datenbankserver, die durch das Verbindungskennzeichen connection_id gekennzeichnet wird.
Anmerkung:
Diese Funktion scheitert, wenn auf dieser Datenbankverbindung noch Transaktionen ausstehen.
In diesem Fall bleibt die Verbindung bestehen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, bei Mißerfolg FALSE.
Alle ausstehenden Transaktionen auf der Datenbankverbindung connection_id werden ausgeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert eine ODBC-Verbindungskennung connection_id oder 0 (FALSE) bei Fehlfunktion zurück.
Die Verbindungskennung connection_id wird von den anderen ODBC-Funktionen benötigt.
Es können mehrere ODBC-Verbindungen nebeneinander bestehen.
Der optionale vierte Parameter cursor_type setzt die Art des Cursors, der für diese Verbindung genutzt werden soll.
Normalerweise wird er nicht benötigt, kann aber bei manchen ODBC-Treiberproblemen nützlich sein.
Die Fehlermeldung lautet dann zum Beispiel "Cannot open a cursor on a stored procedure that has anything other than a single select statement in it".
Dieser Fehler kann durch die Verwendung von SQL_CUR_USE_ODBC als cursor_type kann hier helfen.
Einige ODBC-Treiber unterstützen den optionalen Parameter row_number in der Funktion odbc_fetch_row() nicht.
Auch in diesem Fall kann SQL_CUR_USE_ODBC helfen.
Folgende Konstanten sind als Cursortyp definiert:
Für persistente Verbindungen schauen Sie sich bitte odbc_pconnect() an.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_cursor() liefert einen Cursornamen für die gegebene Ergebniskennung result_id zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_do() führt eine Anfrage auf der gegebenen Verbindung durch.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert bei einem Fehler FALSE zurück, sonst eine ODBC-Ergebniskennung result_id.
odbc_exec() sendet einen SQL-Befehl zu dem Datenbankserver, der durch die Verbindungskennung connection_id odbc_exec() sendet einen SQL-Befehl zu dem Datenbankserver, der durch die Verbindungskennung connection_id bezeichnet wird.
Dieser Parameter muss durch odbc_connect() oder odbc_pconnect() erzeugt worden sein.
Siehe auch: odbc_prepare() und odbc_execute() für die gleichzeitige Ausführung von mehreren SQL-Befehlen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Führt ein oder mehrere durch odbc_prepare() vorbereitete SQL-Befehle aus.
Nach erfolgreicher Ausführung wird TRUE zurückgeliefert, sonst FALSE.
Das Array parameters_array braucht nur angegeben zu werden, wenn im Befehl tatsächlich Parameter vorhanden sind.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Anzahl der Ergebnisspalten zurück, bei einem Fehler FALSE.
Das Zielarray result_array muss immer übergeben werden, kann aber einen beliebigen Typ haben - es wird ohnehin zu einem Array gemacht.
Das Array enthält die Ergebnisspalten beginnend mit 0.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn odbc_fetch_row() erfolgreich durchgeführt wurde (also eine oder mehrere Datenzeilen gefunden wurden), dann wird TRUE zurückgeliefert.
Wenn keine (weitere) Zeile vorhanden ist, wird FALSE zurückgegeben.
odbc_fetch_row() stellt eine Zeile der von odbc_do() / odbc_exec() zurückgegeben Daten bereit.
Nachdem odbc_fetch_row() aufgerufen wurde, können die Felder dieser Zeile mit odbc_result() genutzt werden.
Wenn row_number nicht definiert ist, versucht odbc_fetch_row() die nächste Zeile aus dem Abfrageergebnis result_id zu holen. odbc_fetch_row() kann abwechselnd ohne und mit dem Parameter row_number genutzt werden.
Um durch ein Abfrageergebnis mehrfach zu durchlaufen, kann man odbc_fetch_row() mit row_number gleich 1 aufrufen, um dann wie gewohnt mit odbc_fetch_row() ohne Zeilenparameter fortzufahren.
Wenn der ODBC-Treiber die Herausgabe von bestimmten Zeilen nicht unterstützt, wird der Parameter ignoriert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Feld wird durch die Feldnummer field_number im Abfrageergebnis result_id bestimmt.
Die Feldnummerierung beginnt mit 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_field_name() gibt den Namen der Spalte mit der Nummer field_number für des Abfrageergebnisses result_id zurück.
Die Nummerierung der Spalten beginnt mit 1.
Bei einem Fehler wird FALSE zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_field_type() liefert den SQL-Datentyp eines Feldes zurück, das in dem Abfrageergebnis result_id an der Stelle field_number zu finden ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt immer TRUE zurück.
odbc_free_result() braucht nur aufgerufen zu werden, wenn Sie einen zu hohen Speicherverbrauch durch das aktuell laufende Skript vermeiden wollen.
Das gesamte Abfrageergebnis wird automatisch nach Beendigung des Skriptes gelöscht.
Aber wenn Sie sicher sind, dass Sie dieses Ergebnis nicht länger benötigen, dann können Sie bei Speicherproblemen die Funktion odbc_free_result() benutzen.
Anmerkung:
Wenn autocommit deaktiviert ist (siehe odbc_autocommit()) und Sie odbc_free_result() bevor ein Commit gemacht wird, werden alle austehenden Transaktionen zurückgenommen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
(Betrifft folgende ODBC-SQL-Typen:
LONG, LONGVARBINARY) Die Anzahl der an PHP zurückgelieferten Bytes wird von durch den Parameter length LONG, LONGVARBINARY) Die Anzahl der an PHP zurückgelieferten Bytes wird von durch den Parameter length bestimmt.
Wenn er auf 0 gesetzt ist, wird der Inhalt von LONG-Spalten direkt an den Klienten weitergegeben.
Anmerkung:
Die Behandlung von LONGVARBINARY-Spalten wird auch von odbc_binmode() beeinflußt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_num_fields() liefert die Anzahl der Spalten, die in einem ODBC-Ergebnis vorhanden sind, zurück.
Bei einem Fehler ergibt odbc_num_fields() -1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
odbc_num_rows() liefert die Anzahl Zeilen eines ODBC-Abfrageergebnisses.
Tritt ein Fehler auf, ist sie -1.
Bei INSERT, UPDATE und DELETE-Befehlen wird die Zahl der betroffenen Zeilen zurückgegeben.
Bei einer SELECT-Abfrage kann dies die Anzahl der vorhanden Zeilen sein.
Anmerkung:
Bei vielen Treibern wird -1 als Anzahl möglicher Zeilen nach einem SELECT-Befehl zurückgeliefert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt eine ODBC-Verbindungskennung zurück, bei einem Fehler 0 (FALSE).
Der einzige Unterschied besteht darin, dass die Verbindung nach dem Ende des Skriptes erhalten bleibt.
Folgende Verbindungen mit gleicher Datenquelle, Nutzer und Passwort-Kombination über odbc_connect() oder odbc_pconnect() können dann die bestehende Verbindung weiterbenutzen.
Anmerkung:
In diesem Fall entspricht odbc_pconnect() odbc_connect().
Für weitere Informationen über den optionalen Parameter cursor_type schauen Sie bitte bei odbc_connect().
Weitere Informationen über persistente Datenbankverbindungen finden Sie in der PHP-FAQ
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert bei einem Fehler FALSE zurück.
Gibt eine ODBC-Ergebniskennung zurück, wenn der SQL-Befehl erfolgreich bereitgestellt wurde.
Die Ergebniskennung kann später zur Ausführung des Befehles mit odbc_execute() genutzt werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die Anzahl Reihen im Abfrageergebnis result_id zurück, wenn ein Fehler auftritt FALSE.
odbc_result_all() gibt alle Reihen eines SQL-Abfrageergebnisses result_id aus einem odbc_exec() -Aufruf als HTML-Tabelle aus.
Mit dem optionalen String format kann ein allgemeines Tabellenformat angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Inhalt eines bestimmtes Feldes zurück.
Der Feldparameter field kann entweder der Integerwert der Spaltennummer oder ein String mit dem Spaltennamen sein.
Als Beispiel:
$produkt_3 = odbc_result ($Query_ID, 3); $produkt_wert = odbc_result ($Query_ID, "wert");
Der erste Aufruf von odbc_result() liefert den Wert des drittes Feldes im aktuellen Datensatz im Abfrageergebnis zurück.
Der zweite Funktionsaufruf gibt den Wert der Spalte "wert" im aktuellen Datensatz zurück.
Wenn die Spaltennummer kleiner als 1 oder größer als die Spaltenzahl ist, tritt ein Fehler auf.
Gleiches gilt für einen Spaltennamen, der im Abfrageergebnis nicht vorkommt.
Die Spaltennummern beginngen mit 1.
Für die Nutzung von Binärdaten und LONG-Spalten schauen Sie bitte bei odbc_binmode() und odbc_longreadlen() nach.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Hebt alle ausstehenden Transaktionen auf der Verbindung connection_id wieder auf.
Bei Erfolg wird TRUE zurückgegeben, sonst FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion erlaubt das Einstellen der ODBC-Optionen für eine einzelne Verbindung.
Sie soll beim Auffinden und Beheben von Problemen mit ODBC-Treibern helfen.
Es empfiehlt sich, diese Funktionen nur zu nutzen, wenn man einige Erfahrung mit ODBC-Programmierung gesammelt hat und die Wirkungen der einzelnen Parameter kennt.
Um mit Ihnen zu arbeiten, benötigen Sie eine Referenz der aktuellen Treiberversion des eingesetzten ODBC-Treibers, denn die Optionen sind von Treiber zu Treiber und von Version zu Version unterschiedlich.
Weil die Effekte je nach ODBC-Treiber unterschiedlich sind, sollte Skripte mit diesen Funktionen nicht veröffentlich werden.
Einige Optionen stehen nicht zur Verfügung, weil sie vor dem Aufbau einer ODBC-Verbindung eingestellt sein müssen.
Wie auch immer, in einigen Fällen hilft diese Funktion zu vermeiden, dass man von seinem Vorgesetzten gezwungen wird, ein kommerzielles Programm einzusetzen - und darauf kommt es doch an; -).
Bei SQLSetConnectOption() ist es eine Verbindungskennung, bei SQLSetStmtOption() eine Ergebniskennung.
function ist die ODBC-Funktion, die genutzt werden soll.
Die Werte sind 1 für SQLSetConnectOption() und 2 für SQLSetStntOption().
Der Parameter option ist die Option, die gesetzt werden soll.
Der Parameter param ist der Wert für die gegebene option.
Beispiel 1. odbc.setoption Beispiele
Option 102 von SQLSetConnectOption() ist SQL_AUTOCOMMIT. / / Wert 1 für SQL_AUTOCOMMIT entspricht SQL_AUTOCOMMIT_ON. / / Dieses Beispiel hat denselben Effekt wie / / odbc_autocommit($conn, true); odbc_setoption ($conn, 1, 102, 1); / / 2.
Option 0 von SQLSetStmtOption() ist SQL_QUERY_TIMEOUT. / / Dieses Beispiel setzt den Timeout auf 30 Sekunden. $result = odbc_prepare ($conn, $sql); odbc_setoption ($result, 2, 0, 30); odbc_execute ($result);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein Verzeichnis-Handle zurück, das in späteren Aufrufen von closedir(), readdir() und rewinddir() gebraucht werden kann.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion openlog() Die Funktion openlog() kontaktiert die System-Log-Dienste eines Programms.
Die Zeichenkette ident wird jeder Meldung angefügt.
Werte für die Parameter option und facility werden unten erläutert.
Das Argument option wird verwendet, um festzulegen, welche Log-Optionen bei der Erzeugung von Log-Nachrichten verwendet werden sollen.
Das Argument facility wird verwendet, um die Art des Programmes festzulegen, das die Nachricht loggt.
Dies erlaubt ihnen (in ihrer speziellen SysLog-Konfiguartion) die Festlegung der Behandlungsweise von Log-Nachrichten.
Der Gebrauch von openlog() ist optional.
Dann ist der Vorgabewert von ident falsch / FALSE.
Tabelle 1. openlog() Options
Konstante
Beschreibung
Tritt ein Fehler auf beim Senden von Daten an den System-Logging-Service, wird direkt an die System-Konsole ausgegeben.
Öffnet sofort die Verbindung zum Log-Service.
(Voreinstellung); öffne die Verbindung erst, wenn die erste Meldung geloggt werden soll.
Gib die Log-Meldungen auch an der Standard-Ausgabe für Fehler aus.
Schließe die PID bei jeder Meldung ein.
Tabelle 2. openlog() -Möglichkeiten
Konstante
Beschreibung
Security - / Authorization-Meldungen (benutzt statt dessen LOG_AUTHPRIV in Systemen, wo diese Konstante definiert ist).
Security - / Authorization-Meldungen (private).
Zeitabhängig gestartete Dienste (Dämonen wie cron and at).
Andere System-Dienste (Dämonen).
Kernel-Meldungen.
Reserviert für lokale Benutzung.
Zeilen-Drucker Subsystem.
Mailing-Subsystem.
USENET-News-Subsystem.
Meldungen die intern von syslogd erzeugt wurden.
Generische User-Level-Meldungen.
UUCP-Subsystem
Siehe auch define_syslog_variables(), syslog() und closelog().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Der optionale Parameter notext beeinflusst den Umfang der Ausgabe; ist dieser auf FALSE gesetzt werden zusätzliche, für Menschen lesbare, Informationen in der Datei mit ausgegeben.
Zurück
Zum Anfang
Nach vorne
OpenSSL Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
openssl_csr_new() erzeugt einen neuen CSR (Certificate Signing Request) basierend auf den Informationen, die mit dem Parameter dn angegeben werden.
Dieser bestimmt den Distinguished Name, der im Zertifikat benutzt werden soll.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Liefert einen Fehlertext, oder FALSE, wenn es keine weiteren Fehler gibt.
Die Fehlermeldungen werden auf einem Stack abgelegt.
Diese Funktion sollte also mehrmals aufgerufen werden, um alle Informationen zu erhalten.
Beispiel 1. openssl_error_string() Beispiel
Sie haben eine openssl-Funktion aufgerufen, die einen Fehler / / verursacht hat. while( $msg = openssl_error_string()) echo $msg. "br / \n";
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Die Funktion openssl_free_key() löscht den Schlüssel mit dem angegebenen Parameter key_identifier aus dem Speicher.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion openssl_get_privatekey() analysiert den PEM formatierten privaten Schlüssel der mit dem Parameter key angegeben wurde und bereitet ihn für den Gebrauch durch andere Funktionen vor.
Der optionale Parameter passphrase muss angegeben werden, falls der Schlüssel selbst verschlüsselt ist (geschützt durch eine Passphrase).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Rückgabewert: im Erfolgsfall eine positive Schlüssel-Resource-Kennung, FALSE im Fehlerfall.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Rückgabewert:
Im Erfolgsfall werden die geöffneten Daten im Parameter open_data zurückgegeben.
Der Umschlag Schlüssel wird bei der Versiegelung erzeugt und kann ausschlieslich für einen bestimmten privaten Schlüssel verwendet werden.
Mehr Informationen erhalten Sie unter der openssl_seal() Funktion.
/ / Annahme: $sealed und $env_key enthalten versiegelte Daten / / und unseren Umschlag Schlüssel; beide haben wir von dem sie / / Versiegelnden erhalten / / privaten Schlüssel aus einer Datei holen und vorbereiten $fp = fopen(" / src / openssl-0.9.6 / demos / sign / key.pem", "r"); $priv_key = fread($fp, 8192); fclose($fp); $pkeyid = openssl_get_privatekey($priv_key); / / entschlüsseln der Daten und speichern in $open if (openssl_open($sealed, $open, $env_key, $pkeyid)) echo "Das sind die geöffneten Daten: ", $open; else echo "Öffnen der Daten nicht möglich !"; / / löschen des privaten Schlüssels aus dem Speicher openssl_free_key($pkeyid);
Siehe auch openssl_seal().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Benutzt wird dafür das Zertifikat, angegeben durch recipcert, und der damit verknüpfte private Schlüssel, angegeben durch recipkey.
Beispiel 1. openssl_pkcs7_decrypt() Beispiel
Sie erhalten eine S / MIME Nachricht. $infilename = "encrypted.msg"; / / diese Datei enthält ihre verschlüsselte Nachricht $outfilename = "decrypted.msg"; / / stellen Sie sicher, dass Sie Schreibrechte haben! if (openssl_pkcs7_decrypt($infilename, $outfilename, $cert, $key)) echo "entschlüsselt !"; else echo "entschlüsseln fehlgeschlagen !";
Anmerkung:
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Die Verschlüsselung benutzt eine RC2 40 Bit Chiffre, so dass diese Inhalte nur von den beabsichtigten Empfängern gelesen werden können, die mit dem Parameter recipcerts angegeben wurden.
Der Parameter recipcerts Der Parameter recipcerts kann ein einzelnes X.509 Zertifikat oder ein Array von X.509 Zertifikaten enthalten.
Der Parameter headers ist ein Array aus Headern die den Daten vorangestellt wird, nachdem diese verschlüsselt wurden.
Um den Verschlüsselungsprozess zu beeinflussen, können Sie den Paramter flags benutzen - siehe PKCS7 Konstanten.
Beispiel 1. openssl_pkcs7_encrypt() Beispiel
Treffen Sie mich im Cafe um 8.30 abends.
HQ EOD; / / Schlüssel laden $key = implode("", file("nighthawk.pem")); / / speichern der Nachricht in einer Datei $fp = fopen("msg.txt", "w"); fwrite($fp, $data); fclose($fp); / / verschlüsseln if (openssl_pkcs7_encrypt("msg.txt", "enc.txt", $key, array("To "= "nighthawk@example.com", / / keyed syntax "From:
HQ hq@example.com ", / / indexed syntax "Subject" = "Eyes only"))) {/ / Nachricht verschlüsselt - ab damit! exec(ini_get("sendmail_path"). "enc.txt");}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Die Funktion openssl_pkcs7_sign() unterzeichnet die Inhalte der Datei, angegeben durch den Pararmeter infilename.
Beim Unterzeichnen wird das Zertifikat, angegeben durch signcert, und der dazu gehörige private Schlüssel, angegeben durch privkey, benutzt.
Der Parameter flags kann zur Änderung der Ausgabe benutzt werden - siehe PKCS7 Konstanten - falls nicht angegeben ist die Vorgabe PKCS7_DETACHED.
Der Parameter extracertsfilename gibt den Namen einer Datei an, die ein Bündel von extra Zertifikaten enthält, die in die Unterschrift mit eingefügt werden.
Beispiel 1. openssl_pkcs7_sign() Beispiel
Der CEO EOD; / / Nachricht in einer Datei speichern $fp = fopen("msg.txt", "w"); fwrite($fp, $data); fclose($fp); / / encrypt it if (openssl_pkcs7_sign("msg.txt", "signed.txt", "mycert.pem", array("mycert.pem", "mypassphrase"), array("To "= "joes@sales.com", / / keyed syntax "From:
HQ ceo@sales.com ", / / indexed syntax "Subject" = "Eyes only")) {/ / Nachricht unterschrieben - abschicken! exec(ini_get("sendmail_path"). "signed.txt");}
Anmerkung:
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Die Funktion openssl_pkcs7_verify() liest die S / MIME Nachricht, die in der Datei filename Die Funktion openssl_pkcs7_verify() liest die S / MIME Nachricht, die in der Datei filename enthalten ist und untersucht die digitale Unterschrift.
Tritt ein Fehler auf wird -1 zurückgegeben.
Wird der Parameter outfilename angegeben, sollte dies eine Zeichenkette sein, die den Namen einer Datei enthält, in der das Zertifikat der unterzeichnenden Person im PEM Format gespeichert wird.
Wird der Parameter cainfo angegeben, sollten Informationen über die vertrauenswürdigen CA Zertifikate enthalten sein, die für den Überprüfungsprozess benutzt werden - für mehr Informationen zu diesem Parameter sollten Sie unter Zertifikat Nachweis nachschauen.
Wird der Parameter extracerts angegeben, ist es der Name einer Datei, die ein Bündel von Zertifikaten enthält, die als nicht vertrauenswürdige CAs genutzt werden.
Anmerkung:
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Rückgabewert: im Erolgsfall die Länge der versiegelten Daten, FALSE bei einem Fehler.
War der Aufruf der Funktion erfolgreich, sind die versiegelten Daten in sealed_data enthalten und der Umschlag Schlüssel steht in env_keys zur Verfügung.
Die Funktion openssl_seal() versiegelt (verschlüsselt) data unter Verwendung von RC4 mit einem zufällig erzeugten geheimen Schlüssel.
Dieser Schlüssel wird mit jedem öffentlichen Schlüssel verschlüsselt, der mit der Kennung in pub_key_ids verknüpft ist.
Jeder Empfänger muss sowohl die versiegelten Daten als auch den entsprechenden Umschlag Schlüssel erhalten, der mit dem öffentlichen Schlüssel des Empfängers versiegelt wurde.
/ / Annahme: $data enthält die zu versiegelnden Daten / / holen und vorbereiten der öffentlichen Schlüssel unserer Empfänger $fp = fopen( "/ src / openssl-0.9.6 / demos / maurice / cert.pem", "r"); $cert = fread($fp, 8192); fclose($fp); $pk1 = openssl_get_publickey($cert); / / Wiederholung für den zweiten Empfänger $fp = fopen(" / src / openssl-0.9.6 / demos / sign / cert.pem", "r"); $cert = fread($fp, 8192); fclose($fp); $pk2 = openssl_get_publickey($cert); / / versiegeln der Nachricht, nur Besitzer von $pk1 und $pk2 können / / mit Schlüsseln $sealed entschlüsseln, / / entsprechendes gilt für $ekeys[0] und $ekeys[1]. openssl_seal($data, $sealed, $ekeys, array($pk1,$pk2)); / / Löschen der Schlüssel aus dem Speicher openssl_free_key($pk1); openssl_free_key($pk2);
Siehe auch openssl_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Ist der Aufruf der Funktion erfolgreich, steht die Signatur im Parameter signature zur Verfügung.
Für das hashing der Daten wird SHA1 benutzt und anschliessend wird mit dem privaten Schlüssel verschlüsselt, angegeben mit priv_key_id.
Beachten Sie, dass die Daten selbst nicht verschlüsselt werden.
Beispiel 1. openssl_sign() Beispiel
/ / Annahme: $data enthält die Daten, die signiert werden sollen. / / holen und vorbereiten des privaten Schlüssels aus einer Datei. $fp = fopen( "/ src / openssl-0.9.6 / demos / sign / key.pem", "r"); $priv_key = fread($fp, 8192); fclose($fp); $pkeyid = openssl_get_privatekey($priv_key); / / errechnen der Unterschrift openssl_sign($data, $signature, $pkeyid); / / Löschen des Schlüssels aus dem Speicher openssl_free_key($pkeyid);
Siehe auch openssl_verify().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Tritt ein Fehler auf wird -1 zurückgegeben.
Die Funktion openssl_verify() überprüft die Korrektheit der Unterschrift signature für die angegebenen Daten data mit Hilfe des öffentlichen Schlüssels, verknüpft über den Parameter pub_key_id.
Das muss der passende öffentliche zum privaten Schlüssel sein, der für die Unterschrift benutzt wurde.
Beispiel 1. openssl_verify() Beispiel
/ / Annahme: $data und $signature enthalten die Daten und die Unterschrift / / holen und vorbereiten des öffentlichen Schlüssels aus dem Zertifikat $fp = fopen( "/ src / openssl-0.9.6 / demos / sign / cert.pem", "r"); $cert = fread($fp, 8192); fclose($fp); $pubkeyid = openssl_get_publickey($cert); / / feststellen, ob die Unterschrift ok ist oder nicht $ok = openssl_verify($data, $signature, $pubkeyid); if ($ok == 1) echo "gut"; elseif ($ok == 0) echo "schlecht"; else echo "Mist, Fehler beim Überprüfen der Unterschrift; / / Löschen des Schlüssels aus dem Speicher openssl_free_key($pubkeyid);
Siehe auch openssl_sign().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist EXPERIMENTELL.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Kann das Zertifikat für den beabsichtigten Zweck benutzt werden, gibt diese Funktion TRUE zurück; falls nicht FALSE, bei einem Fehler -1.
Der Parameter cainfo Der Parameter cainfo sollte ein Array aus vertrauenswürdigen CA Dateien / Verzeichnissen enthalten.
Der Parameter untrustedfile, falls angegeben, ist der Name einer PEM verschlüsselten Datei, die Zertifikate enthält, die dazu benutzt werden können, das Zertifikat zu überprüfen, obwohl kein Vertrauen zu diesen Zertifikaten besteht, die aus dieser Datei stammen.
Tabelle 1. openssl_x509_checkpurpose() Zweck
Konstante
Beschreibung
Client-Seite einer SSL Verbindung?
Server-Seite einer SSL Verbindung?
Netscape SSL Server?
Unterschreiben einer S / MIME Email?
Verschlüsseln einer S / MIME Email?
Unterschreiben einer Zertifikats-Widerrufliste( CRL)?
Beliebige / alle Zwecke?
Anmerkung:
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Diese Funktion ist bis jetzt nicht dokumentiert.
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Die Funktion openssl_x509_free() löscht den Speicherbereich, der von einem Zertifikat, angegeben durch den Parameter x509cert, belegt wurde.
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Der Parameter shortnames kontrolliert wie die Daten im Array indiziert werden - wenn shortnames TRUE ist (Standard), werden die Felder in Kurzform indiziert, ansonsten werden lange Namen verwendet - z.B.:
CN ist die Kurzform von commonName.
Die Struktur der zurückgegeben Daten ist bis jetzt (absichtlich) nicht dokumentiert, da es noch vorbehaltliche Änderungen geben wird
Anmerkung:
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Die Funktion openssl_x509_read() analysiert das Zertifikat das mit dem Parameter x509certdata angegeben wurde und gibt eine Resource-Kennung zurück.
Diese Funktion wurde in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
Nach oben
Oracle Funktionen
PHP Handbuch
Zurück
Nach vorne
Gibt nach erfolgter Bindung TRUE, andernfalls FALSE zurück.
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion bindet die genannte PHP-Variable an einen SQL-Parameter.
Der SQL-Parameter muss von der Form ":name" sein.
Mit dem optionalen Parameter Typ können sie definieren, ob der SQL-Parameter ein in / out - (0, Grundeinstellung), in - (1) oder out - (2) Parameter ist.
Ab PHP 3.0.1 können Sie statt der Zahlen die Konstanten ORA-BIND_INOUT, ORA_BIND_IN und ORA_BIND_OUT verwenden.
ora_bind() muss nach ora_parse() und vor ora_exec() aufgerufen werden.
Nach dem Aufruf von ora_exec() enthalten die gebunden PHP-Variablen die Ausgabewerte, falls diese verfügbar sind.
?php ora_parse( $curs, "declare tmp INTEGER; begin tmp := :in; :out := tmp; :x := 7.77; end ;"); ora_bind($curs, "ergebnis", ":x", $len, 2); ora_bind($curs, "eingabe", ":in", 5, 1); ora_bind($curs, "ausgabe", ":out", 5, 2); $eingabe = 765; ora_exec($curs); echo "Ergebnis: $ergebnis BR Ausgabe: $ausgabe BR Eingabe: $eingabe";?
Zurück
Zum Anfang
Nach vorne
Oracle Funktionen
Nach oben
ora_close
PHP Handbuch
Zurück
Nach vorne
Gibt nach erfolgtem Schließen TRUE, andernfalls FALSE zurück.
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion schließt den mittels ora_open() geöffneten Daten-Cursor.
Zurück
Zum Anfang
Nach vorne
ora_bind
Nach oben
ora_columnname
PHP Handbuch
Zurück
Nach vorne
Gibt den Namen des Feldes Feld des Cursors Cursor zurück.
Der zurückgegebene Name ist komplett in Großbuchstaben.
Feld 0 ist das erste Feld.
Zurück
Zum Anfang
Nach vorne
ora_close
Nach oben
ora_columnsize
PHP Handbuch
Zurück
Nach vorne
Gibt die Größe des Oracle-Feldes Feld des Cursors Cursor zurück.
Feld 0 ist das erste Feld.
Zurück
Zum Anfang
Nach vorne
ora_columnname
Nach oben
ora_columntype
PHP Handbuch
Zurück
Nach vorne
Gibt den Oracle-Datentyp des Feldes Feld des Cursors Cursor zurück.
Feld 0 ist das erste Feld.
Der zurückgegebene Typ ist einer der folgenden:
Zurück
Zum Anfang
Nach vorne
ora_columnsize
Nach oben
ora_commit
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion bestätigt eine Oracle-Transaktion.
Eine Transaktion ist definiert als Gesamtheit aller Änderungen seit der letzten Bestätigung / dem letzten Rollback, seit die automatische Bestätigung abgeschaltet wurde oder seit die Verbindung besteht.
Zurück
Zum Anfang
Nach vorne
ora_columntype
Nach oben
ora_commitoff
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion schaltet die automatische Bestätigung nach jedem Aufruf von ora_exec() ab.
Zurück
Zum Anfang
Nach vorne
ora_commit
Nach oben
ora_commiton
PHP Handbuch
Zurück
Nach vorne
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion schaltet die automatische Bestätigung nach jedem Aufruf von ora_exec() über die angegebene Verbindung ein.
Zurück
Zum Anfang
Nach vorne
ora_commitoff
Nach oben
ora_do
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion ist eine schnelle Kombination von ora_parse(), ora_exec() und ora_fetch().
Sie analysiert eine Anweisung, führt sie aus und ruft dann den ersten Datensatz des Ergebnisses ab.
Siehe auch: ora_parse(), ora_exec() und ora_fetch().
Zurück
Zum Anfang
Nach vorne
ora_commiton
Nach oben
ora_error
PHP Handbuch
Zurück
Nach vorne
Gibt den numerischen Fehlercode der zuletzt ausgeführten Anweisung des angegebenen Cursors, bzw. der angegebenen Verbindung zurück.
Anmerkung:
Die Unterstützung von Verbindungs-IDs wurde in 3.0.4 eingeführt.
Zurück
Zum Anfang
Nach vorne
ora_error
Nach oben
ora_exec
PHP Handbuch
Zurück
Nach vorne
Gibt eine Fehlermeldung in der Form XXX - NNNNN zurück, worin XXX angibt, wo der Fehler auftrat und NNNNN die Fehlermeldung identifiziert.
Anmerkung:
Die Unterstützung von Verbindungs-IDs wurde in 3.0.4 eingeführt.
ZurÃ¼ck
Zum Anfang
Nach vorne
ora_do
Nach oben
ora_errorcode
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Siehe auch: ora_parse(), ora_fetch() und ora_do().
Zurück
Zum Anfang
Nach vorne
ora_errorcode
Nach oben
ora_fetch_into
PHP Handbuch
Zurück
Nach vorne
Gibt TRUE (Datensatz wurde abgerufen) oder FALSE Gibt TRUE (Datensatz wurde abgerufen) oder FALSE (keine weiteren Datensätze oder Auftreten eines Fehlers) zurück.
Bei Auftreten eines Fehlers bekommen Sie die Einzelheiten mit den Funktionen ora_error() und ora_errorcode().
Wenn es keinen Fehler gab, gibt ora_errorcode() 0 zurück.
Diese Funktion ruft einen Datensatz des angegebenen Cursors ab.
Siehe auch: ora_parse(), ora_exec() und ora_do().
Zurück
Zum Anfang
Nach vorne
ora_fetch_into
Nach oben
ora_getcolumn
PHP Handbuch
Zurück
Nach vorne
Ruft einen Datensatz in ein Array ab.
Der Parameter flags kann zwei Flag-Werte annehmen: ist das ORA_FETCHINTO_NULLS -Flag gesetzt, werden Felder mit dem Wert NULL im Array gesetzt; ist das Flag ORA_FETCHINTO_ASSOC gesetzt, wird ein assoziatives Array erzeugt.
Gibt die Anzahl der abgerufenen Felder zurück.
Beispiel 1. ora_fetch_into()
?php $ergebnisse = array(); ora_fetch_into($cursor, $ergebnisse); echo $ergebnisse[0]; echo $ergebnisse[1]; $ergebnisse = array(); ora_fetch_into($cursor, $ergebnisse, ORA_FETCHINTO_NULLS_BAR_ORA_FETCHINTO_ASSOC); echo $ergebnisse['MyColumn'];?
Siehe auch: ora_parse(), ora_exec(), ora_fetch() und ora_do().
Zurück
Zum Anfang
Nach vorne
ora_exec
Nach oben
ora_fetch
PHP Handbuch
Zurück
Nach vorne
Gibt die Felddaten zurück.
Falls ein Fehler auftritt, wird FALSE zurückgegeben und ora_errorcode() gibt einen Wert (nicht NULL) zurück.
Beachten Sie aber, dass die false-Überprüfung der Ergebnisse dieser Funktion auch dann wahr ergeben kann, wenn gar kein Fehler auftrat (Ergebnis NULL, leere Zeichenkette, die Zahl 0, die Zeichenkette "0").
Diese Funktion liefert die Daten eines Feld - oder Funktionsergebnisses.
Zurück
Zum Anfang
Nach vorne
ora_fetch
Nach oben
ora_logoff
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion meldet den Benutzer ab und trennt die Verbindung zum Server.
Zurück
Zum Anfang
Nach vorne
ora_getcolumn
Nach oben
ora_logon
PHP Handbuch
Zurück
Nach vorne
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion baut mit Benutzername und Passwort eine Verbindung zwischen PHP und einer Oracle Datenbank auf.
Verbindungen können unter Verwendung von SQL*Net durch Eingabe des TNS -Namens zu Benutzername wie folgt aufgebaut werden:
$conn = Ora_Logon( "Benutzername@TNSNAME", "pass");
Bei Servermodulen sollten Sie sie in der Umgebung des Servers setzen, bevor Sie den Server starten.
Zurück
Zum Anfang
Nach vorne
ora_logoff
Nach oben
ora_numcols
PHP Handbuch
Zurück
Nach vorne
ora_numcols() gibt die Anzahl der Felder eines Ergebnisses zurück.
Aussagekräftige Werte werden nur nach einer analysieren / ausführen / abrufen-Abfolge zurückgegeben.
Siehe auch: ora_parse(), ora_exec(), ora_fetch() und ora_do().
Zurück
Zum Anfang
Nach vorne
ora_logon
Nach oben
ora_numrows
PHP Handbuch
Zurück
Nach vorne
ora_numrows() gibt die Anzahl der Datensätze eines Ergebnisses zurück.
Zurück
Zum Anfang
Nach vorne
ora_numcols
Nach oben
ora_open
PHP Handbuch
Zurück
Nach vorne
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion öffnet einen Oracle-Cursor, der mit Verbindung verknüpft ist.
Zurück
Zum Anfang
Nach vorne
ora_numrows
Nach oben
ora_parse
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Diese Funktion analysiert eine SQL-Anweisung oder einen PL / SQL-Block und verknüpft diese( n) mit dem angegebenen Cursor.
Siehe auch: ora_exec(), ora_fetch() und ora_do().
Zurück
Zum Anfang
Nach vorne
ora_open
Nach oben
ora_plogon
PHP Handbuch
Zurück
Nach vorne
Diese Funktion baut mit Benutzername und Passwort eine persistente Verbindung zwischen PHP und einer Oracle Datenbank auf.
Siehe auch: ora_logon().
Zurück
Zum Anfang
Nach vorne
ora_parse
Nach oben
ora_rollback
PHP Handbuch
Zurück
Nach vorne
Einzelheiten über den Fehler bekommen Sie mit den Funktionen ora_error() und ora_errorcode().
Diese Funktion macht eine Oracle-Transaktion rückgängig (Definition einer Transaktion: siehe ora_commit()).
Zurück
Zum Anfang
Nach vorne
ora_plogon
Nach oben
PHP Handbuch
Zurück
Nach vorne
Es wird der ASCII-Wert des ersten Zeichens von string zurück gegeben.
Diese Funktion steht in Zusammenhang mit chr().
Beispiel 1. ord() -Beispiel:
if (ord ($str) == 10) {echo "Das erste Zeichen von \$str ist ein Zeilenvorschub.\n";}
Siehe auch chr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PDF Funktionen
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. ovrimos_connect() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Beispiel 2.
Beispiel 3. ovrimos_result_all example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
Funktionen zur Ausgabesteuerung
PHP Handbuch
Zurück
Nach vorne
Diese Funktion packt ein oder mehrere Argumente - unter Beachtung der Argument-Formate - in einen Binär-String.
In dem zurück gegebenen Binär-String stehen anschließend die Daten.
Alle Formatierungs-Anweisungen funktionieren genau wie dort.
Der Format-String besteht aus Format-Codes, gefolgt von einem optionalen Wiederholungs-Argument.
Bei "a", "A", "h" und dem "H "Format-Code gibt das Wiederholungs-Argument an, wie viele gleiche Zeichen folgen.
Bei allen anderen steht der Wiederholungs-Zähler für die Anzahl der benutzten Daten-Argumente, die in den Binär-String gepackt werden sollen.
Zt. sind folgende Codes implementiert:
a mit NUL gefüllte Zeichenkette (String)
A mit Leerzeichen (SPACE) gefüllte Zeichenkette (String)
h Hex Zeichenkette (String), unterer Halbwert zuerst
H Hex Zeichenkette (String), höherer Halbwert zuerst
s Short-Typ mit Vorzeichen (immer 16 Bit, Byte-Folge maschinenabhängig)
S Short-Typ ohne Vorzeichen (immer 16 Bit, Byte-Folge maschinenabhängig)
n Short-Typ ohne Vorzeichen (immer 16 Bit, big endian byte order)
v Short-Typ ohne Vorzeichen (immer 16 Bit, little endian byte order)
i Integer mit Vorzeichen (Größe und Byte-Folge maschinenabhängig)
I Integer-Typ ohne Vorzeichen (Größe und Byte-Folge maschinenabhängig)
l Long-Typ mit Vorzeichen (immer 32 Bit, Byte-Folge maschinenabhängig)
L Long-Typ ohne Vorzeichen (immer 32 Bit, Byte-Folge maschinenabhängig)
N Long-Typ ohne Vorzeichen (immer 32 Bit, big endian Byte - Folge)
V Long-Typ ohne Vorzeichen (immer 32 Bit, little endian Byte - Folge)
f Fließkomma-Typ (maschinenabhängige Größe und Wiedergabe)
d Double-Typ (maschinenabhängige Größe und Wiedergabe)
x NUL Byte
X Sichern eines Bytes
@ NUL-Auffüllung bis zur absoluten Position
Mit Pack formatierter String:
0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
Bedenken sie, dass der Unterschied zwischen vorzeichen-losen und vorzeichen-behafteten Werten nur Einfluss auf die Funktion unpack() hat, wogegen dies bei der Funktion pack() egal ist.
Beachten sie auch, dass PHP intern Ganzzahl-Werte als vorzeichen-behaftete Werte speichert, deren Umfang vom Maschinen-Typ abhängig ist.
Geben sie PHP einen vorzeichen-losen Ganzzahl-Wert, der zu groß ist für diese Art der Speicherung, wird er ins Double-Format umgesetzt, was oft zu unerwünschten Resultaten führt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
parse_ini_file() lädt die in filename angegebene Datei, und gibt die darin enthaltenen Einstellungen in einem assoziativen Array zurück.
Setzen Sie den letzten Parameter process_sections auf TRUE, erhalten Sie ein mehrdimensionales Array mit den Gruppennamen und Einstellungen.
Ist process_sections nicht angegeben, wird FALSE angenommen.
Anmerkung:
Diese Funktion hat nichts mit der php.ini zu tun, denn diese ist bereits abgearbeitet, wenn Sie Ihr Skript ausführen.
Diese Funktion ist vorgesehen, um Konfigurationsdateien für Ihre eigenen Applikationen einzulesen.
Anmerkung:
Enthält ein Wert in der ini Datei nicht alphanumerische Zeichen, so muss dieser von doppelten Anführungszeichen (") eingeschlossen sein.
Anmerkung:
Seit PHP 4.2.1 wird diese Funktion auch von safe_mode und open_basedir beeinflusst.
Die Struktur der ini Datei ist der von php.ini ähnlich.
Wenn Sie eine Konstante als einen ini Wert definieren bevor Sie parse_ini_file() aufrufen, wird diese in den Ergebnissen enthalten sein.
Es werden nur ini Werte ausgewertet.
Zum Beispiel:
Beispiel 1.
Inhalt der sample.ini
; Dies ist ein Beispiel für eine Konfigurationsdatei; Kommentare beginnen wie in der php.ini mit ';' [erste_gruppe] eins = 1 fünf = 5 animal = BIRD [zweite_gruppe] pfad = / usr / local / bin URL = "http: / /www.example.com / ~username "
Beispiel 2. parse_ini_file()
?php define ('BIRD', 'Dodo bird'); / / Ohne Gruppen analysieren $ini_array = parse_ini_file("sample.ini"); print_r($ini_array); / / Mit Gruppen analysieren $ini_array = parse_ini_file("sample.ini", TRUE); print_r($ini_array);?
Würde wie folgt ausgeben:
Array ([eins] = 1 [fünf] = 5 [animal] = Dodo bird [pfad] = / usr / local / bin [URL] = http: / /www.example.com / ~username) Array ([erste_gruppe] = Array ([eins] = 1 [fünf] = 5 [animal] = Dodo bird) [zweite_gruppe] = Array ([pfad] = / usr / local / bin [URL] = http: / /www.example.com / ~username))
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Durchsucht str als ob er der Query-String einer URL-Übergabe via GET wäre und gibt die Werte Variableninhalte zurück.
Ist der zweite Parameter arr gegeben, werden die Variablen-Werte in diesem Array als dessen Elemente gespeichert.
Anmerkung:
Der optionale zweite Parameter wurde in PHP 4.0.3 hinzugefügt.
Beispiel 1.
Der Gebrauch von parse_str :()
$str = "erster=nichts zweiter[]=etwas zweiter[]=nochwas"; parse_str($str); echo $erster; / * gibt "nichts" aus * / echo $zweiter[0]; / * gibt "etwas "aus * / echo $zweiter[1]; / * gibt "nochwas" aus * /
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion erzeugt ein assiziatives Array aus den verschiedenen Teilen einer URL.
Diese umfassen "scheme", "host", "port", "user", "pass", "path", "query", und "fragment".
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion passthru() ähnelt der Funktion exec(), da sie ebenfalls einen Befehl ausführt.
Ist der Parameter return_var angegeben, wird der Rückgabestatus des UNIX-Befehls hier abgelegt.
Sie sollten diese Funktion jedoch an Stelle von exec() bzw. system() benutzen, wenn es sich bei der Ausgabe des Unix-Befehls um binäre Daten handelt, welche direkt zum Browser zurückgeschickt werden müssen.
Ein praktisches Beispiel hierfür ist die Ausführung des pbmplus Utility, welches direkt einen Bildstream ausgibt.
Wenn Sie den Content-Type auf image / gif setzen, und dann das pbmplus Program aufrufen um ein GIF zu erzeugen, können Sie auf diesem Weg mittels PHP direkt ein Bild erzeugen und es ausgeben.
Andernfalls wird PHP solange laufen, bis das Programm beendet ist.
Siehe auch: exec(), system(), popen(), escapeshellcmd() und den Backtick Operator.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pathinfo() gibt ein assoziatives Array mit Informationen über den Pfad path zurück.
Die folgenden Arrayelemente werden zurückgegeben: den Verzeichnisnamen dirname, den Dateinamen basename, und die Dateinamenserweiterung extension.
Beispiel 1. pathinfo()
Würde ausgeben:
Anmerkung:
Informationen über das Wiederauffinden der aktuellen Pfadinformation finden Sie unter Vordefinierte Variablen.
Siehe auch dirname(), basename(), parse_url() und realpath().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schließt einen Prozess-Dateizeiger, der durch einen Aufruf von popen() geöffnet wurde.
Der Dateizeiger muss gültig sein und durch einen erfolgreichen Funktionsaufruf von popen() zurückgegeben worden sein.
Gibt den End-Status eines laufenden Prozesses zurück.
Siehe auch popen().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. pcntl_fork() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Anmerkung:
Anmerkung:
Beispiel 1. pcntl_signal() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1. possible values for pid
Tabelle 2. possible values for options
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
Funktionen zur Programmausführung
PHP Handbuch
Zurück
Nach vorne
(PHP 3 = 3.0.12, PHP 4)
Die Funktion pdf_add_annotation() fügt eine Anmerkung mit der unteren linken Ecke an der Position (llx, lly) und der oberen rechten Ecke an der Position (urx, ury) ein.
Zurück
Zum Anfang
Nach vorne
PDF Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Lesemarke wird als Kind von Mutter hinzugefügt und wird geöffnet dargestellt von der Parameter offen Die Lesemarke wird als Kind von Mutter hinzugefügt und wird geöffnet dargestellt von der Parameter offen ungleich 0 ist.
Zur Zeit wird dieser Text nicht wieder freigegeben, allerdings kümmert sich der PHP-Speichermanager darum.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_arc() zeichnet einen Kreisbogen mit dem Mittelpunkt an der Position (x-koor, y-koor) und dem Radius radius, angefangen beim Winkel Start und beendet mit dem Winkel Ende.
Siehe auch pdf_circle(), pdf_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_begin_page() beginnt eine neue Seite mit Höhe Höhe und mit der Breite Breite.
Um ein gültiges Dokument zu erzeugen muss mindestens eine Seite erzeugt werden, die mit pdf_end_page() beendet wird.
Siehe auch pdf_end_page().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_arc(), pdf_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_clip() begrenzt alle Zeichenoperationen auf das innere des aktuellen Pfads.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_open(), fclose().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_open_jpeg(), pdf_open_gif(), pdf_open_png(), pdf_open_tiff(), pdf_open_memory_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_closepath_fill_stroke() schließt, füllt das Innere des aktuellen Pfads mit der aktuellen Füllfarbe and zeichnet ein Linie entlang des Pfads.
Siehe auch pdf_closepath(), pdf_stroke(), pdf_fill(), pdf_setgray_fill(), pdf_setgray(), pdf_setrgbcolor_fill(), pdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Viele Funktion wie z.B. pdf_moveto(), pdf_circle() und pdf_rect() starten einen neuen Pfad.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_closepath_stroke() ist eine Kombination von pdf_closepath() und pdf_stroke().
Siehe auch pdf_closepath(), pdf_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_continue_text() gibt den Text text in der nächsten Zeile aus.
Siehe auch pdf_show_xy(), pdf_set_leading(), pdf_set_text_pos().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_moveto(), pdf_lineto(), pdf_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_end_page() Die Funktion pdf_end_page() beended eine Seite.
Siehe auch pdf_begin_page().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_closepath().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_fill() füllt das Innere des aktuellen Pfads mit der aktuellen Füllfarbe.
Siehe auch pdf_closepath(), pdf_stroke(), pdf_setgray_fill(), pdf_setgray(), pdf_setrgbcolor_fill(), pdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_fill_stroke() füllt das Innere des aktuellen Pfads mit der aktuellen Füllfarbe und zeichnet zudem eine Linie entlang des Pfads.
Siehe auch pdf_closepath(), pdf_stroke(), pdf_fill(), pdf_setgray_fill(), pdf_setgray(), pdf_setrgbcolor_fill(), pdf_setrgbcolor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. pdf_findfont() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pdf_get_font - - Deprecated: font handling
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pdf_get_fontname - - Deprecated: font handling
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pdf_get_fontsize - - Deprecated: font handling
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
See also pdf_open_image_file(), pdf_open_memory_image(), pdf_get_image_width().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
See also pdf_open_image_file(), pdf_open_memory_image(), pdf_get_image_height().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die pdf_set_parameter() Funktion liefert verschiedene Parameter von pdflib, die vom Typ string sind.
Siehe auch pdf_get_value(), pdf_set_value(), pdf_set_parameter().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die pdf_get_value() Funktion liefert verschiedene numerische Parameter von pdflib.
Siehe auch pdf_get_value(), pdf_set_value(), pdf_set_parameter().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_moveto(), pdf_curveto(), pdf_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_moveto() setzt die aktuelle Position auf den Punkt (x-Koor, y-koor).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion liefert ein PDF-Bild zurück.
Siehe auch pdf_close_image(), pdf_open_jpeg(), pdf_open_png(), pdf_open_tiff(), pdf_open_memory_image(), pdf_execute_image(), pdf_place_image(), pdf_put_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_open() öffnet ein neues PDF-Dokument.
Wenn keine Datei-Deskriptor übergeben wird, erfolgt die Erstellung des Dokuments im Speicher, und die Ausgabe geschieht seitenweise nach stdout bzw. zum Web-Browser.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_open_image_file() liest ein Bild des Formats Bildformat aus der Datei Dateiname und macht es für das PDF-Dokument verfügbar.
Die Funktion liefert ein PDF-Bild zurück.
Siehe auch pdf_close_image(), pdf_open_jpeg(), pdf_open_gif(), pdf_open_tiff(), pdf_open_png(), pdf_execute_image(), pdf_place_image(), pdf_put_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_open_jpeg() öffnet ein Bild im JPEG-Format, das in der Datei Dateiname gespeichert ist.
Siehe auch pdf_close_image(), pdf_open_gif(), pdf_open_tiff(), pdf_open_png(), pdf_open_memory_image(), pdf_execute_image(), pdf_place_image(), pdf_put_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_open_memory_image() nimmt ein Bild, das mit den PHP eigenen Funktion zur Bilderzeugung erstellt wurde und macht es für das PDF-Dokument verfügbar.
Die Funktion liefert ein PDF-Bild zurück.
Beispiel 1.
Einfügen eines Bildes
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion liefert ein PDF-Bild zurück.
Siehe auch pdf_close_image(), pdf_open_jpeg(), pdf_open_gif(), pdf_open_tiff(), pdf_open_memory_image(), pdf_execute_image(), pdf_place_image(), pdf_put_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion liefert ein PDF-Bild zurück.
Diese Funktion sollte nicht mehr verwendet werden.
Siehe auch pdf_close_image(), pdf_open_gif(), pdf_open_jpeg(), pdf_open_png(), pdf_open_memory_image(), pdf_execute_image(), pdf_place_image(), pdf_put_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_place_image() platziert ein Bild auf der Seite an Position (x-Koor, x-Koor).
Siehe auch pdf_put_image().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_rect() zeichnet ein Rechteck mit der unteren Ecke an der Position (x-Koor, y-Koor).
Die Höhe wird auf height gesetzt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion arbeit wie das Postscript-Kommando grestore.
Siehe auch pdf_save().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_rotate() setzt die Drehung in auf Winkel Grad.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sie wirkt wie das Postscript-Kommando gsave.
Auf pdf_save() sollte immer die Funktion pdf_restore() folgen, um die ürsprüngliche Umgebung wieder herzustellen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_scale() setzt den Skalierungsfaktor in beiden Richtungen.
Die folgende Linie hat damit eine Länge von etwa 1.41 Inch.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_set_border_color() setzt die Farbe der Umrandung von Verweisen und Anmerkungen.
Siehe auch pdf_set_border_style(), pdf_set_border_dash().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_set_border_dash() setzt die Länge der schwarzen und weißen Bereiche einer gestrichelten Umrandung von Verweisen und Anmerkungen. links and annotations.
Siehe auch pdf_set_border_style(), pdf_set_border_color().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_set_border_style() setzt den Stil und die Breite der Umrandung von Verweisen und Anmerkungen.
Siehe auch pdf_set_border_color(), pdf_set_border_dash().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
(PHP 3 = 3.0.6, PHP 4)
Siehe auch pdf_set_word_spacing(), pdf_set_leading().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wenn beide Werte 0 sind wird die Linie durchgezogen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
(PHP 3 = 3.0.6, PHP 4)
Siehe auch pdf_set_transition().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setflat() setzt the flatness auf einen Wert zwischen 0 und 100.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bei Verwendung von pdflib 0.6 müssen die Adobe Zeichensatz-Metriken (afm-Dateien) für den Zeichensatz in dem voreingestellten Verzeichnis abgelegt werden (voreingestellt ist. / font).
Einen Zeichensatz einzubetten, ist immer dann eine gute Wahl, wenn der Zeichensatz nicht sehr weit verbreitet ist, und die Person, die das Dokument lesen soll, keinen Zugriff auf den Zeichensatz hat.
Andernfalls wird der Zeichensatz mit jedem Aufruf von pdf_set_font() erneut eingebettet. (Danke an Paul Haddon, der dieses Problem gefunden hat.)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setgray_fill() setzt den aktuellen Grauwert mit dem ein Pfad gefüllt wird.
Siehe auch pdf_setrgbcolor_fill().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setgray() setzt den aktuellen Grauwert zum Zeichen und Füllen.
Siehe auch pdf_setrgbcolor_stroke(), pdf_setrgbcolor_fill().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setgray_stroke() setzt die aktuellen Grauwert zum Zeichen von Linien.
Siehe auch pdf_setrgbcolor_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_set_horiz_scaling() setzt den horizontalen Skalierungsfaktor auf Skalierung Prozent.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_set_info() Die Funktion pdf_set_info() setzt ein Feld der Dokumenteninformation.
Die Funktion kann vor dem Beginnen einer Seite aufgerufen werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
(PHP 3 = 3.0.6, PHP 4)
Siehe auch pdf_continue_text().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setlinecap() setzt den Typ der Linienende auf einen Wert zwischen 0 und 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setlinejoin() setzt die Verbindungsart von Linien auf einen Wert zwischen 0 und 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setlinewidth() setzt die Linienbreite auf Breite Punkte.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setmiterlimit() setzt the miter limit größer oder gleich 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_get_value(), pdf_set_value(), pdf_get_parameter().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setrgbcolor_fill() setzt die aktuelle Füllfarbe auf einen RGB-Farbwert.
Siehe auch pdf_setrgbcolor_fill().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setrgbcolor_stroke() setzt sowohl die aktuelle Füll - und Zeichenfarbe auf einen RGB-Farbwert.
Siehe auch pdf_setrgbcolor_stroke(), pdf_setrgbcolor_fill().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_setrgbcolor_stroke() setzt die aktuelle Zeichenfarbe auf einen RGB-Farbwert.
Siehe auch pdf_setrgbcolor_stroke().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Matrix muss als array mit sechs Parametern übergeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_set_text_pos() setzt die Position für die nächste Textausgabe mit der Funktion pdf_show().
Siehe auch pdf_show(), pdf_show_xy().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
(PHP 3 = 3.0.6, PHP 4)
Die möglichen Werte für den Parameter Modus sind 0=ausgefüllt, 1=nur die Umrandung, 2=ausgefüllt und die Umrandung, 3=unsichtbar, 4=ausgefüllt und Hinzunahme zum Begrenzungspfad (cliping path), 5=Umrandung und Hinzunahme zum Begrenzungspfad, 6=ausgefüllt, umrandet und Hinzunahme zum Begrenzungspfad, 7=nur Hinzunahme zum Begrenzungspfad.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
(PHP 3 = 3.0.6, PHP 4)
Die Funktion pdf_set_text_rise() setzt die Textverschiebung nach oben auf Verschiebung Punkte.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_get_value(), pdf_set_parameter(), pdf_get_parameter().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
(PHP 3 = 3.0.6, PHP 4)
Siehe auch pdf_set_char_spacing(), pdf_set_leading().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Größe der Box ist Höhe mal Breite.
Wenn Höhe und Breite NULL sind, darf Modus auf "left", "right" oder "center "gesetzt werden.
Wird im Parameter Feature der Wert "blind" übergeben, wird der Text nicht auszugeben.
See also pdf_show(), pdf_show_xy().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_show_xy(), pdf_show_boxed(), pdf_set_text_pos(), pdf_set_font().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pdf_show(), pdf_show_boxed().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die pdf_skew() Funktion schert das Koordinatensystem um alpha (x) und beta (y) Grad. alpha und beta dürfen weder 90 noch 270 Grad sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_stringwidth() liefert die Breite eines Textes text unter Verwendung des aktuellen Zeichensatzes.
Um diese Funktion benutzen zu können muss zuvor ein Zeichensatz mit pdf_set_font() gesetzt worden sein.
Siehe auch pdf_set_font().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion pdf_stroke() Die Funktion pdf_stroke() zeichnet eine Linie entlang des aktuellen Pfads.
Ohne Aufruf dieser Funktion würde die Linie nicht erscheinen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das folgende Beispiel zeichnet eine Linie vom Punkt (0, 0) zum Punkt (200, 200) relativ zum anfänglichen Ursprung.
?php pdf_moveto( $pdf, 0, 0); pdf_lineto($pdf, 100, 100); pdf_stroke($pdf); pdf_translate($pdf, 100, 100); pdf_moveto($pdf, 0, 0); pdf_lineto($pdf, 100, 100); pdf_stroke($pdf);?
Zurück
Zum Anfang
Nach vorne
Nach oben
Verisign Payflow Pro Funktionen
PHP Handbuch
Zurück
Nach vorne
pfpro_cleanup() veranlasst eine saubere Schliessung der Payflow Pro-Bibliothek.
Auf einen Aufruf dieser Funktion kann verzichtet werden, da die Erweiterung automatisch ein pfpro_cleanup() ausführen wird, nachdem das Script beendet wurde.
Siehe auch pfpro_init().
Zurück
Zum Anfang
Nach vorne
Verisign Payflow Pro Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
pfpro_init() wird benutzt, um die Payflow Pro Bibliothek zu initialisieren.
Auf einen Aufruf dieser Funktion kann verzichtet werden, da pfpro_init() automatisch vor der ersten Transaktion aufgerufen wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen assoziativen Array, der die Antwort enthält, zurück.
pfpro_process() führt eine Transaktion mir Payflow Pro aus.
Diese werden kodiert und an den PFPro-Prozessor weitergegeben.
Der zweite Parameter ist optional und gibt den Host an, zu dem das Script sich verbinden soll.
Voreingestellt ist "test.signio.com", normalerweise sollte dies in "connect.signio.com" geändert werden, um Transaktionen durchzuführen.
Der dritte Parameter gibt den Port an, auf den das Script sicher verbinden soll.
Voreingstellt ist 443, der Standard-SSL-Port.
Der vierte Parameter gibt den Timeout-Wert in Sekunden an.
Voreingestellt ist der Wert 30 Sekunden.
Dieser Timeout gilt jedoch nur zu Beginn des Scripts, also kann es durchaus sehr lange dauern, wenn ein Netzwerkproblem auftritt, nachdem die Verbindung erfolgreich hergestellt wurde.
Der fünfte Parameter gibt den SSL-Proxy an, falls dieser benötigt wird.
Der sechste Parameter gibt den Port des Proxys an.
Der siebte und der achte Parameter geben den Login-Namen und das Login-Passwort an.
Die Funktion gibt einen assoziativen Array der Schlüssel und Werte zurück.
Anmerkung:
Bitte lesen sie die Payflow Pro Entwicklerdokumentation für alle Details zu den erforderlichen Parametern.
Beispiel 1.
Payflow Pro Beispiel
?php pfpro_init(); $transaction = array(USER = 'mylogin', PWD = 'mypassword', TRXTYPE = 'S', TENDER = 'C', AMT = 1.50, ACCT = '4111111111111111', EXPDATE = '0904 '); $response = pfpro_process($transaction); if (!$response) {die("Couldn't establish link to Verisign.\n");} echo "Verisign response code was ".$response[RESULT]; echo ", which means: ".$response[RESPMSG] ."\n"; echo "\nThe transaction request:"; print_r($transaction); echo "\nThe response: "; print_r($response); pfpro_cleanup();?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Antwort in einem String zurück.
pfpro_process_raw() führt eine rohe Transaktion mit Payflow Pro durch.
Es sollte jedoch auf jeden Fall pfpro_process() verwendet werden, da sonst keinerlei Normung vorliegt.
Der erste Parameter ist ein String, der die rohe Transaktionsanfrage enthält.
Alle anderen Parameter sind die Selben wie bei pfpro_process().
Der Rückgabewert ist ein String, der die rohe Antwort enthält.
Anmerkung:
Bitte lesen sie die Payflow Pro Entwicklerdokumentation für alle Details zu den erforderlichen Parametern.
Es wird empfohlen, die Funktion pfpro_process() zu verwenden.
Beispiel 1.
Payflow Pro Beispiel für den Raw-Modus
?php pfpro_init(); $response = pfpro_process("USER=mylogin PWD[5]=m ndy TRXTYPE=S TENDER=C AMT=1.50 ACCT=4111111111111111 EXPDATE=0904"); if (!$response) {die("Couldn't establish link to Verisign.\n");} echo "Verisign raw response was ".$response; pfpro_cleanup();?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pfpro_version() gibt die Versionsinformationen der Payflow Pro Bibliothek zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Optionen und Informationen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion beinhaltet das gleiche wie fsockopen() mit dem Unterschied, dass die Verbindung nicht beendet wird, sobald das Script beendet wird.
Sie ist die permanente-Version von fsockopen().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_affected_rows() gibt die Anzahl der Tupels (Instanzen / Datensätze / Zeilen) zurück, die von einer mit pg_query() ausgeführten INSERT-, UPDATE - oder DELETE-Abfrage betroffen wurden.
Die Funktion liefert 0 zurück, wenn kein Datensatz betroffen wurde.
Beispiel 1. pg_affected_rows()
?php $result = pg_query ($conn, "INSERT INTO publisher VALUES ('Author')"); $cmdtuples = pg_affected_rows ($result); echo $cmdtuples. "Datensätze wurden betroffen .";?
Anmerkung:
Diese Funktion entspricht der Funktion pg_cmdtuples().
Siehe auch pg_query() und pg_num_rows().
Zurück
Zum Anfang
Nach vorne
PostgreSQL Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_cancel_query() löscht eine asynchrone Abfrage, die mit pg_send_query() gesendet wurde.
Abfragen, die mit pg_query() gesendet wurden, können nicht gelöscht werden.
Siehe auch pg_send_query() und pg_connection_busy()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_client_encoding() gibt die Kodierung des Clients als String zurück.
Dieser String sollte einen der folgenden Werte beinhalten:
Anmerkung:
Diese Funktion arbeitet ab PHP Versin 4.0.3 oder höher und PostgreSQL 7.0 oder höher.
Wenn die libpq ohne multibyte encoding Unterstützung kompiliert wurde, gibt pg_set_client_encoding() immer "SQL_ASCII "zurück.
Die unterstützten Kodierungen sind von der PostgreSQL-Version abhängig.
Weitere Informationen, wie Sie multibyte Unterstützung aktivieren, und welche Kodierungen unterstützt werden, entnehmen Sie dem PostgreSQL-Manual.
Diese Funktion ersetzt die Funktion pg_clientencoding().
Siehe auch pg_set_client_encoding().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_close() schließt die nichtpersistente Verbindung zu einem PostgreSQL-Datenbankserver, die durch die angegebene connection Kennung bezeichnet wird.
Falls connection eine gültige Verbindungskennung ist, wird TRUE zurückgegeben, anderenfalls FALSE.
Falls es auf dieser Verbindung geöffnete Large Objects gibt, sollten Sie diese schließen, bevor Sie die Verbindung schließen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_connect() gibt eine Verbindungskennung zurück, die von anderen PostgreSQL-Funktionen benötigt wird.
pg_connect() öffnet eine Verbindung zu einer PostgreSQL Datenbank, die durch den connection_string näher bezeichnet wird.
Zurückgegeben wird bei Erfolg eine Verbindungskennung oder FALSE, falls die Verbindung nicht zustande kam.
Der connection_string sollte in Anführungszeichen stehen und keine Kommas zwischen den Parametern haben.
Beispiel 1. pg_connect benutzen
?php $dbconn = pg_connect ("dbname=mary"); / /Verbindungsaufbau zu einer Datenbank namens "mary "$dbconn2 = pg_connect ("host=localhost port=5432 dbname=mary"); / / Verbindungsaufbau zu einer Datenbank namens "mary" auf dem / / Host "localhost "über den (Standard -)Port "5432" $dbconn3 = pg_connect ("host=sheep port=5432 dbname=mary user=lamb password=foo"); / /Verbindungsaufbau zu einer Datenbank namens "mary "auf dem Host / / "sheep" mit dem Benutzernamen "lamb "und dem Passwort "foo" $conn_string = "host=sheep port=5432 dbname=test user=lamb password=bar"; $dbconn4 = pg_connect ($conn_string); / /Verbindungsaufbau zu einer Datenbank namens "test "auf dem Host / /"sheep" unter dem Benutzernamen "lamb "mit dem Passwort "bar"?
Falls ein zweiter Aufruf von pg_connect() mit demselben connection_string gemacht wird, wird keine neue Verbindung geöffnet, sondern es wird die Verbindungskennung der bereits geöffneten Verbindung zurückgegeben.
Mit unterschiedlichen Verbindungsstrings können Sie mehrere Verbindungen zu derselben Datenbank öffnen.
Die Syntax $conn = pg_connect ("host", "port", "options", "tty", "dbname") ist veraltet und sollte nicht mehr benutzt werden.
Siehe auch pg_pconnect(), pg_close(), pg_host(), pg_port(), pg_tty(), pg_options() und pg_dbname().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_connection_busy() gibt TRUE zurück, falls die Verbindung gerade benutzt wird.
Ist dies der Fall, wird die zuvor an den Server gesendete Abfrage noch bearbeitet.
Ein Aufruf von pg_get_result() wir dann blockiert.
Siehe auch pg_connection_status() und pg_get_result()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_connection_reset() setzt die Verbindung zurück und erstellt sie mit denselben Argumenten neu.
Falls die Verbindung erfolgreich neu aufgebaut werden konnte, wird TRUE zurückgegeben, FALSE sonst.
Siehe auch pg_connect(), pg_pconnect() und pg_connection_status()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_connection_status() gibt den Status der Verbindung zurück.
PGSQL_CONNECTION_OK oder PGSQL_CONNECTION_BAD.
Siehe auch pg_connection_busy()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_copy_from() fügt Datensätze aus einem Array in eine Tabelle ein.
Intern wird der COPY -Befehl aufgerufen.
Bei Erfolg gibt die Funktion TRUE zurück, FALSE sonst.
Siehe auch pg_copy_to()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_copy_to() kopiert eine Tabelle in ein Array.
Die Funktion gibt das Array als Ergebnis zurück, falls die Aktion erfolgreich war, anderenfalls FALSE.
Siehe auch pg_copy_from()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_dbname() gibt den Namen der Datenbank, deren connection Kennung übergeben wurde, zurück - oder FALSE, wenn connection eine ungültige Kennung ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. pg_delete
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_end_copy() syncronisiert das PostgreSQL-Frontend (normalerweise ein Prozess des Webservers) mit dem PostgreSQL-Server nach einer Kopier-Operation, die von der Funktion pg_put_line() durchgeführt wurde. pg_end_copy() muss aufgerufen werden, da sonst der PostgreSQL-Server einen "out of sync "Fehler mit dem Frontend meldet.
Die Funktion gibt bei Erfolg TRUE zurück, FALSE sonst.
Weitere Details und ein Beispiel finden Sie bei der Funktion pg_put_line().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_escape_string() maskiert Binärdaten so, dass sie als bytea-Stream in eine Tabelle eingefügt werden können.
Der Rückgabewert ist der maskierte String.
Anmerkung:
Wenn Sie mit SELECT Daten vom Typ bytea abfragen, gibt PostgreSQL die Oktalwerte der einzelnen Datenbytes zurück, die mit einem Backslash gequoted (z.B. \032).
Diese Werte müssen vom Benutzer in das Binärformat zurückkonvertiert werden.
Diese Funktion setzt PostgreSQL 7.2 oder höher voraus.
Mit den PostgreSQL-Versionen 7.2.0 und 7.2.1 muss der Typ bytea konvertiert werden, falls die multi-byte-Unterstützung benutzt wird, z.B.
Ab der PostgreSQL-Version 7.2.2 und höher, muss kein Typecast mehr durchgeführt werden.
Es sei denn, die Codierungen von Client und Backend passen nicht zusammen, was zu einem multi-byte Streamfehler führen kann.
Um diesen Fehler zu vermeiden, muss der Stream zu bytea konvertiert werden.
Neuere PostgreSQL-Versionen werden eine unescape-Funktion unterstützen, diese eingebaute unescape-Funktion wird in PHP übernommen, sobald sie verfügbar ist.
Siehe auch pg_escape_string()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_escape_string() Maskiert einen String für die text / char Datentypen von Postgresql.
Der Rückgabewert ist der maskierte String.
Diese Funktion sollte anstelle von addslashes() verwendet werden.
Anmerkung:
Diese Funktion setzt PostgreSQL 7.2 oder höher voraus.
Siehe auch pg_escape_bytea()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_fetch_array() gibt ein Array zurück, das die gelesene Zeile (Tupel, Datensatz) enthält.
Falls keine Zeile mehr gelesen werden konnte, wird FALSE zurückgegeben.
pg_fetch_array() ist eine erweiterte Version von pg_fetch_row().
Zusätzlich zur Speicherung der Daten in einem nummerischen Array (mit den Feldindizes) speichert diese Funktion die Daten standrardmäßig in einem assoziativen Array mit den Feldnamen als Indizes.
row ist die Zeilennummer des Datensatzes, der gelesen werden soll.
Die Zählung beginnt bei 0.
result_type ist ein optionaler Parameter, der angibt, wie der Rückgabewert initialisiert wird. result_type ist eine Konstante, die die folgenden Werte annehmen kann:
PGSQL_ASSOC, PGSQL_NUM, und PGSQL_BOTH. pg_fetch_array() gibt mit PGSQL_ASSOC ein assoziatives Array mit Feldnamen als Schlüssel zurück, mit PGSQL_NUM wird ein nummerisches Array mit den Feldnummern zurückgegeben und mit PGSQL_BOTH wird ein Array mit beiden Indizes zurückgegeben.
PGSQL_BOTH ist die Standardeinstellung.
pg_fetch_array() ist NICHT wesentlich langsamer als pg_fetch_row(), obwohl eine umfassendere Funktion zur Verfügung gestellt wird.
Siehe auch pg_fetch_row(), pg_fetch_object() und pg_fetch_result().
Beispiel 1.
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "Ein Fehler ist aufgetreten.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM authors"); if (!$result) {echo "Ein Fehler ist aufgetreten.\n"; exit;} $arr = pg_fetch_array ($result, 0, PGSQL_NUM); echo $arr[0]. "- array\n"; $arr = pg_fetch_array ($result, 1, PGSQL_ASSOC); echo $arr["autor"]." - array\n";?
Anmerkung:
Ab der Version 4.1.0 ist der Parameter row optional.
Ein Aufruf von pg_fetch_array() inkrementiert den internen Datensatzzähler um 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_fetch_object() gibt ein Objekt zurück, dessen Eigenschaften mit den Feldern des erhaltenen Datensatzes übereinstimmen oder FALSE, wenn kein Datensatz mehr gelesen werden konnte oder ein Fehler auftrat.
Statt eines Arrays wird ein Objekt zurückgegeben.
Indirekt heisst das, dass man die Daten nur über die Feldnamen und nicht über ihre Offsets ansprechen kann (Zahlen sind nicht erlaubte Eigenschaftsnamen).
row ist die Zeilennummer, die Nummerierung beginnt bei 0.
Von der Geschwindigkeit her ist die Funktion mit pg_fetch_array() identisch und fast so schnell wie pg_fetch_row() (Der Unterschied ist unwesentlich).
Anmerkung:
Ab der PHP-Version 4.3.0 ist die Standardeinstellung von result_type PGSQL_ASSOC, während PGSQL_BOTH in älteren Versionen voreingestellt ist.
Da nummerische Eigenschaftsnamen von Objekten nicht erlaubt sind, ist PGSQL_BOTH überflüssig.
result_type wird möglicherweise in zukünftigen Versionen gelöscht werden.
Siehe auch pg_query(), pg_fetch_array(), pg_fetch_row() und pg_fetch_result().
Beispiel 1.
PostgreSQL fetch object
H1 Konnte keine Verbindung zur PostgreSQL Datenbank ?php echo $database;? herstellen. / H1 ?php exit; endif; $qu = pg_query ($db_conn, "SELECT * FROM verlag ORDER BY autor"); $row = 0; / / PostgreSQL braucht einen Zähler, andere DBs evtl. nicht while ($data = pg_fetch_object ($qu, $row)) {echo $data - autor. "("; echo $data - jahr ."):"; echo $data - titel. "BR"; $row++;}?
PRE ?php $fields[] = Array ("autor", "Author"); $fields[] = Array ("jahr", "Jahr"); $fields[] = Array ("titel"," Titel"); $row= 0; / / PostgreSQL braucht einen Zähler, andere DBs evtl. nicht while ($data = pg_fetch_object ($qu, $row)) {echo "----------\n"; reset ($fields); while (list (,$item) = each ($fields)): echo $item[1] .": ".$data - $item[0] ."\n"; endwhile; $row++;} echo "----------\n";? / PRE ?php pg_free_result ($qu); pg_close ($db_conn);?
Anmerkung:
Ab der Version 4.1.0 ist der Parameter row optional.
Ein Aufruf von pg_fetch_object() inkrementiert den internen Datensatzzähler um 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Parameter row_number ist ein Integerwert. field ist entweder der Feldname als String oder der Feldindex als integer.
Die Parameter row_number und field bezeichnen die Zelle der Ergebnismenge, die ausgelesen werden soll.
Die Zeilennummerierung beginnt bei 0.
Anstatt die Felder durch ihre Namen anzugeben, können Sie auch den Feldindex benutzen.
Dieser beginnt ebenfalls bei 0 und ist eine ungequotete Zahl.
PostgreSQL unterstützt viele eingebaute Datentypen und nur die grundlegenden werden direkt von PHP unterstützt.
Alle Formen von integer -, boolean - und void-Typen werden als integer -Werte zurückgegeben.
Alle Formen von float - und real-Typen werden als float -Werte zurückgegeben.
Alle anderen Typen, einschließlich Arrays werden als Strings zurückgegeben, in der durch den psql -Befehl bekannten PostgreSQL-Standardformatierung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_fetch_row() holt einen Datensatz der Ergebnismenge, die durch die Ergebniskennung result bezeichnet wird.
Die Zeile (Datensatz) wird als nummerisches Array zurückgegeben.
Jedes Ergebnisfeld wird in einer Arraykomponente gespeichert, angefangen bei Offset 0.
Zurückgegeben wird ein Array, dessen Komponenten der gelesenen Zeile entsprechen, oder FALSE, falls keine Zeile gelesen werden konnte.
Siehe auch: pg_query(), pg_fetch_array(), pg_fetch_object() und pg_fetch_result().
Beispiel 1.
PostgreSQL fetch row
?php $conn = pg_pconnect ("dbname=verlag"); if (!$conn) {echo "Es ist ein Fehler aufgetreten.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM autoren"); if (!$result) {echo "Es ist ein Fehler aufgetreten.\n"; exit;} $num = pg_num_rows($result); for ($i=0; $i $num; $i++) {$r = pg_fetch_row($result, $i); for ($j=0; $j count($r); $j++) {echo "$r[$j] nbsp ;";} echo "BR";}?
Anmerkung:
Ab der Version 4.1.0 ist der Parameter row optional.
Ein Aufruf von pg_fetch_row() inkrementiert den internen Datensatzzähler um 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_field_is_null() prüft, ob ein Feld NULL ist.
Die Funktion liefert 1 zurück, wenn das Feld in der übergebenen Zeile NULL ist und 0, wenn das Feld NICHT NULL ist.
Das zu prüfende Feld kann als Spaltenindex (Nummer) oder Feldname (String) angegeben werden.
Die Nummerierung der Felder eines Datensatzes beginnt bei 0.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_fieldisnull().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_field_name() gibt den Feldnamen mit der übergebenen field_number aus der durch result bezeichneten PostgreSQL-Ergebnismenge zurück.
Die Feldnummerierung beginnt bei 0.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_fieldname().
Siehe auch pg_field_num().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_field_num() gibt die Nummer der Spalte (Feld) aus, die zu dem übergebenen field_name in dem duch result bezeichneten PostgreSQL-Ergebnis gehört.
Die Feldnummerierung beginnt bei 0.
Diese Funktion gibt bei einem Fehler -1 aus.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_fieldnum().
Siehe auch pg_field_name().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_field_prtlen() gibt die aktuelle Länge (Anzahl der Zeichen) eines bestimmten Wertes in einem PostgreSQL result pg_field_prtlen() gibt die aktuelle Länge (Anzahl der Zeichen) eines bestimmten Wertes in einem PostgreSQL result zurück.
Die Feldnummerierung beginnt bei 0.
Die Funktion liefert bei einem Fehler -1 zurück.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_fieldprtlen().
Siehe auch pg_field_size().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_field_size() liefert die interne Speichergrösse (in Bytes) des angegebenen Feldes in dem durch result pg_field_size() liefert die interne Speichergrösse (in Bytes) des angegebenen Feldes in dem durch result bezeichneten PostgreSQL-Ergebnis zurück.
Die Feldnummerierung beginnt bei 0.
Eine Feldgrösse von -1 deutet auf ein Feld mit variabler Länge hin.
Diese Funktion gibt im Fehlerfall FALSE zurück.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_fieldsize().
Siehe auch pg_field_len() und pg_field_type().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_field_type() liefert einen String, der den Feldtyp des mit field_number bezeichneten Feldes aus dem mit result bezeichneten PostgreSQL-Ergebnis enthält.
Die Feldnummerierung beginnt bei 0.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_fieldtype().
Siehe auch pg_field_len() und pg_field_name().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_free_result() braucht nur aufgerufen zu werden, wenn man befürchten muss, dass während des Skripts zu viel Speicher verbraucht wird.
Der Speicherplatz, den Ergebnisse belegen, wird automatisch nach Beendigung des Skriptes freigegeben.
Wer allerdings sicher ist, die Ergebnisdaten innerhalb des Skriptes nicht mehr zu benötigen, kann pg_free_result() mit dem Parameter result aufrufen, und der entsprechende Speicher wird freigegeben.
Bei Erfolg wird TRUE zurückgegeben und FALSE sonst.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_freeresult().
Siehe auch pg_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Mit pg_send_query() können mehrere Abfragen an den Server geschickt werden, deren Ergebnisse mit pg_get_result() nacheinander abgefragt werden können.
Die Funktion gibt die Ergebniskennung zurück oder FALSE, falls es keine Ergebnisse mehr gibt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_host() gibt den Namen des Hosts zurück, zu dem mit der angegebenen PostgreSQL connection verbunden wurde.
Siehe auch pg_connect() und pg_pconnect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. pg_insert
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_last_error() gibt einen String zurück, der die letzte Fehlermeldung einer durch connection gegebenen Verbindung enthält.
Fehlermeldungen können durch interne PostgreSQL - (libpq) Funktionsaufrufe überschrieben werden.
Falls mehrere Fehler innerhalb einer internen PostgreSQL-Funktion auftreten, wird möglicherweise keine passende Fehlermeldung angezeigt.
Verwenden Sie pg_result_error(), pg_result_status() und pg_connection_status() für eine bessere Fehlerbehandlung.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_errormessage().
Siehe auch pg_result_error().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_last_notice() gibt die letzte NOTICE-Meldung des PostgreSQL Servers für die angegebene connection zurück.
Der PostgreSQL-Server sendet zu unterschiedlichen Anlässen NOTICE-Meldungen an den Client, beispielsweise, wenn eine Transaktion nicht weiter ausgeführt werden kann.
In diesem Fall kann man mit der Funktion pg_last_notice() das Senden nutzloser Abfragen vermeiden, indem man prüft, ob eine NOTICE-Meldung sich auf die Transaktion bezieht oder nicht.
Warnung
Diese Funktion ist EXPERIMENTELL und noch nicht vollständig implementiert. pg_last_notice() wurde mit der Version 4.0.6 eingeführt.
Diese Version hat jedoch Probleme mit der Verarbeitung der NOTICE-Meldungen.
Von der Benutzung des PostgreSQL-Moduls in PHP 4.0.6 wird abgeraten, auch wenn Sie die Funktion pg_last_notice() nicht nutzen.
In der Version 4.3.0 wird diese Funktion vollständig implementiert sein.
Die Versionen vor 4.3.0 ignorieren den Parameter connection.
Beachten Sie, dass Sie das Ausgeben der NOTICE-Meldungen auf optional setzen können, indem Sie ab PHP 4.3.0 pgsql.ignore_notice ini auf den Wert 1 setzen.
Das Protokollieren der NOTICE-Meldungen kann auf optional gesetzt werden, indem pgsql.log_notice ini ab PHP 4.3.0 auf den Wert 0 gesetzt wird.
NOTICE-Meldungen können nur protokolliert werden, wenn pgsql.ignore_notice den Wert 0 hat.
Siehe auch pg_query() und pg_last_error().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_last_oid() wird benutzt, um den Object Identifier oid, der einem eingefügten Datensatz (Tupel) zugewiesen wurde, auszulesen. result muss die Ergebniskennung des letzten Kommandos sein, das mit pg_query() an den Server gesendet wurde, und dieses Kommando muss ein INSERT gewesen sein.
Die Funktion gibt einen positiven Integerwert zurück, wenn es einen gültigen oid gibt.
Falls ein Fehler auftritt, oder das letzte Kommando, das mit pg_query() gesendet wurde, kein INSERT war, oder der INSEERT fehlgeschlagen ist, wird FALSE zurückgegeben.
Das OID-Feld (Datensatznummer) wurde in der PostgreSQL-Version 7.2 optional.
Falls eine Tabelle ohne OID definiert wurde, muss mit der Funktion pg_result_status() geprüft werden, ob ein Datensatz korrekt eingefügt wurde.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_getlastoid().
Siehe auch pg_query() und pg_result_status().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_lo_close() schließt ein Large Object. large_object ist eine Referenz auf das Large Object, das mit pg_lo_open() geöffnet wurde.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_loclose().
Siehe auch pg_lo_open(), pg_lo_create() und pg_lo_import().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_lo_create() erzeugt ein Large Object und liefert dessen oid zurück. connection bezeichnet eine gültige Datenbankverbindung, die mit pg_connect() oder pg_pconnect() geöffnet wurde.
Die Zugriffsmethoden von PostgreSQL, INV_READ, INV_WRITE und INV_ARCHIVE werden nicht unterstützt, ein Large Object wird immer mit Lese - und Schreibzugriff erzeugt.
INV_ARCHIVE wurde von PostgreSQL selber (ab Version 6.3 und höher) entfernt.
Die Funktion gibt den Objektbezeichner oid des Large Objects zurück oder FALSE, falls ein Fehler auftrat.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_locreate().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Argument oid ist der Objektbezeichner des Large Objects, oid, das exportiert werden soll und pathname Das Argument oid ist der Objektbezeichner des Large Objects, oid, das exportiert werden soll und pathname ist der Pfad der Datei.
Falls ein Fehler auftritt, wird FALSE zurückgegeben, anderenfalls TRUE.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_loexport().
Siehe auch pg_lo_import().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Argument pathname Das Argument pathname bezeichnet den Pfad zu der Datei, die als Large Object importiert werden soll.
Die Funktion gibt den Objektbezeichner, oid, des gerade erzeugten Large Objects zurück oder FALSE, falls ein Fehler auftrat.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Wenn Safe Mode aktiviert ist, überprüft PHP, ob die Dateien / Verzeichnisse die mit dem Skript bearbeitet werden sollen, die gleiche UID haben wie das Skript selbst.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_loimport().
Siehe auch pg_lo_export() und pg_lo_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_lo_open() öffnet ein Large Object und gibt einen Handler (eine Referenz) zurück.
Mögliche Werte für mode sind "r", "w" oder "rw ".
Bei einem Fehler wird FALSE zurückgegeben.
Warnung
Bevor Sie die Datenbankverbindung schließen, müssen Sie das Large Object wieder schließen.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_loopen().
Siehe auch pg_lo_close() und pg_lo_create().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_lo_read_all() liest ein Large Object vollständig und übergibt es direkt an den Browser, nachdem alle entsprechenden Header gesendet wurden.
Die Funktion wird hauptsächlich für Binärdaten wie Bilder oder Sound genutzt.
Falls ein Fehler aufgetreten ist, wird FALSE zurückgegeben.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_loreadall().
Siehe auch pg_lo_read().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Argument large_object bezeichnet einen gültigen Handler für ein Large Object und len gibt die maximal erlaubte Grösse des Segmentes des Large Objects an.
Bei einem Fehler wird FALSE zurückgegeben.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_loread().
Siehe auch pg_lo_read_all().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pg_lo_tell().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch pg_lo_seek().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_lo_unlink() löscht das Large Object mit dem Objektbezeichner oid.
Bei Erfolg wird TRUE zurückgegeben, FALSE sonst.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_lounlink().
Siehe auch pg_lo_create() und pg_lo_import().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_lo_write() schreibt aus einer Variablen höchstens data in ein großes Objekt und liefert die Anzahl der tasächlich geschriebenen Bytes zurück, oder FALSE, wenn ein Fehler auftrat. large_object ist der Handler des Large Objects, der von der Funktion pg_lo_open() zurückgegeben wurde.
Um die Large Object (lo) Schnittstelle benutzen zu können, müssen die Kommandos innerhalb einer Transaktion ausgeführt werden.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_lowrite().
Siehe auch pg_lo_create() und pg_lo_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_num_fields() liefert die Anzahl der Felder (Spalten) eines PostgreSQL result.
Das Argument ist eine gültige Ergebniskennung, die von pg_query() zurückgegeben wurde.
Diese Funktion gibt im Fehlerfall -1 aus.
Anmerkung:
Diese Funktion ersetzt die Funktion pg_numfields().
Siehe auch pg_num_rows() und pg_affected_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Argument result ist eine gültige Ergebniskennung, die von pg_query() zurückgegeben wurde.
Diese Funktion gibt im Fehlerfall -1 zurück.
Anmerkung:
Um die Anzahl der von einer INSERT-, UPDATE - oder DELETE-Operation betroffener Zeilen zu erhalten, benutzen Sie die Funktion pg_affected_rows().
Anmerkung:
Diese Funktion ersetzt die Funktion pg_numrows().
Siehe auch pg_num_fields() und pg_affected_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_options() liefert einen String, der die Verbindungsoptionen der durch connection bezeichneten Verbindung enthält.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_pconnect() öffnet eine Verbindung zu einer PostgreSQL-Datenbank.
Zurückgegeben wird eine Verbindungskennung, die von anderen PostgreSQL-Funktionen benötigt wird.
Eine Beschreibung des Parameters connection_string finden Sie bei der Funktion pg_connect().
Um persostente Verbindungen zu ermöglichen, muss die pgsql.allow_persistent -Direktive in php.ini auf den Wert "On" gesetzt sein (was der Standardeinstellung entspricht).
Die maximale Anzahl geöffneter persistenter Verbindungen kann mit der Direktive pgsql.max_persistent in php.ini Die maximale Anzahl geöffneter persistenter Verbindungen kann mit der Direktive pgsql.max_persistent in php.ini definiert werden (der Standardwert ist -1, der für unbegrenzt steht).
Die Gesamtanzahl der Verbindungen kann mit der pgsql.max_links -Direktive in php.ini gesetzt werden.
pg_close() schließt keine persistenten Verbindungen, die mit pg_pconnect() geöffnet wurden.
Siehe auch pg_connect().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_port() gibt die Portnummer der durch die Kennung connection bezeichneten PostgresSQL-Verbindung zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_put_line() sendet eine NULL-terminierte Zeichenkette an den PostgreSQL-Server.
Diese Funktion ist nützlich, um bespielsweise Daten mit hoher Geschwindigkeit mit dem Copy-Befehl von PostgreSQL in eine Datenbanktabelle einzufügen.
Das abschliessende NULL-Zeichen wird automatisch hinzugefügt.
Liefert TRUE im Erfolgsfall, sonst FALSE.
Anmerkung:
Beachten Sie, dass eine Anwendung explizit die beiden Zeichen "\." auf der der letzten Zeile senden muss, um dem Server das Ende der Übertragung anzuzeigen.
Siehe auch pg_end_copy().
Beispiel 1.
Schnelles Einfügen von Daten in eine Tabelle
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_query() gibt eine Ergebniskennung zurück, falls die Funktion ausgeführt werden konnte.
Bei einem Fehlschlag, oder wenn connection keine gültige Verbindungskennung ist, wird FALSE zurückgegeben.
Details über einen aufgetretenen Fehler können mit der Funktion pg_last_error() abgefragt werden, sofern die Verbindung geöffnet ist. pg_last_error() sendet einen SQL-Befehl an die durch connection bezeichnete Datenbank. connection muss eine gültige Verbindungskennung sein, die von pg_connect() oder pg_pconnect() zurückgegeben wurde.
Der Rückgabewert dieser Funktion ist eine Ergebniskennung, die von anderen PostgreSQL-Funktionen, wie etwa pg_fetch_array() benutzt wird.
Falls connection nicht angegeben wird, wird die Verbindung benutzt, die zuletzt mit pg_connect() oder pg_pconnect() geöffnet wurde.
Obwohl der Parameter connection ausgelassen werden kann, wird dies nicht empfohlen, weil es zu schwer auffindbaren Fehlern in einem Skript führen kann.
Anmerkung:
Aus Gründen der Kompatibilität wird pg_exec() weiterhin unterstützt, wir empfehlen aber den Benutzern, den neuen Namen zu verwenden.
Siehe auch pg_connect(), pg_pconnect(), pg_fetch_array(), pg_fetch_object(), pg_num_rows(), und pg_affected_rows().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_result_error() gibt die mit der Ergebniskennung result pg_result_error() gibt die mit der Ergebniskennung result verknüpfte Fehlermeldung zurück.
So kann der Benutzer qualifiziertere Fehlermeldungen erhalten als mit der Funktion pg_last_error().
Siehe auch pg_query(), pg_send_query(), pg_get_result(), pg_last_error() und pg_last_notice()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_result_status() gibt den Status einer Ergebniskennung zurück.
PGSQL_EMPTY_QUERY, PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_TO, PGSQL_COPY_FROM, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR und PGSQL_FATAL_ERROR.
Siehe auch pg_connection_status().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. pg_select
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_send_query() sendet eine asynchrone Abfrage auf der Verbindung connection.
Im Unterschied zu pg_query() können hier mehrere Abfragen an den Server gesendet werden und die Ergebnisse nacheinander mit pg_get_result() geholt werden.
Die Ausführung eines Skripts wird während der Abarbeitung der Anfragen nicht blockiert.
Benutzen Sie die Funktion pg_connection_busy() um zu prüfen, ob die Verbindung gerade benutzt wird (z.B. ob gerade eine Abfrage ausgeführt wird).
Mit der Funktion pg_cancel_query() können Sie die Abfrage löschen.
Obwohl man mehrere Abfragen auf einmal an den Server senden kann, können die Abfragen nicht über eine gerade benutzte Verbindung geschickt werden.
Falls die Abfragen gesendet werden, während die Verbindung benutzt wird, wird abgewartet, bis die letzte Abfrage fertig ist und alle Ergebnisse werden verworfen.
Siehe auch pg_query(), pg_cancel_query(), pg_get_result() und pg_connection_busy()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_set_client_encoding() setzt die Kodierung des Clients und gibt bei Erfolg 0 zurück, anderenfalls -1.
encoding ist die Kodierung des Clients und kann einen der Werte SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE, MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5 odeer WIN1250 haben.
Die verfügbaren Kodierungen sind von Ihrer PostgreSQL-Version und der libpq abhängig.
Schauen Sie im PostgreSQL-Manual, welche Kodierung Ihre Version unterstützt.
Anmerkung:
Diese Funktion arbeitet ab PHP Version 4.0.3 oder höher und PostgreSQL 7.0 oder höher.
Die unterstützten Kodierungen sind von der PostgreSQL-Version abhängig.
Weitere Informationen entnehmen Sie dem PostgreSQL-Manual.
Diese Funktion ersetzt die Funktion pg_setclientencoding().
Siehe auch pg_client_encoding().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_trace() ermöglicht die Protokollierung der frontend / backend Kommunikation in eine Debug-Datei, die durch den Pfadnamen pathname bestimmt wurde.
Um die Ergebnisse ganz zu verstehen, sollte man sich mit den Interna des PostgreSQL-Kommunikationsprotokolls auskennen.
Beispielsweise können Sie das Kommando grep '^To backend' trace.log Beispielsweise können Sie das Kommando grep '^To backend 'trace.log eingeben und schauen, welche Abfrage gerade an den PostgreSQL Server geschickt wurde.
Weitere Informationen finden Sie im PostgreSQL-Manual.
Standardmäßig wird die zuletzt geöffnete Verbindung protokolliert.
Falls die Datei pathname zum protokollieren geöffnet werden konne, wird TRUE zurückgegeben, anderenfalls FALSE.
Siehe auch fopen() und pg_untrace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pg_tty() gibt den tty-Namen zurück, an den die serverseitigen Debug-Meldungen für die gegebene connection gesendet werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Parameter connection bezeichnet die Verbindung, die protokolliert wurde und ist standardmäßig auf die zuletzt geöffnete Verbindung gesetzt.
Die Funktion gibt immer TRUE zurück.
Siehe auch pg_trace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. pg_update
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt eine grosse Anzahl von Informationen über die aktuelle Konfiguration von PHP an.
Unter anderem die Optionen während der Kompilierens und die Erweiterungen, die PHP Version, Informationen über den Server, die Umgebung (wenn PHP als Modul kompiliert wurde), die PHP Umgebung, Version und Informationen zum Betriebssystem, Pfade, Haupt - and lokale Werte der Konfigurationsoptionen, HTTP Header, und die GNU Public License.
Siehe auch phpversion().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Funktion wurde mit Version PHP4 Beta 4 eingeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
php_sapi_name() zeigt die Schnittstelle zwischen Webserver und PHP (Server API, SAPI) als kleingeschriebene Zeichenkette an.
Bei CGI PHP ist diese Zeichenkette "cgi", bei mod_php für Apache ist die Zeichenkette "apache" usw.
Beispiel 1. php_sapi_name() Beispiel
$inter_type = php_sapi_name(); if ($inter_type == "cgi") print "Sie benutzen CGI PHP\n"; else print "Sie benutzen nicht CGI PHP\n";
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. php_uname() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt die Version des installierten PHP-Parsers.
Beispiel 1. phpversion() Beispiel
/ / Gibt z.B. 'Aktuelle PHP Version:
3.0rel-dev' aus echo "Aktuelle PHP Version: ".phpversion();
Siehe auch phpinfo().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen liefert (im Rahmen der möglichen Genauigkeit) den Wert der Kreiszahl Pi.
Die Konstante M_PI erfüllt denselben Zweck allerdings wesentlich effektiver.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Öffnet eine Verbindung zu einem Prozess, der durch die Anweisung command ausgeführt wurde.
Gibt einen Dateizeiger zurück, der identisch ist mit dem, der bei der Funktion fopen() zurückgegeben wird, außer dass dieser nur in eine Richtung funktioniert (entweder lesend oder schreibend) und mit der Funktion pclose() Gibt einen Dateizeiger zurück, der identisch ist mit dem, der bei der Funktion fopen() zurückgegeben wird, außer dass dieser nur in eine Richtung funktioniert (entweder lesend oder schreibend) und mit der Funktion pclose() geschlossen werden muss.
Dieser Zeiger kann mit den Funktionen fgets(), fgetss() und fputs() benutzt werden.
Anmerkung:
Wenn Sie bidirektionale Unterstützung wünschen, verwenden Sie bitte proc_open().
Anmerkung:
Wenn das auszuführende Kommando nicht gefunden werden konnte, wird eine gültige Ressource zurückgegeben.
Es ermöglicht Ihnen, auf von der Shell zurückgegebene Fehlermeldungen zuzugreifen:
?php error_reporting( E_ALL); / * Umleitung hinzufügen, dass wir stderr erhalten können * / $handle = popen(' / path / to / spooge 2 1', 'r'); echo "'$handle'; ". gettype($handle). "\n"; $read = fread($handle, 2096); echo $read; pclose($handle);?
Siehe auch pclose(), fopen() und proc_open().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dies ist nur ein Alias für die Funktion current().
Siehe auch end(), next(), prev() und reset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Muss noch geschrieben werden.
Zurück
Zum Anfang
Nach vorne
POSIX Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sollte ASAP geschrieben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die effektive numerische Gruppen-ID des aktuellen Prozesses zurück.
Für Informationen darüber, wie die Gruppen-ID in einen gebräuchlichen Gruppennamen umgewandelt werden kann, siehe auch posix_getgrgid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die effektive numerische Benutzer-ID des aktuellen Prozesses zurück.
Für Informationen darüber, wie die Benutzer-ID in einen gebräuchlichen Benutzernamen umgewandelt werden kann, siehe auch posix_getpwuid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die reale numerische Gruppen-ID des aktuellen Prozesses zurück.
Für Informationen darüber, wie die Gruppen-ID in einen gebräuchlichen Gruppennamen umgewandelt werden kann, siehe auch posix_getgrgid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Muss noch geschrieben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Muss noch geschrieben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein Array von ganzen Zahlen zurück, das die numerischen Gruppen-IDs der Gruppenliste des aktuellen Prozesses enthält.
Für Informationen darüber, wie die Gruppen-IDs in gebräuchliche Gruppennamen umgewandelt werden können, siehe auch posix_getgrgid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt den Benutzernamen des Benutzers zurück, dem der aktuelle Prozess gehört.
Für Informationen darüber, wie mehr Informationen über diesen Benutzer bekommen werden können, siehe posix_getpwnam().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die Prozessgruppenkennung des Prozzesses pid zurück.
Dies ist keine POSIX-Funktion, ist aber auf BSD - und System V-Systemen gängig.
Falls Ihr System diese Funktion nicht auf der Systemebene unterstützt, gibt diese PHP-Funktion immer FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die Prozessgruppenkennung des aktuellen Prozesses zurück.
Sehen Sie sich dazu POSIX.1 und die getpgrp( 2 )-Manpage auf Ihrem POSIX-System an, um mehr Informationen über Prozessgruppen zu erhalten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die Prozesskennung des aktuellen Prozesses zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die Prozesskennung des Elternprozesses des aktuellen Prozesses zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein assoziatives Array zurück, das Informationen über die Benutzerin enthält, auf die der in Benutzername übergebene alphanumerische Benutzername verweist.
Die Elemente des zurückgegebenen Array sind:
Tabelle 1.
Das Benutzerinformation-Array
Beschreibung
Das name-Element enthält den Benutzernamen.
Es handelt sich dabei nicht um ihren wirklichen, kompletten Namen, sondern um einen kurzen "Bezeichner" der Benutzerin mit normalerweise weniger als 16 Zeichen.
Der Benutzername sollte der selbe wie der bei Aufruf der Funktion verwendete Parameter Benutzername sein und ist von daher redundant.
Das passwd-Element enthält das verschlüsselte Passwort der Benutzerin.
Oft, zum Beispiel wenn auf einem System "shadow "-Passwörter verwendet werden, wird stattdessen ein Sternchen zurückgegeben.
Die Benutzer-ID in numerischem Format.
Die Gruppen-ID der Benutzerin.
Benutzen Sie die Funktion posix_getgrgid(), um den Gruppennamen und eine Liste der Gruppenmitglieder aufzulösen.
GECOS ist ein veralteter Begriff, der sich auf das finger-Informationsfeld auf einem Honeywell Stapelverarbeitungssystem bezieht.
Das Feld gibt es aber immer noch und sein Inhalt wurde durch POSIX formalisiert.
Es enthält eine durch Komma getrennte Liste, bestehend aus dem kompletten Namen der Benutzerin, der Telefonnummer des Büros, der Zimmernummer des Büros und der privaten Telefonnummer.
Auf den meisten Systemen ist nur der komplette Name der Benutzerin verfügbar.
Dieses Element enthält den absoluten Pfad des Homeverzeichnisses der Benutzerin.
Das shell-Element enthält den absoluten Pfad zur standardmäßigen Shell der Benutzerin.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein assoziatives Array zurück, das Informationen über die Benutzerin enthält, auf die die in uid übergebene numerische Benutzer-ID verweist.
Die Elemente des zurückgegebenen Array sind:
Tabelle 1.
Das Benutzerinformation-Array
Beschreibung
Das name-Element enthält den Benutzernamen.
Es handelt sich dabei nicht um ihren wirklichen, kompletten Namen, sondern um einen kurzen "Bezeichner" der Benutzerin mit normalerweise weniger als 16 Zeichen.
Das passwd-Element enthält das verschlüsselte Passwort der Benutzerin.
Oft, zum Beispiel wenn auf einem System "shadow "-Passwörter verwendet werden, wird stattdessen ein Sternchen zurückgegeben.
Die Benutzer-ID sollte die selbe wie der Parameter uid sein und ist von daher redundant.
Die Gruppen-ID der Benutzerin.
Benutzen Sie die Funktion posix_getgrgid(), um den Gruppennamen und eine Liste der Gruppenmitglieder aufzulösen.
GECOS ist ein veralteter Begriff, der sich auf das finger-Informationsfeld auf einem Honeywell Stapelverarbeitungssystem bezieht.
Das Feld gibt es aber immer noch und sein Inhalt wurde durch POSIX formalisiert.
Es enthält eine durch Komma getrennte Liste, bestehend aus dem kompletten Namen der Benutzerin, der Telefonnummer des Büros, der Zimmernummer des Büros und der privaten Telefonnummer.
Auf den meisten Systemen ist nur der komplette Name der Benutzerin verfügbar.
Dieses Element enthält den absoluten Pfad des Homeverzeichnisses der Benutzerin.
Das shell-Element enthält den absoluten Pfad zur standardmäßigen Shell der Benutzerin.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sollte ASAP geschrieben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die Session-ID des Prozesses pid zurück.
Falls pid 0 ist, wird die Session-ID des aktuellen Prozesses zurückgegeben.
Dies ist keine POSIX-Funktion, ist aber auf BSD - und System V-Systemen gängig.
Falls Ihr System diese Funktion nicht auf der Systemebene unterstützt, gibt diese PHP-Funktion immer FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt die reale numerische Benutzer-ID des aktuellen Prozesses zurück.
Für Informationen darüber, wie die Benutzer-ID in einen gebräuchlichen Benutzernamen umgewandelt werden kann, siehe auch posix_getpwuid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Muss noch geschrieben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sendet das Signal sig zum Prozess mit der Prozesskennung (Prozess-ID) pid.
Sie gibt FALSE zurück, wenn sie das Signal nicht senden konnte, andernfalls TRUE.
Sehen Sie sich dazu auch die kill( 2 )-Manpage Ihres POSIX-Systems an, die zusätzliche Informationen über negative Prozess-IDs, die speziellen pid 0 und -1 und die Signalnummer 0 enthält.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
posix_mkfifo() erzeugt eine spezielle FIFO -Datei, die im Dateisystem existiert und als bidirektionaler Kommunikationsendpunkt für Prozesse agiert.
Der zweite Parameter, mode, muss in oktaler Schreibweise angegeben werden (z.B.
Die Zugriffsberechtigungen des neu erzeugten FIFO hängen auch von der Einstellung der aktuellen umask() ab.
Die Zugriffsberechtigungen der erzeugten Datei sind (mode ~umask).
Anmerkung:
Wenn Safe Mode aktiviert ist, überprüft PHP ob das Verzeichnis in dem das Skript ausgeführt werden soll, die gleiche UID hat wie das Skript selbst.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion setzt die effektive Gruppen-ID des aktuellen Prozesses.
Es handelt sich um eine privilegierte Funktion, für die Sie die entspechenden Berechtigungen (normalerweise root) auf Ihrem System benötigen, um diese Funktion ausführen zu können.
Gibt bei Erfolg TRUE und andernfalls FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion setzt die effektive Benutzer-ID uid des aktuellen Prozesses.
Es handelt sich um eine privilegierte Funktion, für die Sie die entspechenden Berechtigungen (normalerweise root) auf Ihrem System benötigen, um diese Funktion ausführen zu können.
Gibt bei Erfolg TRUE und andernfalls FALSE zurück.
Siehe auch: posix_setgid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion setzt die reale Gruppen-ID gid des aktuellen Prozesses.
Es handelt sich um eine privilegierte Funktion, für die Sie die entspechenden Berechtigungen (normalerweise root) auf Ihrem System benötigen, um diese Funktion ausführen zu können.
Die sachgemäße Reihenfolge der Funktionsaufrufe ist zuerst posix_setgid() und zuletzt posix_setuid().
Gibt bei Erfolg TRUE und andernfalls FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion fügt den Prozess pid der Prozessgruppe pgid hinzu.
Sehen Sie sich dazu POSIX.1 und die setpgid( 2 )-Manpage auf Ihrem POSIX-System an, um mehr Informationen über Prozessgruppen und Job-Kontrolle zu erhalten.
Gibt bei Erfolg TRUE und andernfalls FALSE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion macht den aktuellen Prozess zum Prozessgruppen-Führer.
Sehen Sie sich dazu POSIX.1 und die setsid( 2 )-Manpage auf Ihrem POSIX-System an, um mehr Informationen über Prozessgruppen und Job-Kontrolle zu erhalten.
Gibt die Session-ID zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion setzt die reale Benutzer-ID uid des aktuellen Prozesses.
Es handelt sich um eine privilegierte Funktion, für die Sie die entspechenden Berechtigungen (normalerweise root) auf Ihrem System benötigen, um diese Funktion ausführen zu können.
Gibt bei Erfolg TRUE und andernfalls FALSE zurück.
Siehe auch: posix_setgid().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine Reihe von Zahlenwerten mit Informationen über die Auslastung der CPU durch den aktuellen Prozess zurück.
Die Indizes dieser Zahlenwerte sind
ticks - die Anzahl von Clock-Ticks, die seit dem Reboot verstrichen sind.
utime - Benutzerzeit, die vom aktuellen Prozess verbraucht wurde.
stime - Systemzeit, die vom aktuellen Prozess verbraucht wurde.
cutime - Benutzerzeit, die vom aktuellen Prozess und dessen Kindprozessen verbraucht wurde.
cstime - Systemzeit, die vom aktuellen Prozess und dessen Kindprozessen verbraucht wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Muss noch geschrieben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine Reihe von Daten mit Informationen über das System zurück.
Die Indizes dieser Daten sind
sysname - Name des Betriebssystems (z.B.
nodename - Name des Systems (z.B. valiant)
release - Release des Betriebssystems (z.B.
version - Version des Betriebssystems (z.B. #4 Tue Jul 20 17:01:36 MEST 1999)
machine - Systemarchitektur (z.B. i586)
domainname - DNS Domainname (z.B. php.net)
Deshalb steht dieses Feld nur auf GNU-Systemen oder bei Verwendung der GNU libc zur Verfügung.
Posix erfordert, dass Sie bezüglich des Formats der Werte nichts voraussetzen dürfen, z.B. können Sie sich weder darauf verlassen, dass die Release-Nummer aus drei Ziffern besteht noch auf irgendetwas anderes, das von dieser Funktion zurückgegeben wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PostgreSQL Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert base potenziert mit exp, also base hoch exp.
Siehe auch exp().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. preg_grep() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Beispiel 2. find the word "web"
Beispiel 3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
When working with a replacement pattern where a backreference is immediately followed by another number (i.e.: placing a literal number immediately after a matched pattern), you cannot use the familiar \\1 notation for your backreference. \\11, for example, would confuse preg_replace() since it does not know whether you want the \\1 backreference followed by a literal 1, or the \\11 backreference followed by nothing.
Beispiel 1.
Anmerkung:
Beispiel 2.
Beispiel 3.
Beispiel 4.
Beispiel 5.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1. preg_split() example:
Beispiel 2.
Beispiel 3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sind keine Elemente mehr vorhanden, wird FALSE zurückgegeben.
Warnung
Enthält das Array leere Elemente, wird für diese ebenfalls FALSE Enthält das Array leere Elemente, wird für diese ebenfalls FALSE zurückgegeben.
Um ein Array mit leeren Elementen richtig durchzugehen, verwenden Sie die Funktion each().
prev() verhält sich wie next(), nur dass hier der interne Zeiger um eine Position zurück, und nicht nach vorne gerückt wird.
Siehe auch current(), end(), next() und reset().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_abort() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_close() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_create_dc() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_bmp() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_chord() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_elipse() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_line() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_pie() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_rectangle() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_roundrect() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_draw_text() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_get_option() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_list() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_logical_fontheight() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_open() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_select_brush() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_select_font() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_select_pen() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_set_option() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_start_doc() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. printer_write() example
Zurück
Zum Anfang
Nach vorne
Nach oben
Pspell Funktionen
PHP Handbuch
Zurück
Nach vorne
Format wird in der Dokumentation zu sprintf() näher beschrieben.
Siehe auch print(), sprintf(), sscanf(), fscanf() und flush().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt arg aus.
Siehe auch echo(), printf() und flush().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion zeigt Informationen über eine Variable oder einen Ausdruck in lesbarer Form an.
Einfache Werte werden direkt ausgegeben, Arrays und Objekte werden dagegen als eingerückte Schlüssel / Wert-Paare ausgegeben.
print_r() ähnelt var_dump(), gibt aber Typinformationen nur bei Arrays und Objekten aus.
?php $a = array (1, 2, array ("a", "b", "c")); print_r ($a);?
Warnung
Diese Funktion ist nicht in der Lage, zyklische Referenzen aufzulösen, d.h. die Ausgabe eines Arrays oder Objektes, das sich selbst enthält, wie z.B. print_r( $GLOBALS), wird niemals beendet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_add_to_personal() fügt der persönlichen Wortliste ein Wort hinzu.
Falls Sie pspell_new_config() mit pspell_config_personal() verwendet haben, um das Wörterbuch zu öffnen, können Sie die Wortliste später mit pspell_save_wordlist() speichern.
Bitte beachten Sie, dass diese Funktion nicht funktioniert, wenn Sie nicht pspell .11.2 und aspell .32.5 oder höher haben.
Beispiel 1. pspell_add_to_personal()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); $pspell_link = pspell_new_config ($pspell_config); pspell_add_to_personal ($pspell_link, "Vlad"); pspell_save_wordlist ($pspell_link);
Zurück
Zum Anfang
Nach vorne
Pspell Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_add_to_session() fügt der Wortliste, die zur aktuellen Sitzung gehört, ein Wort hinzu.
Diese Funktion ist der Funktion pspell_add_to_personal() sehr ähnlich.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_check() überprüft die Schreibweise eines Wortes und gibt TRUE zurück, wenn sie korrekt ist oder FALSE, wenn nicht.
Beispiel 1. pspell_check()
$pspell_link = pspell_new ("de"); if (pspell_check ($pspell_link, "Testt")) {echo "Das ist eine gültige Schreibweise";} else {echo "Sorry, falsche Schreibweise";}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_clear_session() löscht die aktuelle Sitzung.
Die aktuelle Wortliste wird geleert und wenn Sie zum Beispiel versuchen, sie mit pspell_save_wordlist() zu speichern, passiert gar nichts.
Beispiel 1. pspell_add_to_personal()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); $pspell_link = pspell_new_config ($pspell_config); pspell_add_to_personal ($pspell_link, "Vlad"); pspell_clear_session ($pspell_link); pspell_save_wordlist ($pspell_link); / /"Vlad" wird nicht gespeichert
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_config_create() hat eine sehr ähnliche Syntax wie pspell_new().
Wenn pspell_config_create() direkt gefolgt von pspell_new_config() verwendet wird, hat das in der Tat genau das gleiche Ergebnis.
Sie können jedoch nach dem Erzeugen einer neuen Konfiguration die pspell_config_*() -Funktionen verwenden, bevor Sie pspell_new_config() aufrufen, um von einer erweiterten Funktionalität zu profitieren.
Sprache ist der Sprachencode, der aus dem zweibuchstabigen ISO 639-Sprachencode und, nach einem Binde - oder Unterstrich, einem optionalen zweibuchstabigen ISO 3166-Ländercode besteht.
Schreibweise ist die angeforderte Schreibweise für Sprachen mit mehr als einer Schreibweise, wie zum Beispiel Englisch.
Bekannte Werte sind 'american', 'british' und 'canadian '.
Jargon enthält zusätzliche Informationen, um zwischen zwei Wortlisten mit der selben Sprache und den selben Parametern für die Schreibweise zu unterscheiden.
Codierung ist die Codierung, in der die Wörter voraussichtlich sind.
Gültige Werte sind 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16' und 'machine unsigned 32 '.
Dieser Parameter ist weit gehend ungetestet, weshalb Sie bei dessen Verwendung vorsichtig sein sollten.
Schauen Sie sich für weitere Informationen und Beispiele das pspell-Handbuch (auf englisch) auf der Website http: / /aspell.net / an.
Beispiel 1. pspell_config_create()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_personal ($pspell_config, "de");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_config_ignore() sollte auf die Konfiguration angewendet werden, bevor pspell_new_config() aufgerufen wird.
Diese Funktion erlaubt der Rechtschreibprüfung, kurze Wörter zu überspringen.
Wörter mit weniger als n Buchstaben werden übersprungen.
Beispiel 1. pspell_config_ignore()
$pspell_config = pspell_config_create ("de"); pspell_config_ignore($pspell_config, 5); $pspell_link = pspell_new_config($pspell_config); pspell_check($pspell_link, "abcd"); / / produziert keinen Fehler
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_config_mode() sollte auf die Konfiguration angewendet werden, bevor pspell_new_config() aufgerufen wird.
Diese Funktion bestimmt, wie viele Vorschläge von pspell_suggest() geliefert werden.
Modus ist der Modus, in dem die Rechtschreibprüfung arbeitet.
Es stehen mehrere Modi zur Verfügung:
PSPELL_FAST - Schneller Modus (geringste Anzahl Vorschläge)
PSPELL_NORMAL - Normaler Modus (mehr Vorschläge)
PSPELL_BAD_SPELLERS - Langsamer Modus (viele Vorschläge)
Beispiel 1. pspell_config_mode()
$pspell_config = pspell_config_create ("de"); pspell_config_mode($pspell_config, PSPELL_FAST); $pspell_link = pspell_new_config($pspell_config); pspell_check($pspell_link, "dieSpinne");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_config_personal() sollte auf die Konfiguration angewendet werden, bevor pspell_new_config() aufgerufen wird.
Die persönliche Wortliste wird geladen und zusätzlich zur standardmäßig verwendet, nachdem Sie pspell_new_config() aufgerufen haben.
Falls die Datei nicht existiert, wird sie angelegt.
Diese Datei ist auch der Ort, an dem pspell_save_wordlist() die persönliche Wortliste speichert.
Die Datei sollte für denjenigen, unter dem PHP läuft (z.B. nobody), schreibbar sein.
Bitte beachten Sie, dass diese Funktion nicht funktioniert, wenn Sie nicht pspell .11.2 und aspell .32.5 oder höher haben.
Beispiel 1. pspell_config_personal()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); $pspell_link = pspell_new_config ($pspell_config); pspell_check ($pspell_link, "dieSpinne");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_config_repl() sollte auf die Konfiguration angewendet werden, bevor pspell_new_config() aufgerufen wird.
Die Ersetzen-Paare verbessern die Qualität der Rechtschreibprüfung.
Wenn ein Wort falsch geschrieben und in der Wortliste kein passender Vorschlag wurde, kann pspell_store_replacement() zum Speichern eines Ersetzen-Paares verwendet werden und dann pspell_save_wordlist() zum Speichern der Wortliste zusammen mit den Ersetzen-Paaren.
Die Datei sollte für denjenigen, unter dem PHP läuft (z.B. nobody), eine Schreibberechtigung haben.
Bitte beachten Sie, dass diese Funktion nicht funktioniert, wenn Sie nicht pspell .11.2 und aspell .32.5 oder höher haben.
Beispiel 1. pspell_config_repl()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_config ($pspell_config); pspell_check ($pspell_link, "dieSpinne");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_config_runtogether() sollte auf die Konfiguration angewendet werden, bevor pspell_new_config() aufgerufen wird.
Diese Funktion bestimmt, ob zusammengesetzte Wörter als erlaubte Verbindungen betrachtet werden.
Das heißt, dieSpinne wäre dann eine erlaubte Verbindung, obwohl ein Leerzeichen zwischen den beiden Wörtern sein müsste.
Eine Änderung dieser Einstellung wirkt sich nur auf das Ergebnis aus, das von pspell_check() zurückgegeben wird; pspell_suggest() liefert weiterhin Änderungsvorschläge.
Beispiel 1. pspell_config_runtogether()
$pspell_config = pspell_config_create ("de"); pspell_config_runtogether ($pspell_config, true); $pspell_link = pspell_new_config ($pspell_config); pspell_check ($pspell_link, "dieSpinne");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_config_save_repl() sollte auf die Konfiguration angewendet werden, bevor pspell_new_config() aufgerufen wird.
Diese Funktion bestimmt, ob pspell_save_wordlist() Ersetzen-Paare zusammen mit der Wortliste speichert.
Normalerweise wird sie nicht benötigt, denn wenn die Funktion pspell_config_repl() verwendet wird, werden die Ersetzen-Paare sowieso durch pspell_save_wordlist() gespeichert und wenn sie nicht verwendet wird, werden die Ersetzen-Paare nicht gespeichert.
Bitte beachten Sie, dass diese Funktion nicht funktioniert, wenn Sie nicht pspell .11.2 und aspell .32.5 oder höher haben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_new_config() öffnet ein neues Wörterbuch mit den Einstellungen, die in einer mittels pspell_config_create() erzeugten und den pspell_config_*() -Funktionen geänderten Konfiguration angegeben sind.
Diese Methode bietet Ihnen die größte Flexibilität und hat die ganze Funktionalität, die pspell_new() und pspell_new_personal() bieten.
config ist der Parameter, der von pspell_config_create() beim Erzeugen der Konfiguration zurückgegeben wird.
Beispiel 1. pspell_new_config()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_config ($pspell_config);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_new() öffnet ein neues Wörterbuch und gibt die Kennung des Wörterbuch-Links für die Verwendung in anderen pspell-Funktionen zurück.
Sprache ist der Sprachencode, der aus dem zweibuchstabigen ISO 639-Sprachencode und, nach einem Binde - oder Unterstrich, einem optionalen zweibuchstabigen ISO 3166-Ländercode besteht.
Schreibweise ist die angeforderte Schreibweise für Sprachen mit mehr als einer Schreibweise, wie zum Beispiel Englisch.
Bekannte Werte sind 'american', 'british' und 'canadian '.
Jargon enthält zusätzliche Informationen, um zwischen zwei Wortlisten mit der selben Sprache und den selben Parametern für die Schreibweise zu unterscheiden.
Codierung ist die Codierung, in der die Wörter voraussichtlich sind.
Gültige Werte sind 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16' und 'machine unsigned 32 '.
Dieser Parameter ist weit gehend ungetestet, weshalb Sie bei dessen Verwendung vorsichtig sein sollten.
Modus ist der Modus, in dem die Rechtschreibprüfung arbeitet.
Es stehen mehrere Modi zur Verfügung:
PSPELL_FAST - Schneller Modus (geringste Anzahl Vorschläge)
PSPELL_NORMAL - Normaler Modus (mehr Vorschläge)
PSPELL_BAD_SPELLERS - Langsamer Modus (viele Vorschläge)
PSPELL_RUN_TOGETHER PSPELL_RUN_TOGETHER - Betrachtet zusammengesetzte Wörter als erlaubte Verbindungen.
Das heißt, dieSpinne wäre dann eine erlaubte Verbindung, obwohl ein Leerzeichen zwischen den beiden Wörtern sein müsste.
Eine Änderung dieser Einstellung wirkt sich nur auf das Ergebnis aus, das von pspell_check() zurückgegeben wird; pspell_suggest() liefert weiterhin Änderungsvorschläge.
Schauen Sie sich für weitere Informationen und Beispiele das pspell-Handbuch (auf englisch) auf der Website http: / /aspell.net / an.
Beispiel 1. pspell_new()
$pspell_link = pspell_new ("de", "","", "", (PSPELL_FAST_BAR_PSPELL_RUN_TOGETHER));
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_new_personal() öffnet ein neues Wörterbuch mit einer persönlichen Wortliste und gibt die Kennung des Wörterbuch-Links für die Verwendung in anderen pspell-Funktionen zurück.
Die Wortliste kann bei Bedarf mit pspell_save_wordlist() geändert und gespeichert werden.
Die Ersetzen-Paare werden jedoch nicht gespeichert.
Um diese zu speichern, müssen Sie mittels pspell_config_create() eine Konfiguration erzeugen, die persönliche Wortliste mit pspell_config_personal() setzen, die Datei für die Ersetzen-Paare mit pspell_config_repl() setzen und mit pspell_new_config() ein neues Wörterbuch öffnen.
persönliche_wortliste persönliche_wortliste bestimmt die Datei, in der Wörter, die zur persönlichen Wortliste hinzu gefügt wurden, gespeichert werden.
Dieser Parameter sollte als absoluter Dateiname mit '/' beginnend angegeben werden, weil er andernfalls relativ zu $HOME wäre, was auf den meisten Systemen '/ root' ist und es vermutlich nicht das ist, was sie wollen.
Sprache ist der Sprachencode, der aus dem zweibuchstabigen ISO 639-Sprachencode und, nach einem Binde - oder Unterstrich, einem optionalen zweibuchstabigen ISO 3166-Ländercode besteht.
Schreibweise ist die angeforderte Schreibweise für Sprachen mit mehr als einer Schreibweise, wie zum Beispiel Englisch.
Bekannte Werte sind 'american', 'british' und 'canadian '.
Jargon enthält zusätzliche Informationen, um zwischen zwei Wortlisten mit der selben Sprache und den selben Parametern für die Schreibweise zu unterscheiden.
Codierung ist die Codierung, in der die Wörter voraussichtlich sind.
Gültige Werte sind 'utf-8', 'iso8859-*', 'koi8-r', 'viscii', 'cp1252', 'machine unsigned 16' und 'machine unsigned 32 '.
Dieser Parameter ist weit gehend ungetestet, weshalb Sie bei dessen Verwendung vorsichtig sein sollten.
Modus ist der Modus, in dem die Rechtschreibprüfung arbeitet.
Es stehen mehrere Modi zur Verfügung:
PSPELL_FAST - Schneller Modus (geringste Anzahl Vorschläge)
PSPELL_NORMAL - Normaler Modus (mehr Vorschläge)
PSPELL_BAD_SPELLERS - Langsamer Modus (viele Vorschläge)
PSPELL_RUN_TOGETHER PSPELL_RUN_TOGETHER - Betrachtet zusammengesetzte Wörter als erlaubte Verbindungen.
Das heißt, dieSpinne wäre dann eine erlaubte Verbindung, obwohl ein Leerzeichen zwischen den beiden Wörtern sein müsste.
Eine Änderung dieser Einstellung wirkt sich nur auf das Ergebnis aus, das von pspell_check() zurückgegeben wird; pspell_suggest() liefert weiterhin Änderungsvorschläge.
Schauen Sie sich für weitere Informationen und Beispiele das pspell-Handbuch (auf englisch) auf der Website http: / /aspell.net / an.
Beispiel 1. pspell_new_personal()
$pspell_link = pspell_new_personal ("/ var / dictionaries / custom.pws", "de", "","", "", PSPELL_FAST_BAR_PSPELL_RUN_TOGETHER));
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_save_wordlist() speichert die persönliche Wortliste der aktuellen Sitzung.
Das Wörterbuch muss mit pspell_new_personal() geöffnet werden und die Stelle der zu speichernden Dateien muss mit pspell_config_personal() und (optional) pspell_config_repl() bestimmt werden.
Bitte beachten Sie, dass diese Funktion nicht funktioniert, wenn Sie nicht pspell .11.2 und aspell .32.5 oder höher haben.
Beispiel 1. pspell_add_to_personal()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ tmp / dicts / newdict"); $pspell_link = pspell_new_config ($pspell_config); pspell_add_to_personal ($pspell_link, "Vlad"); pspell_save_wordlist ($pspell_link);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_store_replacement() speichert das Ersetzen-Paar für ein Wort, damit dieses Ersetzen-Paar später von pspell_suggest() zurückgegeben werden kann.
Um von dieser Funktion profitieren zu können, müssen Sie pspell_new_personal() zum Öffnen des Wörterbuchs verwenden.
Um das Ersetzen-Paar dauerhaft zu speichern, müssen Sie pspell_config_personal() und pspell_config_repl() verwenden, um den Pfad zu setzen, unter dem Ihre selbst erstellten Wortlisten gespeichert werden sollen und dann pspell_save_wordlist(), damit die Änderungen auf die Festplatte geschrieben werden.
Bitte beachten Sie, dass diese Funktion nicht funktioniert, wenn Sie nicht pspell .11.2 und aspell .32.5 oder höher haben.
Beispiel 1. pspell_store_replacement()
$pspell_config = pspell_config_create ("de"); pspell_config_personal ($pspell_config, "/ var / dictionaries / custom.pws"); pspell_config_repl ($pspell_config," / var / dictionaries / custom.repl"); $pspell_link = pspell_new_config ($pspell_config); pspell_store_replacement ($pspell_link, $falsch, $richtig); pspell_save_wordlist ($pspell_link);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
pspell_suggest() gibt ein Array möglicher Schreibweisen für das angegebene Wort zurück.
Beispiel 1. pspell_suggest()
$pspell_link = pspell_new ("de"); if (!pspell_check ($pspell_link, "Testt")) {$vorschlaege = pspell_suggest ($pspell_link, "Testt"); foreach ($vorschlaege as $vorschlag) {echo "Mögliche Schreibweise: $vorschlag br ";}}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt setting als Umgebungsvariable.
Beispiel 1.
Setzen einer Umgebungsvariablen
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
Reguläre Ausdrücke Funktionen (POSIX erweitert)
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt einen 8-Bit-String zurück, der der Konvertierung aus einem "quoted-printable "-String entspricht.
Diese Funktion ist ähnlich wie imap_qprint() bis auf die Tatsache, dass sie kein IMAP-Module erfordert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Inhalt von str wird mit einem Rückstrich ("Backslash",\) vor jedem Vorkommen von
Siehe auch addslashes(), htmlentities(), htmlspecialchars(), nl2br() und stripslashes().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion wandelt den übergebenen Winkel von Bogenmaß in Grad.
Siehe auch deg2rad().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ohne die optionalen Parameter min und max liefert rand() eine Pseudo-Zufallszahl zwischen 0 und einem plattformabhängigen Maximalwert, der mit getrandmax() ermittelt werden kann.
Benutzen Sie unbedingt srand(), um vor dem ersten Aufruf von rand() einen neuen Startwert festzulegen, ansonsten erhalten Sie bei jedem Programmlauf dieselbe Sequenz von Werten.
Anmerkung:
In PHP-Versionen vor 3.0.7 hatte der zweite Parameter max nicht den Maximalwert sondern die Größe des Werteintervalls an, d.h. in diesen älteren Version muss statt rand (min, max) rand (min, max-min) benutzt werden, um dasselbe Ergebnis zu erhalten.
Siehe auch srand(), getrandmax(), mt_rand(), mt_srand() und mt_getrandmax().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
range() gibt ein Array mit Elementen im Bereich von low bis high range() gibt ein Array mit Elementen im Bereich von low bis high zurück.
Wenn low high, wird die Sequenz von high nach low sein.
Neuer Parameter:
Der optionale Parameter step wurde in 5.0.0 eingeführt.
Ist ein step Wert angegeben, wird es Schrittweite zwischen den Elementen in der Sequenz verwendet. step Ist ein step Wert angegeben, wird es Schrittweite zwischen den Elementen in der Sequenz verwendet. step sollte als positive Zahl angegeben werden.
Ist step nicht angegeben, wird automatisch der Wert 1 angenommen.
Beispiel 1. range()
?php / / array( 0,1,2,3,4,5,6,7,8,9) foreach(range(0, 9) as $number) {echo $number;} / / Der Parameter step wurde in PHP 5.0.0 eingeführt / / array(0,10,20,30,40,50,60,70,80,90,100) foreach(range(0, 100, 10) as $number) {echo $number;} / / Die Verwendung von Zeichen wurde in 4.1.0 eingeführt / / array('a' ,'b' ,'c' ,'d' ,'e' ,'f' ,'g' ,'h' ,'i'); foreach(range('a', 'i') as $letter) {echo $letter;} / / array('c' ,'b' ,'a'); foreach(range('c', 'a') as $letter) {echo $letter;}?
Anmerkung:
Vor der Version 4.1.0 hat die Funktion range() nur aufsteigende Integer Arrays erstellt.
Die Unterstützung für Zeichenfolgen und Arrays in absteigender Reihenfolge wurde in 4.1.0 hinzugefügt.
Siehe auch shuffle() und foreach.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen String zurück, in dem die Abschnitte, die mit einem Prozent-Zeichen (%) beginnen (dem ein 2-stelliger hexadezimal-Wert folgt), ersetzt wurden durch Buchstaben.
So wird z.B. die Zeichenkette
Siehe auch rawurlencode().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt eine Zeichenkette zurück, in der alle Sonderzeichen ausser
Beispiel 1. rawurlencode() -Beispiel 1:
echo 'A HREF="ftp: / /user :', rawurlencode ('foo @+% / '), '@ftp.mein.de / x.txt "';
Beispiel 2. rawurlencode() -Beispiel 2:
echo 'A HREF="http: / /x.de / leitung_list_skript /', rawurlencode ('Verkauf und Marketing / Hamburg'), '"';
Siehe auch rawurldecode().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ermittelt den nächsten Dateinamen im Verzeichnis.
Die Dateinamen werden ungeordnet zurück gegeben.
Beispiel 1.
Liste alle Dateien des aktuellen Verzeichnisses auf
Beachten sie, dass readdir() Beachten sie, dass readdir() auch die Einträge "." und ".. "zurück gibt.
Wollen sie das nicht, müssen sie diese ausschliessen:
Beispiel 2.
Liste alle Dateien des aktuellen Verzeichnisses unter Ausschluss von "." und ".. "auf
?php $handle=opendir( '.'); while ($file = readdir ($handle)) {if ($file != "." $file != ". .") {echo "$file\n";}} closedir($handle);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Es wird ein assoziatives Array in dem die Indizes die EXIF-Kopf-Bezeichnungen und die Werte die Inhalte dieser Kopf-Infos sind.
Jeder Aufnehmende hat aber andere Vorstellungen über die Daten einer JPEG-Grafik.
?php $exif = read_exif_data ('p0001807.jpg'); while(list($k,$v)=each($exif)) {echo "$k: $v br \n";}?
Diese Funktion erfordert nicht die GD-Library.
Zurück
Zum Anfang
Nach vorne
Nach oben
IMAP, POP3 und NNTP Funktionen
PHP Handbuch
Zurück
Nach vorne
Liest den Inhalt einer Datei und schreibt ihn in den Ausgabepuffer.
Gibt die Anzahl der gelesenen Bytes einer Datei zurück.
Die Ausgabe einer Fehlermeldung kann durch Voranstellen eines '@' verhindert werden (@readfile).
Tipp:
Mit dieser Funktion können Sie eine URL als Dateinamen verwenden, falls Sie fopen wrappers ermöglicht haben.
Eine Liste der unterstützten URL Protokolle finden Sie unter Anhang I.
Sie können optional den zweiten Parameter benutzen und diesen auf '1' setzen, wenn Sie auch im include_path nach der Datei suchen möchten.
Siehe auch fpassthru(), file(), fopen(), include(), require(), virtual() und Anhang I.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion fügt eine Zeile zur Kommandozeilen-History hinzu.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion löscht die gesamte Kommandozeilen-History.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion registriert eine Vervollständigungsfunktion.
Sie müssen den Namen einer existierenden Funktion angeben, die einen Teil einer Kommandozeile akzeptiert und ein Array möglicher Übereinstimmungen zurückgibt.
Das ist die gleiche Art von Funktionalität die Sie haben, wenn Sie die Tab-Taste benutzen, während Sie mit der Bash arbeiten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt eine einzelne Zeichenkette vom Benutzer zurück.
Sie können eine Zeichenkette angeben, mit dem Sie den Benutzer zur Eingabe auffordern.
Der Zeile die Sie erhalten fehlt das abschließende Zeichen für einen Zeilenvorschub.
Die Zeile müssen Sie selbst mit Hilfe der Funktion readline_add_history() der History hinzufügen.
Beispiel 1. readline()
/ / abfragen von 3 Kommandos vom Benutzer for ($i=0; $i; 3; $i++) {$zeile = readline ("Kommando: "); readline_add_history ($line);} / /anzeigen der History print_r (readline_list_history()); / /anzeigen der Variablen print_r (readline_info());
Zurück
Zum Anfang
Nach vorne
Nach oben
GNU Recode Funktionen
PHP Handbuch
Zurück
Nach vorne
Wenn diese Funktion ohne Parameter aufgerufen wird, gibt sie einen Array von Werten für alle Einstellungen zurück, die readline benutzt.
Die Elemente werden durch die folgenden Werte indiziert: done, end, erase_empty_line, library_version, line_buffer, mark, pending_input, point, prompt, readline_name und terminal_name.
Wird die Funktion mit einem Parameter aufgerufen, wird der Wert dieser Einstellung zurückgegeben.
Beim Aufruf mit zwei Parametern wird die Einstellung auf den angegebenen Wert geändert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein Array der gesamten Kommandozeilen-History zurück.
Die Elemente sind numerisch indiziert, beginnend bei Null.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liest eine Kommando-History aus einer Datei.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion schreibt die Kommando-History in eine Datei.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
readlink() ist von der Funktionalität her identisch mit der 'readlink C Funktion 'und gibt den Inhalt des Pfades des symbolischen Links zurück oder 0, wenn der Aufruf fehlschlug.
Siehe auch is_link(), symlink() und linkinfo().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
realpath() expandiert alle symbolischen Links, und beseitigt Verweise zu '/. /', '/.. /' und extra '/' Zeichen im Input path, und gibt den absoluten Pfadnamen kanonisch zurück.
Der Pfad im Ergebnis enthält keine Komponenten eines symbolischen Links mehr, wie '/. /' or '/.. /'.
realpath() gibt im Fehlerfall FALSE zurück, z.B. wenn die Datei nicht existiert.
Beispiel 1. realpath()
$real_path = realpath( ".. /.. / index.php");
Siehe auch: basename(), dirname() und pathinfo().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Umkodierung der Datei, die durch den Dateizeiger input referenziert wird in die Datei output, entsprechend der Recode Anweisung request.
Gibt TRUE bei erfolgter Umwandlung, sonst FALSE zurück.
Diese Funktion arbeitet momentan nicht mit externen Dateien (URLs).
Die beiden Dateizeiger müssen auf lokale Dateien verweisen.
Beispiel 1.
Einfaches recode_file() Beispiel
Zurück
Zum Anfang
Nach vorne
GNU Recode Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Parameter string wird entsprechend der Recode Anweisung request umgewandelt.
Zurückgegeben wird der umkodierte String oder FALSE, wenn eine Umkodierung nicht möglich ist.
Eine einfache Recode Anweisung wäre beispielsweise "lat1..iso646-de".
Detaillierte Beschreibungen zu Recode Anweisungen sind in der GNU Recode Dokumentation auf Ihrem System zu finden.
Beispiel 1.
Einfaches recode_string() Beispiel:
print recode_string ("us..flat", "Der folgende Buchstabe hat ein diakritisches Zeichen: aacute ;");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die mit func benannte Funktion wird im Skript zwecks Ausführung an dessen Ende eingetragen.
Bekannte Problemfälle:
Da innerhalb dieser Funktion keinerlei Ausgabe im Browser erzeugt werden, können sie die registrierte Funktion nicht mit print oder echo usw. debuggen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Versucht eine Datei oldname in newname umzubenennen.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1.
Beispiel mit rename()
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Die require() Anweisung bindet eine Datei ein und führt diese aus.
require() bindet eine Datei ein und führt diese aus.
Genaue Informationen wie die Einbindung funktioniert ist in der Dokumentation für include() beschrieben.
require() und include() sind in jeder Hinsicht gleichwertig mit der einen Ausnahme: der Umgang mit Fehlern. include() erzeugt ein Warning während require() in einem Fatal Error require() und include() sind in jeder Hinsicht gleichwertig mit der einen Ausnahme: der Umgang mit Fehlern. include() erzeugt ein Warning während require() in einem Fatal Error endet.
Mit anderen Worten: scheuen Sie sich nicht, require() zu benutzen, wenn Sie möchten, dass eine fehlende Datei die Ausführung ihres Skripts beendet. include() verhält sich anders, ihr Skript wird weiterhin ausgeführt.
Stellen Sie außerdem sicher, dass Sie einen gültigen include_path gesetzt haben.
Beispiel 12-2.
Grundlegende require() Beispiele
Weitere Beispiele finden Sie in der Dokumentation zu include().
Anmerkung:
Für frühere Versionen als PHP 4.0.2 gilt folgendes: require() wird immer versuchen die Zieldatei zu lesen, selbst wenn die Zeile in der die Anweisung steht, nie ausgeführt wird.
Eine bedingte Anweisung hat keine Auswirkungen auf require().
Wenn jedoch die Zeile in der require() steht, nie ausgeführt wird, wird auch der Code der Zieldatei nie ausgeführt werden.
Ähnliches gilt für Schleifenstrukturen, diese beeinflussen das Verhalten von require() nicht.
Obwohl der Code, der in der Zieldatei enthalten ist, zur Schleife gehört, wird require() selbst nur einmal ausgeführt.
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Siehe auch include(), require_once(), include_once(), eval(), file(), readfile(), virtual() und include_path.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Die require_once() -Anweisung bindet eine Datei ein und führt diese zur Laufzeit des Skripts aus.
Das Verhalten ist ähnlich der require() -Anweisung mit dem einzigen Unterschied, dass einmal eingebundener Code aus einer Datei nicht nocht einmal eingebunden wird.
Lesen Sie die Dokumentation zu require() um mehr Informationen über die Arbeitsweise dieser Anweisung zu erhalten.
require_once() sollten Sie in den Fällen benutzen, wenn die gleiche Datei in einem bestimmten Bereich mehrmals eingebunden und interpretiert werden soll und Sie sicher stellen wollen, dass diese Datei nur exakt einmal eingebunden wird, um Probleme mit Wiederholungen bei Funktions-Definitionen und Wertzuweisungen zu Variablen zu vermeiden, usw.
Weitere Beispiele zu require_once() und include_once() können Sie dem PEAR -Code entnehmen, welcher im aktuellsten PHP-Source-Code enthalten ist.
Anmerkung:
Windows) das Verhalten von require_once() und include_once() nicht unbedingt ihren Erwartungen entspricht.
Beispiel 12-8. require_once() und Groß - / Kleinschreibung
require_once( "a.php"); / / bindet a.php ein require_once("A.php"); / / bindet a.php auf Windows nochmal ein!
Warnung
Windows PHP Versionen, kleiner als PHP 4.3, erlauben den Zugriff auf Remote-Dateien mit dieser Funktion nicht, selbst wenn allow_url_fopen aktiviert ist.
Siehe auch: require(), include(), include_once(), get_required_files(), get_included_files(), readfile() und virtual().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
reset() setzt den internen Zeiger von array auf das erste Element zurück.
reset() gibt den Wert des ersten Arrayelements zurück.
Siehe auch current(), each(), next() und prev().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 12.
Kontroll-Strukturen
Nach vorne
Wird die return() Anweisung innerhalb einer Funktion aufgerufen, wird die Ausführung der Funktion sofort beendet und das Argument als Wert des Funktionsaufrufs zurückgegeben. return() beendet auch die Ausführung einer eval() Anweisung oder einer Skriptdatei.
Erfolgt der Aufruf innerhalb des globalen Bereichs, wird die Ausführung des aktuellen Skripts beendet.
Wurde das aktuelle Skript include() ed oder require() ed, wird die Kontrolle an das aufrufende Skript zurückgegeben.
Wurde das aktuelle Skript include() ed, wird der Wert, der return() zugewiesen wurde, als Wert des Aufrufs von include() Wurde das aktuelle Skript include() ed, wird der Wert, der return() zugewiesen wurde, als Wert des Aufrufs von include() zurückgegeben.
Wird return() inerhalb des Hauptskripts aufgerufen, wird die Ausführung beendet.
Handelt es sich bei dem Skript um eine Datei, die über die Einträge auto_prepend_file oder auto_append_file in der Konfigurationsdatei aufgerufen wurde, wird die Ausführung dieses Skripts beendet.
Anmerkung:
Deshalb brauchen Sie die Klammern um die Argumente nicht zu schreiben - - tatsächlich ist es eher gebräuchlich, diese wegzulassen, als die Klammern zu benutzen, obwohl es keinen Unterschied ausmacht.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den mit dir_handle angegebenen Verzeichnis-Stream auf den Anfang zurück (Reset).
Zurück
Zum Anfang
Nach vorne
Nach oben
DOM XML Funktionen
PHP Handbuch
Zurück
Nach vorne
Setzt den Dateizeiger (Datei-Positions-Indikator) für handle an den Anfang des Dateistreams.
Wenn ein Fehler auftritt gibt die Funktion 0, andernfalls 1 zurück.
Der Dateizeiger muss gültig sein und auf eine Datei zeigen, die zuvor erfolgreich durch fopen() geöffnet wurde.
Anmerkung:
Haben Sie eine Datei im Append-Modus ("a") geöffnet, werden unabhängig von der Dateiposition alle zu schreibenden Daten angehängt.
Siehe auch fseek() und ftell().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Versucht ein Verzeichnis spezifiziert durch die Pfadangabe dirname zu löschen.
Das Verzeichnis muss leer sein und die relevanten Rechte müssen erteilt sein.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch mkdir() und unlink().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion rundet den Eingabewert val auf precision Stellen nach dem Komma auf oder ab.
$foo = round (3.4); / / $foo == 3.0 $foo = round (3.5); / / $foo == 4.0 $foo = round (3.6); / / $foo == 4.0 $foo = round (1.95583,2); / / $foo == 1.96
Anmerkung:
Siehe auch ceil() und floor().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sortiert ein Array in umgekehrter Reihenfolge (vom höchsten zum niedrigsten Wert).
Beispiel 1. rsort()
$fruits = array ("Zitrone", "Orange", "Banane", "Apfel"); rsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
Dieses Beispiel würde folgendes ausgeben:
0 = Zitrone 1 = Orange 2 = Banane 3 = Apfel
Die Früchte wurden in umgekehrter alphabetischer Reihenfolge sortiert.
Sie können das Verhalten der Sortierung mittels dem optionalen Parameter sort_flags beeinflussen, für Details siehe sort().
Siehe auch arsort(), asort(), ksort(), sort() und usort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den als Argument übergebenen String ohne abschließende Leerzeichen (auch "Neue-Zeile -"Steuerzeichen werden entfernt).
Dies ist ein Alias zu chop().
Beispiel 1. rtrim() -Beispiel:
$getrimmt = rtrim ($line);
Siehe auch chop(), ltrim() und trim().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 13.
Funktionen
Nach vorne
Die Parameterliste ist eine durch Kommas getrennte Liste von Variablen und / oder Konstanten.
PHP unterstützt die Weitergabe von Parametern als Werte (das ist der Standard), als Verweise, und als Vorgabewerte.
Die Übergabe einer variablen Anzahl von Parametern wird nur von PHP 4 und höher unterstützt, siehe Variable Parameteranzahl und die Funktionsreferenzen für func_num_args(), func_get_arg() und func_get_args() für weitere Informationen.
Durch die Übergabe eines Arrays mit Parametern kann man auch in PHP 3 einen ähnlichen Effekt erreichen:
function rechne_array( $eingabe) {echo "$eingabe[0] + $eingabe[1] = ", $eingabe[0]+$eingabe[1];}
Wenn man den Wert dieses Parameters innerhalb der Funktion ändert, bleibt der Parameter außerhalb der Funktion unverändert.
Wollen Sie aber genau das erreichen, dann müssen Sie die Parameter als Verweise (Referenzen) übergeben.
Wenn eine Funktion einen Parameter generell als Verweis behandeln soll, setzt man in der Funktionsdefinition ein kaufmännisches Und () vor den Parameternamen:
function fuege_etwas_anderes_an ($string) {$string .= 'und nun zu etwas anderem .';} $str = 'Dies ist ein String, '; fuege_etwas_anderes_an ($str); echo $str; / / Ausgabe: 'Dies ist ein String, und nun zu etwas anderem.'
Eine Funktion kann C++-artige Vorgabewerte für skalare Parameter wie folgt definieren:
function machkaffee ($typ = "Cappucino") {return "Ich mache eine Tasse $typ.\n";} echo machkaffee (); echo machkaffee ("Espresso");
Die Ausgabe von diesem kleinen Skript ist:
Ich mache eine Tasse Cappucino.
Ich mache eine Tasse Espresso.
Der Vorgabewert muss ein konstanter Ausdruck sein, darf also (zum Beispiel) keine Variable oder Element einer Klasse sein.
Bitte beachten Sie, dass alle Vorgabewerte rechts von den Nicht-Vorgabeparametern stehen sollten; - sonst wird es nicht funktionieren.
Betrachten Sie folgendes Beispiel:
function mach_joghurt ($typ = "rechtsdrehendes", $geschmack) {return "Mache einen Becher $typ $geschmack-joghurt.\n";} echo mach_joghurt ("Brombeer"); / / arbeitet nicht wie erwartet
Die Ausgabe dieses Beispiels ist::
Missing argument 2 in call to makeyogurt() in / usr / local / etc / httpd / htdocs / php3test / functest.html on line 41 Mache einen Becher Brombeer-joghurt.
Nun vergleichen Sie bitte oberes Beispiel mit folgendem:
function mach_joghurt ($geschmack, $typ = "rechtsdrehendes") {return "Mache einen Becher $typ $geschmack-joghurt.\n";} echo mach_joghurt ("Brombeer"); / / arbeitet wie erwartet.
... und jetzt ist die Ausgabe:
Mache einen Becher rechtsdrehendes Brombeer-Joghurt.
PHP 4 unterstützt eine variable Anzahl von Parametern in benutzerdefinierten Funktionen.
Das Handling dieser Parameter fällt mittels der Funktionen func_num_args(), func_get_arg() und func_get_args() sehr leicht.
Die Parameter können wie gehabt explizit in den Funktionsdeklarationen angegeben werden, und werden sich wie gewohnt verhalten.
Zurück
Zum Anfang
Nach vorne
Funktionen
Nach oben
Rückgabewerte
PHP Handbuch
Zurück
Nach vorne
sem_acquire() blockiert die Ausführung (falls notwendig) solange, bis eine Anforderung eines Semaphores durchgeführt werden kann, d.h. solange die Anzahl der gleichzeitigen Anforderungen bereits der maximalen Anzahl entspricht.
Wird ein erfolgreich angeforderter Sempahore innerhalb eines Requests nicht wieder freigegeben, so erfolgt die Freigabe nach Abarbeitung des Requests automatisch und es wird eine Warnung ausgegeben.
Siehe auch sem_get() und sem_release().
Wird ein Semaphore ein zweites mal während desselben Request angefordert, ohne zwischenzeitlich freigegeben worden zu sein, so kann dies dazu führen, dass die weitere Ausführung dieses Requests nicht mehr möglich ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert ein Handle, das für den Zugriff auf das Semaphore mit der Kennung key benutzt werden kann.
Falls noch kein Semaphore mit dieser Kennung existiert, so wird es neu angelegt.
Die maximale Anzahl der gleichzeitig möglichen Anforderungen und die Zugriffsrechte werden dabei über die Parameter max_aquire und sem_get() festgelegt.
Wird der angeforderte Semaphore zum Zeitpunkt des Aufrufs von keiner anderen Funktion genutzt, so kann über den optionalen Parameter max_aquire die Anzahl der gelichzeitig möglichen Anforderungen neu festgelegt werden, anderenfalls bleibt der ursprüngliche Wert erhalten.
Ein zweiter Aufruf der Funktion mit demselben key liefert ein weiteres, von dem ersten verschiedenes, Handle, das aber trotzdem denselben darunterliegenden Semaphore anspricht.
Wenn kein Semaphore mit der Kennung key angelegt werden kann oder die Rechte für den Zugriff auf einen bestehendennicht ausreichen, so ist das Ergebnis dieser Funktion der Wert FALSE.
Siehe auch sem_acquire() und sem_release().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
sem_release() gibt einen zuvor angeforderten Semaphore wieder frei.
Die Anforderung und Freigabe kann innerhalb eines Prozesses mehrfach hintereinander erfolgen.
Die Funktion liefert TRUE, wenn ein angeforderter Semaphore erfolgreich freigegeben wurde, ansonsten FALSE.
Siehe auch sem_get() und sem_acquire().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
serialize() gibt eine Zeichenkette (String) zurück, die eine Byte-Stream entsprechende Wiedergabe von value enthält und beliebig abgespeichert werden kann.
Diese Funktion dient der Speicherung oder Übergabe von PHP-Werten, ohne dass diese ihren Wert oder ihre Struktur verlieren.
Um eine serialisierte Zeichenkette wieder als PHP-Wert verfügbar zu machen steht die unserialize() -Funktion zur Verfügung. serialize() kann mit den Typen integer, double, string, array (mehrdimensional) und object Um eine serialisierte Zeichenkette wieder als PHP-Wert verfügbar zu machen steht die unserialize() -Funktion zur Verfügung. serialize() kann mit den Typen integer, double, string, array (mehrdimensional) und object umgehen.
Beim Objekt werden die Eigenschaften serialisiert, die Methoden gehen aber verloren.
Beispiel 1. serialize() -Beispiel:
/ / $session_data enthält ein mehrdimensionales Array mit / / Session-Informationen des aktuellen Benutzers.
Wir benutzen / / serialize() um diese Infos am Ende der Anfrage in eine / / Datenbank zu speichern. $conn = odbc_connect ("webdb", "php", "moorhuhn"); $stmt = odbc_prepare ($conn, "UPDATE sessions SET data =?
WHERE id = ?"); $sqldata = array (serialize($session_data), $PHP_AUTH_USER); if (!odbc_execute ($stmt, $sqldata)) {$stmt = odbc_prepare ($conn, "INSERT INTO sessions (id, data) VALUES(?, ?)"); if (!odbc_execute($stmt, $sqldata)) {/ * Etwas lief schief.
Fluche, heule und stöhne. * /}}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
result_id ist eine von sesam_query() zurückgelieferte gültige Ergebniskennung (???).
Liefert die Anzahl der von einer Abfrage betroffenen Zeilen bezogen auf die result_id.
Die Funktion sesam_affected_rows() liefert sinnvolle Werte nur in Verbindung mit "immediate "SQL-Statements (Update-Operationen wie INSERT, UPDATE and DELETE), da SESAM für "select type" Abfragen keinerlei Information über betroffene Zeilen liefert.
Der gelieferte Wert ist die Anzahl der betroffenen Zeilen.
Siehe auch: sesam_query() und sesam_execimm()
$result = sesam_execimm ("DELETE FROM PHONE WHERE LASTNAME = '".strtoupper($name) ."'"); if (! $result) {... error...} print sesam_affected_rows($result). "entries with last name ".$name." deleted.\n "
Zurück
Zum Anfang
Nach vorne
SESAM Datenbankfunktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rüchgabewert:
TRUE bei erfolgreicher Ausführung, ansonsten FALSE
sesam_commit() schreibt alle noch ausstehenden Änderungen in die Datenbank
Hinweis: es gibt keine Funktion "automatisches Sichern" wie in anderen Datenbanken, da dies zu ungewolltem Datenverlust führen kann.
Bei der Beendigung des aktuellen Skripts oder beim Aufruf von sesam_disconnect()) werden nicht gesicherte Daten durch einen impliziten sesam_rollback() Aufruf verworfen.
Siehe auch: sesam_rollback().
Beispiel 1.
Schreiben eines Update in die SESAM-Datenbank
?php if (sesam_connect ("mycatalog", "myschema", "otto")) {if (!sesam_execimm("INSERT INTO mytable VALUES (*, 'Small Test', 0, 8, 15 )")) die("insert failed"); if (!sesam_commit()) die("commit failed");}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ergibt TRUE beim erfolgreichen Verbindungsaufbau oder FALSE im Fehlerfall.
sesam_connect() baut die Verbindung zu einem SESAM-DBH-Prozeß auf.
Diese Verbindung ist "permanent", d.h. nur der erste Zugriff veranlaßt das Laden des Treibers aus der konfigurierten SESAM-OML-Plam-Bibliothek.
Alle folgenden Zugriffe nutzen den verwenden den geladenen Treiber und damit automatisch den dadurch definierten Katalog, das Datenbankschema und den Benutzer.
Beim Erstellen einer Datenbank wird der "catalog" definiert in der SESAM-Konfigurationsvorschrift / /ADD-SQL-DATABASE-CATALOG-LIST ENTRY-1 = *CATALOG(CATALOG-NAME = catalogname,...)
"schema" beschreibt das gewünschte Datenbankschema (siehe SESAM-Benutzerhandbuch).
"user" bezieht sich auf Benutzer, die auf die "catalog "/ "schema" Kombination Zugriff haben.
Hinweis: "user" ist sowohl von der Benutzerkennung im System als auch von der HTTP-Benutzerkennung völlig unabhängig und erscheint nur in der SESAM-Konfiguration.
siehe auch sesam_disconnect().
Beispiel 1.
?php if (! sesam_connect ("mycatalog", "myschema", "otto") die("Unable to connect to SESAM";?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert ein assoziatives Array (???) von Status - und Returncodes des letzten SQL - Aktion (Abfrage / Statement(???) / Befehl).
Elemente des Arrays sind:
Tabelle 1.
Von sesam_diagnostic() gelieferte Status Information
5-stelliger SQL-Returncode (mögliche Werte von SQLSTATE: siehe SESAM-Benutzerhandbuch)
Anzahl betroffener Zeilen im letzten update / insert / delete (nur nach "immediate "Statements gesetzt)
"lesbarer" Fehlermeldungstext (nur nach Fehlern gesetzt)
Spaltennummer des letzten Fehlers (1-indiziert oder 0, wenn nicht definiert; nur nach Fehlern gesetzt)
Zeilennummer des letzten Fehlers (1-indiziert oder 0, wenn nicht definiert; nur nach Fehlern gesetzt)
Im folgenden Beispiel wird ein Syntaxfehler (E SEW42AE ILLEGAL CHARACTER) zusammen mit dem fehlerhaften SQL-Statement und der genauen Position des Fehlers angezeigt.
Beispiel 1.
Anzeige von SESAM-Fehlermeldungen mit Fehlerposition
?php / / Function which prints a formatted error message, / / displaying a pointer to the syntax error in the / / SQL statement function PrintReturncode( $exec_str) {$err = Sesam_Diagnostic(); $colspan=4; / / 4 cols for: sqlstate, errlin, errcol, rowcount if ($err["errlin"] == -1) --$colspan; if ($err["errcol"] == -1) --$colspan; if ($err["rowcount"] == 0) --$colspan; echo "TABLE BORDER \n"; echo" TR TH COLSPAN=".$colspan. "FONT COLOR=red ERROR: / FONT". htmlspecialchars($err["errmsg"]). "/ TH / TR \n"; if ($err["errcol"] = 0) {echo" TR TD COLSPAN=".$colspan. "PRE \n"; $errstmt = $exec_str ."\n"; for ($lin=0; $errstmt != ""; ++$lin) {if ($lin != $err["errlin"]) {/ / $lin is less or greater than errlin if (! ($i = strchr($errstmt, "\n"))) $i =""; $line = substr($errstmt, 0, strlen($errstmt)-strlen($i)+1); $errstmt = substr($i, 1); if ($line != "\n") print htmlspecialchars($line);} else {if (! ($i = strchr($errstmt, "\n"))) $i = ""; $line = substr($errstmt, 0, strlen($errstmt)-strlen($i)+1); $errstmt = substr($i, 1); for ($col=0; $col $err["errcol"]; ++$col) echo (substr($line, $col, 1) == "\t")? "\t": "."; echo" FONT COLOR=RED BLINK\\ / BLINK / FONT \n"; print "FONT COLOR=\"#880000\" ".htmlspecialchars($line). "/ FONT"; for ($col=0; $col $err["errcol"]; ++$col) echo (substr($line, $col, 1) == "\t")? "\t ":" ."; echo "FONT COLOR=RED BLINK / / BLINK / FONT \n";}} echo" / PRE / TD / TR \n";} echo "TR \n"; echo" TD sqlstate= ". $err["sqlstate"]." / TD \n"; if ($err["errlin"] != -1) echo "TD errlin=". $err["errlin"]. "/ TD \n"; if ($err["errcol"] != -1) echo" TD errcol= ". $err["errcol"]." / TD \n"; if ($err["rowcount"] != 0) echo "TD rowcount=". $err["rowcount"]. "/ TD \n"; echo" / TR \n"; echo "/ TABLE \n";} if (!sesam_connect("mycatalog", "phoneno", "otto")) die("cannot connect"); $stmt = "SELECT * FROM phone\n"." WHERE@ LASTNAME='KRAEMER'\n". "ORDER BY FIRSTNAME"; if (! ($result = sesam_query($stmt))) PrintReturncode($stmt);?
Siehe auch: sesam_errormsg() für einfachen Zugriff nur auf die Fehlermeldung
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewert: immer TRUE.
sesam_disconnect() schließt die logische Verbindung zur SESAM-Datenbank (ohne Verbindungsabbau und Entladen des Treibers).
Hinweis: dieser Funktionsaufruf ist normalerweise nicht erforderlich, da eine offene logische Verbindung automatisch am Ende der Bearbeitung des Skripts geschlossen wird.
Ungesicherte Daten werden verworfen, da ein implizites sesam_rollback() durchgeführt wird.
SESAM-Aufrufe nach sesam_disconnect() sind nicht mehr möglich.
Siehe auch: sesam_connect().
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert die SESAM-Fehlermeldung des letzten SESAM-Fehlers.
if (!sesam_execimm($stmt)) printf("%s br \n", sesam_errormsg());
Siehe auch: sesam_diagnostic() für den vollen Umfang der SESAM SQL Statusinformation.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewerte:
Ein SESAM "result identifier" oder FALSE im Fehlerfall.
UPDATE, INSERT oder DELETE, die keine Rückgabewerte liefern und weder Eingabe - noch Ausgabevariablen verwenden und setzt den Abfrageparameter affected_rows über die sesam_affected_rows() Funktion.
Auf "select type" Abfragen kann sesam_execimm() nicht angewendet werden.
Hinweis: sesam_query() unterstützt sowohl "immediate "als auch "select-type" Abfragen. sesam_execimm() sollte nur verwendet werden, wenn der verwendete Anfragetyp von vornherein bekannt ist.
SELECT-Abfragen mit sesam_execimm() werden mit dem Fehler $err["sqlstate"] == "42SBW "beendet.
Der Rückgabewert "result identifier" kann nicht für Abfragen mit sesam_affected_rows() verwendet werden; er wird wegen der Kompatibilität zur Funktion sesam_query() ausgegeben.
$stmt = "INSERT INTO mytable VALUES('one', 'two')"; $result = sesam_execimm ($stmt); $err = sesam_diagnostic(); print("sqlstate = ".$err["sqlstate"] ."\n". "Affected rows = ".$err["rowcount"]." == ". sesam_affected_rows($result) ."\n");
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert ein Array, das der gelesenen Zeile entspricht oder FALSE falls es keine weiteren Zeilen mehr gibt.
sesam_fetch_array() ist eine Alternative zur Funktion sesam_fetch_row().
Die Daten werden anstatt in numerischen Indizes des Ergebnisarrays in assoziativen Indizes gespeichert, wobei die Feldnamen als Indizes benutzt werden.
result_id ist eine gültige Ergebniskennung (???) der Funktion sesam_query() (nur Abfragen vom Typ select!).
Für die gültigen Werte der optionalen Parameter whence und offset im Detail siehe sesam_fetch_row().
Die Funktion sesam_fetch_array() Die Funktion sesam_fetch_array() holt eine mit der spezifizierten Ergebniskennung (???) assoziierte Datenzeile.
Die Zeile wird als assoziatives Array zur Verfügung gestellt.
Jede Ergebnisspalte wird mit einem assoziativen Index gleich dem Spaltennamen (aka. field) abgespeichert.
Die Spaltennamen werden in Kleinschreibung konvertiert dargestellt.
Ergebnisse von arithmetischen Operationen) und leere Felder werden im Array nicht gespeichert.
Haben zwei oder mehr Spalten im Ergebnis den selben Namen, bekommt diesen die letzte Spalte.
In diesem Fall empfiehlt sich der Einsatz von sesam_fetch_row() oder Alias-Definitionen für die Spalten.
Eine Spezialbehandlung erlaubt den Zugriff auf "multiple field" Spalten (die sonst alle den selben Spaltennamen haben würden).
Für jede Spalte eines "multiple field" wird der Name gebildet durch Anhängen von "(n)", wobei n den Sub-Index der "multiple field "Spalte darstellt und Werte von 1 bis zum deklarierten Wiederholungsfaktor annehmen kann.
Zur Übereinstimmung mit der entsprechenden Abfragesyntax sind die Indizes n i c h t null-basiert.
Für eine Spalte der Definition:
Nachfolgende Aufrufe von sesam_fetch_array() liefern die nächste Zeile (oder die vorhergehende, höchste / niedrigste je nach den Attributen) im Ausgabesatz oder FALSE wenn keine Zeilen mehr verfügabr sind.
Beispiel 1.
SESAM fetch rows
?php $result = sesam_query ("SELECT * FROM phone\n". "WHERE LASTNAME='".strtoupper($name) ."'\n"." ORDER BY FIRSTNAME", 1); if (! $result) {... error...} / / print the table: print "TABLE BORDER \n"; while (($row = sesam_fetch_array ($result)) count($row) 0) {print" TR \n"; print "TD ".htmlspecialchars($row["firstname"])." / TD \n"; print "TD ".htmlspecialchars($row["lastname"])." / TD \n"; print "TD ".htmlspecialchars($row["phoneno"])." / TD \n"; print "/ TR \n";} print" / TABLE \n"; sesam_free_result ($result);?
Siehe auch: sesam_fetch_row() (liefert ein indiziertes Array)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert ein gemischtes Array (???) mit den Ergebnissen einer Abfrage, optional begrenzt auf ein Maximum durch max_rows Zeilen.
Sowohl Zeilen - als auch Spaltenindizes sind Null-basiert.
Tabelle 1.
Gemischtes Resultat mit der Funktion sesam_fetch_result()
Anzahl von Ergebnis-Spalten im Ausgabesatz (oder NULL bei "immediate "Abfragen)
Anzahl von Zeilen im Ausgabesatz (zwischen NULL und max_rows)
TRUE wenn die Anzahl der Zeilen mindestens max_rows ist, ansonsten FALSE.
0 Zeilen zurückliefern, weil es keine weiteren Ergebniseinträge gibt.
Ergebnisdaten für alle Felder in Zeile( row) und Spalte (col), wobei der Integer-Index row zwischen 0 and $arr["rows"]-1, und col zwischen 0 und $arr["count"]-1) liegt.
Da Felder auch leer sein können, muss ihre Existenz mit der PHP-Funktion isset() verifiziert werden.
Der zurückgelieferte Feldtyp hängt vom entsprechenden, für die Spalte defineirten SQL-Typ ab (siehe SESAM overview für die angewendeten Umsetzungen).
SESAM "multiple fields" sind "inlined "(???) und werden wie eine Spaltenfolge behandelt.
Siehe auch: sesam_fetch_row(), und sesam_field_array() zur Überprüfung auf "multiple fields ".
Ein komplettes Beispiel für die Funktion sesam_fetch_result() findet man in sesam_query().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert ein Array entsprechend der gelesenen Zeile oder FALSE nach de letzten gefundenen Zeile.
Die Anzahl der Spalten im Ausgabesatz wird als Element des assoziativen Arrays $array[ "count"] geliefert.
Da Ergebnisspalten auch leer sein können, kann die Funktion count() nicht auf das Ergebnis der Funktion sesam_fetch_row() angewendet werden.
result_id ist eine gültige Ergebniskennung (???) der Funktion sesam_query() (nur Abfragen vom Typ select!).
whence ist ein optionaler Parameter für eine "fetch"-Operation (???) bei "scrollable" Cursor und kann auf folgende vordefinierte Werte gesetzt werden:
Tabelle 1.
Gültige Werte für Parameter "whence"
sequentielles Lesen (nach "fetch "wird der interne Standardwert auf SESAM_SEEK_NEXT gesetzt)
sequentielles Lesen rückwärts (nach "fetch "wird der interne Standardwert auf SESAM_SEEK_PRIOR gesetzt)
zurück zur ersten Zeile (nach "fetch "wird der interne Standardwert auf SESAM_SEEK_NEXT gesetzt)
suche letzte Zeile (nach "fetch "wird der interne Standardwert auf SESAM_SEEK_PRIOR gesetzt)
suche Zeilen mit der Nummer definiert durch offset (Null-basierte Indizierung (nach "fetch "wird der interne Standardwert auf SESAM_SEEK_ABSOLUTE gesetzt und der interne offset-Wert wird automatisch hochgesetzt)
suche relativ zur aktuellen Position; offset kann positiv oder negativ sein.
Bei "scrollable" kann der Cursor beliebig im Ausgabesatz positioniert werden.
Wird der optionale Parameter whence nicht benutzt, werden die globalen Standardwerte für den Scroll-Typ verwendet (Initialiwert:
SESAM_SEEK_NEXT, einstellbar mit der Funktion sesam_seek_row()).
Bei Verwendung des Parameters whence ersetzen dessen Werte die golbalen Standardwerte.
offset ist ein optionaler Parameter, der nur wirkt (und auch nur benötigt wird), wenn whence entweder den Wert SESAM_SEEK_RELATIVE oder SESAM_SEEK_ABSOLUTE hat.
Dieser Parameter ist nur für "scrollable" Cursors gültig.
sesam_fetch_row() holt eine Datenzeile aus dem Ergebnis mit der zugeordneten Ergebniskennung (???).
Die Zeile wird als Array geliefert, wobei die indizierten Werte zwischen 0 und $array[ "count"]-1) liegen.
Da Felder auch leer sein können, muss die Existenz eines mit der PHP-Funktion isset() verifiziert werden.
Der Typ der gelieferten Felder ist abhängig von der entsprechenden SQL-Typdeklaration düe die Spalten (siehe SESAM overview für die angewendeten Umsetzungen).
SESAM "multiple fields" sind "inlined "(???) und werden wie eine Spaltenfolge behandelt.
Nachfolgende Aufrufe von sesam_fetch_row() liefern die nächste Zeile (oder die vorhergehende, höchste / niedrigste je nach den Attributen) im Ausgabesatz oder FALSE wenn keine Zeilen mehr verfügabr sind.
Beispiel 1.
Siehe auch:
Funktion sesam_fetch_array() (liefert ein assoziatives Array) und sesam_fetch_result() (liefert viele Zeilen pro Aufruf (???))
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
result_id ist eine gültige Ergebniskennung (?) der Funktion sesam_query().
Liefert eine gemischtes assoziativ indiziertes Array (???) mit Meta-Informationen (Spaltenname, Typ, Genauigkeit,...) über einzelne Ergebnisspalten nach einer mit result_id assoziierten Abfrage.
Tabelle 1.
Von sesam_field_array() gelieferter gemischter Ausgabesatz
Gesamtanzahl von Zeilen im Ausgabesatz (oder NULL bei "immediate "Abfragen).
SESAM "multiple fields" sind "inlined "(???) und werden werden wie die entsprechende Anzahl von Spalten behandelt.
Spaltenname für column( col), wobei col zwischen 0 und $arr["count" ]-1 liegt.
Für dynamisch berechnete Spalten kann der gelieferte Wert auch ein Leer-String sein.
SESAM "multiple fields" sind "inlined "(???) und werden wie die entsprechende Anzahl von Spalten behandelt, jedes mit dem selben Spaltennamen.
"count" ist der Wiederholungsfaktor, wenn die Spalte als "multiple field "definiert wurde (normalerweise 1).
Die erste Spalte einer "multiple field"-Spalte enthält dagegen die Anzahl von Wiederholungen (in der zweiten und in allen weiteren Spalten ist "count" 1), was zur Identifikation von "multiple fields "im Ergebnissatz verwendet werden kann.
Das Beispiel in der Beschreibung von sesam_query() demonstriert die Anwendung des "count "-Attributes.
"integer"
"double"
"string"
Das Attribut "length" der SQL-Variablen in column (col), wobei col zwischen 0 und $arr["count" ]-1 liegt.
Das "length" Attribut wird in "CHARACTER "und "VARCHAR" SQL-Typen zur Spezifizierung der (maximalen) Länge der Zeichenvariablen verwendet.
SESAM "multiple fields" sind "inlined "(???) und werden wie die entsprechende Anzahl von Spalten behandelt, jedes mit dem selben Längenattribut.
Das Attribut "precision" der SQL-Variablen in column (col), wobei col zwischen 0 and $arr["count" ]-1 liegt.
Das Attribut "precision" wird für numerische und Zeit-Felder verwendet.
SESAM "multiple fields" sind "inlined "(???) und werden wie die entsprechende Anzahl von Spalten behandelt, jedes mit dem selben Attribut "precision".
Das Attribut "scale" der SQL-Variablen in column (col), wobei col zwischen 0 and $arr["count" ]-1 liegt.
Das Attribut "scale" wird für numerische Datentypen verwendet.
SESAM "multiple fields" sind "inlined "(???) und werden wie die entsprechende Anzahl von Spalten behandelt, jedes mit dem selben Attribut "scale".
Siehe Beschreibung von sesam_query() für eine beispielhafte Anwendung der Funktion sesam_field_array().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Namen eines Feldes (d.h. den Spaltennamen) oder FALSE on error.
Bei "immediate" Abfragen oder bei dynamischen Spalten wird ein Leerstring zurückgegeben.
Anmerkung:
Der Spalten-Index zählt ab NULL, nicht wie bei SESAM ab Eins.
Siehe auch: sesam_field_array().
Bietet einen bequemeren Zugriff auf Spaltennamen und -typen und erlaubt die Prüfung auf "multiple fields".
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt Betriebsmittel der mit result_id assoziierten Abfrage frei.
FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Nach dem Aufruf der Funktion sesam_query() mit einer "select type "Abfrage wird die Anzahl von Spalten als Resultat ausgegeben.
Die Ausgabe ist ein Integer-Wert, der die Anzahl aller Spalten (aka.fields) im aktuellen result_id Ergebnis-Satz oder FALSE.
Bei "immediate" Befehle wird der Wert NULL zurückgegeben.
Die SESAM "multiple field" Spalten zählen entsprechend der jeweiligen Dimension, d.h. ein dreispaltiges "multiple field "zählt als drei Spalten.
Siehe auch: sesam_query() und sesam_field_array() zur Unterscheidung zwischen "multiple field "Spalten und normalen Spalten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewerte: ein SESAM "result identifier" oder FALSE im Fehlerfall.
Von anderen Funktionen wird "result_id" für Abfrage-Ergebnisse verwendet.
sesam_query() schickt eine Abfrage an die aktuelle Datenbank auf dem Server.
Sie kann sowohl "immediate" SQL-Anweisungen als auch "select type "Abfragen ausführen.
Bei der Ausführung einer "immediate" Anweisung ist kein Cursor aktiv und bei jedem folgenden sesam_fetch_row() oder sesam_fetch_result() call will return an empty Aufruf wird ein leeres Ergebnis (zero columns, indicating end-of-result) zurückgeliefert.
Für "select type" Anweisungen wird ein Ergebnis-Deskriptor und ein Cursor (scrollable oder sequential, abhängig vom optionalen bool scrollable -Parameter) zugewiesen.
Wenn scrollable nicht angegeben wird, ist der Cursor sequentiell.
Bei der Verwendung von "scrollable" Cursors kann der Cursor im Ausgabesatz beliebig positioniert werden.
Für jede "scrollable" Abfrage gibt es globale Standardwerte für den "scrolling"-Typ (Initial-Wert:
SESAM_SEEK_NEXT) und den scrolling offset, der entweder einmal durch sesam_seek_row() oder bei jedem Lesen einer Zeile mit sesam_fetch_row().
Für "immediate" Befehle wird die Anzahl der betroffenen Zeilen für Abfragen von der Funktion sesam_affected_rows() gesichert.
Siehe auch: sesam_fetch_row() und sesam_fetch_result().
Beispiel 1.
Zeige alle Zeilen der Tabelle "Telefon" als HTML-Tabelle
?php if (!sesam_connect("phonedb", "demo", "otto")) die("cannot connect"); $result = sesam_query("select * from phone"); if (!$result) {$err = sesam_diagnostic(); die($err["errmsg"]);} echo "TABLE BORDER \n"; / / Add title header with column names above the result: if ($cols = sesam_field_array($result)) {echo" TR TH COLSPAN=".$cols["count"]. "Result: / TH / TR \n"; echo" TR \n"; for ($col = 0; $col $cols["count"]; ++$col) {$colattr = $cols[$col]; / * Span the table head over SESAM's "Multiple Fields": * / if ($colattr["count"] 1) {echo "TH COLSPAN=".$colattr["count"]." ".$colattr["name"]. "(1. .".$colattr["count"] .") / TH \n"; $col += $colattr["count"] - 1;} else echo "TH". $colattr["name"]. "/ TH \n";} echo" / TR \n";} do {/ / Fetch the result in chunks of 100 rows max. $ok = sesam_fetch_result($result,100); for ($row=0; $row $ok["rows"]; ++$row) {echo "TR \n"; for ($col = 0; $col $ok["cols"]; ++$col) {if (isset($ok[$col][$row])) echo" TD ". $ok[$col][$row]." / TD \n"; else echo "TD -empty - / TD \n";} echo" / TR \n";}} while ($ok["truncated"]); / / while there may be more data echo "/ TABLE \n"; / / free result id sesam_free_result($result);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Rückgabewerte:
TRUE bei erfolgreicher Ausführung, ansonsten FALSE
sesam_rollback() Verwirft alle noch nicht gesicherten Änderungen der SESAM-Datenbank sowie Ergebnis-Cursor und Ergebnis-Deskriptoren.
Bei jeder Beendigung eines aktuellen Skripts sowie beim Aufruf von sesam_disconnect()) werden nicht gesicherte Daten durch einen impliziten sesam_rollback() Aufruf verworfen.
Siehe auch: sesam_commit().
Beispiel 1.
Verwerfen einer Änderung der SESAM-Datenbank
?php if (sesam_connect ("mycatalog", "myschema", "otto")) {if (sesam_execimm("INSERT INTO mytable VALUES (*, 'Small Test', 0, 8, 15 )") sesam_execimm("INSERT INTO othertable VALUES (*, 'Another Test', 1)")) sesam_commit(); else sesam_rollback();}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
result_id ist eine gültige Ergebniskennung (???); nur bei Abfragen vom Typ select und nur, wenn beim Aufruf von sesam_query()) ein "scrollable Cursor "verlangt wurde.
whence definiert den globalen Standardwert für den Scroll-Typ, der in weiteren Lese-Operationen für "scrollable" Cursor angewendet wird; folgende vordefinierte Werte sind möglich: constants:
Tabelle 1.
sequentielles Lesen
sequentielles Lesen rückwärts
erste Zeile lesen (nach dem Lesen wird der Standardwert auf SESAM_SEEK_NEXT gesetzt)
letzte Zeile lesen (nach dem Lesen wird der Standardwert auf SESAM_SEEK_PRIOR gesetzt)
lesen Zeile mit der Nummer definiert durch offset (Null-basierte Indizierung; nach "fetch "wird der interne Standardwert auf SESAM_SEEK_ABSOLUTE gesetzt und der interne offset-Wert wird automatisch hochgesetzt)
suche relativ zur aktuellen Position; offset kann positiv oder negativ sein und wird auch als Standard-Offset für weitere Abfragen gesetzt
offset ist ein optionaler Parameter, der nur wirkt (und auch nur benötigt wird), wenn whence entweder den Wert SESAM_SEEK_RELATIVE oder SESAM_SEEK_ABSOLUTE hat.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ergibt TRUE für gültige Werte und wenn settransaction() erfolgreich war, ansonsten FALSE.
sesam_settransaction() sesam_settransaction() überschreibt die Standardwerte für "isolation level "Parameter und die in der SESAM-Konfigurationsdatei gesetzten "read-only" Transaktionsparameter, um nachfolgende Abfragen zu optimieren und die Konsistenz der Datenbank sicherzustellen.
Die geänderten (überschriebenen) Werte wirken nur auf die nächste Transaktion.
sesam_settransaction() kann nur vor dem Start aufgerufen werden, also nicht, wenn eine Transaktion bereits gestartet wurde.
Um die Anwendung in PHP-Scripts zu vereinfachen, wurden folgende Konstanten in PHP vordefiniert (zur Erläuterung der Semantik siehe SESAM-Benutzerhandbuch):
Tabelle 1.
Gültige Werte für "Isolation_Level" Parameter
Tabelle 2.
Gültige Werte für "Read_Only" Parameter
Die von sesam_settransaction() gesetzten Werte überschreiben die in der SESAM-Konfigurationsdatei gesetzten Standardwerte.
Beispiel 1.
Setzen von SESAM-Transaktionsparametern
?php sesam_settransaction( SESAM_TXISOL_REPEATABLE_READ, SESAM_TXREAD_READONLY);?
Zurück
Zum Anfang
Nach vorne
Nach oben
Session Funktionen
PHP Handbuch
Zurück
Nach vorne
session_cache_expire() gibt die aktuelle Einstellung von session.cache_expire aus der php.ini zurück.
Wenn neue_cache_verfallszeit angegeben wurde, wird die aktuelle cache_expire durch neue_cache_verfallszeit ersetzt.
Siehe auch: session.cache_expire Konfigurations-Anweisung.
Zurück
Zum Anfang
Nach vorne
Session Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_cache_limiter() gibt die Bezeichnung der aktuellen Cacheverwaltung zurück.
Wenn Cacheverwaltung angegeben wurde, wird diese dem neuen Wert entsprechend geändert.
Die Cacheverwaltung steuert die Cache-Kontrolle der HTTP-Header, die zum Client geschickt werden.
Diese Header bestimmen die Regel, nach der der Seiteninhalt in den Cachespeicher aufgenommen wird.
Wird die Cacheverwaltung beispielsweise auf nocache gesetzt, ist eine clientseitige Speicherung im Cache nicht erlaubt.
Sie kann auch auf private gesetzt werden, was etwas restriktiver ist, als public.
Im private -Modus könnte ein zum Client gesendeter Expire-Header manche Browser, inklusive Mozilla, verwirren.
Sie können dieses Problem durch Verwendung des private_no_expire -Modus vermeiden.
In diesem Modus wird nie ein Expire-Header zum Client gesendet.
Zu Beginn einer Anfrage wird die Cacheverwaltung auf den voreingestellten Wert zurückesetzt, der in session.cache_limiter gespeichert ist.
Daher müssen Sie session_cache_limiter() bei jeder Anfrage aufrufen (und zwar bevor session_start() aufgerufen wird).
Beispiel 1. session_cache_limiter() Beispiel
?php / * setzen der Cacheverwaltung auf 'private' * / session_cache_limiter('private'); $cacheverwaltung = session_cache_limiter(); echo "Die Cacheverwaltung ist jetzt auf $cacheverwaltung gesetzt p ";?
Siehe auch die session.cache_limiter Konfigurationsanweisung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_decode() dekodiert die Daten der Session in Daten und setzt die Variablen, die in der Session gespeichert sind.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_destroy() löscht alle in Verbindung mit der aktuellen Session stehenden Daten.
Mit der Session zusammenhängende Globale Variablen und das Session-Cookie werden nicht gelöscht.
Diese Funktion gibt nach erfolgtem Löschen der Daten TRUE zurück und FALSE, wenn dabei ein Fehler auftritt.
Beispiel 1.
Löschen einer Session
?php / / Initialisierung der Session. / / Wenn Sie session_name( "irgendwas") verwenden, vergessen Sie es / / jetzt nicht! session_start(); / / Löschen aller Session-Variablen. session_unset(); / / Zum Schluß, löschen der Session. session_destroy();?
Beispiel 2.
Löschen einer Session mit $_SESSION
?php / / Initialisierung der Session. / / Wenn Sie session_name( "irgendwas") verwenden, vergessen Sie es / / jetzt nicht! session_start(); / / Löschen aller Session-Variablen. $_SESSION = array(); / / Zum Schluß, löschen der Session. session_destroy();?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_encode() gibt eine Zeichenkette mit dem kodierten Inhalt der aktuellen Session zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Array enthält folgende Elemente:
"lifetime" - Die Lebensdauer des Cookies.
"path" - Der Pfad, unter dem Informationen gespeichert sind.
"domain" - Die Domain des Cookies.
"secure" - Das Cookie soll nur über sichere Verbindungen gesendet werden. (Dieses Element wurde in PHP 4.0.4 hinzugefügt.)
Siehe auch die Konfigurationsanweisungen session.cookie_lifetime, session.cookie_path, session.cookie_domain, session.cookie_secure, und session_set_cookie_params().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_id() gibt die Session-ID der aktuellen Session zurück.
Wenn ID angegeben wird, wird die die aktuelle Session-ID ersetzt. session_id() muss zu diesem Zweck vor session_start() aufgerufen werden.
In Abhängigkeit von der Session-Prozedur sind in der Session-ID nicht alle Zeichen erlaubt.
Zum Beispiel erlaubt die dateibasierte Session-Prozedur nur Zeichen im Bereich a-z, A-Z and 0-9!
Die Konstante SID kann auch dazu verwendet werden, den aktuellen Namen und die Session-ID als Zeichenkette passend zum Anhängen an URLs zu erhalten.
Beachten Sie, dass SID nur definiert ist, wenn vom Client nicht das richtige Cookie gesendet wurde.
Siehe auch Session Funktionen.
Siehe auch session_start(), session_set_save_handler() und session.save_handler.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_is_registered() gibt TRUE zurück, wenn in der aktuellen Session eine Variable mit dem Namen Name registriert ist.
Anmerkung:
Benutzen Sie bei Verwendung von $_SESSION (oder $HTTP_SESSION_VARS bei PHP 4.0.6 oder niedriger) isset() um zu prüfen, ob eine Variable in $_SESSION registriert ist.
Achtung
Wenn Sie $_SESSION (oder $HTTP_SESSION_VARS) verwenden, sollten Sie nicht session_register(), session_is_registered() und session_unregister() verwenden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_module_name() gibt den Namen des aktuellen Session-Moduls zurück.
Wenn Modul angegeben wird, wird stattdessen dieses Modul verwendet.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_name() gibt den Namen der aktuellen Session zurück.
Wenn Name angegeben wird, wird der Name der aktuellen Session durch dessen Wert ersetzt.
Der Session-Name referenziert die Session-ID in Cookies und URLs.
Er sollte nur alphanumerische Zeichen enthalten und sollte kurz und beschreibend sein (z.B. für Benutzer mit aktivierter Cookie-Warnung).
Der Session-Name wird auf den Ausgangswert zurückgesetzt, der zu Beginn in session.name gespeichert wurde.
Deshalb muss session_name() bei jeder Anfrage aufgerufen werden (und bevor session_start() oder session_register() aufgerufen wurden).
Beispiel 1. session_name() Beispiele
?php / * den Session-Namen auf WebsiteID setzen * / $name_vorher = session_name ("WebsiteID"); echo "Der vorhergehende Session-Name war $name_vorher p ";?
Siehe auch die session.name Konfigurationsanweisung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liest Session-Daten ein, ohne sie zu sperren.
Es ist nicht möglich, die Session-Daten zu ändern, aber die Performance in Frame-Sets verbessert sich.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_register() akzeptiert eine variable Anzahl von Argumenten, die jeweils entweder eine Zeichenkette sein können, die den Namen einer Variablen trägt, oder ein Array, das aus solchen Variablennamen oder anderen Arrays besteht.
Für jeden Namen registriert session_register() die globale Variable mit diesem Namen in der aktuellen Session.
Achtung
Diese Funktion registriert eine globale Diese Funktion registriert eine globale Variable.
Wenn Sie eine Session-Variable innerhalb einer Funktion registrieren wollen, müssen Sie sicherstellen, dass Sie sie unter Verwendung des global -Schlüsselworts oder des $GLOBALS[] -Arrays global machen oder die nachstehend vermerkten speziellen Session-Arrays verwenden.
Achtung
Wenn Sie $_SESSION (oder $HTTP_SESSION_VARS) verwenden, sollten Sie nicht session_register(), session_is_registered() und session_unregister() verwenden.
Diese Funktion gibt TRUE zurück, wenn alle Variablen erfolgreich in der Session registriert wurden.
Wenn session_start() nicht vor dieser Funktion aufgerufen wurde, erfolgt ein impliziter Aufruf von session_start() ohne Parameter.
Sie können eine Session-Variable auch erzeugen, indem Sie das entsprechende Element des $_SESSION - oder (PHP = 4.1.0) $HTTP_SESSION_VARS -Arrays setzen.
$barney = "A big purple dinosaur ."; session_register("barney"); $_SESSION["zim"] = "An invader from another planet ."; # Die alte Methode war, $HTTP_SESSION_VARS zu verwenden $HTTP_SESSION_VARS["spongebob"] = "He's got square pants .";
Anmerkung:
Gegenwärtig ist es nicht möglich, Ressourcen-Variablen in einer Session zu registrieren.
Zum Beispiel können Sie nicht erwarten, dass die als Session-Variable gespeicherte Verbindungs-Kennung der zu einer Datenbank aufgebauten Verbindung bei der nächsten Wiederherstellung der Session noch gültig ist.
PHP-Funktionen, die eine Ressource zurückgeben, können daran erkannt werden, dass sie einen Rückgabewert resource in ihrer Funktionsdefinition haben.
Eine Liste der Funktionen, die Ressourcen zurückgeben befindet sich im Anhang Liste von PHP Ressourcen.
Bei Verwendung von $_SESSION (oder $HTTP_SESSION_VARS bei PHP 4.0.6 oder niedriger) weisen Sie $_SESSION eine Variable zu, also $_SESSION['var'] = 'ABC';
Siehe auch: session_is_registered() und session_unregister().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_save_path() gibt den Pfad des aktuellen Verzeichnisses zurück, das zum Speichern der Session-Daten verwendet wird.
Zu diesem Zweck muss session_save_path() vor session_start() aufgerufen werden.
Anmerkung:
Unter manchen Betriebssystemen, wollen Sie vielleicht einen Pfad auf einem Dateisystem angeben, das sehr viele kleine Dateien effizient behandelt.
Unter Linux, zum Beispiel, bietet reiserfs eventuell eine bessere Performance als ext2fs.
Siehe auch die session.save_path Konfigurationsanweisung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzen der Cookie-Parameter, die in der php.ini definiert sind.
Diese Funktion wirkt sich nur für die Dauer des Scripts aus.
Anmerkung:
Der Parameter secure wurde in PHP 4.0.4 hinzugefügt.
Siehe auch die Konfigurationsanweisungen session.cookie_lifetime, session.cookie_path, session.cookie_domain, session.cookie_secure und session_get_cookie_params().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_set_save_handler() setzt die benutzerdefinierten Session-Speicherfunktionen, die zur Speicherung und Wiederherstellung von zur Session gehörigen Daten verwendet werden.
Dies ist äußerst nützlich, wenn eine andere als die mit PHP-Sessions zur Verfügung stehende Art der Speicherung, z.B. die Speicherung der Session-Daten in einer lokalen Datenbank, bevorzugt wird.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Anmerkung:
Die "schreiben "-Routine wird nicht ausgeführt, bevor die Ausgabe abgeschlossen ist.
Deshalb werden auch niemals Fehlermeldungen der "schreiben "-Routine im Browser erscheinen.
Wenn die Ausgabe von Fehlermeldungen nötig ist, sollte diese stattdessen in eine Datei geschrieben werden.
Anmerkung:
Wenn die Session keine Daten enthält, wird die "schreiben"-Routine nicht ausgeführt; das trifft auch dann zu, wenn leere Session-Variablen registriert sind.
Im Unterschied dazu erzeugt die standardmäßige dateibasierte Session-Speicherfunktion auch leere Session-Dateien.
Das folgende Beispiel liefert eine dateibasierte Session-Speicherung, die der Standard-Speicherroutine files der PHP-Sessions ähnlich ist.
Dieses Beispiel kann problemlos erweitert werden, dass es Datenbank-Speicherung mittels ihrer bevorzugten PHP-gestützten Datenbank beinhaltet.
Damit die Speicherroutine funktioniert wie erwartet, muss die read-Function immer einen String-Wert zurückgeben.
Wenn es keine Daten zu lesen gibt, geben Sie eine leere Zeichenkette zurück.
Rückgabewerte anderer Routinen werden in boolesche Ausdrücke umgewandelt.
TRUE für einen Erfolg, FALSE für einen Fehler.
Beispiel 1. session_set_save_handler() Beispiel
?php function open ($save_path, $session_name) {global $sess_save_path, $sess_session_name; $sess_save_path = $save_path; $sess_session_name = $session_name; return(true);} function close() {return(true);} function read ($id) {global $sess_save_path, $sess_session_name; $sess_file = "$sess_save_path / sess_$id"; if ($fp = @fopen($sess_file, "r")) {$sess_data = fread($fp, filesize($sess_file)); return($sess_data);} else {return(""); / / Must return "" here.}} function write ($id, $sess_data) {global $sess_save_path, $sess_session_name; $sess_file = "$sess_save_path / sess_$id"; if ($fp = @fopen($sess_file, "w")) {return(fwrite($fp, $sess_data));} else {return(false);}} function destroy ($id) {global $sess_save_path, $sess_session_name; $sess_file = "$sess_save_path / sess_$id"; return(@unlink($sess_file));} / ************************************************ * WARNUNG - Sie müssen hier irgendeine Art von * * Speicherbereinigungsroutine realisieren. * ************************************************ / function gc ($maxlifetime) {return true;} session_set_save_handler ("open", "close", "read", "write", "destroy", "gc"); session_start(); / / verfahren Sie mit Sessions wie gewohnt?
Siehe auch die session.save_handler Konfigurationsanweisung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
B. durch GET-Variablen oder Cookie-Variablen, wieder auf).
Wenn Sie eine benannte Session verwenden wollen, müssen Sie session_name() aufrufen, bevor Sie session_start() aufrufen.
Diese Funktion gibt immer TRUE zurück.
Anmerkung:
Bei Verwendung Cookie-basierter Sessions müssen Sie session_start() aufrufen, bevor irgend etwas an den Browser geschickt wird.
Wenn trans-sid aktiviert ist, registriert session_start() die interne Ausgaberoutine für das Umschreiben von URLs.
Verwendet ein Benutzer ob_gzhandler oder ähnliches mit ob_start(), ist die Reihenfolge der Augaberoutine wichtig für eine korrekte Ausgabe.
Zum Beispiel muss der Benutzer ob_gzhandler vor Beginn der Session registrieren.
Anmerkung:
Die Verwendung von zlib.output_compression ist ob_gzhandler() vorzuziehen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
session_unregister() hebt die Registrierung der globalen Variablen namens Name in der aktuellen Session auf.
Diese Funktion gibt TRUE zurück, wenn die Aufhebung der Registrierung der Variablen in der Session erfolgt ist.
Anmerkung:
Benutzen Sie bei Verwendung von $_SESSION (oder $HTTP_SESSION_VARS bei PHP 4.0.6 oder niedriger) unset() um die Registrierung einer Session-Variablen aufzuheben.
Achtung
Diese Funktion löscht die Name entsprechende globale Variable nicht, sondern verhindert nur, dass die Variable als Teil der Session gespeichert wird.
Sie müssen unset() aufrufen, um die entsprechende globale Variable zu entfernen.
Achtung
Wenn Sie $_SESSION (oder $HTTP_SESSION_VARS) verwenden, sollten Sie nicht session_register(), session_is_registered() und session_unregister() verwenden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion session_unset() löscht alle Session-Variablen, die gegenwärtig registriert sind.
Anmerkung:
Benutzen Sie bei Verwendung von $_SESSION (oder $HTTP_SESSION_VARS bei PHP 4.0.6 oder niedriger) unset() um die Registrierung einer Session-Variablen aufzuheben, also unset($_SESSION);
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beendet die aktuelle Session und speichert die Session-Daten.
Session-Daten werden normalerweise nach Beenden eines Scripts gespeichert, ohne dass session_write_close() aufgerufen werden muss, aber da Session-Daten gesperrt werden, um gleichzeitiges Schreiben zu verhindern, kann jeweils immer nur ein Script auf eine Session einwirken.
Bei der Verwendung von Framesets zusammen mit Sessions werden Sie merken, dass wegen dieser Sperrung ein Frame nach dem anderen geladen wird.
Sie können die Zeit zum Laden aller Frames reduzieren, indem Sie die Session beenden, sobald alle Änderungen an den Session-Variablen durchgeführt sind.
Zurück
Zum Anfang
Nach vorne
Nach oben
Shared Memory Funktionen (Gemeinsamer Speicher)
PHP Handbuch
Zurück
Nach vorne
setcookie() definiert ein mit den HTTP Header-Informationen zu übertragendes Cookie.
Wie andere Header auch, müssen Cookies vor irgendwelchen anderen Ausgaben Ihres Skriptes gesendet werden (dies ist eine Einschränkung des Protokolls).
Sie müssen deshalb solche Funktionsaufrufe vor irgendwelchen Ausgaben, inklusive html - oder head -Tags sowie irgendwelcher Whitespaces tätigen.
Erfolgte bereits vor dem Aufruf dieser Funktion eine Ausgabe erfolgt sein, gibt setcookie() scheitern und FALSE zurückgeben.
War setcookie() erfolgreich, wird TRUE zurückgegeben.
Dies sagt jedoch nichts darüber aus, ob der Benutzer das Cookie auch akzeptiert hat.
Alle Argumente - außer name - sind optional.
Ist nur der Name angegeben wird das Cookie mit diesem Namen auf dem Client gelöscht.
Sie können ein Argument auch durch einen Leerstring ("") ersetzen, um es zu überspringen.
Da die Argumente expire und secure Da die Argumente expire und secure Integer-Werte sind können sie nicht mit einem Leerstring übersprungen werden.
Die folgende Tabelle erklärt jeden Parameter von setcookie(), spezifische Informationen finden Sie auch auf der Seite Netscape cookie specification.
Tabelle 1. setcookie() Parameter erklärt
Beschreibung
Beispiele
Der Name des Cookies.
Auf 'cookiename' wird mittels $_COOKIE['cookiename'] zugegriffen.
Der Wert des Cookies.
Dieser Wert wird am Computer des Benutzers gespeichert, speichern Sie deshalb keine sensiblen Informationen.
Ist der name z.B. 'cookiename', so erhält man seinen Wert mittels $_COOKIE['cookiename'].
Der Zeitpunkt, wann das verfällt.
Dies ist ein Unix Timestamp, also die Anzahl Sekunden seit der Unix-Epoche.
In anderen Worten werden Sie diesen Wert wahrscheinlich mittels der Funktion time() plus der Anzahl Sekunden bis zum gewünschten Ablauf des Cookies.
Sie könnten aber auch mktime() verwenden.
time( )+60*60*24*30 wird das Cookie in 30 Tagen ablaufen lassen.
Ist der Parameter nicht gesetzt, verfällt das Cookie am Ende der Session (wenn der Browser geschlossen wird).
Der Pfad zu dem Server, auf welchem das Cookie verfügbar sein wird.
Ist er auf '/' gesetzt, wird das Cookie innerhalb der gesamten Domain verfügbar.
Ist er auf '/ foo /' gesetzt, wird das Cookie nur innerhalb des Verzeichnisses / foo / der domain, sowie allen Unterverzeichnissen wie z.B. / foo / bar / verfügbar.
Der Standardwert ist das Verzeichnis, in dem das Cookie gesetzt wurde.
Die Domain, der das Cookie zur Verfügung steht.
Um das Cookie für all Sub-Domains von example.com verfügbar zu machen, setzen Sie es auf '.example.com'.
Der. Der. ist zwar nicht erforderlich, erhöht aber die Kompatibilität zu mehr Browsern.
Eine Setzen auf www.example.com macht das Cookie nur in der www Sub-Domain verfügbar.
Weitere Details hierzu finden Sie in der Spezifikation.
Gibt an, dass das Cookie nur über eine sichere HTTPS - Verbindung übertragen werden soll.
Ist es auf 1 gesetzt, wird das Cookie nur gesendet, wenn eine sichere Verbindung besteht.
Der Standardwert ist 0.
0 oder 1
Sind die Cookies einmal gesetzt, können Sie beim nächsten Seitenaufruf anhand der $_COOKIE oder $HTTP_COOKIE_VARS Arrays auf diese zugreifen.
Beachten Sie, dass die autoglobals wie $_COOKIE seit PHP 4.1.0 verfügbar sind. $HTTP_COOKIE_VARS existiert seit PHP 3.
Cookie-Werte kommen auch in $_REQUEST vor.
Anmerkung:
Ist die PHP Direktive register_globals auf on Ist die PHP Direktive register_globals auf on gesetzt, stehen die Cookies auch als eigene Variablen zur Verfügung.
In den nachstehenden Beispielen wird $TextCookie also existieren.
Es wird empfohlen, $_COOKIE zu verwenden.
Häufige Probleme:
Cookies werden nicht sichtbar, bevor nicht eine Seite geladen wird, in der das Cookie sichtbar sein soll.
Um zu testen, ob ein Cookie erfolgreich gesetzt wurde, prüfen Sie noch vor der Ablaufzeit auf einer weiteren Seite ob das Cookie vorhanden ist.
Die Ablaufzeit wird mittels dem Parameter expire gesetzt.
Eine nette Möglichkeit um die Existenz von Cookies zu prüfen, ist print_r( $_COOKIE); aufzurufen.
Cookies müssen mit den selben Parametern gelöscht werden, mit denen sie gesetzt wurden.
Namen von Cookies können auch als Arraynamen gesetzt werden und stehen dann in Ihren Skripten als Arrays zu Verfügung, während sie auf dem System des Benutzers separat abgespeichert werden.
Um ein Cookie mit mehreren Namen und Werten zu setzen, erwägen Sie auch den Einsatz von explode() bzw. serialize().
In PHP 3 werden mehrfache Aufrufe von setcookie() im selben Skript in umgekehrter Reihenfolge abgearbeitet.
Sollten sie also ein Cookie löschen wollen bevor sie ein anderes setzen, sollten sie das Setzen vor dem Löschen vornehmen.
In PHP 4 werden mehrfache Aufrufe von setcookie() in der Reihenfolge ihres Aufrufs behandelt.
Einige Beispiele, wie Cookies gesetzt / gesendet werden:
Beispiel 1. setcookie() -Beispiele:
?php $value = 'something from somewhere'; setcookie ("TestCookie", $value); setcookie ("TestCookie", $value, time()+3600); / * verfällt in 1 Stunde * / setcookie ("TestCookie", $value, time()+3600, "/ ~rasmus /", ".utoronto.ca",1);?
Beachten Sie, dass der Wertebereich des Cookies automatisch URL-konform codiert (urlencoded) wird, sobald sie das Cookie senden, und wenn es gelesen wird, wird es automatisch URL-konform decodiert und einer Variablen zugewiesen, die den selben Namen wie das Cookie trägt.
Um die Inhalte unserer Test-Cookies zu sehen, brauchen sie nur eines der folgenden Beispiele zu benutzen:
?php / / ein bestimmtes Cookie ausgeben echo $_COOKIE[ "TestCookie"]; echo $HTTP_COOKIE_VARS["TestCookie"]; / / Eine anderer Weg zu debuggen / testen ist, alle Cookies anzuzeigen print_r($_COOKIE);?
Beim Löschen eines Cookies sollten sie sicherstellen, dass das Verfallsdatum in der Vergangenheit liegt, um den Mechanismus zum Löschen des Cookies im Browser auszulösen.
Die folgenden Beispiele zeigen, wie die im vorigen Beispiel gesendeten Cookies wieder gelöscht werden:
Beispiel 2. setcookie() Beispiele zum Löschen
?php / / Setzen des Verfalls-Zeitpunktes auf 1 Stunde vorher setcookie ("TestCookie", "", time() - 3600); setcookie ("TestCookie","", time() - 3600, "/ ~rasmus /", ".example.com", 1);?
Sie können auch ein Array an Cookies setzen, in dem sie die Array-Schreibweise benutzen.
Sobald das Cookie aber von ihrem Skript gelesen wird, werden alle Werte in ein einziges Array mit dem Cookie-Namen eingelesen:
?php / / Setzen der Cookies setcookie ("cookie[three]", "cookiethree"); setcookie ("cookie[two]", "cookietwo"); setcookie ("cookie[one]", "cookieone"); / / Nach dem Neuladen der Seite wieder ausgeben if (isset($_COOKIE['cookie'])) {foreach ($_COOKIE['cookie'] as $name = $value) {echo "$name: $value br / \n";}} / * was folgendes ausgibt: three: cookiethree two: cookietwo one: cookieone * /?
Weitere Informationen zu Cookies und deren Spezifikationen erhalten sie bei Netscape unter http: / /www.netscape.com / newsref / std / cookie_spec.html.
Microsofts Internet-Explorer 4 mit Service-Pack 1 geht nicht korrekt mit Cookies um, die den Pfad-Parameter beinhalten.
Netscape Communicator 4.05 und Microsoft Internet Explorer 3.x scheinen mit Cookies Probleme zu haben, wenn die Argumente für Pfad und Zeit nicht angegeben sind.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Beispiel 1.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ein Alias für stream_set_write_buffer().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Category ist eine benannte Konstante (oder Zeichenkette), welche die Kategorie der von den lokalen Einstellungen betroffenen Funktionen spezifiziert:
LC_ALL für alle folgenden Werte
LC_COLLATE für String-Vergleiche, siehe strcoll()
LC_CTYPE für Klassifizierung und Umwandlung von Zeichen, z.B. strtoupper()
LC_MONETARY für localeconv()
LC_NUMERIC für das Dezimal-Trennzeichen (Siehe auch localeconv())
LC_TIME für Zeit und Datums-Formatierungen mittels strftime()
Ist locale als Leer-String definiert, also "", werden die Werte an Hand der entsprechenden Umgebungsvariablen gleichen Namens wie die obigen Kategorien, oder von "LANG "bestimmt.
Ist locale NULL oder "0", sind keine Einstellungen betroffen, und es wird die aktuelle Einstellung zurückgegeben.
Ist locale ein Array, oder folgen weitere Parameter, dann wird jedes Array Element bzw. jeder Parameter versucht zu stzen, bis es gelingt.
Dies ist dann sinnvoll, wenn eine locale auf verschiedenen Systemen unter verschiedenen Namen bekannt ist, oder auch als Fallback für eine eventuell nicht vorhandene locale.
Anmerkung:
Das Übergeben von mehreren locales ist erst seit PHP 4.3 verfügbar.
setlocale() gibt die neue Einstellung oder FALSE (wenn die locale-Funktionalität auf der System-Plattform nicht unterstützt wird oder der Kategorie-Wert ungültig ist) zurück.
Ein ungültiger Kategorie-Name erzeugt auch noch eine Warnmeldung.
Beispiel 1. setlocale() Beispiele
?php / * locale auf Holland setzen * / setlocale (LC_ALL, 'nl_NL'); / * Ausgabe: vrijdag 22 december 1978 * / echo strftime ("%A %e %B %Y", mktime (0, 0, 0, 12, 22, 1978)); / * versuche verschiedene mögliche locale Namen für Deutsch * / $loc_de = setlocale (LC_ALL, 'de_DE@euro', 'de_DE', 'de', 'ge'); echo "Preferred locale for german on this system is '$loc_de'";?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt magic_quotes_runtime. (0 für aus, 1 für an).
Siehe auch get_magic_quotes_gpc() und get_magic_quotes_runtime().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Legt die Zeit in Sekunden fest, die ein Script laufen darf.
Ist diese Zeit abgelaufen, wird ein Fehler zurückgegeben.
Der Standard liegt bei 30 Sekunden, es sei denn, max_execution_time ist configuration file eingetragen.
Bei einer Einstellung von 0 Sekunden ist die maximale Ausführungszeit nicht begrenzt.
Wenn set_time_limit() aufgerufen wird, dann startet der Zähler neu.
Das heisst, wenn die Standardeinstellung 30 Sekunden beträgt und nach 25 Sekunden durch ein Script ein Aufruf wie z.B. set_time_limit( 20) erfolgt, darf das Script insgesamt 45 Sekunden laufen, bevor eine Fehlermeldung ausgegeben wird.
Achtung:
Wenn PHP im Safemode läuft, hat set_time_limit() keinen Effekt.
Die einzige Möglichkeit, dies zu umgehen, ist den Safemode im configuration file auszuschalten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Typ der Variablen var wird festgelegt als type.
Mögliche Werte für type sind:
"integer"
"double"
Liefert TRUE bei Erfolg, sonst FALSE.
Siehe auch gettype().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
shm_attach() gibt ein Handle für den Zugriff auf den gemeinsamen Speicherbereich mit der Kennung key zurück.
10000 Byte) und den Zugriffsberechtigungen gemäß perm (Vorgabe ist der Wert 0666, der Lese - und Schreibzugriffe für alle Benutzer gestattet) an.
Ein zweiter Aufruf der Funktion mit demselben key liefert ein weiteres, von dem ersten verschiedenes, Handle, das aber trotzdem denselben gemeinsamen Speicherbereich anspricht.
Wenn kein Bereich mit der Kennung key angelegt werden kann oder die Rechte für den Zugriff auf ein bestehendes Segment nicht ausreichen, so ist das Ergebnis dieser Funktion der Wert FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
shm_detach() beendet die Anbindung eines gemeinsamen Speicherbreichs mit dem Handle shm_identifier, das zuvor über shm_attach() angebunden wurde.
Das Segment an sich und die darin enthaltenen Daten bleiben erhalten und stehen nach erneuter Anbindung in diesem oder einem anderen Prozess wieder zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
shm_get_var() liefert den Wert mit der Kennung variable_key aus einem gemeinsamen Speicherbereich.
Der Wert im gemeinsamen Speicher bleibt weiter vorhanden.
Existiert kein Wert mit der angegebenen Kennung, so wird eine Warnung erzeugt und FALSE zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
shmop_size() wird benutzt, um die Grösse eines gemeinsamen Speicherblocks in Byte zu ermitteln.
Die Funktion liefert einen Integerwert zurück, welcher angibt, wieviele Bytes von dem gemeinsamen Speicher belegt werden.
Beispiel 1.
Die Grösse des gemeinsamen Speicherblocks ermitteln
In dem Beispiel erhält die Variable $shm_size die Grösse des durch $shm_id bezeichneten gemeinsamen Speicherblocks in Byte.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion weist einer Variable mit der Kennung variable_key in einem gemeinsamen Speichersegment den Wert von variable zu, beim ersten Zugriff wird variable_key neu angelegt.
Diese Funktion liefert FALSE zurück, wenn der verbleibende Speicherplatz im angegebenen Segment shm_identifier zur Aufnahme des Wertes von variable nicht mehr ausreicht, ansonsten TRUE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt ein gemeinsames Speichersegment wieder frei, dabei gehen alle Daten innerhalb des Segmentes verloren.
Diese Funktion liefert TRUE, wenn das Segment erfolgreich entfernt wurde, oder FALSE, wenn kein Segment mit der Kennung key existierte oder die Zugriffsrechte auf ein bestehendes Segment nicht für ein Löschen ausreichen.
Zurück
Zum Anfang
Nach vorne
Nach oben
SESAM Datenbankfunktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entfernt den Wert mit der Kennung variable_key aus einem gemeinsamen Speichersegment und stellt den hiervon genutzten Speicher innerhalb des egmentes wieder zur Verfügung.
Diese Funktion liefert TRUE bei Erfolg und FALSE, falls kein Wert mit der Kennung variable_key im Speichersegment angelegt war.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion show_source() erzeugt die Ausgabe des Codes der Datei filename mit hervorgehobener Syntax.
Anmerkung:
Siehe auch highlight_string() und highlight_file().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Eine Funktion kann wie folgt definiert werden:
function foo ($arg_1, $arg_2,..., $arg_n) {echo "Beispielfunktion.\n"; return $retval;}
Jeder beliebige korrekte PHP-Code kann in einer Funktion vorkommen, sogar andere Funktionen und Klassen - Definitionen.
In PHP 3 müssen Funktionen definiert sein, bevor man auf sie verweist.
In PHP4 ist das nicht mehr erforderlich, außer wenn eine Funktion nur bedingt definiert wird, wie in den beiden untenstehenden Beispielen gezeigt.
Wenn eine Funktion nur unter bestimmten Bedingungen definiert wird, muß die Definition dieser Funktion noch vor deren Aufruf abgearbeitet werden.
Beispiel 13-1.
Bedingte Funktionen
?php $makefoo = true; / * Wir können foo() von her aus nicht aufrufen, da sie noch nicht existiert, aber wir können bar() aufrufen * / bar(); if ($makefoo) {function foo () {echo "Ich existiere nicht, bis mich die Programmausführung erreicht hat.\n";}} / * Nun können wir foo() sicher aufrufen, da $makefoo als true ausgewertet wurde * / if ($makefoo) foo(); function bar() {{echo "Ich existiere sofort nach Programmstart.\n";}?
Beispiel 13-2.
Funktionen innerhalb von Funktionen
?php function foo() {function bar() {echo "Ich existiere nicht, bis foo() aufgerufen wurde.\n";}} / * Wir können bar() noch nicht aufrufen, da es nicht existiert * / foo(); / * Nun können wir auch bar() aufrufen, da sie durch die Abarbeitung von foo() verfügbar gemacht wurde * / bar();?
PHP unterstützt weder das Überladen von Funktionen, noch ist es möglich, zuvor deklarierte Funktionen neu zu definieren oder die Definition zu löschen.
PHP 3 unterstützt keine variable Anzahl von Parametern, obwohl Vorgabewerte für Parameter unterstützt werden (weitere Informationen finden Sie unter Vorgabewerte für Parameter).
PHP 4 unterstützt beides: siehe Variable Parameteranzahl und die Funktionsreferenzen für func_num_args(), func_get_arg() und func_get_args() für weitere Informationen.
Zurück
Zum Anfang
Nach vorne
Nach oben
Funktionsparameter
PHP Handbuch
Zurück
Nach vorne
Diese Funktion mischt die Reihenfolge der Elemente eines Arrays zufällig (shuffle).
Benutzen Sie srand(), um den Startwert für den Zufallsgenerator festzulegen.
Beispiel 1. shuffle()
Siehe auch arsort(), asort(), ksort(), rsort(), sort() und usort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Berechnung der Ähnlichkeit zweier Strings erfolgt nach der in "Oliver" [1993] beschreibenen Methode.
Beachten Sie, dass diese Implementierung keinen Stack verwendet wie in Olivers Pseude-Code, dafür aber rekursive Aufrufe, die die Performance erhöhen können (aber nicht müssen).
Beachten Sie auch, dass die Komplexität dieses Algorithmus O( N**3) beträgt, wobei N die Länge der längsten Zeichenkette ist.
Falls Sie als Referenz ein drittes Argument angeben, wird similar_text() ihnen die Ähnlichkeit als Prozentwert errechnen.
Es wird die Anzahl der in beiden Strings übereinstimmenden Zeichen zurück gegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Sinus des Eingabewertes arg. arg wird im Bogenmaß angegeben.
Siehe auch cos(), tan() und asin().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion sizeof() ist ein Alias für count().
Siehe auch count().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die sleep() -Funktion unterbricht die weitere Skript-Ausführung für die mit seconds angegebene Anzahl in Sekunden.
Siehe auch usleep().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Wert eines SNMP Objektes zurück, bei Erfolg und FALSE bei einem Fehler.
Die snmpget() Funktion wird verwendet um den Wert eines SNMP Objekts zu ermitteln, das mit object_id näher bestimmt ist.
Der SNMP "agent" wird mit hostname deklariert und die "read community "wird in community angegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den aktuellen Wert von quick_print der UCD Bibliothek zurück. quick_print ist standardmäßig abgeschaltet.
Der obige Funktionsaufruf gibt FALSE zurück, wenn quick_print ausgeschaltet ist und TRUE, wenn quick_print eingeschaltet ist.
Die snmp_get_quick_print() Funktion ist nur bei Verwendung der SNMP Bibliothek verfügbar, jedoch nicht bei Verwendung der Windows SNMP Bibliothek.
Siehe: snmp_set_quick_print() für eine Vollständie Beschreibung was quick_print bewirkt..
Zurück
Zum Anfang
Nach vorne
SNMP Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sets the specified SNMP object value, returning TRUE on success
Die Funktion snmpset() wird benutzt, um den Wert eines SNMP Objekts zu setzen, der mit object_id angegeben wird.
Der SNMP Agent wird bei hostname angegeben und die Lese -" Community "mit dem community Parameter.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt den Wert von quick_print innerhalb der UCD SNMP Bibliothek.
Falls es gesetzt ist (1), wird die SNMP Bibliothek 'quick printed 'Werte zurückgeben.
Das bedeutet, dass nur der Wert ausgegeben wird.
Wenn quick_print nicht aktiviert ist, (Standardeinstellung) gibt die UCD SNMP Bibliothek extra Informationen aus, die den Typ des Wertes (z.B.
IpAddress oder OID) enhalten.
Zusätzlich gibt die Bibliothek für alle Werte, die weniger als vier Zeichen haben, Hex-Werte aus, wenn quick_print nicht aktiviert ist.
quick_print wird oft verwendet um die Informationen, die zurückgegeben werden, weiterzuverwenden anstatt sie auszugeben.
Der erste Wert, der ausgegeben wird, ist:: 'Timeticks: (0) 0:00:00.00', während mit aktiviertem quick_print nur '0:00:00.00' ausgegeben wird.
Standardmäßig gibt die UCD SNMP umfangreiche Werte zurück, quick_print wird verwendet um nur die Werte zurückzugeben.
Momentan werden Strings noch mit extra Quotierungen zurückgegeben, dies wird in Zukunft behoben werden.
Die snmp_set_quick_print() Funktion ist nur bei Verwendung der SNMP Bibliothek verfügbar, jedoch nicht bei Verwendung der Windows SNMP Bibliothek.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen Array von SNMP Objekten zurück, der mit der object_id() als Wurzel beginn, oder FALSE bei einem Fehler.
Die snmpwalk() Funktion wird verwendet um alle Werte von dem SNMP Agenten zu lesen, der bei hostname angegebn wurde.
Der Community Parameter bestimm die Lese -" Community "für diesen Agenten.
Ein NULL object_id wird als Wurzel des SNMP Objektbaums verwendet und alle Objekts unter diesem Baum als ein Array zurückgegeben.
Wenn object_id angegeben wird, werden alle SNMP Objekte unterhalb der object_id zurückgegeben.
Der obige Funktionsaufruf gibt alle SNMP Objekte des Agenten, der auf localhost läuft, zurück.
Man kann mit einer Schleife alle Werte durchlaufen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt ein assoziatives Array mit den Objekt Ids und den dazugehörigen Objektwerten zurück, der mit der object_id als Wurzel beginnt, oder FALSE bei einem Fehler.
Die snmpwalkoid() Funktion wird verwendet um alle Werte von dem SNMP Agenten zu lesen, der bei hostname angegebn wurde.
Der Community Parameter bestimm die Lese -" Community "für diesen Agenten.
Ein NULL object_id wird als Wurzel des SNMP Objektbaums verwendet und alle Objekts unter diesem Baum als ein Array zurückgegeben.
Wenn object_id angegeben wird, werden alle SNMP Objekte unterhalb der object_id zurückgegeben.
Die Existenz von snmpwalkoid() und snmpwalk() hat historische Gründe.
Beide Funktionen gibt es aus Kompatiblitätsgründen.
Der obige Funktionsaufruf gibt alle SNMP Objekte des Agenten, der auf localhost läuft, zurück.
Man kann mit einer Schleife alle Werte durchlaufen.
for ($i=0; $i count($a); $i++) {echo $a[$i];}
Zurück
Zum Anfang
Nach vorne
Nach oben
Socket Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Nachdem der Socket socket mit der socket_create() erzeugt wurde, mit socket_bind() mit einem Namen verknuepft wurde und mit socket_listen() angewiesen wurde, nach hereinkommenden Verbindungsanforderungen zu horchen, wird der Socket mit dieser Funktion angewiesen, diese Verbindungsanforderungen zuzulassen.
Wenn ein Verbindungsaufbau erfolgreich war, wird ein neuer Socket-Deskriptor zurückgegeben, welcher zur Kommunikation benutzt werden kann.
Wenn es mehrere Verbindungsanforderungen an diesem Socket gibt, werden diese in eine Warteschlange gestellt und die erste Verbindungsanforderung wird bedient.
Falls es keine wartenden Verbindungsanforderungen gibt, blockiert die Funktion socket_accept() so lange, bis eine Verbindungsanforderung kommt.
Falls socket mit der Funktion socket_set_blocking() oder mit socket_set_nonblock() auf 'nicht blockieren 'gesetzt wurde, wird FALSE zurückgegeben.
Der Socket-Deskriptor, der von socket_accept() zurückgegeben wird, soll nicht dazu benutzt werden, um neue Verbindungsanforderungen zu benutzen.
Der ursprüngliche wartende Socket socket bleibt geöffnet und kann wiederbenutzt werden.
Gibt bei Erfolg einen neuen Socket-Deskriptor zurück oder FALSE, falls ein Fehler auftritt.
Der aktuelle Fehlercode kann mit der Funktion socket_last_error() ermittelt werden.
Dieser Fehlercode kann an die Funktion strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
Siehe auch: socket_bind(), socket_connect(), socket_listen(), socket_create() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Socket Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Dies muss ein gültiger Socket-Deskriptor sein, der mit der Funktion socket_create() erzeugt wurde.
Der Parameter address Der Parameter address ist entweder eine IP-Adresse, angegeben in Punktnotation (z.B.
127.0.0.1), falls der Socket zur AF_INET -Familie gehört; oder ein Pfadname eines Unix-domain socket, falls er zur AF_UNIX - Familie gehört.
Der Parameter port wird nur benutzt, wenn eine Verbindung zu einem AF_INET -Socket aufgebaut wird und gibt an, zu welchem Port des entfernten Hosts eine Verbindung hergestellt werden soll.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Der Fehlercode kann mit der Funktion socket_last_error() abgefragt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
Siehe auch: socket_connect(), socket_listen(), socket_create(), socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Diese Funktion löscht entweder einen Fehlercode für einen gegebenen Socket oder global den letzten Socket-Fehler.
Mit dieser Funktion kann der Wert eines Fehlercodes explizit zurückgesetzt werden, entweder für einen bestimmten Socket oder global der Fehlercode des letzten Fehlers innerhalb dieser Extension.
Dies kann ganz nützlich sein, wenn man prüfen möchte, ob in einem Teil einer Anwendung ein Fehler aufgetreten ist.
Siehe auch socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
socket_close() schliesst den socket, der durch socket gegeben ist.
Siehe auch socket_bind(), socket_listen(), socket_create() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Baut mit Hilfe eines gültigen Socket-Deskriptors socket, der von der Funktion socket_create() zurückgegeben wurde, eine Verbindung auf.
Der Parameter address Der Parameter address ist entweder eine IP-Adresse in Punktnotation (e.g.
127.0.0.1), falls der Socket zur AF_INET -Familie gehört, oder der Pfadname eines Unix-domain socket, falls der Socket zur AF_UNIX -Familie gehört.
Der Parameter port wird nur benutzt, wenn eine Verbindung zu einem AF_INET -Socket aufgebaut wird und gibt an, zu welchem Port des entfernten Hosts eine Verbindung hergestellt werden soll.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Der Fehlercode kann mit der Funktion socket_last_error() abgefragt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
See also socket_bind(), socket_listen(), socket_create(), socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Erzeugt einen Kommunikationsendpunkt (einen Socket) und gibt einen Socket-Deskriptor zurück.
Der domain Parameter legt die Domain fest (Protokoll-Familie), die für die Kommunikation benutzt wird.
Gegenwärtig verstehen Sockets AF_INET und AF_UNIX.
AF_INET wird normalererweise für die Internet-Kommunikation benutzt.
AF_UNIX verwendet Pfadnamen zur Identifikation von Sockets und kann daher nur für die lokale Kommunikation benutzt werden (welche andererseits schneller ist).
Der type Parameter bestimmt den Socket-Typ.
Dies ist entweder SOCK_STREAM, SOCK_DGRAM, SOCK_SEQPACKET, SOCK_RAW, SOCK_RDM oder SOCK_PACKET.
Die beiden meistbenutzten Typen sind SOCK_DGRAM für die (verbindungslose) UDP Kommunikation, und SOCK_STREAM für die TCP Kommunikation.
protocol gibt das Protokoll an, welches entweder SOL_UDP oder SOL_TCP ist.
Bei Erfolg gibt die Funktion einen Socket-Deskriptor zurück, bei einem Fehler wird FALSE zurückgegeben.
Der aktuelle Fehlercode kann mit socket_last_error() ermittelt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibing des Fehlers zu erhalten.
Weitere Informationen über die Benutzung der Funktion socket_create(), als auch über die Bedeutung der verschiedenen Parameter finden Sie auf der Unix man page socket (2).
Anmerkung:
Falls ein fehlerhafter domain - oder type -Parameter angegeben wird, benutzt socket_create() standardmässig AF_INET sowie SOCK_STREAM und gibt eine E_WARNING -Meldung aus.
Siehe auch socket_accept(), socket_bind(), socket_connect(), socket_listen(), socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Diese Funktion soll die Erzeugung eines neuen Sockets, der nur auf neue Verbindungsanforderungen wartet und die Verbindungen aufbaut, erleichtern.
socket_create_listen() erzeugt einen neuen Socket vom Typ AF_INET, der an allen Schnittstellen eines gegebenen Ports auf neue Verbindungen wartet.
Der backlog Parameter gibt an, wie gross die Warteschlange mit den wartenden Verbindungen maximal werden darf.
Mehr Informationen hierzu finden Sie bei socket_listen().
socket_create_listen() gibt bei Erfolg einen neuen Socket-Deskriptor zurück oder FALSE, falls ein Fehler aufgetreten ist.
Der Fehlercode kann mit der Funktion socket_last_error() abgefragt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
Anmerkung:
Falls Sie einen Socket erzeugen möchten, der nur an bestimmten Schnittstellen horcht, müssen Sie socket_create(), socket_bind() und socket_listen() benutzen.
Siehe auch socket_create(), socket_bind(), socket_listen(), socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Anmerkung:
In PHP Versionen vor 4.3.0 entsprach dies der Funktion socket_getopt().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Falls der angegebene Socket vom Typ AF_INET ist, gibt socket_getpeername() die IP Addresse des entfernten Peers im Parameter address in Punktnotation zurück (z.B.
Falls der optionale Parameter port bekannt ist, wird der zugehörige Port ebenfalls zurückgegeben.
Falls der angegebene Socket vom Typ AF_UNIX ist, gibt socket_getpeername() den Pfad des Unix-Dateisystems (z.B. / var / run / daemon.sock) in dem Parameter address zurück.
In diesem Fall wird der letzte Socket-Fehlercode nicht aktualisiert.
Siehe auch socket_getpeername(), socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Falls der angegebene Socket vom Typ AF_INET ist, gibt socket_getsockname() die IP Addresse des lokalen Rechners im Parameter address in Punktnotation zurück (z.B.
Falls der optionale Parameter port bekannt ist, wird der zugehörige Port ebenfalls zurückgegeben.
Falls der angegebene Socket vom Typ AF_UNIX ist, gibt socket_getsockname() den Pfad des Unix-Dateisystems (z.B. / var / run / daemon.sock) in dem Parameter address zurück.
In diesem Fall wird der letzte Socket-Fehlercode nicht aktualisiert.
See also socket_getpeername(), socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Siehe auch: accept_connect(), bind(), connect(), listen() und strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Diese Funktion gibt einen Fehlercode für einen Socket zurück.
Falls ein Socket-Deskriptor an diese Funktion übergeben wird, wird der letzte Fehler, der an diesem bestimmten Socket aufgetreten ist, zurückgegeben.
Falls kein Socket-Deskriptor übergeben wird, wird der Fehlercode der letzten fehlgeschlagenen Funktion zurückgegeben.
Letzteres ist besonders hilfreich für Funktionen wie socket_create(), die bei einem Fehler keinen Socket zurückgibt, und socket_select(), die aus anderen Gründen, die nichts mit einem bestimmten Socket zu tun haben, fehlschlagen kann.
Der Fehlercode kann an die Funktion socket_strerror() übergeben werden, die eine textuelle Beschreibung dieses Fehlercodes zurückgibt.
Dafür müssen sie die Funktion socket_clear_error() aufrufen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Nachdem der Socket socket mit socket_create() erzeugt und mit socket_bind() mit einem Namen verknüpft wurde, wird er angewiesen, nach hereinkommenden Verbindungsanforderungen an dem Socket socket zu horchen.
Maximal werden backlog Maximal werden backlog hereinkommende Verbindungsanforderungen zur späteren Verarbeitung in die Warteschlange gestellt.
Oder, falls das zugrundeliegende Protokoll eine Rückübertragung unterstützt, wird die Anforderung ignoriert, so dass weitere Verbindungsversuche möglicherweise erfolgreich sind.
Anmerkung:
Die maximale Anzahl, der im Parameter backlog Die maximale Anzahl, der im Parameter backlog angegebenen Einträge der Warteschlange, hängt entscheidend vom darunterliegenden Betriebssystem ab.
Auf Linux-Systemen wird die Zahl stillschweigend auf SOMAXCONN begrenzt.
Wenn auf Win32-Systemen SOMAXCONN gesetzt ist, ist der Dienstanbieter verantwortlich für den Socket und muss die Warteschlange auf einen vernünftigen Maximalwert begrenzen.
Es gibt für diese Systeme keine standardmässige Möglichkeit, den aktuellen Wert herauszufinden.
socket_listen() kann nur mit Sockets vom Typ SOCK_STREAM oder SOCK_SEQPACKET benutzt werden.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Der Fehlercode kann mit der Funktion socket_last_error() abgefragt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
Siehe auch socket_accept(), socket_bind(), socket_connect(), socket_create() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Die Funktion socket_read() liest von dem Socket socket, der entweder mit socket_create() oder mit socket_accept() erzeugt wurde.
Die Anzahl Bytes, die höchstens gelesen wird, wird in dem Parameter length angegeben.
Anderenfalls können Sie mit \r, \n, or \0 den Lesevorgang beenden (dies ist abhängig von dem Parameter type, siehe weiter unten).
socket_read() gibt bei Erfolg die Daten als String zurück oder FALSE, falls ein Fehler aufgetreten ist.
Der Fehlercode kann mit der Funktion socket_last_error() abgefragt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
Der optionale Parameter type ist eine vordefinierte Konstante:
PHP_BINARY_READ - benutzt die read() Funktion des Systems.
Sicher Zum Lesen von Binärdaten (und Standardeinstellung in PHP = 4.1.0).
PHP_NORMAL_READ - Der Lesevorgang wird mit \n oder \r beendet. (Standardeinstellung in PHP = 4.0.6)
See also socket_accept(), socket_bind(), socket_connect(), socket_listen(), socket_last_error(), socket_strerror() und socket_write().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Die Funktion socket_select() Die Funktion socket_select() nimmt als Parameter Socket-Arrays entgegen und wartet, ob diese ihren Status ändern.
Diejenigen, die Hintergrundwissen über BSD Sockets haben, werden feststellen, dass diese Socket-Arrays in Wirklichkeit die so genannten Datei-Deskriptor-Mengen sind.
Drei, voneinander unabhängige Arrays mit Socket-Deskriptoren werden überwacht.
In diesem Fall gibt ein socket_read() einen leeren String zurück.)
Die Sockets, die im write Array aufgelistet sind, werden daraufhin überwacht, ob ein Schreibvorgang den Socket blockiert.
Die Sockets, die im except Array aufgelistet sind, werden auf Ausnahmen überwacht.
Warnung
Beim Beenden werden alle Arrays aktualisiert, und zeigen an, welche Sockets ihren Status geändert haben.
Sie brauchen nicht jedes Array einzeln an socket_select() übergeben.
Vergessen Sie nicht, dass diese Arrays by reference übergeben werden müssen und dass sie verändert werden, nachdem die Funktion socket_select() beendet ist.
/* Vorbereiten des read Arrays * / $read = array( $socket1, $socket2); if (false === ($num_changed_sockets = socket_select($read, $write = NULL, $except = NULL, 0))) {/ * Fehlerbehandlung * / else if ($num_changed_sockets 0) {/ * Mindesten bei einem Socket ist etwas interessantes passiert * /}
Anmerkung:
Wegen einer Einschränkung in der aktuellen Zend Engine ist es nicht möglich, eine Konstante, wie etwa NULL, direkt als Parameter an Funktionen zu übergeben, die Referenzen auf Parameter als Argumente erwarten.
Sie können stattdessen eine temporäre Variable oder einen Ausdruck, in dem der am weitesten links stehende Teilausdruck eine temporäre Variable ist, benutzen.
tv_sec und tv_usec bilden zusammen den timeout tv_sec und tv_usec bilden zusammen den timeout Parameter.
Der timeout ist nach oben durch die verstrichene Zeit, bis socket_select() zurückkehrt, begrenzt. tv_sec kann 0 sein, wodurch socket_select() sofort zurückkehrt.
Dies ist nützlich beim Polling.
Falls der Parameter tv_sec NULL ist (kein Timeout), kann socket_select() unendlich lange blockieren.
Falls der Timeout wirksam wird, bevor irgend etwas Interessantes passiert, ist das Funktionsergebnis 0.
Falls ein Fehler auftritt wird FALSE zurückgegeben.
Der Fehlercode kann dann mit socket_last_error() abgefragt werden.
Anmerkung:
Wenn Sie einen Fehler aufspüren wollen, müssen Sie unbedingt den Operator === benutzen.
Weil socket_select() auch 0 zurückgeben kann, wird der Vergleich mit == sonst zu TRUE ausgewertet.
if (false === socket_select($r, $w, $e = NULL, 0)) {echo "socket_select() fehlgeschlagen, Grund: ". socket_strerror(socket_last_error()). "\n";}
Anmerkung:
Seien Sie sich bewusst, dass manche Socket-Implementierungen sehr sorgfältig benutzt werden müssen.
Ein paar grundsätzliche Regeln:
Sie sollten immer versuchen, socket_select() ohne Timeout zu benutzen.
Ihr Programm sollte nichts tun, wenn keine Daten verfügbar sind.
Code, der von Zeitbegrenzungen abhängig ist, ist normalerweise nicht portierbar und schwierig zu debuggen.
Es sollte kein Socket-Deskriptor in die Arrays eingefügt werden, wenn Sie nicht vorhaben, die Ergebnisse nach der Ausführung eines socket_select() Funktionsaufrufs zu prüfen und entsprechend darauf zu reagieren.
Nachdem socket_select() beendet ist, müssen alle Sockets in allen Socket-Arrays geprüft werden.
Jeder Socket, der zum Schreiben zur Verfügung steht, muss beschrieben werden und aus jedem Socket, der zum Lesen verfügbar ist, muss gelesen werden.
Bei Schreib / Leseoperationen auf den Sockets in den Arrays müssen Sie damit rechnen, dass nicht notwendigerweise alle Daten geschrieben / gelesen werden, die Sie angeben.
Seien Sie darauf vorbereitet, dass Sie möglicherweise nur ein einziges Byte schreiben / lesen können.
Dies ist, wenn mehr Daten ankommen, als der Socket lesen kann.
See also socket_read(), socket_write(), socket_last_error() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Im Nicht-Block-Modus wird ein fgets() -Aufruf sofort zum Script zurückkehren, während er im Block-Modus auf eingehende Daten (auf diesem Socket) warten wird.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Anmerkung:
Diese Funktion entspricht socket_setopt() in den PHP Versionen vor PHP 4.3.0.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. socket_set_timeout() -Beispiel:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
socket_strerror() nimmt als Parameter errno den Rückgabewert von socket_last_error() entgegen und gibt seinerseits den entsprechenden Erklärungstext aus.
Zum Beispiel, anstatt eine Include-Datei des Systems zu durchsuchen, was der Fehlercode -111 bedeutet, kann man den Code an die Funktion socket_strerror() übergeben und erhält Aufschluss über die internen Abläufe.
Beispiel 1. socket_strerror() example
Grund: ". socket_strerror(socket_last_error()). "\n";} if (false == (@socket_bind($socket, '127.0.0.1', 80))) {echo "socket_bind() fehlgeschlagen:
Die erwartete Ausgabe des obigen Beispiels (vorausgesetzt, das Skript wird nicht mit root - Benutzerrrechten ausgeführt) ist:
Grund:
Siehe auch socket_accept(), socket_bind(), socket_connect(), socket_listen() und socket_create().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Die Funktion socket_write() schreibt aus dem Puffer buffer in den Socket socket.
Mit dem optionalen Parameter length kann man alternativ eine Anzahl von Bytes angeben, die in den Socket geschrieben wrden sollen.
Falls diese Anzahl größer ist, als der Puffer, wird sie stillschweigend auf die Puffergröße gekürzt.
Gibt die Anzahl der erfolgreich in den Socket geschriebenen Bytes zurück oder FALSE, falls ein Fehler aufgetreten ist.
Der Fehlercode kann mit der Funktion socket_last_error() abgefragt werden.
Dieser Fehlercode kann an die Funktion socket_strerror() übergeben werden, um eine textuelle Beschreibung des Fehlers zu erhalten.
Es ist auch möglich, dass, abhängig von den Puffern im Netzwerk usw., nur eine bestimmte Datenmenge, sogar auch nur ein Byte, geschrieben wird, obwohl der Puffer größer ist.
Dies müssen Sie beobachten, nicht dass Sie unabsichtlich vergessen, den Rest Ihrer Daten zu senden.
Anmerkung:
Es durchaus möglich, dass socket_write() 0 zurückgibt, was bedeutet, dass kein einziges Byte geschrieben wurde.
Vergewissern Sie sich, dass Sie den === Operator benutzen, um im Falle eines Fehlers auf FALSE zu testen.
See also socket_accept(), socket_bind(), socket_connect(), socket_listen(), socket_read() und socket_strerror().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 13.
Funktionen
Nach vorne
Der Befehl old_function erlaubt es, eine Funktion genauso wie bei PHP / FI2 zu definieren (nur "function "wird durch "old_function" ersetzt.
Dieser Befehl sollte nur vom PHP / FI2 - PHP3-Konverter genutzt werden.
Warnung
Funktionen, die durch old_function definiert werden, können nicht von PHP selbst aufgerufen werden.
Das heißt unter anderem, dass sie nicht in Funktionen wie usort (), array_walk() und register_shutdown_function() benutzt werden können.
Dieses Manko können Sie umgehen, indem Sie eine Adapterfunktion (in normalem PHP3) schreiben, welche die old_function aufruft.
Zurück
Zum Anfang
Nach vorne
Rückgabewerte
Nach oben
Variablenfunktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sortiert ein Array.
Die Elemente werden aufsteigend vom niedrigsten zum höchsten Wert sortiert.
Beispiel 1. sort()
?php $fruits = array ("Zitrone", "Orange", "Banane", "Apfel"); sort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "fruits[".$key ."] = ".$val ."\n";}?
Dieses Beispiel würde folgendes anzeigen:
fruits[ 0] = Apfel fruits[1] = Banane fruits[2] = Orange fruits[3] = Zitrone
Die Früchte wurden in alphabetischer Reihenfolge sortiert.
Der optionale zweite Parameter sort_flags kann benutzt werden, um das Sortierverhalten mit den folgenden Flags zu beeinflussen.
Flags für Sortiertypen:
SORT_REGULAR - Vergleiche Einträge normal
SORT_NUMERIC - Vergleiche Einträge numerisch
SORT_STRING - Vergleiche Einträge als Strings
Siehe auch arsort(), asort(), ksort(), natsort(), natcasesort(), rsort(), usort(), array_multisort() und uksort().
Anmerkung:
Der zweite Parameter wurde in PHP 4 eingeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Errechnet den Wert der Laut-Ähnlichkeit von str.
Dies kann zur Suche in Datenbanken verwendet werden, wenn Sie zwar die Aussprache aber nicht die genaue Schreibweise kennen. soundex() liefert einen String aus 4 Zeichen, beginnend mit einem Buchstaben zurück.
Diese besondere soundex() -Funktion ist u.a. beschrieben in "The Art Of Computer Programming, vol.
Sorting And Searching", von Donald Knuth, Addison-Wesley-Verlag (1973), Seiten 391 bis 392.
Beispiel 1.
Soundex-Beispiel:
soundex ("Euler") == soundex ("Ellery") == 'E460'; soundex ("Gauss") == soundex ("Ghosh") == 'G200'; soundex ("Knuth") == soundex ("Kant") == 'H416'; soundex ("Lloyd") == soundex ("Ladd") == 'L300'; soundex ("Lukasiewicz") == soundex ("Lissajous") == 'L222';
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Gibt ein Array mit Zeichenketten zurück, die jeweils eine Teilzeichenkette von Zeichenkette sind und durch deren Zerlegung an den durch Suchmuster des regulären Ausdrucks bestimmten Stellen entstehen.
Wenn Beschränkung gesetzt wurde, enthält das zurückgegebene Array höchstens Beschränkung Elemente, von denen das letzte den ganzen Rest von Zeichenkette enthält.
Bei Auftreten eines Fehlers gibt split() FALSE zurück.
Um die ersten vier Felder einer Zeile von / etc / passwd abzuspalten:
Beispiel 1. split() Beispiel
Anmerkung:
Wenn Suchmuster n mal vorkommt, enhält das zurückgegebene Array n +1 Wenn Suchmuster n mal vorkommt, enhält das zurückgegebene Array n +1 Elemente.
Kommt Suchmuster zum Beispiel überhaupt nicht vor, wird ein Array mit nur einem Element zurückgegeben.
Das gilt natürlich auch, wenn Zeichenkette leer ist.
Um ein Datum zu analysieren, das durch Schrägstriche, Punkte oder Bindestriche getrennt ist:
Beispiel 2. split() Beispiel
$datum = "04 / 30 / 1973"; / / Trennzeichen darf ein Schrägstrich, Punkt / / oder Bindestrich sein list ($monat, $tag, $jahr) = split ('[ /. -]', $datum); echo "Monat: $monat; Tag: $tag; Jahr: $jahr br \n";
Beachten Sie, dass Suchmuster Groß - und Kleinschreibung berücksichtigt.
Beachten Sie: wenn Sie die Fähigkeiten regulärer Ausdrücke nicht benötigen, ist die Verwendung von explode() schneller, weil diese Funktion nicht unter der Last der Engine für reguläre Ausdrücke steht.
Wenn Sie nach einer Möglichkeit suchen, das Verhalten von Perls @chars = split( '', $str) nachzuahmen, schauen Sie sich bitte die Beispiele für preg_split() an.
Bitte beachten Sie, dass Suchmuster ein regulärer Ausdruck ist.
Wenn Sie eine Zerlegung an Zeichen vornehmen, die in regulären Ausdrücken als besondere Zeichen betrachtet werden, müssen Sie diese entsprechend kennzeichnen.
Wenn Sie der Ansicht sind, split() (oder, bei diesem Thema, eine andere Regex-Funktion) verhalte sich seltsam, lesen Sie bitte die Datei regex.7, die sich im regex / Unterverzeichnis ihrer PHP-Distribution befindet.
Da sie im manpage-Fomat vorliegt, sollten Sie einen Befehl der Art man / usr / local / src / regex / regex.7 verwenden, um sie zu lesen.
Siehe auch: preg_split(), spliti(), explode(), implode(), chunk_split() und wordwrap().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entspricht split() mit dem Unterschied, dass sie übereinstimmende Buchstaben nicht nach Groß - und Kleinschreibung unterscheidet.
Siehe auch: preg_spliti(), split(), explode() und implode().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen an Hand des Formatierungs-Strings format gebildeten String zurück.
Gewöhnliche Zeichen (ausser%), die direkt in das Ergebnis übertragen werden und Umsetzungs-Anweisungen.
Diese Anweisungen gelten sowohl für die sprintf() - als auch für die printf() -Funktion.
Jede der Formatierugs-Anweisungen besteht aus einem Prozent-Zeichen (%), gefolgt von einem oder mehrereren der folgenden Elemente:
Einem optionalen Füll-Zeichen, das den String bis rechts auffüllt.
Dies kann ein Leerzeichen oder eine 0 (das Null-Zeichen) sein.
Standardmäßig wird mit dem Leerzeichen gefüllt.
Andere Füllzeichen können durch Voranstellen eines einfachen Anführungszeichens (') definiert werden.
Beachten Sie die nachstehenden Beispiele.
Einer optionalen Angabe der Ausrichtung, ob die Ausgabe nach links oder nach rechts (default) ausgerichtet werden soll.
Um den Text linksbündig auszurichten müssen Sie das Zeichen - angeben.
Einer optionalen Zahl für die Längen-Angabe, welche die mindestens zurückzugebende Anzahl Zeichen spezifiziert.
Einem optionalen Wert für die Anzahl der auszugebenden Dezimalstellen für Fließkommazahlen.
Dieser Wert hat nur Einfluss auf Werte vom Typ float (eine weitere hilfreiche Funktion zur Formatierung von Zahlen ist number_format()).
Einer Typ-Angabe welche den Typ enthält, als der das Argument angesehen werden soll.
Mögliche Angaben sind:
% - ein Prozent-Zeichen ("%").
Es ist kein Argument erforderlich.
b - das Argument wird als Integer angesehen und als Binär-Wert ausgegeben.
c - das Argument wird als Integer angesehen und das entsprechende ASCII-Zeichen wird ausgegeben.
d - das Argument wird als Integer angesehen und ein Dezimalwert (signed) ausgegeben.
u - das Argument wird als Integer angesehen und ein Dezimalwert (unsigned) ausgegeben.
f - das Argument wird als float angesehen und eine Fließkomma-Zahl ausgegeben.
o - das Argument wird als Integer angesehen und und als Oktalzahl ausgegeben.
s - das Argument wird als String angesehen und auch als solcher ausgegeben.
x - das Argument wird als Integer angesehen und als Hexadezimal-Wert ausgegeben (mit Kleinbuchstaben).
X - das Argument wird als Integer angesehen und als Hexadezimal-Wert ausgegeben (mit Großbuchstaben).
Seit PHP 4.0.6 unterstützt der Formatstring auch Argumente zu numerieren / tauschen.
Hier ein Beispiel:
Beispiel 1.
Argumente tauschen
Beispiel 2.
Argumente tauschen
Beispiel 3.
Argumente tauschen
Beispiel 4.
Argumente tauschen
Siehe auch: printf(), sscanf(), fscanf() und number_format().
Null-gefüllte Integer-Werte
$isodatum = sprintf ("%04d-%02d-%02d", $jahr, $monat, $tag);
Währung formatieren
$money1 = 68.75; $money2 = 54.35; $money = $money1 + $money2; / / echo $money wird ausgeben "123.1"; $formatted = sprintf("%01.2f", $money); / / echo $formatted wird ausgeben "123.10 "
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen korrekten regulären Ausdruck zurück, der mit Zeichenkette ohne Berücksichtigung von Groß - / Kleinschreibung übereinstimmt.
Die Klammer enthält dieses Zeichen, wenn möglich, in groß - und kleingeschriebener Form, andernfalls enthält sie das ursprüngliche Zeichen zweimal.
Beispiel 1. sql_regcase() Beispiel
Dies kann bei Produkten, die nur reguläre Ausdrücke mit Berücksichtigung von Groß - / Kleinschreibung unterstützen, verwendet werden, um eine Übereinstimmung mit Suchmustern ohne Berücksichtigung von Groß - / Kleinschreibung zu erreichen.
Zurück
Zum Anfang
Nach vorne
Nach oben
Semaphor und Shared Memory Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert die Quadratwurzel des Wertes arg.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Legt einen internen Startwert für den Zufallsgenerator in rand() fest.
Gleiche Startwerte führen auch jeweils zu derselben Pseudo-Zufallssequenzen daher ist es üblich, diese über die aktuelle Uhrzeit festzulegen:
/ / seed with microseconds since last "whole" second srand ((double)microtime()*1000000); $randval = rand();
Siehe auch rand(), getrandmax(), mt_rand(), mt_srand() und mt_getrandmax().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 13.
Funktionen
Nach vorne
Sie können Werte mit dem optionalen Befehl "return" zurückgeben.
Es können Variablen jedes Typs zurückgegeben werden, auch Listen oder Objekte.
Die beendet sofort die Funktion, und die Kontrolle wird wieder an die aufrufende Zeile zurückgegeben.
Weitere Informationen finden Sie unter return().
function quadrat ($zahl) {return $zahl * $zahl;} echo quadrat (4); / / gibt '16 'aus.
Ein ähnliches Resultat kann man aber durch die Rückgabe von Listen erreichen.
function kleine_zahlen() {return array (0, 1, 2);} list ($null, $eins, $zwei) = kleine_zahlen();
Um von einer Funktion eine Referenz zurückzugeben, müssen Sie den Referenz-Operator sowohl in der Funktionsdeklaration, als auch bei der Zuweisung des zurückgegebenen Wertes verwenden:
function returniere_referenz() {return $einereferenz;} $neuereferenz = returniere_referenz();
Weitere Informationen über Referenzen finden Sie im Kapitel Referenzen in PHP.
Zurück
Zum Anfang
Nach vorne
Funktionsparameter
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion sscanf() ist die Eingabe analog zu printf(). sscanf() liest den String str und interpretiert ihn entsprechend dem angegebenen Parameter format.
Werden nur 2 Parameter angegeben, werden die analysierten Werte als Array zurückgegeben.
Irgendwelche Whitespaces in dem Formatstring entsprechen auch irgendwelchen Whitespaces in dem übergebenen String.
Das heißt, dass auch ein Tabulator \t im Formatstring einem einzelnen Leerzeichen des übergebenen Strings entsprechen kann.
Beispiel 1. sscanf() -Beispiel:
/ / Ermittlung der Serien-Nr. $serial = sscanf( "SN / 2350001" ,"SN / %d"); / / und des Herstellungsdatums $mandate = "Januar 01 2000"; list($monat, $tag, $jahr) = sscanf($mandate ,"%s %d %d"); echo "Das Teil $serial wurde hergestellt am: $jahr -".substr($monat,0,3) ."-$tag\n";
Beispiel 2. sscanf() - Gebrauch optionaler Parameter
/ / Ermittlung der Autoren-Info und Erzeugung eines DocBook-Eintrages $auth = "24\tLewis Carroll"; $n = sscanf($auth ,"%d\t%s %s", $id, $first, $last); echo" author id='$id 'firstname $first / firstname surname $last / surname / author \n";
Siehe auch: fscanf(), printf() und sprintf().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sammelt Informationen über eine Datei spezifiziert in filename.
Gibt einen Array mit folgenden statistischen Informationen als Array - Elemente zurück:
Laufwerk
Anzahl der Links
Benutzer ID des Inhabers
Gruppen ID des Inhabers
Laufwerkstyp wenn Inode-Laufwerk *
Größe in Bytes
Zeitpunkt des letzten Zugriffs
Zeitpunkt der letzten Modifizierung
Zeitpunkt der letzten Änderung
Blockgröße für das Dateisystem I / O *
Anzahl der zugewiesenen Blöcke
Gibt FALSE zurück, wenn ein Fehler auftrat.
stat() ist nicht für remote Dateien geeignet.
Das Ergebnis dieses Funktionsaufrufes wird zwischengespeichert.
Siehe auch clearstatcache() für weitere Einzelheiten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ist str1 kleiner als str2 wird 0, ist str1 grösser als str2 wird 0 und bei Gleichheit wird 0 zurück gegeben.
Beispiel 1. strcasecmp() -Beispiel:
Beachten Sie, dass nicht zwischen Groß - und Kleinschreibung unterschieden wird.
Siehe auch ereg(), strcmp(), substr(), stristr() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ein Alias zu strstr() und funktioniert genau wie dort beschrieben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ist str1 kleiner als str2 wird 0, ist str1 grösser als str2 wird 0 und bei Gleichheit wird 0 zurück gegeben.
Beachten Sie, dass zwischen Groß - und Kleinschreibung unterschieden wird.
Siehe auch ereg(), strcasecmp(), substr(), stristr(), strncmp() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Länge des Strings str1 bis zum ersten Erscheinen eines Buchstabens (aus str1) in str2 wird zurück gegeben.
$s1 = "dasrktuvs"; $s2 = "iklp"; / / "k" ist der "Kasus-Knacktus "$wert = strcspn ($s1, $s2); echo" br $wert br "; / / gibt also 4 zurück
Siehe auch strspn().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
See Anhang I for more information about wrappers.
See Anhang I for more information about wrappers and their wrapper data.
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Anmerkung:
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. stream_set_timeout() Example
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. stream_set_write_buffer() example
Zurück
Zum Anfang
Nach vorne
Nach oben
String-Funktionen
PHP Handbuch
Zurück
Nach vorne
Gibt einen String zurück, der den angegebenen Formatierungs-Merkmalen entspricht.
Dabei wird der gegebene Timestamp / Zeitstempel oder - falls dieser fehlt - die momentane lokale Zeit benutzt.
Der Monats - und Wochentagsname wird entsprechend des per setlocale() eingestellten Wertes gesetzt.
Nachfolgend die im Formatierungsstring gültigen / bekannten Platzhalter:
%a - abgekürzter Name des Wochentages, abhängig von der gesetzten Umgebung
%A - ausgeschriebener Name des Wochentages, abhängig von der gesetzten Umgebung
%b - abgekürzter Name des Monats, abhängig von der gesetzten Umgebung
%B - ausgeschriebener Name des Monats, abhängig von der gesetzten Umgebung
%c - Wiedergabewerte für Datum und Zeit, abhängig von der gesetzten Umgebung
%C - Jahrhundert (Jahr geteilt durch 100, gekürzt auf Integer, Wertebereich 00 bis 99)
%d - Tag des Monats als Zahl (Bereich 00 bis 31)
%D - so wie %m / %d / %y
%e - Tag des Monats als Dezimal-Wert, einstelligen Werten wird ein Leerzeichen voran gestellt (Wertebereich ´ 0´ bis ´31´)
%g - wie %G, aber ohne Jahrhundert.
%G - Das vierstellige Jahr entsprechend der ISO Wochennummer (siehe %V).
Das gleiche Format und der gleiche Wert wie bei %Y.
Besonderheit: entspricht die ISO Wochennummer dem vorhergehenden oder folgenden Jahr, wird dieses Jahr verwendet.
%h - so wie %b
%H - Stunde als Zahl im 24-Stunden-Format (Bereich 00 bis 23)
%I - Stunde als Zahl im 12-Stunden-Format (Bereich 01 bis 12)
%j - Tag des Jahres als Zahl (Bereich 001 bis 366)
%m - Monat als Zahl (Bereich 01 bis 12)
%M - Minute als Dezimal-Wert
%n - neue Zeile
%p - entweder `am' oder `pm '(abhängig von der gesetzten Umgebung) oder die entsprechenden Zeichenketten der gesetzten Umgebung
%r - Zeit im Format a.m. oder p.m.
%R - Zeit in der 24-Stunden-Formatierung
%S - Sekunden als Dezimal-Wert
%t - Tabulator
%T - aktuelle Zeit, genau wie %H:%M:%S
%u - Tag der Woche als Dezimal-Wert [1,7], dabei ist 1 der Montag.
Warnung
Sun Solaris scheint mit dem Sonntag als 1 zu starten, obwohl ISO 9889:1999 (der aktuelle C Standard) klar festlegt, dass es der Montag sein sollte.
%U - Nummer der Woche des aktuellen Jahres als Dezimal-Wert, beginnend mit dem ersten Sonntag als erstem Tag der ersten Woche.
Als Dezimal-Zahl mit dem Wertebereich 01 bis 53, wobei die Woche 01 die erste Woche mit mindestens 4 Tagen im aktuellen Jahr ist.
Die Woche beginnt montags (nicht sonntags). (Benutzen Sie %G or %g für die Jahreskomponente, die der Wochennummer für den gegebenen Timestamp entspricht.)
%w - Wochentag als Dezimal-Wert, Sonntag ist 0
%x - bevorzugte Datumswiedergabe (ohne Zeit), abhängig von der gesetzten Umgebung.
%X - bevorzugte Zeitwiedergabe (ohne Datum), abhängig von der gesetzten Umgebung.
%Y - Jahr als 4-stellige-Zahl inklusive des Jahrhunderts
%% - ein %-Zeichen
Es ist durchaus möglich, dass Ihre C-Bibliothek nicht alle angegebenen Formatierungszeichen erkennt.
In diesem Fall werden diese Zeichen von der PHP-Funktion strftime() nicht unterstützt.
Beispiel 1. strftime() Beispiel
setlocale (LC_TIME, "C"); print (strftime ("%A in Finnland ist ")); setlocale (LC_TIME, "fi_FI"); print (strftime ("%A, in Frankreich ")); setlocale (LC_TIME, "fr_FR"); print (strftime ("%A und in Deutschland ")); setlocale (LC_TIME, "de_DE"); print (strftime ("%A.\n"));
Siehe auch setlocale(), mktime() und die Open Group Spezifikation von strftime().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt einen String ohne "\" zurück.
Anmerkung:
Siehe auch addcslashes().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Doppelte Rückstriche ("\\") werden zu "\ "umgesetzt.
Siehe auch addslashes().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion versucht, alle HTML - und PHP-Tags aus str zu entfernen.
Bei unvollständigen oder sinnlosen Tags werden Fehler ausgegeben.
Es wird die gleiche Art der Tag-Engine wie bei der fgetss() -Funktion benutzt.
Sie können den optionalen Parameter allowable_tags benutzen, um nicht zu entfernende Tags zu definieren.
Anmerkung:
PHP4B3 zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Findet alle Vorkommen von needle innerhalb von haystack vom Anfang bis zum Ende (ohne Rücksicht auf die Schreibweise beider Parameter).
Wird needle nicht gefunden, wird FALSE zurück gegeben.
Dies ASCII-Entsprechung dieses Wertes wird dann als zu suchendes Zeichen angesehen.
Siehe auch strchr(), strrchr(), substr() und ereg().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Länge der Zeichenkette string zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion implementiert einen String-Vergleich wie unter strnatcmp() mit dem Unterschied, dass hier nicht zwischen Groß - und Kleinschreibung unterschieden wird.
Für weitere Infos siehe Martin Pool 's Natural Order String Comparison Seite.
0, wenn str1 größer ist als str2 oder 0, wenn sie gleich sind.
Siehe auch ereg(), strcasecmp(), substr(), stristr(), strcmp(), strncmp(), strnatcmp() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion implemetiert einen Vergleichsalgorithmus, der alphanumerische Zeichenketten "menschlich" ordnet (auch "natürliche Ordnung "genannt).
Der Unterschied zwischen dieser und der regulären String-Sortierung eines Computers (verwendet in strcmp()) wird in dem folgenden Beispiel gezeigt:
$arr1 = $arr2 = array( "img12.png" ,"img10.png" ,"img2.png" ,"img1.png"); echo "Normaler String-Vergleich\n"; usort($arr1 ,"strcmp"); print_r($arr1); echo "\nVergleich mittels natürlicher Ordnung\n"; usort($arr2 ,"strnatcmp"); print_r($arr2);
Normaler String-Vergleich Array ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Vergleich mittels natürlicher Ordnung Array ([0] = img1.png [1] = img2.png [2] = img10.png [3] = img12.png)
0, wenn str1 größer ist als str2 oder 0, wenn sie gleich sind.
Dieser Vergleich unterscheidet Groß - und Kleinschreibung.
Siehe auch ereg(), strcasecmp(), substr(), stristr(), strcmp(), strncmp(), strncasecmp(), strnatcasecmp(), strstr(), natsort() und natcasesort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ist ähnlich strcmp() nur mit dem Unterschied, dass sie den maximalen Wert der Zeichen (len) angeben können, der verglichen werden soll.
Ist einer der Strings kürzer als (len) wird dessen Länge für den Vergleich angewendet.
0, wenn str1 größer ist als str2 oder 0, wenn sie gleich sind.
Dieser Vergleich unterscheidet Klein - und Großschreibung.
Siehe auch ereg(), strcasecmp(), substr(), stristr(), strcmp() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Mit dieser Funktion erweitern Sie den String input auf der linken, rechten oder beiden Seiten auf die mit dem optionalen Parameter pad_type angegebene Länge.
Wird das optionale Argument pad_string nicht angegeben, erfolgt die Erweiterung mit Leerzeichen, ansonsten wird hierzu der Inhalt von pad_string verwendet.
Das optionale Argument pad_type kann STR_PAD_RIGHT, STR_PAD_LEFT oder STR_PAD_BOTH sein.
Wird pad_type nicht angegeben, so wird per default von STR_PAD_RIGHT ausgegangen.
Ist der Wert von pad_length negativ oder kleiner als die Länge des Input-Strings, wird keine Erweiterung vorgenommen.
Beispiel 1. str_pad() -Beispiel:
$input = "Alien"; print str_pad ($input, 10); / / Ergebnis "Alien" print str_pad ($input, 10, "-=", STR_PAD_LEFT); / / Ergebnis "-=-=-Alien "print str_pad ($input, 10, "_", STR_PAD_BOTH); / / Ergebnis "__Alien___"
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt als numerischen Wert die Position des ersten Vorkommens von needle innerhalb der Zeichenkette haystack zurück.
Anders als bei strrpos() kann diese Funktion eine komplette Zeichenkette unterstützen.
Wurde needle nicht gefunden, wird FALSE zurück gegeben.
Anmerkung:
Die Meldungen "Zeichen bei Position 0 gefunden (character found at position 0)" und "Zeichen nicht gefunden (character not found) "werden oft falsch ausgelegt.
Hier die Unterscheidung:
3 Gleichheits-Zeichen / / nicht gefunden...} / / in Versionen vor 4.0b3: $pos = strpos ($mystring, "b"); if (is_string ($pos) !$pos) {/ / nicht gefunden...}
Ist needle kein String, wird er zu einem Integer-Wert umgesetzt und als das diesem Wert entsprechende ASCII-Zeichen angesehen.
Der optionale Parameter offset ermöglicht es, den Startwert für die Suche nach needle innerhalb von haystack anzugeben.
Die zurück gegebene Positions-Angabe ist dann relativ zum Anfang von haystack.
Siehe auch strrpos(), strrchr(), substr(), stristr() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion gibt den letzten Teil des Strings haystack zurück, der ab dem letzten Vorkommen von needle steht (bis zum Ende).
Wird needle nicht gefunden, wird FALSE zurück gegeben.
Enthält needle mehr als ein Zeichen, wird nur das erste Zeichen genommen.
Ist needle kein String, wird er zu einem Integer-Wert umgesetzt und als das diesem Wert entsprechende ASCII-Zeichen angesehen.
Beispiel 1. strrchr() -Beispiel:
/ / hole das letzte Verzeichnis aus $PATH $dir = substr (strrchr ($PATH, ":"), 1); / / hole alles nach dem letzten "Neue-Zeile" $text = "Zeile 1\nZeile 2\nZeile 3"; $last = substr (strrchr ($text, 10), 1);
Siehe auch substr(), stristr() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt input_str multiplier mal zurück, wobei multiplier größer als 0 sein muss.
Beispiel 1. str_repeat() -Beispiel:
echo str_repeat ("-=", 10);
Es wird "-=-=-=-=-=-=-=-=-=-=" ausgegeben.
Siehe auch for, str_pad() und substr_count().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion ersetzt alle Vorkommen von needle innerhalb der Zeichenkette haystack durch den String str.
Falls Sie keine ausgefallenen String-Ersetzungen brauchen, sollten Sie immer dieser Funktion den Vorzug vor ereg_replace() geben.
Beispiel 1. str_replace() -Beispiel:
$bodytag = str_replace ("%body%", "black", "body text=%body% ");
Diese Funktion beruht auf einem Binär-Vergleich.
Siehe auch ereg_replace() und strtr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dreht die Schreibweise von string um.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Wert des letzen Vorkommens von needle im String haystack wird ermittelt.
Needle darf nur ein einzelnes Zeichen sein.
Wird als needle eine Zeichenkette übergeben, wird nur dessen erster Buchstabe ausgewertet.
Wurde needle nicht gefunden, wird FALSE zurück gegeben.
Ist needle kein String, wird er zu einem Integer-Wert umgesetzt und als das diesem Wert entsprechende ASCII-Zeichen angesehen.
Siehe auch strpos(), strrchr(), substr(), stristr() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. str_shuffle() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ermittelt die Anzahl der Zeichen am Anfang von str1, die aus dem in str2 übergebenen Zeichenvorrat stammen.
So ergibt z.B.
strspn( "42 ist die Antwort, was ist die Frage.. .","1234567890");
Siehe auch strcspn().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Es wird alles von haystack zurück gegeben ab der ersten Fundstelle von needle bis zum Ende.
Falls needle nicht gefunden wird, ist das Ergebnis FALSE.
Ist needle kein String, wird er zu einem Integer-Wert umgesetzt und als das diesem Wert entsprechende ASCII-Zeichen angesehen.
Diese Funktion unterscheidet zwischen Groß - und Kleinschreibung.
Beispiel 1. strstr() -Beispiel:
$email = 'sterling@designmultimedia.com'; $domain = strstr ($email, '@'); print $domain; / / gibt @designmultimedia.com zurück
Siehe auch stristr(), strrchr(), substr() und ereg().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
strtok() wird benutzt, um einen String (arg1) zu teilen.
Den Satz "Das ist ein Beispiel" können Sie in seine einzelnen Wörter zerlegen, in dem Sie das Leerzeichen als Trennzeichen (arg2) angeben.
Beispiel 1. strtok() -Beispiel:
$string = "Das ist noch ein Beispiel"; $tok = strtok ($string," "); while ($tok) {echo "Wort=$tok br "; $tok = strtok (" ");}
Beachten Sie, dass der zu zerlegende String nur beim ersten Aufruf von strtok() angegeben werden muss.
Die nachfolgenden Aufrufe brauchen nur das Trennzeichen als Parameter.
Falls Sie eine neue Zeichenkette zerlegen wollen, rufen Sie strtok() wieder mit dem Parameter arg1 auf.
Das initialisiert die Funktion.
Sie können auch meherere Trennzeichen in arg2 angeben.
Die Trennung erfolgt beim ersten Auftreten eines beliebigen Zeichens aus arg2.
Beachten Sie, dass die Teile auch "0" sein können.
Dies entspricht in bedingten Ausdrücken dem Wert FALSE.
Siehe auch split() und explode().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt string zurück, in dem alle Buchstaben in Kleinbuchstaben umgewandelt wurden.
Beachten Sie, dass 'Buchstaben' vom Wert locale abhängig ist.
Ist z.B. die Voreinstellung für locale "C", werden keine Umlaute (Ä, Ü, Ö) umgewandelt.
Beispiel 1. strtolower() -Beispiel:
$str = "Dieter B. (M.T.) Ist Ein Schaf und Er LIEBT Sich So"; $str = strtolower($str); print $str; / / Gibt "dieter b. (m.t.) ist ein schaf und er liebt sich / / so" aus.
Siehe auch strtoupper() und ucfirst().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Versucht wird dies relativ zu dem Timestamp, den Sie mit now Versucht wird dies relativ zu dem Timestamp, den Sie mit now angeben.
Schlägt die Umwandlung fehl, wird -1 zurückgegeben.
Daher sollten Sie einen Blick in die GNU Manual Seite Date Input Formats werfen.
Dort wird die gültige Syntax für time beschrieben.
Beispiel 1. strtotime() -Beispiele:
Beispiel 2.
Fehlerüberprüfung
$str = 'Nicht gut'; if (($timestamp = strtotime($str)) === -1) {echo "Der String ($str) ist falsch .";} else {echo "$str == ". date('l dS of F Y h:i:s A',$timestamp);}
Anmerkung:
Der gültige Bereich eines Timestamp liegt typischerweise zwischen Fri, 13 Dec 1901 20:45:54 GMT und Tue, 19 Jan 2038 03:14:07 GMT. (Das sind die Datumsangaben, die dem minimalen und maximalen Wert eines vorzeichenbehafteten 32-bit Integer entsprechen.)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt string zurück, in dem alle Buchstaben in Großbuchstaben umgewandelt wurden.
Beachten Sie, dass 'Buchstaben' vom Wert locale abhängig ist.
Ist z.B. die Voreinstellung für locale "C", werden keine Umlaute (ä, ü, ö) umgewandelt.
Beispiel 1. strtoupper() -Beispiel:
$str = "Dieter B. (M.T.) Ist Ein Schaf und Er LIEBT Sich So"; $str = strtoupper($str); print $str; / / Gibt "DIETER B. (M.T.) IST EIN SCHAF UND ER LIEBT SICH / / SO" aus.
Siehe auch strtolower() und ucfirst().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück gegeben wird der bearbeitete String.
Sind from und to von unterschiedlicher Länge werden die überzähligen Zeichen ignoriert.
Beispiel 1. strtr() -Beispiel:
Die Funktionsweise ist dann anders:
Strtr sucht immer erst die längste Entsprechung und wird keine Auswechselungen vornehmen, die bereits bearbeitet wurden.
Beispiele dazu:
$trans = array ("hallo "= "hi", "hi" = "hallo"); echo strtr("hi alle, ich sage hallo", $trans). "\n";
Anmerkung:
Die Möglichkeit mit 2 Parametern wurde in PHP 4.0 hinzugefügt.
Siehe auch ereg_replace().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion liefert den übergebenen Ausdruck var als String-Repräsentation zurück.
var darf von jedem einfache Datentyp, aber kein Array oder Objekt sein.
Siehe auch doubleval(), intval(), settype() und Typ-Veränderung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zählt die Worte in string.
Wenn der optionale Parameter format nicht angegeben wird, wird ein Integer mit der Anzahl der Worte zurückgegeben.
Andernfalls wird ein Array zurückgegeben, dessen Inhalt von format abhängt. format kann folgende Werte annehmen.
1 - gibt einen Array zurück, der alle Worte innerhalb von string enthält.
2 - gibt einen asoziativen Array zurück, dessen Schlüssel die Position des Wortes innerhalb von string ist und dessen Wert das eigentliche Wort ist.
Für diese Funktion wird 'Wort' als locale abhängige Zeichenfolge definiert, die zusätzlich zu den Zeichen des Alphabets auch "'"and" - "Zeichen Enthalten kann, jedoch nicht damit beginnen darf.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion substr_count() ermittelt, wie oft needle in dem String haystack vorkommt, und gibt die Anzahl der Vorkommen zurück.
Beispiel 1. substr_count() -Beispiel:
?php print substr_count( "Dieser Test ist Mist", "ist"); / / ergibt 2?
Siehe auch count_chars(), strpos(), substr() und strstr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
substr() gibt den Teil von string zurück, der durch die Parameter start und length definiert wurde.
Wenn start positiv ist, beginnt der zurück gegebene String an der start -Position von string, angefangen bei NULL.
So ist z.B. im String 'abcdef' das Zeichen an der Position 0 gleich 'a', das Zeichen an der Position 2 ist 'c' usw.
Beispiel 1.
Generelle Verwendung von substr()
?php $rest = substr( "abcdef", 1); / / gibt "bcdef "zurück $rest = substr("abcdef", 1, 3); / / gibt "bcd" zurück $rest = substr("abcdef", 0, 4); / / gibt "abcd "zurück $rest = substr("abcdef", 0, 8); / / gibt "abcdef" zurück / / Der Zugriff mittels geschwungenen Klammer ist eine / / weitere Möglickeit $string = 'abcdef'; echo $string{0}; / / gibt a zurück echo $string{3}; / / gibt d zurück?
Ist start negativ, beginnt der zurückgegebene String bei dem start 'en Zeichen vom Ende von string.
Beispiel 2.
Negativen start verwenden
?php $rest = substr( "abcdef", -1); / / gibt "f "zurück $rest = substr("abcdef", -2); / / gibt "ef" zurück $rest = substr("abcdef", -3, 1); / / gibt "d "zurück?
Ist length angegeben und positiv, enthält der zurückgegebene String höchstens length Zeichen ab start (abhängig von der Länge von string).
Ist string kürzer als start Zeichen, wird FALSE zurückgegeben.
Ist length angegeben und negativ, dann werden genauso viele Zeichen vom Ende von string abgeschnitten (nachdem die Starposition ermittelt wurde, sollte start negativ sein).
Gibt start eine Position hinter dem abzuschneidenden Teil an, wird ein leerer String zurückgegeben.
Beispiel 3.
Negative length verwenden
?php $rest = substr( "abcdef", 0, -1); / / gibt "abcde "zurück $rest = substr("abcdef", 2, -1); / / gibt "cde" zurück $rest = substr("abcdef", 4, -4); / / gibt "" zurück $rest = substr("abcdef", -3, -1); / / gibt "de "zurück?
Siehe auch strrchr() und ereg().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
substr_replace() ersetzt den Teil von string, der durch die Parameter start und (optional) length begrenzt wird mit der in replacement substr_replace() ersetzt den Teil von string, der durch die Parameter start und (optional) length begrenzt wird mit der in replacement angegeben Zeichnekette.
Das Ergebnis wird zurück gegeben.
Ist start positiv, beginnt der Austausch am Offset start innerhalb von string.
Ist start negativ, wird vom Ende der Zeichenkette string bis zum Wert von start rückwärts gezählt und dort mit dem Austausch begonnen.
Ist length angegeben und positive, stellt dieser Parameter die Länge des auszuwechselnden Teilstrings dar.
Bis zu dieser Stelle erfolgt dann der Austausch.
Ist length nicht angegeben, wird unterstellt, dass Sie die Ersetzung bis zum String-Ende (strlen (string)) bezwecken.
Beispiel 1. substr_replace() -Beispiel:
?php $var = 'ABCDEFGH: / MNRPQR /'; echo "Original: $var hr \n"; / * Diese 2 Beispiele ersetzen alles in $var mit 'bob'. * / echo substr_replace ($var, 'bob', 0). "br \n"; echo substr_replace ($var, 'bob', 0, strlen ($var))." br \n"; / * Fügt 'bob 'am Anfang von $var ein. * / echo substr_replace ($var, 'bob', 0, 0). "br \n"; / * Die nächsten beiden ersetzen 'MNRPQR' in $var durch 'bob'. * / echo substr_replace ($var, 'bob', 10, -1)." br \n"; echo substr_replace ($var, 'bob', -7, -1). "br \n"; / * Löscht 'MNRPQR 'aus $var. * / echo substr_replace ($var, '', 10, -1)." br \n";?
Sieehe auch str_replace() und substr().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 13.
Funktionen
Nach vorne
PHP unterstützt das Konzept der Variablenfunktionen.
Wenn Sie an das Ende einer Variablen Klammern hängen, versucht PHP eine Funktion aufzurufen, deren Name der aktuelle Wert der Variable ist.
Dies kann unter anderem für Callbacks, Funktionstabellen, usw. genutzt werden.
Sie müssen Ihre eigenen Wrapperfunktionen verwenden, um diese Konstrukte als variable Funktionen benutzen zu können.
Beispiel 13-3.
Beispiel für Variablenfunktionen
?php function foo() {echo "In foo() br \n";} function bar($arg = '') {echo "In bar(); der Parameter ist '$arg'. br \n";} / / Dies ist eine Wrapperfunkiton für echo function echoit($string) {echo $string;} $func = 'foo'; $func(); / / Dies ruft foo() auf $func = 'bar'; $func('test'); / / Dies ruft bar() auf $func = 'echoit'; $func('test'); / / Dies ruft echoit() auf?
Sie können auch die Methode eines Objektes mittels der variablen Funktionen aufrufen.
Beispiel 13-4.
Variable Methode
?php class Foo {function Var() {$name = 'Bar'; $this - $name(); / / Dies ruft die Bar() Methode auf} function Bar() {echo "Das ist Bar";}} $foo = new Foo(); $funcname = "Var"; $foo - $varname(); / / Dies ruft $foo - Var() auf?
Siehe auch call_user_func(), Variable Variablen und function_exists().
Zurück
Zum Anfang
Nach vorne
Nach oben
Klassen und Objekte
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Shockwave Flash Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfaction() example
Beispiel 2. swfaction() example
Beispiel 3. swfaction() example
Beispiel 4. swfaction() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Description void swf_actionprevframe (void)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. swf_addbuttonrecord() function example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion swf_addcolor() setzt die "global add "-Farbe auf den mit rgba spezifizierten Farbwert.
Diese Farbe wird (implizit) von den Funktionen swf_placeobject(), swf_modifyobject() und swf_addbuttonrecord() verwendet.
Die Farbe wird dem Objekt durch den rgba -Wert hinzugefügt, wenn es auf dem Bildschirm ausgegeben wird.
Anmerkung:
Das rgba Parameter kann sowohl negative wie auch positive Werte annehmen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Anmerkung:
Beispiel 1.
Beispiel 2. swfbitmap() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfbutton() example
Beispiel 2. swfbutton - addaction() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schließt eine Datei die zuvor mit swf_openfile () geöffnet wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfdisplayitem - multcolor() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfdisplayitem - rotateto() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfdisplayitem - setname() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die swf_getframe() Funtkion holt die Nummer des aktuellen Frames.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfgradient() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beschriftet den aktuellen Frame mit der Bezeichnung, die durch das Parameter name angegeben wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfmorph() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfmovie - streammp3() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die swf_mulcolor() Funktion setzt die "global multiply "-Farbe auf die mit rgba spezifizierte Farbe.
Diese Farbe wird (implizit) von den Funktionen swf_placeobject(), swf_modifyobject() und swf_addbuttonrecord() verwendet.
Die Farbe des Objekts wird vervielfacht mit dem Wert von rgba, wenn das Objekt auf dem bildschirm ausgegeben wird.
Anmerkung:
Das rgba Parameter kann sowohl negative wie auch positive Werte annehmen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion swf_openfile() öffnet eine neue SWF-Datei mit dem Namen filename, einer Breite von width ,einer Höhe von height, einer Frame-Rate von framerate und einem Hintergrund mit einem roten Farbwert von r, einem grünen Farbwert von g und einem blauen Farbwert von b.
Die Funktion swf_openfile() muss die erste Funtkion sein, sie Sie aufrufen, andernfalls wird Ihr Skript einen Segfault verursachen.
Wenn Sie den Output des Skriptes auf dem Bildschirm ausgeben wollen, benutzen Sie filename: "php: / /stdout" (Unterstützung ab PHP 4.0.1 und höher).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
The swf_ortho() funcion defines a orthographic mapping of user coordinates onto the current viewport.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die swf_setframe() Funktion ändert den aktuellen Frame in den mit framenumber spezifizierten Frame.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfshape - addfill() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
The swf_shapecurveto() function draws a quadratic bezier curve from the x coordinate given by x1 and the y coordinate given by y1 to the x coordinate given by x2 and the y coordinate given by y2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfshape() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfshape - setline() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die swf_showframe() Funktion gibt den aktuellen Frame aus.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swfsprite() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
Sonstige Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Beispiel 1. swftext() example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
SNMP Funktionen
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
symlink() erzeugt einen symbolischen Link von dem gegebenen Parameter target mit dem spezifiziertem Namen link.
Siehe auch link() um absolute Links zu erstellen, und readlink() zusammen mit linkinfo().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Parameter priority ist eine Kombination der System-Möglichkeiten und dem Level.
Es verbleibt die zu sendende Nachricht, in der die beiden Zeichen %m durch den Fehlertext (strerror) ersetzt werden, der dem Wert errno entspricht.
Tabelle 1. syslog() -Prioritäten (in absteigender Reihenfolge)
Konstante
Beschreibung:
System ist unbrauchbar.
Aktion ist sofort erforderlich.
Kritischer Zustand.
Fehler aufgetreten.
Warnung aufgetreten.
Normale, aber wichtige, Meldung.
Informative Meldung.
Debug-Level-Meldung.
Beispiel 1.
Die Verwendung von syslog():
?php define_syslog_variables(); / / öffne SysLog, schließe die Prozess-ID (PID) ein, sende / / die Log-Meldungen an die Standard-Fehler-Ausgabe und benutze / / einen User-definierten Log-Mechanismus. openlog("myScripLog", LOG_PID _BAR_ LOG_PERROR, LOG_LOCAL0); / / etwas Code if (authorized_client()) {/ / mache etwas} else {/ / unerlaubter Client! / / logge den Zugriff $access = date("Y / m/d H:i:s"); syslog(LOG_WARNING ,"Unauthorisierter Client: $access $REMOTE_ADDR ($HTTP_USER_AGENT)");} closelog();?
Unter Windows-NT wird der Syslog-Dienst emuliert, indem der Ereignis-Protokollierdienst genutzt wird.
Siehe auch define_syslog_variables(), openlog() und closelog().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktion system() ähnelt der C Version der Funktion sehr, indem es einen übergebenen Befehl ausführt und dessen Ausgabe anzeigt.
Wir als zweiter Parameter der Funktion eine Variable übergeben, so wird der Rückgabestatus des Befehls in diese geschrieben.
Beachten Sie, dass wenn Sie Benutzereingaben an diese Funktion übergeben, diese mit escapeshellcmd() behandelt, um sicherzustellen, dass niemand mit willkürlichen Befehlen Ihrem System Schaden zufügen kann.
Andernfalls wird PHP solange laufen, bis das Programm beendet ist.
Die system() Funktionsaufrufe versuchen übrigens automatisch nach jeder Ausgabezeile den Ausgabebuffer des Webservers zu flushen, wenn PHP als Servermodul läuft.
Gibt die letzte Zeile der Befehlsausgabe bei Erfolg, andernfalls FALSE zurück.
Wenn Sie auf die direkte Rückgabe / Ausgabe eines Befehls angewiesen sind, dann benutzen Sie stattdessen die Funktion passthru().
Siehe auch: exec(), passthru(), popen(), escapeshellcmd() und den Backtick Operator.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liefert den Tangens des Wertes arg. arg wird dabei im Bogenmaß angegeben.
Siehe auch sin(), cos(), atan() und atan2().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Erzeugt eine Datei mit einem eindeutigen Dateinamen in dem spezifizierten Verzeichnis.
Wenn das Verzeichnis nicht existiert, erstellt tempnam() eine Datei im temporären Verzeichnis des Systems, und gibt den Dateinamen zurück.
Vor PHP 4.0.6 war das Verhalten von tempnam() systemabhängig.
Wenn Sie nicht genau wissen, wie Ihr System tempnam() behandelt, dann konsultieren Sie bitte Ihre System-Dokumentation.
Gibt den neuen temporären Dateinamen bei Erfolg, oder eine FALSE Zeichenkette wenn ein Fehler auftritt zurück.
Beispiel 1. tempnam()
$tmpfname = tempnam ("/ tmp", "FOO"); $handle = fopen($tmpfname, "w"); fwrite($handle, "schreibe in Tämporärdatei"); fclose($handle); / / tue hier etwas unlink($tmpfname);
Anmerkung:
Diese Funktion hat ihr Verhalten seit PHP 4.0.3 geändert.
Die temporäre Datei wird ebenfalls angelegt um eine "Hetzsituation" zu vermeiden, wo in der Zeit nach dem Generieren des Strings, und bevor das Script dazukommt die Datei anzulegen, die Datei im Dateisystem erscheinen könnte.
Beachten Sie, dass falls Sie die Datei nicht mehr benötigen, Sie diese wieder entfernen müssen (dies geschieht nicht automatisch).
Siehe auch tmpfile() und unlink().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion setzt den für gettext() Diese Funktion setzt den für gettext() Aufrufe zu verwendenden Textbereich.
Der vorherige Standardbereich wird zurück gegeben.
Ein Aufruf ohne Parameter liefert den aktuellen Standardbereich ohne diesen zu ändern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die seit Beginn der UNIX-Epoche (Januar 1 1970 00:00:00 GMT) bis jetzt vergangenen Sekunden zurück.
Siehe auch date().
Zurück
Zum Anfang
Nach vorne
Nach oben
dBase Funktionen
PHP Handbuch
Zurück
Nach vorne
Erstellt eine temporäre Datei mit einem eindeutigen Dateinamen im Schreibmodus und gibt einen Dateizeiger ähnlich wie es bei der Funktion fopen() erfolgt, zurück.
Die Datei wird automatisch gelöscht, wenn sie geschlossen wird (mit fclose()), oder das Skript beendet wird.
Für Details konsultieren Sie bitte die Dokumentation Ihres Betriebssystems bzgl. der tmpfile( 3) Funktion, wie auch die stdio.h Header-Datei.
Beispiel 1. tmpfile()
$temp = tmpfile(); fwrite($temp, "schreibt in Temporärdatei"); fclose($temp); / / dies entfernt die Datei
Siehe auch tempnam().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
URL Funktionen
PHP Handbuch
Zurück
Nach vorne
Setzt Datum und Uhrzeit der letzten Änderung und des letzten Zugriffs der durch filename spezifizierten Datei auf den durch time spezifizierten Wert.
Wenn die Option time nicht angegeben wurde, wird die aktuelle Zeit benutzt.
Dies ist äquivalent zu dem, was utime tut (manchmal wird auch als utimes davon gesprochen).
Ist die dritte Option atime angegeben, so wird die Zugriffszeit auf atime Ist die dritte Option atime angegeben, so wird die Zugriffszeit auf atime gesetzt.
Beachten Sie, dass die Zugriffszeit unabhängig von der Anzahl der Parameter stets modifiziert wird.
Wenn die Datei nicht existiert, wird sie erzeugt.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Beispiel 1. touch()
if (touch ($DateiName)) {print "$DateiName Modifizierungs-Zeit wurde auf das aktuelle Datum und die aktuelle Uhrzeit gesetzt .";} else {print "Tut mir leid, Modifikations-Zeit von $DateiName konnte nicht geändert werden .";}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion entfernt Leerraum am Anfang und Ende einer Zeichenkette.
Der gekürzte String wird zurück gegeben.
Als überflüssige Zeichen werden z.Zt. angesehen: "\n", "\r", "\t", "\v", "\0" und normale Leerzeichen.
Siehe auch chop(), ltrim(), und rtrim().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sortiert ein Array so, dass die Beziehung der Indices zu den Arrayelementen beibehalten bleibt.
Dies wird hauptsächlich bei assoziativen Arrays angewandt, wenn die aktuelle Reihenfolge der Arrayelemente signifikant ist.
Die Vergleichsfunktion wird vom Benutzer definiert.
Anmerkung:
Siehe usort() und uksort() für Beispiele von benutzerdefinierten Vergleichsfunktionen
Siehe auch usort(), uksort(), sort(), asort(), arsort(), ksort(), und rsort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt das erste Zeichen von str in einen Großbuchstaben um, wenn es ein Zeichen des Alphabets ist.
Beachten Sie, dass die Zeichen des Alphabets abhängig sind vom Wert des gesetzten locale.
Ist dieser (Voreinstellung) "C ", werden die deutschen Umlaute nicht erkannt.
Beispiel 1. ucfirst() -Beispiel:
$text = 'markus ist ein kleines schaf .'; $text = ucfirst ($text); / / $text ist nun "Markus ist ein kleines / / schaf. "
Siehe auch strtoupper() und strtolower().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzt die ersten Buchstaben aller Wörter innerhalb von str in die entsprechenden Großbuchstaben um, sofern es sich um alphabetische Zeichen handelt.
Ist dieser (Voreinstellung) "C ", werden die deutschen Umlaute nicht erkannt.
Beispiel 1. ucwords() -Beispiel:
Siehe auch strtoupper(), strtolower() und ucfirst().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_add_search_limit() gibt TRUE bei Erfolg, FALSE bei einem Fehler zurück.
Fügt Suchrestritktionen hinzu.
agent - ein Link zu einem Agent, erhalten nach udm_alloc_agent().
var - Definiert den Parameter der die Einschränkung angibt.
val - Definiert den Wert des aktuellen Parameters.
Mögliche Werte für var:
UDM_LIMIT_URL - definiert URL Limitationen, um die Suche auf Unterbereiche einzuschränken SQL% und _ LIKE Wildcards werden unterstützt,% entspricht dabei einer beliebigen Anzahl von Zeichen, wobei auch keine Zeichen eingeschlossen werden, _ entspricht genau einem Zeichen.
So entspricht also http: / /my.domain__ / catalog sowohl http: / /my.domain.ru / catalog als auch http: / /my.domain.ua / catalog.
UDM_LIMIT_TAG - definiert TAG Limitationen.
In der indexer-conf können bestimmeten Sites und Teilen von Sites sogenannte Tags zugewiesen werden.
Auch bei Tags werden% und _ unterstützt.
Metasymbole erlauben die Suche über Gruppen von Tags.
So werden also die Tags ABCD und ABCE bei einer Einschränkung auf ABC_ eingeschlossen.
UDM_LIMIT_LANG - Definiert Sprachlimitationen.
UDM_LIMIT_CAT - Definiert Dokumentenkategorielimitationen.
Kategorien sind den Tags ähnlich, jedoch im Gegensatz zu diesen verschachtelt.
Eine Kategorie kann also Unterkategorie einer anderen sein.
Für jede Ebene werden müssen zwei Zeichen verwendendet werden, entweder hexadezimale Zahlen von 0-F oder Zahlen zur Basis 36 von 0-Z.
Eine Kategorie der obersten Ebene, z.B. 'Auto' hätte die Zahl 01, die Unterkategorie 'Ford 'hätte ebenfalls die 01 als Zahl.
Zusammen ergäbe das dann die 0101.
Eine weitere Kategorie 'VW' unterhalb der Kategorie 'Auto 'hätte dann die Zahl 0102 usw.
Wenn 'VW' eine Unterkategorie 'Golf 'hätte, wäre desren ID 010201.
UDM_LIMIT_DATE - Definiert Einschränkungen in Bezug auf das Datum, wann das Dokument zuletzt verändert wurde.
Der Wert dieses Parameters ist das kleiner bzw. größer-Zeichen (oder) gefolgt von einem Unix-Timestamp, also z.B.
Wenn das -Zeichen benutzt wird, wird die Suche auf diejenigen Dokumente eingeschränkt, deren Veränderungsdatum jünger als das eingegebene ist, beim -Zeichen erfolgt die Einschränkung dementsprechend auf Dokumente, die Älter sind.
Zurück
Zum Anfang
Nach vorne
mnoGoSearch Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_alloc_agent() Gibt bei Erfolg einen eindeutigen Zeiger auf einen mnoGoSearch-Agenten zurück, bei einem Fehler wird FALSE zurückgegeben.
Diese Funktion kreiert eine Sitzung mit Datenbankparametern.
dbaddr - Datenbankadresse im URL-Stil.
Wird verwendet, um mit den Daten Datenbanktyp, Datenbankhost, Datenbankname, Datenbankport, Datenbankuser und Datenbankpasswort eine Verbindung zu einer SQL-Datenbank herzustellen.
Das Format lautet:
DBAddr DBType :[ / /[DBUser[:DBPass]@]DBHost[:DBPort]] / DBName /.
dbmode - Mit dem Parameter dbmode wird der Modus spezifiziert, in dem die Daten in der Datenbank vorliegen.
Wird der Modus 'single' gewählt, werden alle Wörter in der selben Tablelle gespeichert.
Der Modus 'multi' speichert die Wörter in verschiedenene Tabellen, abhängig von deren Länge.
Weitere Modi sind der CRC-Modus und der Multi-CRC-Modus, wobei der CRC-Modus schneller als der Single - und der Multimodus sind, und der Multi-CRC-Modus die Technik des CRC-Modus mit der Speicherstruktur des Multi-Modus verbindet.
Anmerkung:
Eigentlich öffnet diese Funktion keine Verbindung zur Datenbank, folglich werden auch keine User - und Passwortüberprüfungen durchgeführt.
Die Verbindung zur Datenbank wird von der Funktion udm_find() übernommen, hier findet dann auch eine Überprüfung der Logindaten statt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_api_version() gibt die mnoGoSearch API-Versionsnummer zurück.
Wird als z.B. die mnoGoSearch 3.1.10 API benutzt, gibt diese Funktion 30110 zurück.
Diese Funktion erlaubt es dem Benutzer zu erfahren, welche Funktionen der mnoGoSearch-API verfügbar sind. udm_get_doc_count() diese Funktion ist erst ab mnoGoSearch 3.1.11 oder später verfügbar.
Beispiel:
if (udm_api_version() gt;= 30111) {print "Total number of urls in database: ".udm_get_doc_count($udm). "lt;br gt;\n";}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_cat_list() Gibt einen Array zurück, der alle Kategorien auf dem selben Level im Kategorienbaum wie die aktuelle Kategorie liegen.
Diese Funktion kann nützlich sein, um einen Kategorienbrowser zu entwickeln.
Gibt einen Array mit dem folgenden Format zurück:
Der Array besteht aus Paaren.
Elemente mit geraden Indexnummern beinhalten die Kategoriepfade, die ungeraden Elemente behinhalten die entsprechenden Kategorienamen.
$array[ 0] beinhaltet '020300 '$array[1] beinhaltet 'Audi' $array[2] beinhaltet '020301 '$array[3] beinhaltet 'BMW' $array[4] beinhaltet '020302 '$array[5] beinhaltet 'Opel'... usw.
Das folgende Beispiel gibt Links im folgenden Format aus:
?php $cat_list_arr=udm_cat_list( $udm_agent,$cat); $cat_list=''; for ($i=0; $i lt;count($cat_list_arr); $i+=2) {$path=$cat_list_arr[$i]; $name=$cat_list_arr[$i+1]; $cat_list .= "a href=\"$PHP_SELF?cat=$path\" $name / a br ";}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_cat_path() gibt einen Array zurück, der den Pfad im Kategorienbaum von der Wurzel an bis zur aktuellen Kategorie enthält.
agent - Zeiger auf den Agenten.
category - aktuelle Kategorie - diejenige, zu der der Pfad herausgefunden werden soll.
Gibt einen Array mit dem folgenden Format zurück:
Der Array besteht aus Paaren.
Elemente mit geraden Indexnummern beinhalten die Kategoriepfade, die ungeraden Elemente behinhalten die entsprechenden Kategorienamen.
So könnte der Aufruf $array=udm_cat_path( $agent, '02031D'); folgenden Array zurückliefern:
$array[ 0] beinhaltet '' $array[1] beinhaltet 'Root '$array[2] beinhaltet '02' $array[3] beinhaltet 'Sport '$array[4] beinhaltet '0203' $array[5] beinhaltet 'Auto '$array[4] beinhaltet '02031D' $array[5] beinhaltet 'Ferrari '
Beispiel 1.
Spezifiziert den Pfad zu der aktuellen Kategorie in folgendem Format: 'Root Sport Auto Ferrari'
?php $cat_path_arr = udm_cat_path( $udm_agent,$cat); $cat_path=''; for ($i=0; $i lt;count($cat_path_arr); $i+=2) {$path=$cat_path_arr[$i]; $name=$cat_path_arr[$i+1]; $cat_path .= "a href=\"$PHP_SELF?cat=$path\" $name / a ";}?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_clear_search_limits() setzt definierte Sucheinschränkungen zurück und gibt TRUE zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Null wenn kein Fehler vorliegt..
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
Enthält einen numerischen Fehlercode.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_error() gibt eine mnoGoSearch Fehlermeldung zurück, eine leere Zeichenkette, wenn kein Fehler vorlag.
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
Liefert die Fehlermeldung des Agenten zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_find() gibt einen Ergebniszeiger bei Erfolg zurück, FALSE bei einem Fehler.
Die eigentliche Suche.
Das erste Argument - die Session, das nächste - die Suche selbst.
Um etwas zu finden, einfach die zu suchenden Begriffe in das Suchfeld eintippen und den Submit-Button drücken.
Zum Beispiel "mysql odbc".
Die doppelten Anführungszeichen "sollten nicht in einer Suche verwendet werden, sie werden hier nur aufgeführt, um die Suchbegriffe vom anderen Text zu unterscheiden. mnoGoSearch wird alle Dokumente finden, die das Wort "mysql" und / oder "odbc "enthalten.
Dokumente, die der Suche besser entsprechen als andere werden zuerst angezeigt.
Wird der Suchmodus ALL verwendet, werden nur Dokumente gefunden, die alle gesuchten Wörter mindestens einmal enthalten.
Wird der Suchmodus ANY verwendet, werden alle Dokumente zurückgliefert, die eines der gesuchten Wörter enthalten.
Wenn ausgefeiltere Suchen stattfinden sollen, muss die Suchsprache verwendet werden.
In diesem Falle sollte der boolsche Übereinstimmungsmodus gewählt werden.
mnoGoSearch kennt die folgenden boolschen Operatoren:
- logisches UND.
Zum Beispiel "mysql odbc". mnoGoSearch wird alle Dokumente finden, die sowohl "mysql" als auch "odbc "enthalten.
_BAR_ - logisches ODER.
Zum Beispiel "mysql_BAR_odbc". mnoGoSearch wird alle Dokumente zurückliefern die das Wort "mysql" oder das Wort "odbc "enthalten.
~ - logisches NICHT.
Zum Beispiel "mysql ~odbc". mnoGoSearch wird alle Dokumente finden, die das Wort "mysql" enthalten, nicht aber das Wort "odbc "zur gleichen Zeit.
Dieser Operator ist jedoch ein rein ausschließender Operator.
Die Suche "~odbc" wird keine Ergebnisse zurückliefern!
() - Gruppierung, um komplexe Suchen zu bilden.
Zum Beispiel "(mysql _BAR_ msql) ~postgres".
Die Suchesprache ist simpel und stark zugleich.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_free_agent() gibt TRUE bei Erfolg zurück, FALSE bei einem Fehler.
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
Gibt den Speicher frei, den eine mnoGoSearch-Session belegt hat.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_free_ispell_data() liefert stets TRUE zurück.
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
Anmerkung:
In vorherigen Versionen ist sie ohne Funktion.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_free_res() gibt TRUE bei Erfolg, FALSE bei einem Fehler zurück.
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
Gibt den Speicher frei, der für Ergebnisse alloziiert wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_get_doc_count() gibt die Anzahl der Dokumente in der Datenbank zurück.
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
Anmerkung:
Diese Funktion wird seit mnoGoSearch 3.1.11 unterstützt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_get_res_field() gibt den Wert eines Ergebnisfeldes bei Erfolg, FALSE bei einem Fehler zurück.
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
row - Die Zahl des aktuellen Links.
Werte können zwischen 0 und UDM_PARAM_NUM_ROWS-1 variieren.
field - Feldzeiger, kann folgende Werte annehmen:
UDM_FIELD_URL - URL des Dokumentes
UDM_FIELD_CONTENT - Content-Type des Dokumentes (zum Beispiel text / html).
UDM_FIELD_CATEGORY - Kategorie des Dokumentes. udm_cat_path() sollte verwendet werden, um den vollen Pfad vom der Wurzel des Kategorienbaumes zur aktuellen Kategorie zu erhalten. (Dieser Parameter ist erst ab PHP Version 4.0.6 verfügbar).
UDM_FIELD_TITLE - Titel des Dokumentes.
UDM_FIELD_KEYWORDS - Keywords des Dokumentes (aus dem Meta-Tag Keywords).
UDM_FIELD_DESC - Dokumentenbeschreibung (aus dem Meta-Tag Description).
UDM_FIELD_TEXT - Inhalt des Dokumentes (die ersten Zeilen des Dokumentes).
UDM_FIELD_SIZE - Größe des Dokumentes.
UDM_FIELD_URLID - Eindeutige ID des Dokumentes.
UDM_FIELD_RATING - Dokumentenwertung (von mnoGoSearch berechnet).
UDM_FIELD_MODIFIED - Datum der letzten Änderung des Dokumentes als Unix-Timestamp.
UDM_FIELD_ORDER - Die Nummer des aktuellen Dokumentes in der Menge der gefundenen Dokumente.
UDM_FIELD_CRC - Die Prüfsumme des Dokumentes.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
FALSE bei einem Fehler zurüc.
res - ein Ergebniszeiger, erhalten nach einem Aufruf von udm_find().
Kann folgenden Werte annehmen:
UDM_PARAM_NUM_ROWS - Anzahl der auf der aktuellen Seite gefundenen Links.
UDM_PARAM_FOUND - Anzahl der gefundenen Dokuemnte, die der Suche entsprechen.
UDM_PARAM_WORDINFO - Informationen über die gefundenen Wörter.
Zum Beispiel könnte eine Suche nach "a good book" die Werte "a: stopword, good:5637, book:
120 "ausgeben.
UDM_PARAM_SEARCHTIME - Suchzeit in Sekunden.
UDM_PARAM_FIRST_DOC - Die Nummer des ersten auf der aktuellen Seite angezeigten Dokumentes.
UDM_PARAM_LAST_DOC - Die Nummer des letzten auf der aktuellen Seiten angezeigten Dokumentes.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_load_ispell_data() lädt ISpell-Daten.
Gibt TRUE bei Erfolg, FALSE bei einem Fehler zurück.
agent - Zeiger auf einen Agenten, erhalten nach einem Aufruf von udm_alloc_agent().
var - Parameter, der die Quelle der ISpell-Daten angibt.
Kann folgende Werte annehmen.
Nachdem diese Funktion aufgerufen wurde, sollte nicht vergessen werden, mittels udm_free_ispell_data() den durch ISpell belegten Speicher wieder freizugeben, auch wenn UDM_ISPELL_TYPE_SERVER verwendet wird.
Der schnellste Modus ist UDM_ISPELL_TYPE_SERVER.
UDM_ISPELL_TYPE_TEXT ist langsamer, und UDM_ISPELL_TYPE_DB ist der langsamste.
Dies gilt zumindest für mnoGoSearch 3.1.10 - 3.1.11, es ist jedoch geplant, den DB-Modus in zukünftigen Versionen schneller als den TEXT-Modus zu machen.
UDM_ISPELL_TYPE_DB - Gibt an, dass die ISpell-Daten aus einer SQL-Datenbank gelesen werden sollen.
Der Parameter flag sollte 1 sein.
Der Parameter flag gibt an, dass die ISpell-Daten nach dem Laden sortiert werden sollen, dies ist für ein korrektes Arbeiten von ISpell nötig.
Werden die ISpell-Daten aus Dateien gelesen, kann es vorkommen, dass mehrere Aufrufe von udm_load_ispell_data() vorkommen, was es wenig Effektiv macht, die Daten nach jedem Aufruf zu sortieren.
Sollte ein Fehler auftreten, wird FALSE zurückgegeben, Fehler und Fehlercode sind in diesem Fall über udm_error() und udm_errno() verfügbar.
Beispiel:
if (! udm_load_ispell_data($udm,UDM_ISPELL_TYPE_DB ,'' ,'',1)) {printf("Error #%d: '%s'\n",udm_errno($udm),udm_error($udm)); exit;}
UDM_ISPELL_TYPE_AFFIX - Gibt an, dass die ISpell-Daten aus einer Datei geladen werden sollen und initiiert das Laden der Anhangsdaten.
In diesem Fall gibt der Parameter val1 den zweibuchstabigen Sprachcode an, für den die Anhänge geladen werden sollen, val2 gibt den Dateipfad an.
Wird kein absoluter Pfad angeben, werden die Dateien nicht in UDM_CONF_DIR, sondern in im zum aktuellen Pfad relativen gesucht.
Kann die Datei nicht geladen werden, gibt die Funktion FALSE zurück, und eine Fehlermeldung wird ausgegeben.
Die Fehlercodes können nicht über udm_error() oder udm_errno() ausgelesen werden.
Zur Erlärung des Parameters flag schauen Sie bitte bei UDM_ISPELL_TYPE_DB nach.
Beispiel:
UDM_ISPELL_TYPE_SPELL - Gibt an, dass die ISpell-Daten aus einer Datei gelesen werden sollen, und initiiert das Laden des ISpell-Wörterbuches.
In diesem Fall gibt der Parameter val1 den zweibuchstabigen Sprachcode an, für den die Anhänge geladen werden sollen, val2 gibt den Dateipfad an.
Wird kein absoluter Pfad angeben, werden die Dateien nicht in UDM_CONF_DIR, sondern in im zum aktuellen Pfad relativen gesucht.
Kann die Datei nicht geladen werden, gibt die Funktion FALSE zurück, und eine Fehlermeldung wird ausgegeben.
Die Fehlercodes können nicht über udm_error() oder udm_errno() ausgelesen werden.
Zur Erklärung des Parameters flag schauen Sie bitte bei UDM_ISPELL_TYPE_DB nach.
UDM_ISPELL_TYPE_SERVER - schaltet den Spell-Server support ein. val1 gibt den Host an, auf dem der Spell-Server läuft.. val2 ist noch ohne Funktion, wird in Zukunft aber den Port des Spell-Servers angeben. flag wird nicht benötigt, da die Daten bereits sortiert im Spell-Server vorliegen.
Der Spell-Server (Spelld) liest die Rechtschreibdaten aus einer seperaten Konfigurationsdatei (Standardmäßig / usr / local / mnogosearch / etc / spelld.conf), sortiert sie und speichert sie im Speicher.
Die Funktion udm_load_ispell_data() in UDM_ISPELL_TYPE_SERVER lädt eigentlich nicht die ISpell-Daten, sondern legt nur die Serveradresse fest.
Eigentlich wird dieser Server automatisch von udm_find() benutzt, wenn eine Suche durchgeführt wird.
Sollte ein Fehler auftreten, wird keine Fehlermeldung ausgegeben, eine ISpell-Konvertierung kann dann jedoch natürlich auch nicht stattfinden.
Anmerkung:
Diese Funktion ist seit mnoGoSearch 3.1.12 verfügbar.
Beispiel:
Udm_Load_Ispell_Data( $udm,UDM_ISPELL_TYPE_SERVER ,'' ,'',1)) {printf("Error loading ispell data from server lt;br gt;\n"); exit;}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
udm_set_agent_param() gibt TRUE bei Erfolg, FALSE bei eine, Fehler zurück.
Deklariert mnoGoSearch Sessionparameter.
Die folgenden Parameter und deren Werte sind erlaubt:
Ergebnissseiten werden von 0 an gezählt.
UDM_PARAM_PAGE_SIZE - Anzahl der Suchergebnisse, die pro Seite angezeigt werden.
UDM_PARAM_SEARCH_MODE - Suchmodus.
Die folgenden Werte sind erlaubt:
UDM_MODE_ALL - Logische UND-Verknüpfung; UDM_MODE_ANY - Logische ODER-Verknüpfung; UDM_MODE_BOOL - boolsche Suche.
Siehe udm_find() für weitere Details zur boolschen Suche.
UDM_PARAM_CACHE_MODE - Schaltet den Ergebnis-Cache an oder aus.
Falls eingeschaltet wird die Suchmaschine Suchergebnisse auf der Festplatte zwischenspeichern.
Für den Fall, dass später eine ähnliche Suche durchgeführt wird, werden die Ergebnisse für ein schnelleres Ergebnis aus dem Cache gelesen.
Werte:
UDM_PARAM_TRACK_MODE - schaltet den Trackquery-Modus an oder aus.
Seit Version 3.1.12 von mnoGoSearch wird eine Verfolgung von Suchanfragen unterstützt.
Um die Track-Funktion nutzen zu können, müssen zusätzliche SQL-Tabellen angelegt werden.
Für MySQL liegen die Tabellenbeschreibungen in create / mysql / track.txt.
Wird eine Suche durchgeführt, werden die Suchwörter in diesen Tabellen zusammen mit der Anzahl der gefundenen Dokumente und dem aktuellen Unix-Timestamp gespeichert.
Verfügbare Werte:
UDM_PARAM_PHRASE_MODE - Gibt an, ob die Index-Datenbank eine Unterstützung für "Phrases" erlaubt. (Muß vor der Indizierung in der indexer.conf eingeschaltet werden.
Mögliche Werte:
UDM_PHRASE_ENABLED und UDM_PHRASE_DISABLED.
Wird der Phrase-Modus verwendet, ist es natürlich nach wie vor möglich, alle anderen Suchmodi zu verwenden.
Seit Version 3.1.11 wird auch der Cache-Modus zusammen mit dem Phrase-Modus unterstützt.
Beispiele:
"Arizona desert" - Diese Abfrage gibt alle Dokumente zurück, die "Arizona desert "als eine Zeichenkette enthalten.
Für eine Suche nach kompletten Zeichenkette müssen diese in doppelte Anführungszeichen gesetzt werden.
UDM_PARAM_CHARSET - Legt einen lokalen Zeichensatz wie koi8-r, cp1252 fest.
Auch hier wird nicht relativ zu UDM_CONF_DIR gesucht sondern relativ zu zu dem Pfad wo das aktuelle PHP-Script läuft.
UDM_PARAM_STOPTABLE - Lädt die stopwords aus der angegebenen SQL-Tabelle.
Es können mehrere Stopwordtable-Kommandos verwendet werden.
UDM_PARAM_WEIGHT_FACTOR - Legt fest, wie bestimmte Teile eines Dokumentes zur Sortierung gewertet werden.
Zur Zeit werden Body, Title, Keywords, Description und URL unterstützt.
Um dieses Feature nutzen zu können, muss der Grad 2 in den *Weight-Anweisungen in der indexer.conf verwendet werden.
Stellen wir uns vor, folgende Werte würden verwendet:
Solange der Indexer eine logische bit-ODER Operation verwendet, um das Gewicht einzelner Wörter festzulegen, wenn ein Wort mehrere Male im selben Dokument vorkommt, ist es möglich, zur Zeit der Suche festzustellen, welches Wort in welchem Teil des Dokumentes vorkommt.
Wörter, die nur im Body auftauchen, haben das Gewicht 00000010 in binärer Notation.
Wörter, die in allen Dokumententeilen vorkommen haben das Gewicht 00011111.
Der Wert dieses Parameter ist ein String, bestehend aus den hexadezimalen Ziffern ABCDE.
Jede Ziffer ist ein Faktor für das korrespondierende Bit.
Für die oben angeführte Konfiguration zum Beispiel:
E ist ein Faktor für das Gewicht 1 (URL Weight bit) D ist ein Faktor für das Gewicht 2 (BodyWeight bit) C ist ein Faktor für das Gewicht 4 (TitleWeight bit) B ist ein Faktor für das Gewicht 8 (KeywordWeight bit) A ist ein Faktor für das Gewicht 16 (DescWeight bit)
Beispiele:
UDM_PARAM_WEIGHT_FACTOR=00001 wird nur in URLs suchen.
UDM_PARAM_WEIGHT_FACTOR=00100 wird nur in Titeln suchen.
UDM_PARAM_WEIGHT_FACTOR=11100 wird in Titel, Keywords, Description aber nicht in URL und Body suchen.
UDM_PARAM_WEIGHT_FACTOR=F9421 wird folgendermaßen Suchen und Werten:
Beschreibung mit dem Faktor 15 (F hex) Keywords mit dem Faktor 9 Title mit dem Faktor 4 Body mit dem Faktor 2 URL mit dem Faktor 1
Wenn die Variable UDM_PARAM_WEIGHT_FACTOR übergeben wird, wird das Originalgewicht zur Sortierung verwendet.
UDM_PARAM_WORD_MATCH - Wortteilübereinstimmung.
Dieser Parameter kann verwendet werden, um festzulegen, welcher Wortteil mit dem gesuchten Wort übereinstimmen muss.
Dieses Feature funktioniert nur im "single" oder "multi "-Modus.
Im Cachemode und in den CRC-Modi ist eine Verwendung nicht möglich.
Erlaubt Werte:
UDM_MATCH_BEGIN - Der Wortanfang muss übereinstimmen;
UDM_MATCH_END - Das Wortende muss übereinstimmen;
UDM_MATCH_WORD - Das gesamte Wort muss übereinstimmen;
UDM_PARAM_MIN_WORD_LEN - Legt die mininmale Wortlänge fest.
Jedes Wort, dass kürzer als die angegebene Länge ist, wird als stopword aufgefasst.
UDM_PARAM_ISPELL_PREFIXES - Mögliche Werte:
UDM_PREFIXES_ENABLED und UDM_PREFIXES_DISABLED, die explizit die Verwendung von ISpell-Prefixen an - oder abschalten.
Wird also zum Beispiel das Wort "tested" in einer Suchabfrage verwendet, werden auch Wörter wie "test "oder "testing" gefunden.
Nur Endungen werden normalerweise Unterstützt.
Prefixe verändern für gewöhnlich die Bedeutung von Wörtern.
So werden bei einer Suche nach "tested" z.B. auch Dokumente gefunden, die das Wort "untested "enthalten.
Um diese Funktion nutzen zu können, müssen vorher mittels udm_load_ispell_data() ISpell-Daten geladen werden.
UDM_PARAM_CROSS_WORDS - Aktiviert oder deaktiviert eine Unterstützung für Crosswords.
Mögliche Werte:
UDM_CROSS_WORDS_ENABLED und UDM_CROSS_WORDS_DISABLED.
Das Crosswords-Feature erlaubt es, Wörter zwischen a href=" xxx "und / a dem Dokument zuzuordnen, zu dem dieser Link führt.
Crosswords werden seit mnoGoSearch 3.1.11 unterstützt.
UDM_PARAM_VARDIR - Gibt einen Pfad zu einem Verzeichnis an, in dem der Indexer Daten speichert, wenn der integrierte Datenbank-Modus oder der Cachemodus verwendet wird.
Voreingestellt ist das / var -Verzeichnis der mnoGoSearch-Installation verwendet.
Es können ausschliesslich Strings verwendet werden.
Dieser Parameter ist erst ab PHP 4.1.0 verfügbar.
Zurück
Zum Anfang
Nach vorne
Nach oben
mSQL Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sortiert die Schlüssel eines Arrays mittels einer benutzerdefinierten Vergleichsfunktion.
Soll das Array nach nicht trivialen Kriterien sortiert werden, sollten Sie diese Funktion verwenden.
Beispiel 1. uksort()
1;} $a = array (4 = "vier", 3 = "drei", 20 = "zwanzig", 10 = "zehn"); uksort ($a, "cmp"); while (list ($key, $value) = each ($a)) {echo "$key: $value\n";}
Dieses Beispiel würde folgendes ausgeben:
20: zwanzig 10: zehn 4: vier 3: drei
Siehe auch usort(), uasort(), sort(), asort(), arsort(), ksort(), natsort() und rsort().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
umask() setzt PHP 's umask auf mask 0777 und gibt die alte umask zurück.
Wird PHP als Servermodul benutzt, wird die umask zurückgespeichert wenn die jeweilige Anfrage beendet ist.
umask() ohne Argumente gibt einfach die aktuelle umask zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese basiert auf der aktuellen Zeit in Mikrosekunden.
B. auf mehreren Servern gleichzeitig ID´s erzeugen, was ja im ungünstigsten Fall zur selben Mikrosekunde geschehen kann.
Der prefix -Parameter kann bis zu 114 Zeichen lang sein.
Ist der optionale Parameter lcg TRUE, wird uniqid() am Ende des Rückgabewertes zusätzliche "LCG "-Zustandswerte anfügen, durch die das Ergebnis noch eindeutiger wird.
Bei leerem prefix -Parameter ist der zurück gegebene String 13 Zeichen lang.
Ist der Parameter lcg TRUE, sind es 23 Zeichen.
Anmerkung:
PHP 3.0.13 und später verfügbar.
Wenn sie eindeutige ID´s bzw. eindeutige Token benötigen und beabsichtigen, diese Token über das Netzwerk an den Benutzer weiter zu leiten (z.B. als Session-Cookies), ist es ratsam, wenn sie wie folgt vorgehen:
$token = md5 (uniqid ("")); / / kein Zufalls-Anteil = schlecht $better_token = md5 (uniqid (rand())); / / besser, da schwer zu erraten
Hierdurch wird eine 32-Zeichen-ID (128 Bit-Hex-Wert) erzeugt, die nur sehr schwer vorhersehbar ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Wird kein timestamp übergeben, so wird das Julianische Datum des aktuellen Tages zurückgegeben.
Diese Funktion ist nur in PHP-Versionen nach PHP4RC1 verfügbar.
Zurück
Zum Anfang
Nach vorne
juliantojd
Nach oben
CCVS API Funktionen
PHP Handbuch
Zurück
Nach vorne
Löscht filename.
Ähnlich der UNIX C unlink() Funktion.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Siehe auch rmdir() um Verzeichnisse zu löschen.
Zurück
Zum Anfang
Nach vorne
Nach oben
Forms Data Format Funktionen
PHP Handbuch
Zurück
Nach vorne
unpack() überträgt die Daten eines Binär-Strings in ein Array unter Berücksichtigung des format -Parameters.
Das Array wird als Ergebnis des Funktionsaufrufs zurück gegeben.
unpack() funktioniert etwas anders als man es von Perl her kennt, da sich die zurück gegebenen Daten in einem assoziativen Array befinden.
Dies erreichen sie nur, wenn sie die verschiedenen Format-Codes benennen und sie mit einem "/" voneinander trennen.
Beispiel 1. unpack() formatierter String
Das resultierende Array wird die Einräge "chars1", "chars2" und "int "enthalten.
Die Format-Codes werden unter pack() näher erläutert.
Beachten sie, dass PHP Integer-Werte intern mit Vorzeichen speichert.
Wenn sie einen grossen vorzeichen-losen Long-Wert entpacken und er von der selben Grösse ist, die PHP für dessen Speicherung verwendet, wird das Ergebnis ein negativer Wert sein (auch wenn sie dieses als vorzeichen-los zu entpacken angegeben haben).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
GNU Gettext
PHP Handbuch
Zurück
Nach vorne
unserialize() nimmt eine einzelne Variable aus einer serialisierten Datenmenge (siehe unter serialize()) und wandelt sie in einen PHP-Wert um.
Dieser Wert wird als Funktionsergebnis zurück gegeben.
Er kann vom Typ integer, double, string, array oder object sein.
Wurde ein Objekt serialisiert, können dessen Methoden nicht zurück gegeben werden.
Beispiel 1. unserialize() -Beispiel:
/ / Als Beispiel benutzen wir unserialize() um Daten aus einer / / Datenbank nach $session_data zu laden.
Das Beispiel vervollständigt / / das unter serialize() beschriebene. $conn = odbc_connect ("webdb", "php", "moorhuhn"); $stmt = odbc_prepare ($conn, "SELECT data FROM sessions WHERE id = ?"); $sqldata = array ($PHP_AUTH_USER); if (!odbc_execute ($stmt, $sqldata) _BAR_ _BAR_ !odbc_fetch_into ($stmt, $tmp)) {/ / wenn execute oder fetch fehlschlägt, initialisiere ein leeres Array $session_data = array();} else {/ / die serialisierten Daten sollten nun in $tmp[0] stehen $session_data = unserialize ($tmp[0]); if (!is_array ($session_data)) {/ / etwas ging schief, also wieder ein leeres Array initialisieren $session_data = array();}}
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
unset() gibt eine Variable oder ein Array-Element vollständig frei.
Beispiel 1. unset() example
unset ($foo); unset ($bar['quux']);
Siehe auch isset() und empty().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dekodiert jede% ## Kodierung einer Zeile.
Die dekodierte Zeile wird zurückgegeben.
Beispiel 1. urldecode() Beispiel
$a = split ('', $querystring); $i = 0; while ($i count ($a)) {$b = split ('=', $a [$i]); echo 'Value for parameter ', htmlspecialchars (urldecode ($b [0])),' is ', htmlspecialchars (urldecode ($b [1])), "BR"; $i++;}
Siehe auch urlencode(). und rawurlencode().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt eine Zeile an, bei der alle nicht alphanumerischen Zeichen bis auf -_. durch das Prozentzeichen (%) ersetzt werden, gefolgt von zwei Hexzeichen und Leerzeichen durch ein Pluszeichen (+) ersetzt werden.
Genauso werden auch Daten kodiert, die über ein WWW-Formular gesendet werden und auf die gleiche Weise mit application / x-www-form-urlencoded kodiert werden.
Dies unterscheidet sich von der Kodierung in RFC1738 (siehe rawurlencode()) bei dem aus historischen Gründen Leerzeichen wie Pluszeichen (+) kodiert werden.
Diese Funktion ist sehr nützlich, wenn eine Zeichenkette kodiert werden soll und die Variablen an die nächste Seite weitergegeben werden sollen:
Beispiel 1. urlencode() Beispiel
echo 'A HREF="mycgi?foo=', urlencode ($userinput),' "';
Siehe auch urldecode() und rawurldecode().
Zurück
Zum Anfang
Nach vorne
Nach oben
Variablen-Funktionen
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
FrontBase Funktionen
PHP Handbuch
Zurück
Nach vorne
Mittels der Funktion usleep() verzögern sie die weitere Skript-Ausführung um die gegebene Anzahl an micro_seconds.
Beachten sie auch die Funktion sleep().
Anmerkung:
Dies Funktion steht unter Windows-Systemen nicht zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
mnoGoSearch Funktionen
PHP Handbuch
Zurück
Nach vorne
Diese Funktion sortiert ein Array nach seinen Werten mittels einer benutzerdefinierten Vergleichsfunktion.
Soll das Array nach nicht trivialen Kriterien sortiert werden, sollten Sie diese Funktion verwenden.
Die Vergleichsfunktion muss einen Integer zurückgeben, der kleiner, gleich, oder größer ist als NULL, wenn für das erste Argument auch angenommen wird, dass es kleiner, gleich, oder größer ist als das zweite.
Anmerkung:
Sind zwei Elemente gleich, ist deren Reihenfolge nicht definiert.
Bis zu PHP 4.0.6 würde die benutzerdefinierte Funktion die originäre Reihenfolge beibehalten, doch seit der Einführung des neuen Sortieralgorhythmus mit 4.1.0 ist dies nicht mehr der Fall, da es keine effiziente Lösung dafür gibt.
Beispiel 1. usort()
Dieses Beispiel würde folgendes anzeigen:
Anmerkung:
Offensichtlich würde rsort() für diesen einfachen Fall besser passen.
Beispiel 2. usort() Beispiel mit einem mehrdimensionalen Array
function cmp ($a, $b) {return strcmp($a["fruit"], $b["fruit"]);} $fruits[0]["fruit"] = "Zitronen"; $fruits[1]["fruit"] = "Äpfel"; $fruits[2]["fruit"] = "Trauben"; usort($fruits, "cmp"); while (list ($key, $value) = each ($fruits)) {echo "\$fruits[$key]: ". $value["fruit"]. "\n";}
Wird ein mehrdimensionales Array sortiert, enthalten $a und $b Referenzen zu dem ersten Index des Arrays.
Dieses Beispiel würde folgendes anzeigen:
Trauben $fruits[ 2]:
Beispiel 3. usort() mit Verwendung einer Member Funktion eines Objektes
class TestObj {var $name; function TestObj($name) {$this - name = $name;} / * Dies ist die statische Vergleichsfunktion: * / function cmp_obj($a, $b) {$al = strtolower($a - name); $bl = strtolower($b - name); if ($al == $bl) return 0; return ($al $bl)? +1: -1;}} $a[] = new TestObj("c"); $a[] = new TestObj("b"); $a[] = new TestObj("d"); uasort($a, array ("TestObj", "cmp_obj")); foreach ($a as $item) {print $item - name ."\n";}
Dieses Beispiel würde folgendes anzeigen:
Siehe auch uasort(), uksort(), sort(), asort(), arsort(), ksort(), natsort() und rsort().
Zurück
Zum Anfang
Nach vorne
Nach oben
Aspell Funktionen [veraltet]
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Fuktion liefert Informationen über Typ und Wert des Parameter expression Diese Fuktion liefert Informationen über Typ und Wert des Parameter expression zurück.
Arrays und Objekte werden rekursiv durchlaufen und mit entsprechender Einrückung dargestellt.
Siehe auch print_r().
pre ?php $a = array (1, 2, array ("a", "b", "c")); var_dump ($a);? / pre
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. version_compare() Example
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
virtual() ist eine Apache-spezifische Funktion, die !--#include virtual... - - aus mod_include entspricht.
Diese Funktion führt eine Unteranfrage durch.
Das ist nützlich für das Einbinden von CGI-Skripten, .shtml-Dateien oder allen anderen Inhalten, die von Apache verarbeitet werden sollen.
Beachten Sie bitte, dass ein CGI-Skript gültige CGI-Header generieren muss, mindestens einen Content-type-Header.
Für PHP-Dateien müssen Sie include() oder require() benutzen, virtual() kann selbst keine PHP-Dokumente einbinden.
Anstehende Header werden ebenfalls abgeschickt.
Zurück
Zum Anfang
Nach vorne
Nach oben
Array Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Gibt bei Erfolg TRUE zurück, im Fehlerfall FALSE.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
WDDX Funktionen
PHP Handbuch
Zurück
Nach vorne
wddx_add_vars() wird verwendet um die übergebenen Werte zu serialisieren und diese an das durch den Parameter packet_id referenzierte Paket anzuhängen.
Die Werteübergabe funktioniert genauso wie bei wddx_serialize_vars().
Zurück
Zum Anfang
Nach vorne
WDDX Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
wddx_deserialize() übernimmt einen packet String and deserialisiert diesen.
Es wird entweder ein String, eine Zahl oder ein Array zurückgegeben. 'Structures' werden in assoziative Arrays deserialisiert.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
wddx_packet_end() schliesst das WDDX Paket, welches mit packet_id identifiziert wird und gibt einen String, der das erzeugte WDDX Paket enthält, zurück.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
wddx_packet_start() wird verwendet um ein neues WDDX Paket zu erzeugen, zu welchem Variablen hinzugefügt werden können.
Zurückgegeben wird eine Paket-ID, die in den folgenden Funktionen referenziert wird.
Desweiteren wird automatisch eine 'Structure' zur Aufnahme der Variablen angelegt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
wddx_serialize_value() wird verwendet um einen einzelnen Wert in ein WDDX Paket zu serialisieren.
Zurückgegeben wird das entsprechende WDDX Paket.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
wddx_serialize_vars() wird verwendet um ein WDDX Paket mit einer 'Structure 'zu erzeugen, welches eine serialisierte Repräsentation der übergebenen Variablen enthält.
Diese können entweder einzelne Namen von Variablen oder Arrays mit Variablennamen bzw. weiteren Arrays sein.
Beispiel 1. wddx_serialize_vars example
Das obige Script erzeugt:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Bricht die Zeilen des Strings str an der mittels width angegebenen Position um.
Diese Zeilenumbrüche werden mit dem im (optionalen) Parameter break spezifizierten Steuerzeichen durchgeführt.
Die Funktion wordwrap() bricht die Zeilen automatisch an der Spalte 75 unter Verwendung des Steuerzeichens '\n '(neue Zeile) um, wenn die optionalen Parameter width und / oder break nicht angegeben sind.
Steht cut auf 1, wird der String immer an der vorgegebenen Länge umgebrochen.
Ist ein Wort also länger als die gegebene Länge, wird der Zeilumbruch auch innerhalb des Wortes eingefügt (siehe zweites Beispiel).
Anmerkung:
Der optionale Parameter cut wurde in PHP 4.0.3 eingeführt.
Beispiel 1. wordwrap() -Beispiel:
$text = "Der schnelle braune Fuchs sprang über den faulen Hund ."; $neuertext = wordwrap ($text, 20); echo "$neuertext\n";
Dieses Beispiel gibt aus:
Der schnelle braune Fuchs sprang über den faulen Hund.
Beispiel 2. wordwrap() example
$text = "Ein sehr langes Wooooooooooort ."; $neuertext = wordwrap ($text, 8, "\n", 1); echo "$neuertext\n";
Dieses Beispiel gibt aus:
Ein sehr langes Wooooooo oooort.
Siehe auch nl2br().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1. moldb.xml - small database of molecular information
Beispiel 2. parsemoldb.php - parses moldb.xml into and array of molecular objects
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
XSLT Funktionen
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anstelle eines Funktionsnamens kann auch ein Array mit einer Objekt-Referenz und dem Namen einer Methode angegeben werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Funktion ist EXPERIMENTELL.
Das Verhalten, der Funktionsname und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Funktion auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
.NET Funktionen
PHP Handbuch
Zurück
Nach vorne
Dieser handle wird für alle folgenden Aufrufe von XSL Funktionen zu verwenden sein.
Zurück
Zum Anfang
Nach vorne
XSLT Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Ist kein handle gegeben, so wird die Fehlernummer des zuletzt irgendwo aufgetretenen Fehlers zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den aktuellen Fehlerstring zu einem gegebenen XSL Prozessor zurück.
Ist kein handle gegeben, so wird die Fehlerstring des zuletzt irgendwo aufgetretenen Fehlers zurückgegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der mit handle bezeichnete XSLT Prozessor wird freigegeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
xslt_output_process
PHP Handbuch
Zurück
Nach vorne
(no version information, might be only in CVS)
Zu dieser Funktion sind keine Prototyp Definitionen vorhanden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
xslt_output_process
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Setzen des SAX handlers für einen XSLT Prozessor, welcher durch den handle xh gegeben ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Beispiel 1.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
YP / NIS Funktionen
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
YP / NIS Funktionen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
yp_first() gibt das erste Schlüssel-Wert-Paar der angegebenen Map zurück, andernfalls FALSE.
Beispiel 1.
Beispiel für den ersten NIS-Eintrag
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
yp_get_default_domain() gibt die voreingestellt Domäne des aktuellen Knotens oder FALSE zurück.
Kann für erfolgreiche NIS Aufrufe als der Parameter domain genutzt werden.
Eine NIS-Domäne kann als Gruppe von NIS-Maps beschrieben werden.
Jeder Host, der Informationen abrufen möchte, verbindet sich selbst zu einer bestimmten Domäne.
Weitere Informationen hierzu finden sie in den oben genannten Quellen.
Beispiel 1.
Beispiel für die voreingestellte Domäne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
yp_master() gibt den Namen des Hauptservers (Master) für eine NIS-Map zurück.
Beispiel 1.
Beispiel für den NIS Master
Siehe auch yp-get-default-domain().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
yp_match() gibt den Wert zurück, der mit dem übergebenen Schlüssel der angegebenen Map verbunden ist, bei einem Fehler FALSE.
Der Schlüssel muss eindeutig sein.
Beispiel 1.
Beispiel für den übereinstimmenden NIS-Eintrag
In diesem Fall wäre folgendes möglich: joe:##joe:11111:100:Joe User: / home / j/joe: / usr / local / bin / bash
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
yp_next() gibt den das nächste Schlüssel-Wert-Paar in der angegebene Map zurück, nachdem der Schlüssel übergeben wurde, bei einem Fehler FALSE.
Beispiel 1.
Beispiel für den nächsten NIS-Eintrag
?php $entry = yp_next ($domain, "passwd.byname", "joe"); if (!$entry) {echo "No more entries found\n";} $key = key ($entry); echo "The next entry after joe has key ". $key." and value ". $entry[$key];?
Siehe auch yp-get-default-domain().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
yp_order() gibt die Nummer einer Map in der Reihenfolge der NIS Maps oder FALSE zurück.
Beispiel 1.
Beispiel für die NIS Reihenfolge
Zurück
Zum Anfang
Nach vorne
Nach oben
ZIP Funktionen (Lesezugriff)
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Funktion wurde mit Version PHP4 Beta 4 eingeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zeigt die aktuelle Version des momentan laufendem PHP-Parsers.
Beispiel 1. zend_version() Beispiel
/ / Ausgabe z.b. 'Die Aktuelle Zend engine Version ist:
1.0.4' echo "Die Aktuelle Zend engine Version ist: ".zend_version() ."";
Siehe auch phpinfo(), phpcredits(), php_logo_guid(), und phpversion().
Zurück
Zum Anfang
Nach vorne
Nach oben
POSIX Funktionen
PHP Handbuch
Zurück
Nach vorne
Schließt ein ZIP Archiv.
Der Parameter zip muss ein Dateizeiger sein, der vorher durch zip_open() zurückgegeben wurde.
Diese Funktion hat keinen Rückgabewert.
Siehe auch zip_open() und zip_read().
Zurück
Zum Anfang
Nach vorne
ZIP Funktionen (Lesezugriff)
Nach oben
PHP Handbuch
Zurück
Nach vorne
Schließt einen Verzeichniseintrag, der durch den Parameter zip_entry Schließt einen Verzeichniseintrag, der durch den Parameter zip_entry identifiziert wird.
Dieser Parameter muss ein gültiger Verzeichniseintrag sein, der vorher durch zip_entry_open() geöffnet wurde.
Diese Funktion hat keinen Rückgabewert.
Siehe auch zip_entry_open() und zip_entry_read().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die komprimierte Größe des Verzeichniseintrages zurück, der durch zip_entry Gibt die komprimierte Größe des Verzeichniseintrages zurück, der durch zip_entry spezifiziert wird.
Der Parameter zip_entry muss ein gültiger Verzeichniseintrag sein, der durch zip_read() zurückgegeben wurde.
Siehe auch zip_open() und zip_read().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Komprimierungsmethode eines Verzeichniseintrages zurück, der durch zip_entry spezifiziert wird.
Der Parameter zip_entry muss ein gültiger Verzeichniseintrag sein, der durch zip_read() zurückgegeben wurde.
Siehe auch zip_open() und zip_read().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt die Größe eines Verzeichniseintrages zurück, der durch zip_entry Gibt die Größe eines Verzeichniseintrages zurück, der durch zip_entry spezifiziert wird.
Der Parameter zip_entry muss ein gültiger Verzeichniseintrag sein, der durch zip_read() zurückgegeben wurde.
Siehe auch zip_open() und zip_read().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Gibt den Namen eines Verzeichniseintrages zurück, der durch den Parameter zip_entry spezifiziert wurde.
Der Parameter zip_entry muss ein gültiger Verzeichniseintrag sein, der durch zip_read() zurückgegeben wurde.
Siehe auch zip_open() und zip_read().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Öffnet einen Verzeichniseintrag für den Lesezugriff.
Der Parameter zip muss ein Dateizeiger sein, der vorher durch zip_open() zurückgegeben wurde.
Der Parameter zip_entry ist ein Verzeichniseintrag, der durch zip_read() zurückgegeben wurde.
Der optionale Parameter mode kann einer der in der Dokumentation zu fopen() beschriebenen Werte sein.
Anmerkung:
Gegenwärtig wird der Parameter mode ignoriert und implizit auf "rb" gesetzt.
Dies erfolgt aufgrund des ausschließlichen Lesezugriffs der aktuellen ZIP Unterstüzung für PHP.
In der Dokumentation zu fopen() finden sich weitere Erklärungen zu diesem Parameter.
Gibt bei Erfolg TRUE zurück, andernfalls FALSE.
Anmerkung:
Im Gegensatz zu fopen() und vergleichbaren Funktionen zeigt der Rückgabewert von zip_entry_open() nur das Gelingen an und wird nicht für weitere Operationen benötigt.
Siehe auch zip_entry_read() und zip_entry_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liest bis zu length Liest bis zu length Bytes von einem geöffneten Verzeichniseintrag aus.
Wenn der Parameter length nicht angegeben wurde, wird versucht die ersten 1024 Bytes auszulesen.
Der Parameter zip_entry muss ein gültiger Verzeichniseintrag sein, der durch zip_read() zurückgegeben wurde.
Anmerkung:
Der Parameter length bezieht sich auf die unkomprimierte Größe.
Gibt die ausgelesenen Daten zurück oder FALSE, wenn das Ende der Datei erreicht wurde.
Siehe auch zip_entry_open(), zip_entry_close() und zip_entry_filesize().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktion öffnet ein ZIP Archiv für den Lesezugriff.
Der Parameter filename ist der Name der zu öffnenden ZIP Datei.
Existiert die Datei filename nicht wird FALSE zurückgegeben.
Siehe auch zip_read() und zip_close().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Liest den nächsten Eintrag innerhalb des ZIP Archivs.
Der Parameter zip muss ein Dateizeiger sein, der vorher durch zip_open() zurückgegeben wurde.
Gibt einen Verzeichniseintrag zur späteren Benutzung mit den zip_entry_.. .() Funktionen zurück.
Siehe auch zip_open(), zip_close(), zip_entry_open() und zip_entry_read().
Zurück
Zum Anfang
Nach vorne
Nach oben
Zlib Komprimierungsfunktionen
PHP Handbuch
Zurück
Nach vorne
Sicherheit
Zurück
Zum Anfang
Nach vorne
Einleitung
PHP Handbuch
Zurück
Nach vorne
PHP hat in den letzten Jahren einen langen Weg hinter sich, und zu einer der bekanntesten Sprachen für das Web zu werden, war keine einfache Aufgabe.
Wenn Sie daran interessiert sind kurz zu sehen, wie PHP zu dem gewachsen ist was es heute ist, dann lesen Sie weiter.
PHP ist der Nachfolger eines älteren Produktes, PHP / FI.
Ursprünglich war PHP / FI ein Set von Perl Skripten zur Erfassung der Zugriffe auf seinen Webauftritt.
Er nannte dieses Set von Skripten 'Personal Home Page Tools'.
Als dann mehr Funktionalität benötigt wurde, schrieb Rasmus eine viel größere Umsetzung in C, welche auch mit Datenbanken kommunizieren konnte, und den Benutzern die Entwicklung einfacher dynamischer Webapplikationen ermöglichte.
Rasmus entschloss sich, den Sourcecode von PHP / FI zu veröffentlichen, sodass ihn jeder benutzen, von Fehlern bereinigen, und weiterentwicklen konnte.
PHP / FI stand für Personal Home Page / Forms Interpreter, und beinhaltete manches an Funktionalität des PHP wie wir es heute kennen.
Es besaß Variablen wie in Perl, eine automatische Interpretation von Formularvariablen und eine in HTML eingebettete Syntax.
Die Syntax selbst war der von Perl ähnlich, wenn auch viel eingeschränkter, einfach, und ziemlich inkonsistent.
Etwa 50.000 Domains berichteten PHP / FI 2.0 installiert zu haben, was mit ca.
Obwohl manche Leute diesem Projekt ein Stück Code beisteuerten, war es insgesamt immer noch ein Ein-Mann-Projekt.
PHP / FI 2.0 wurde im November 1997 offiziell freigegeben, nachdem es die meiste Zeit seines Lebenszyklus als verschiedene Betaversionen verbracht hatte.
Es wurde kurz danach von den ersten Alphaversionen von PHP 3 abgelöst.
PHP 3.0 war die erste Version, die dem heutigen PHP sehr gleicht.
Es wurde 1997 von Andi Gutmans und Zeev Suraski neu geschrieben, nachdem PHP / FI 2.0 ihrer Meinung nach für die Entwicklung ihrer eCommerce Applikation viel zu schwach war.
Auf die Basis der bestehenden Benutzer von PHP / FI aufbauend, entschieden sich Andi, Rasmus und Zeev zur Kooperation, und kündigten PHP 3.0 als den offiziellen Nachfolger von PHP / FI 2.0 an, und die Entwicklung von PHP / FI 2.0 wurde größtenteils eingestellt.
Eine der größten Stärken von PHP 3.0 waren die starken Erweiterungsmöglichkeiten.
Zusätzlich zu der soliden Infrastruktur für eine Menge an Datenbanken, Protokollen und APIs, lockten vor allem die Erweiterungsmöglichkeiten von PHP 3 dutzende von Entwicklern an, welche sich beteiligten, und neue Erweiterungsmodule einbrachten.
Möglicherweise war das der Schlüssel zu dem gewaltigen Erfolg von PHP 3.0.
Weitere besondere Merkmale von PHP 3.0 waren die Unterstützung für objektorientierte Syntax und die viel bessere sowie konsistentere Sprachsyntax.
Die gesamte neue Sprache wurde unter einem neuen Namen veröffentlicht, welche die im Namen PHP / FI 2.0 vorhandene Implizierung einer eingeschränkten persönlichen Nutzung beseitigte.
Es wurde einfach 'PHP' genannt, ein rekursives Akronym für PHP:
Gegen Ende 1998 wuchs PHP auf eine installierte Basis von (geschätzten) zehntausenden Benutzern und hunderttausenden Websites, auf denen PHP installiert war, heran.
An seinem Höhepunkt war PHP 3.0 auf etwa 10% der Webserver im Internet installiert.
PHP 3.0 wurde im Juni 1998 nach einer neunmonatigen öffentlichen Testphase offiziell freigegeben.
Im Winter 1998, kurz nach der offiziellen Freigabe von PHP 3.0, begannen Andi Gutmans und Zeev Suraski den Kern von PHP umzuschreiben.
Die Ziele waren eine verbesserte Leistung von komplexen Applikationen, und eine verbesserte Modularität des Basiscodes.
Solche Applikationen wurden durch die neuen Leistungsmerkmale von PHP 3.0, der Unterstützung einer großen Auswahl von Datenbanken und APIs von Drittanbietern möglich gemacht, aber PHP 3.0 war nicht dafür entworfen, solche komplexen Applikationen auch effizient zu handhaben.
Die neue Engine, tituliert als 'Zend Engine' (aus den Vornamen Zeev und Andi gebildet), entsprach diesen Zielen im Design erfolgreich, und wurde zum ersten Mal Mitte 1999 eingeführt.
PHP 4.0, das auf dieser Engine, verbunden mit einer großen Auswahl an zusätzlichen Leistungsmerkmalen basiert, wurde im Mai 2000 offiziell freigegeben, fast zwei Jahre nach seinem Vorgänger PHP 3.0.
Zusätzlich zu der stark verbesserten Leistung, inkludierte PHP 4.0 andere wichtige Leistungsmerkmale, wie Unterstützung für viele weitere Webserver, HTTP-Sessions, Ausgabepufferung, sicherere Wege im Umgang mit Benutzereingaben, und verschiedene neue Sprachkonstrukte.
PHP 4 ist die derzeit aktuellste freigegebene Version von PHP.
Die Arbeit an der Modifikation und Verbesserung der Zend Engine zur Integration der neuen für PHP 5.0 entworfenen Leistungsmerkmale hat bereits begonnen.
Heute wird PHP von (schätzungsweise) hunderttausenden Entwicklern verwendet, und es wird von mehreren Millionen Sites berichtet, auf welchen PHP installiert ist, was mit über 20% der Domains im Internet zu Buche schlägt.
Das Entwicklerteam von PHP umfasst dutzende Entwickler, sowie dutzende andere, welche an PHP verwandten Projekten wie PEAR oder dem Dokumentationsprojekt arbeiten.
Die Zukunft von PHP ist hauptsächlich von seinem Kern, der Zend Engine, geprägt.
PHP 5 wird die neue Zend Engine 2.0 enthalten.
Weitere Informationen zur Zend Engine finden Sie auf der Webseite.
Zurück
Zum Anfang
Nach vorne
Anhang
Nach oben
Geschichte von PHP verwandten Projekten
PHP Handbuch
Zurück
Anhang A.
Die Geschichte von PHP und verwandten Projekten
Nach vorne
Seit PHP gewachsen ist, wurde auch begonnen, es als weltweit populäre Entwicklungsplattform anzuerkennen.
Eine der Interessantesten Arten dies zu sehen war, die im Laufe der Jahre erscheinenden Bücher über PHP zu beobachten.
Unseres Wissens nach was das erste Buch über PHP 'PHP - tvorba interaktivních internetových aplikací', ein im im April 1999 erschienenes, von Jirka Kosek geschriebenes tschechisches Buch.
Ein Monat später folgte ein von Egon Schmid, Christian Cartus und Richard Blume verfasstes deutsches Buch.
Das erste englischsprachige Buch über PHP wurde kurz danach veröffentlicht, es war 'Core PHP Programming' von Leon Atkinson.
Beide Bücher deckten PHP 3.0 ab.
Nachdem diese Bücher die ersten ihrer Art waren, folgte schnell eine große Anzahl Bücher von einer Menge Autoren und Verlegern.
Es gibt über 40 englischsprachige Bücher, 50 Bücher in Deutsch, und über 20 Bücher in Französisch!
Weiters gibt es Bücher über PHP in vielen anderen Sprachen, wie Spanisch, Koreanisch, Japanisch und Hebräisch.
Diese große Anzahl von Büchern, die von verschiedenen Autoren geschrieben, und vielen Verlegern veröffentlicht wurden, sowie deren Verfügbarkeit in so vielen Sprachen sind ein guter Beweis für den weltweiten Erfolg von PHP.
Zurück
Zum Anfang
Nach vorne
Geschichte von PHP verwandten Projekten
Nach oben
Publikationen über PHP
PHP Handbuch
Zurück
Anhang A.
Die Geschichte von PHP und verwandten Projekten
Nach vorne
Soweit wir wissen, erschien der erste Artikel über PHP in einem gedruckten Magazin gegen Ende 1998 in der tschechischen Ausgabe der Computerworld, und behandelte PHP 3.0.
Wie auch bei den Büchern war dieser der erste von einer ganzen Serie von Artikeln über PHP, welche in verschiedenen populären Magazinen erschienen sind.
Artikel über PHP erschienen in Dr.
Dobbs, Linux Enterprise, Linux Magazine und vielen mehr.
Artikel über die Migration von ASP-basierten Applikationen nach PHP unter Windows tauchten sogar in Microsoft 's eigenem MSDN auf!
Zurück
Zum Anfang
Nach vorne
Bücher über PHP
Nach oben
PHP Handbuch
Zurück
Anhang A.
Die Geschichte von PHP und verwandten Projekten
Nach vorne
PEAR, das PHP Extension and Application Repository (ursprünglich PHP Extension and Add-on Repository) ist PHP 's Version von fundamentalen Klassen, und könnte in der Zukunft zu einem der Hauptwege zur Verteilung von PHP - und C-basierten PHP Erweiterungen zwischen Entwicklern werden.
PEAR entstand in Diskussionen während des PHP Developers' Meeting (PDM) vom Januar 2000 in Tel Aviv.
Es wurde von Stig S.
Bakken geschaffen, und ist seiner erstgeborenen Tochter, Malin Bakken, gewidmet.
Seit Anfang 2000 ist PEAR zu einem großen, signifikanten Projekt mit vielen Entwicklern gewachsen, welche an der Implementierung von gemeinsamer, wiederverwendbarer Funktionalität zum Nutzen der gesamten PHP Gemeinschaft arbeiten.
PEAR umfasst heute eine große Auswahl an infrastrukturellen Basisklassen, für Datenbankzugriff, Zwischenspeicherung von Inhalten, mathematischen Kalkulationen, eCommerce, und viel, viel mehr.
Die PHP Initiative zur Qualitätssicherung wurde im Sommer 2000 als Reaktion auf die Kritik, dass PHP Releases für Produktionssysteme nicht genügend getestet würden.
Das Team besteht nun aus einer Hauptgruppe von Entwicklern mit einem guten Verständnis der PHP Codebasis.
Diese Entwickler stecken eine Menge ihrer Zeit in das auffinden und Beheben von Fehlern in PHP.
Zusätzlich gibt es noch viele andere Teammitglieder, die diese Fehlerbehebungen auf den verschiedensten Plattformen testen, und Feedback geben.
PHP-GTK ist die Lösung von PHP, um clientseitige GUI Applikationen zu schreiben.
Andrei Zmievski erinnert sich an die Planungs - und Erstellungsphase von PHP-GTK:
GUI Programmierung hat mich immer schon interessiert und ich fand, dass Gtk + ein sehr nettes Werkzeug ist, außer dass dessen Programmierung in C etwas langwierig ist.
Nachdem ich die Implementierungen von PyGtk und GTK-Perl miterlebt habe, entschied ich mich zu sehen, ob PHP ebenfalls mit Gtk + verbunden werden könnte, wenn auch minimal.
Ab August 2000 hatte ich etwas mehr Freizeit, und begann zu experimentieren.
Meine Hauptvorlage war die PyGTK Implementierung, denn sie war von den Leistungsmerkmalen her ziemlich komplett, und hatte eine nette objektorientierte Schnittstelle.
James Henstridge, der Autor von PyGtk, hatte in diesen ersten Schritten immer hilfreichen Rat.
Die Schnittstellen zu all den Gtk + Funktionen per Hand zu schreiben kam nicht in Frage, und so griff ich die Idee eines Code Generators auf, ähnlich wie es PyGTK tat.
Der Code Generator ist ein PHP Programm, das eine Reihe von .defs Dateien mit den Gtk + Klassen, Konstanten und Information über Methoden liest, und danach C Code generiert, der PHP mit ihnen verbindet.
Was nicht automatisch generiert werden kann, wird händisch in eine .overrides Datei geschrieben.
Die Arbeit an dem Code Generator und der Infrastruktur dauerte einige Zeit, da ich im Herbst 2000 nur wenig Zeit für die Arbeit an PHP-GTK erübrigen konnte.
Nachdem ich PHP-GTK Frank Kronman gezeigt hatte bekam er Interesse, und begann mir bei der Arbeit am Code Generator und der Win32 Implementierung zu helfen.
Es war richtig aufregend, als wir das erste Hello World Programm schrieben und laufen ließen.
März 2001 die erste Version freigeben konnten.
Die Geschichte schlug prompt SlashDot.
In dem Gefühl, dass PHP-GTK umfangreich werden könnte, habe ich extra Mailinglisten und CVS Repositories dafür eingerichtet, wie auch mit Hilfe von Colin Viebrock die Website gtk.php.net.
Die Dokumentation musste ebenfalls erstellt werden, und James Moore begann hierbei zu helfen.
Seit seiner Freigabe gewinnt PHP-GTK an Popularität.
Wir haben unser eigenes Dokumentationsteam, das Handbuch wird weiter verbessert, die Leute beginnen Erweiterungen für PHP-GTK, und auch immer mehr Applikationen mit PHP-GTK zu schreiben.
Zurück
Zum Anfang
Nach vorne
Die Geschichte von PHP und verwandten Projekten
Nach oben
Bücher über PHP
Alexander Aulbach
Duplicating Variable Contents:
FAQ:
Nach vorne
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Dieser Teil enthält Anmerkungen und Tipps zur Installation von Apache mit PHP, sowohl für die Unix als auch für die Windows Version.
Aus der Kompletten Liste der Konfigurationsoptionen können Sie die weitere Argumente für configure in Zeile 8 wählen.
Beispiel 3-5.
Installationsanweisungen (Apache Modulversion)
1. gunzip apache_1.3.x.tar.gz 2. tar xvf apache_1.3.x.tar 3. gunzip php-x.x.x.tar.gz 4. tar xvf php-x.x.x.tar 5. cd apache_1.3.x 6.. / configure --prefix= / www 7. cd.. / php-x.x.x 8.. / configure --with-mysql --with-apache=.. / apache_1.3.x --enable-track-vars 9. make 10. make install 11. cd.. / apache_1.3.x 12. für PHP 3:. / configure --activate-module=src / modules / php3 / libphp3.a für PHP 4:. / configure --activate-module=src / modules / php4 / libphp4.a 13. make 14. make install Statt diesem Schritt können Sie auch die httpd Binärdatei einfach über Ihre existierende Binärdatei kopieren.
Stellen Sie jedoch sicher, dass der Server zuvor heruntergefahren wurde.
15. cd.. / php-x.x.x 16. für PHP 3: cp php3.ini-dist / usr / local / lib / php3.ini für PHP 4: cp php.ini-dist / usr / local / lib / php.ini Sie können Ihre .ini Datei editieren, um PHP Optionen auszuwählen.
Wenn Sie diese Datei an einer anderen Stelle haben möchten, verwenden Sie in Schritt 8 --with-config-file-path= / path 17.
Für PHP 3:
AddType application / x-httpd-php3 .php3 Für PHP 4:
AddType application / x-httpd-php .php Sie können jede gewünschte Dateinamenserweiterung wählen, .php wird von uns einfach nur vorgeschlagen.
Sie können selbst .html einbinden.
18.
Verwenden Sie Ihre normale Prozedur, um den Apache Server zu starten. (Sie müssen den Server stoppen und wieder starten, und ihn nicht nur mittels einem HUP oder USR1 Signal zu einem Reload veranlassen).
Es gibt abhängig von Ihrer Apache Installation und Unix Variante viele mögliche Wege den Server zu stoppen und neu zu starten.
Nachstehend finden Sie einige typische Zeilen für einen Server Restart auf verschiedenen apache / unix Installationen.
Ersetzen Sie / path / to / mit dem Pfad zu diesen Applikationen auf Ihrem System.
Verschiedene Linux und SysV Varianten: / etc / rc.d / init.d / httpd restart 2.
Verwendung von apachectl Skripten: / path / to / apachectl stop / path / to / apachectl start 3. httpdctl und httpsdctl (Verwendet OpenSSL), ähnlich zu apachectl: / path / to / httpsdctl stop / path / to / httpsdctl start 4.
Verwenden von mod_ssl oder einem anderen SSL Server, vielleicht möchten Sie manuell stoppen und wieder starten: / path / to / apachectl stop / path / to / apachectl startssl
Verschiedene Beispiele zum Kompilieren von PHP für Apache:
Dies erstellt eine libphp4.so Shared Library, welche in den Apache geladen wird, wenn eine LoadModule Zeile in der httpd.conf von Apache existiert.
Die PostgreSQL Unterstützung ist in der libphp4.so Bibliothek eingelagert.
Diese wird entweder aufgrund der Extension Option in der php.ini, oder durch die Verwendung der Funktion dl() in einem Skript von PHP geladen.
Dies erstellt eine libmodphp4.a Bibliothek, eine mod_php4.c und einige begleitende Dateien, und kopiert diese in das src / modules / php4 Dies erstellt eine libmodphp4.a Bibliothek, eine mod_php4.c und einige begleitende Dateien, und kopiert diese in das src / modules / php4 Verzeichnis im Apache Source Tree.
Dann kompilieren Sie Apache mit --activate-module=src / modules / php4 / libphp4.a, und das Apache Build System erstellt libphp4.a, und linkt es statisch in die httpd Binary.
Die PostgreSQL Unterstützung ist in dieser httpd Binary inkludiert, was in einer einzigen httpd Binary inkl. komplettem Apache und komplettem PHP resultiert.
Wie vorher, außer dass die PostgreSQL Unterstützung nicht direkt in die httpd inkludiert, sondern eine pgsql.so Wie vorher, außer dass die PostgreSQL Unterstützung nicht direkt in die httpd inkludiert, sondern eine pgsql.so Shared Library erstellt wird.
Diese können Sie entweder mittels der Extension Option in der php.ini, oder direkt mittels dl() in PHP laden.
Bevor Sie sich für einen Weg PHP zu kompilieren entscheiden, sollten Sie die Vor - und Nachteile der jeweiligen Methode bedenken.
Die Kompilation als verteiltes Objekt heißt, dass Sie Apache separat kompilieren können, und nicht für alles in PHP hinzugefügte bzw. geänderte neu kompilieren müssen.
PHP direkt in Apache einzukompilieren (statische Methode) heißt, dass PHP schneller lädt, und schneller läuft.
Weitere Informationen finden Sie auf der Apache webpage on DSO support.
Es gibt zwei Arten, PHP mit Apache 1.3.x unter Windows aufzusetzen.
Eine ist die Verwendung des CGi Moduls (php.exe), die andere ist der Einsatz der Apache Modul dll.
In beiden Fällen müssen Sie den Apache Server stoppen, und Ihre srm.conf oder httpd.conf editieren, um Apache für die Zusammenarbeit mit PHP zu konfigurieren.
Obwohl einige Variationen in der Konfiguration von PHP unter Apache möglich sind, sollten diese auch für Neulinge einfach genug sein.
Für weitere Konfigurationsmöglichkeiten konsultieren Sie bitte die Apache Dokumentation.
Wenn Sie die PHP Distribution wie im Teil Manuelle Installationsschritte beschrieben nach c:\php\ entpackt haben, müssen Sie die folgenden Zeilen in Ihrer Apache Konfigurationsdatei einfügen, um das CGI-Modul aufzusetzen:
Wenn Sie PHP als Apache Modul einsetzen möchten, kopieren Sie die php4ts.dll in Ihr windows / system (für Windows 9x / Me) oder winnt / system32 (für Windows NT / 2000) Verzeichnis, und überschreiben die dort eventuell bereits existierende Datei.
Dann sollten Sie die folgenden zwei Zeilen in Ihrer Apache conf Datei einfügen:
Apache 1.3.22 für Windows hat in seiner Konfigurationsdatei (httpd.conf-dist-win) die ClearModuleList Direktive standardmäßig inkludiert.
Wird diese Direktive verwendet, muss eine AddModule mod_php4.c in die AddModule Liste aufgenommen werden, da PHP sonst nicht als ein Apache Modul registriert wird.
Um das Source Code Highlighting Feature verwenden zu können, erstellen Sie einfach eine PHP Skriptdatei, und fügen diesen Code ein: ?php show_source ("original_php_script.php");?.
Ersetzen Sie original_php_script.php durch den Dateinamen der Datei, dessen Sourcecode Sie anzeigen lassen möchten (Das ist der einzige Weg, dies zu tun, da unter Windows kein Feature wie .phps existiert).
Anmerkung:
Auf Win-Apache müssen alle Backslashes "\" in einer Pfadangabe, wie z.B. "c:\directory\file.ext", in Slashes "/" umgewandelt werden, wie z.B. "c: / directory / file.ext ".
Zurück
Zum Anfang
Nach vorne
Installation auf Windows Systemen
Nach oben
Server - CGI / Commandline
PHP Handbuch
Zurück
Nach vorne
Den Quellcode sowie die Binärdistributionen für die verschiedenen Plattformen (inklusive Windows) erhalten Sie unter http: / /www.php.net /.
Wir empfehlen, den Download der Distributionen von dem Ihnen am nächsten liegenden Mirror durchzuführen.
Zurück
Zum Anfang
Nach vorne
Und weiter?
Nach oben
Installation auf UNIX Systemen
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
PHP 4 kann als Pike Modul für den Caudium Webserver erstellt werden.
Dies wird mit PHP 3 nicht unterstützt.
Folgen Sie einfach den nachstehenden Instruktionen, um PHP 4 für Caudium zu installieren.
Beispiel 3-6.
Caudium Installationsanweisungen
Installieren Sie Caudium, bevor Sie mit der Installation von PHP 4 beginnen.
Damit PHP 4 einwandfrei arbeitet, benötigen Sie Pike 7.0.268 oder neuer.
In diesem Beispiel nehmen wir an, dass Caudium in / opt / caudium / server / installiert ist.
Wechseln Sie in das Verzeichnis php-x.y.z (wobei x.y.z die Versionsnummer darstellt) 3.. / configure --with-caudium= / opt / caudium / server 4. make 5. make install 6.
Starten Sie Caudium neu, sollte er gerade laufen.
Öffnen Sie die grafische Konfigurationsoberfläche, und wechseln Sie zu dem virtuellen Server, welcher PHP 4 Unterstützung bieten soll.
Klicken Sie auf Add Module and locate, und fügen das PHP 4 Script Support Modul hinzu.
Sollte die Dokumentation meinen 'PHP 4 interpreter isn't available', vergewissern Sie sich, dass der Server neu gestartet wurde.
Prüfen Sie / opt / caudium / logs / debug / default.1 auf Fehler in Bezug auf PHP4.so.
Vergewissern Sie sich ebenfalls, dass caudium / server / lib / [pike-version] / PHP4.so vorhanden ist.
Konfigurieren Sie das PHP Script Support Module wenn nötig.
Sie können Ihr Caudium Modul natürlich mit Unterstützung der verschiedenen in PHP 4 verfügbaren Erweiterungen kompilieren.
Die Komplette Liste der Konfigurationsoptionen bietet hierfür eine gute Übersicht.
Anmerkung:
Wenn Sie PHP 4 mit MySQL Unterstützung kompilieren müssen Sie sicherstellen, dass der normale MySQL Client Code verwendet wird.
Die tun Sie, indem Sie ein MySQL Installationsverzeichnis mittels der --with-mysql Option spezifizieren.
Zurück
Zum Anfang
Nach vorne
Server - fhttpd
Nach oben
Servers-IIS / PWS
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Standardmäßig wird PHP als ein CGI Programm kompiliert.
Dies erstellt einen Commandline Interpreter, welcher für CGI Processing oder für nicht webbezogenes PHP Scripting verwendet werden kann.
Haben Sie einen Webserver im Einsatz für welchen PHP eine Modulunterstützung bietet, sollten sie aus Performancegründen dieses Modul verwenden.
Die CGI Version ermöglicht Apache Usern, verschiedene PHP Seiten unter verschiedenen User-IDs laufen zu lassen.
Bitte lesen Sie das Kapitel Sicherheit, wenn Sie PHP als CGI verwenden.
Wenn Sie PHP als CGI Programm erstellt haben, können Sie Ihren Build mittels make test Wenn Sie PHP als CGI Programm erstellt haben, können Sie Ihren Build mittels make test testen, was generell eine gute Idee ist.
Damit können Sie ein eventuelles Problem mit PHP auf Ihrer Plattform erkennen, bevor Sie später damit zu kämpfen haben.
Haben Sie PHP 3 als CGI Programm erstellt, können Sie Ihren Build mit make bench bewerten.
Beachten Sie, dass wenn Safe Mode standardmäßig aktiviert ist, der Benchmark nicht fertiggestellt werden kann, sollte dieser länger als die erlaubten 30 Sekunden dauern.
Der Grund dafür liegt in der Tatsache, dass set_time_limit() in Safe Mode nicht benutzt werden kann.
Verwenden Sie die Konfigurationsoption max_execution_time, um diese Zeit für Ihre eigenen Skripte einzustellen. make bench ignoriert die Konfigurationsdatei.
Zurück
Zum Anfang
Nach vorne
Server - Apache
Nach oben
Server - fhttpd
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Nachstehend finden Sie die komplette Liste von Optionen, welche von den PHP 3 und PHP 4 configure Skripten unterstützt, und zum Kompilieren in einer Unix-ähnlichen Umgebung verwendet werden.
Es gibt auch einige Optionen, deren Namen in PHP 3 und PHP 4 differieren, aber den gleichen Effekt haben.
Datenbank
DIR ist das DBMaker base install directory, Default ist das Verzeichnis, in dem die letzte Version von DBMaker installiert ist (wie z.B. / home / dbmaker / 3.6).
Es sind keine externen Bibliotheken erforderlich.
DIR ist das FrontBase base install directory, Default ist das übliche Frontbase Installationsverzeichnis.
Solaris: / opt / FrontBase, WinNT: \usr\FrontBase, Linux: / usr / frontbase, Mac OSX: / Library / FrontBase.
DIR ist das DB2 base install directory, default ist / home / db2inst1 / sqllib.
DIR ist das Informix base install directory, Hat keinen Defaultwert.
DIR ist das Ingres base directory (default ist / II / ingres)
DIR ist das InterBase base install directory, default ist / usr / interbase.
Default ist / usr und / usr / local
DIR ist das LDAP base install directory.
Der Parameter ist das LDAP base install directory, default ist / usr / local / ldap.
Das ist das Default Verzeichnis der mSQL 2.0 Distribution. configure erkennt automatisch welche Version von mSQL Sie benutzen.
Siehe auch mSQL Konfiguration Direktiven in der Konfigurationsdatei.
DIR ist das MySQL base install directory, als default werden einige für MySQL Dateien übliche Stellen durchsucht.
Wenn nicht spezifiziert, wird die bundled MySQL Bibliothek verwendet.
Siehe auch MySQL Konfiguration Direktiven in der Konfigurationsdatei.
DIR ist Oracle 's Home directory, default ist $ORACLE_HOME.
Der Parameter ist das ORACLE_HOME Verzeichnis.
Oracle home page
DIR ist das PostgresSQL base install directory, default ist / usr / local / pgsql.
DIR ist das PostgreSQL base install directory, default ist / usr / local / pgsql.
Siehe auch Postgres Konfiguration Direktiven in der Konfigurationsdatei.
DIR ist das Solid base install directory, default ist / usr / local / solid
Siehe auch Sybase-CT Konfigurations Direktiven in der Konfigurationsdatei.
Siehe auch Sybase Konfigurations Direktiven in der Konfigurationsdatei.
DIR ist das OpenLink base install directory, default ist / usr / local / openlink.
Verwenden Sie die Option --with-iodbc, wenn Sie das ODBC System von OpenLink Software benutzen wollen.
Dieses Feature wurde erst für iODBC Driver Manager entwickelt, einem frei verfügbaren ODBC Treibermanager, welcher unter vielen UNIX-Derivaten läuft.
Der Parameter ist das Basisverzeichnis, default ist / usr / local.
Sie brauchen auch einen gültigen odbc.h header in Ihrem Include Pfad.
Ihr Header könnte auch ein paar zusätzliche Definitionen benötigen, speziell wenn es sich um eine Multiplattform handelt.
CFLAGS=-DODBC_QNX LDFLAGS=-lunix CUSTOM_ODBC_LIBS=" -ldblib -lodbc ". / configure --with-custom-odbc= / usr / lib / sqlany50
Ist nur angebracht, wenn iODBC, Adabas, Solid, Velocis oder eine spezielle ODBC Schnittstelle aktiviert ist.
Das Unified ODBC Modul ist eine einheitliche Schnittstelle zu allen Datenbanken mit ODBC-basierten Schnittellen, wie z.B.
Es wurde getestet mit iODBC, Solid, Adabas D, IBM DB2 und Sybase SQL Anywhere getestet.
Diese Option nur angebracht, wenn eine der folgenden Optionen verwendet wird: --with-iodbc, --with-solid, --with-ibm-db2, --with-adabas, --with-velocis, or --with-custom-odbc.
PHP 3:
DIR ist das unixODBC base install directory, default ist / usr / local.
DIR ist das Velocis base install directory, default ist / usr / local / velocis.
Bitte geben Sie Ihr CCVS base install directory als DIR an.
DIR ist das Cybermut SDK Basisverzeichnis, das mindestens die beiden Dateien libcm-mac.a und cm-mac.h enthält.
Inkludiert Cybercash MCK Unterstützung.
Hilfe finden Sie in extra / cyberlib.
Ist nicht verfügbar; verwenden Sie stattdessen --with-cybercash.
DIR ist das CyberCash MCK install directory.
Setzen Sie DIR auf shared um als ein dl zu builden, oder shared,DIR um als ein dl zu builden und DIR trotzdem zu spezifizieren.
Deaktiviert GD Unterstützung.
DIR ist das Installationsverzeichnis, und wenn Sie es nicht angeben, versucht es PHP selbst zu finden. [experimentell]
PHP 4: jpeg dir für pdflib 3.x and 4.x
PHP 4: png dir für pdflib 3.x und 4.x
Ist nicht verfügbar; verwenden Sie stattdessen --enable-t1lib.
PHP 4: tiff dir für pdflib 3.x und 4.x
Diese Optionen werden mit der Zeit - wo angebracht - klassifiziert.
Siehe auch BCMath Arbitrary Precision Mathematics Functions für weitere Informationen.
Verwenden Sie --enable-bcmath, um es zu integrieren.
Verwenden Sie --disable-bcmath, um dies zu verhindern.
Siehe README-BCMATH für Instruktionen, wie dieses installiert wird.
Weitere Informationen finden Sie in BCMath Arbitrary Precision Mathematics Functions.
PHP 3, PHP 4:
Kompiliere mit remote debugging functions
Ist diese Option aktiviert, kann das CGI Binary sicher außerhalb des Web Verzeichnisbaumes platziert werden, und die Leute können die .htaccess Security nicht umgehen.
PHP 3, PHP 4:
Sie sollten dies verwenden, wenn Sie die CGI Version mit Apache einsetzen.
Ist in PHP 3 nicht verfügbar
Wenn Sie viel Speicher haben und gcc verwenden, können Sie dies probieren.
Aktiviert make Regeln und Abhängigkeiten, welche für den unbeschwerten Installierer nicht hilfreich (und manchmal verwirrend) sind.
Aktiviert http input character automatic detection and translation für multi-byte character encodings.
Diese Option ist nur für PHP 4.0.6 oder höher verfügbar.
Aktiviert mit multi-byte character encoding verwandte Funktionen.
PHP 3, PHP 4:
PHP 3, PHP 4:
Aktiviert CORBA Unterstützung über Satellite (Benötigt ORBit)
Aktiviert die Unterstützung für System V semaphore Unterstützung.
Aktiviert die Unterstützung für System V shared memory support
PHP 3, PHP 4:
Default ist / usr / local / lib.
Default ist / usr / local / lib
DIR ist das ClibPDF install directory, default ist / usr / local.
DIR ist das cpdfllib Installatiionsverzeichnis, default ist / usr.
DIR ist das OOB base install directory, default ist / usr / local / easysoft / oob / client.
Default ist / usr / local / php / bin
DIR ist das fdftk install directory, default ist / usr / local.
DIR ist das IMAP include, und das c-client.a directory.
Inkludiert IMSP Unterstützung (DIR ist das IMSP include dir und libimsp.a dir).
Diese Extension kann nur als eine shared dl erstellt werden.
Aktiviert Transfer Tables für mod_charset (Rus Apache).
DIR ist das pdflib install directory, default ist / usr / local.
DIR ist die pdflib install location, default ist / usr / local.
Wenn Sie PDFlib Unterstützung kompilieren, verwenden Sie die --with-jpeg-dir und --with-tiff-dir Konfigurationsoptionen.
PHP 3, PHP 4:
PHP 4: regex Bibliothekstypen: system, apache, php
Dieses SAPI verlangt, dass die Java Extension als ein shared dl erstellt wird.
PHP 4: (nicht empfohlen) Verwenden der system regex Bibliothek
DIR ist das bzip2 Installationsverzeichnis.
PHP 4: zlib dir für pdflib 3.x / 4.x oder inkludiere zlib Unterstützung
DIR ist das zlib Installationsverzeichnis, default ist / usr.
Inkludiert zip Unterstützung (benötigt zziplib = 0.10.6).
Die letzte Version von zziplib finden Sie auf http: / /zziplib.sourceforge.net /.
Ohne Perl Compatible Regular Expressions Unterstützung
Verwenden Sie --with-pcre-regex=DIR, um mit DIR anzugeben, wo sich die Include - und Bibliothekendateien von PCRE befinden, wenn Sie die bundled Bibliothek nicht verwenden.
Ist in PHP 4 nicht verfügbar; verwenden Sie stattdessen --disable-posix.
Ist nicht verfügbar; verwenden Sie stattdessen --with-ftp.
PHP 3, PHP 4:
Warnung
PHP 3, PHP 4:
PHP 3, PHP 4:
PHP 3, PHP 4:
Setzen Sie DIR auf shared um als ein dl zu builden, oder shared,DIR um als ein dl zu builden und DIR anzugeben.
DIR ist das YAZ bin install directory
Ist nicht verfügbar, verwenden Sie stattdessen --with-yp.
PHP 3, PHP 4:
Verhindert den short-form? start tag standardmäßig.
Aktiviert GET / POST / Cookie track variables standardmäßig.
Ist in PHP 4 nicht verfügbar; seit PHP 4.0.2 ist track_vars immer on.
PHP 3, PHP 4:
DIR ist das top-level Apache build directory, default ist / usr / local / etc / httpd.
FILE ist der optionale Pfadname zu dem Apache apxs tool; default ist apxs.
Nutzt die Vorteile des Versionings und Scopings von Solaris 2.x und Linux
Siehe INSTALL für mehr Informationen
DIR ist das Caudium base directory.
Das Präfix wird von der Option --prefix bestimmt, default ist / usr / local.
DIR ist das fhttpd sources Directory, default ist / usr / local / src / fhttpd.
Geben Sie den Pfad zu dem installierten Netscape an.
Erstellt PHP als ein Modul für Pi3Web.
DIR ist das base Roxen directory, normalerweise / usr / local / roxen / server.
Erstellt das Roxen Modul unter Verwendung der Zend Thread Safety.
DIR ist das gettext Installationsverzeichnis, default ist / usr / local
DIR ist das recode Installationsverzeichnis.
Aktiviert shmop Unterstützung.
DIR ist das libxml Installationsverzeichnis, default ist / usr
Verwenden Sie --with-xml, um sie zu aktivieren.
Verhindert XML Unterstützung mittels der bundled expat Bibliothek
Verwenden Sie --disable-xml, um sie zu deaktivieren.
Zurück
Zum Anfang
Nach vorne
Unix / Mac OS X Installationen
Nach oben
Installation auf Windows Systemen
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Um PHP als ein fhttpd Modul zu erstellen, beantworten Sie die Frage "Build as an fhttpd module?" mit "yes "(die Konfigurationsoption --with-fhttpd = DIR), und geben das Basisverzeichnis des Source an.
Das Standardverzeichnis ist / usr / local / src / fhttpd.
Wenn Sie fhttpd benutzen, bietet das Kompilieren als Modul eine bessere Performance, mehr Kontrolle, sowie die Möglichkeit zur Remote Execution.
Zurück
Zum Anfang
Nach vorne
Server - CGI / Commandline
Nach oben
Server - Caudium
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Diese Sektion enthält Anmerkungen und Hinweise zur Installation von PHP auf HP-UX Systemen.
Beispiel 3-2.
Installationsanleitung für HP-UX 10
Von: paul_mckay@clearwater-it.co.uk 04-Jan-2001 09:49 (Diese Tipps sind für PHP 4.0.4 und Apache v1.3.9) Sie wollen also PHP und Apache auf einer HP-UX 10.20 installieren?
Sie brauchen gzip, holen Sie sich eine Binärdistribution von http: / /hpux.connect.org.uk / ftp / hpux / Gnu / gzip-1.2.4a / gzip-1.2.4a-sd-10.20.depot.Z dekomprimieren Sie die Datei, und installieren Sie sie mit swinstall 2.
Sie brauchen gcc, holen Sie sich eine Binärdistribution von http: / /gatekeep.cs.utah.edu / ftp / hpux / Gnu / gcc-2.95.2 / gcc-2.95.2-sd-10.20.depot.gz gunzip, und installieren Sie sie mit swinstall.
Sie brauchen die GNU binutils, holen Sie sich eine Binärdistribution von http: / /hpux.connect.org.uk / ftp / hpux / Gnu / binutils-2.9.1 / binutils-2.9.1-sd-10.20.depot.gz gunzip, und installieren Sie sie mit swinstall.
Nun benötigen Sie bison, holen Sie sich eine Binärdistribution von http: / /hpux.connect.org.uk / ftp / hpux / Gnu / bison-1.28 / bison-1.28-sd-10.20.depot.gz installieren Sie sie wie oben 4.
Nun benötigen Sie flex, holen Sie sich den Source von einem der http: / /www.gnu.org mirrors.
Es ist in dem non-gnu Verzeichnis der FTP-Site.
Downloaden Sie die Datei, gunzip, dann tar -xvf 'en Sie sie.
Sollten dabei Fehler auftreten liegt es vielleicht daran, dass gcc etc. nicht im PATH sind.
Ist das der Fall, fügen Sie diese bitte dem PATH hinzu.
OK, nun zum schwierigen Teil:
Laden Sie die Sources von PHP und Apache herunter.
Führen Sie gunzip und tar -xvf an ihnen aus.
Wir müssen einige Dateien ändern, dass sie richtig kompiliert werden können.
Es gibt sicher einen besseren Weg dies zu tun, aber einfacher Weg ist es, lt_target=hpux10.20 in die Zeile 47286 des configure Skriptes zu schreiben.
Als nächstes müssen wir die Apache GuessOS Datei ändern.
Unter apache_1.3.9 / src / helpers ändern Sie die Zeile 89 von "echo "hp${HPUXMACH}-hpux${HPUXVER}"; exit 0" auf: "echo "hp${HPUXMACH}-hp-hpux${HPUXVER}"; exit 0 "10.
Sie können PHP nicht als Shared Object unter HP-UX installieren, weshalb Sie es statisch kompilieren müssen; folgen Sie einfach den Anweisungen auf der Apache Seite.
Sie müssen einen neuen User für Apache einrichten, z.B. www oder apache.
User www Group sys Das hat den Grund, dass Sie Apache unter HP-UX nicht als nobody laufen lassen können.
Jetzt sollten Apache und PHP laufen.
Ich hoffe das hilft jemandem, Paul Mckay.
Zurück
Zum Anfang
Nach vorne
Unix / Linux Installation
Nach oben
Unix / Solaris Installation
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Warnung
One to set up the PHP CGI binary, the other is to use the ISAPI module dll.
Edit the enclosed pws-php4cgi.reg file (look into the sapi dir) to reflect the location of your php.exe.
Forward slashes should be escaped, for example: [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\w3svc\parameters\Script Map] ".php"="c:\\php\\php.exe "
Edit the enclosed pws-php4isapi.reg file (look into the sapi dir) to reflect the location of your php4isapi.dll.
Forward slashes should be escaped, for example: [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\w3svc\parameters\Script Map] ".php"="c:\\php\\sapi\\php4isapi.dll "
To install PHP on an NT / 2000 Server running IIS 4 or newer, follow these instructions.
In either case, you need to start the Microsoft Management Console (may appear as 'Internet Services Manager', either in your Windows NT 4.0 Option Pack branch or the Control Panel= Administrative Tools under Windows 2000).
This means that you will get sensible 404 style error messages instead of cgi errors complaing that php did not output any data.
Zurück
Zum Anfang
Nach vorne
Server - Caudium
Nach oben
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Dieser Teil enthält Anmerkungen und Hinweise zur Installation von PHP auf Linux Distributionen
RPM.
Das kann beim Setup einer Standardkonfiguration helfen, aber wenn Sie andere Features (wie einen Secure Server, oder einen anderen Datenbanktreiber) benötigen könnte es sein, dass ein Build von PHP und / oder Ihres Webservers nötig ist.
Wenn Sie mit dem Bilden und Kompilieren Ihrer Software nicht vertraut sind, sollten Sie sich nach einer von jemand anders bereits erstellten Paketversion von PHP mit den von Ihnen benötigten Features umsehen.
Zurück
Zum Anfang
Nach vorne
Installation auf UNIX Systemen
Nach oben
Unix / HP-UX Installationen
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Diese Sektion enthält Anmerkungen und Hinweise zur Installation von PHP auf Mac OS X Server.
Es gibt ein paar vorgefertigte und kompilierte Pakete von PHP für Mac OS X.
PHP und / oder Ihren Webserver selbst bauen.
Wenn Sie mit dem Bilden und Kompilieren Ihrer Software nicht vertraut sind, sollten Sie sich nach einer von jemand anders bereits erstellten Paketversion von PHP mit den von Ihnen benötigten Features umsehen.
Es gibt zwei leicht unterschiedliche Versionen von Mac OS X, nämlich einen Client und einen Server.
Die folgende Beschreibung ist für OS X Server.
Beispiel 3-4.
Mac OS X Server Installation
Beschaffen Sie sich die aktuellen Distributionen von Apache und PHP 2.
Untar 'en Sie sie, und starten configure an Apache wie folgt. / configure --exec-prefix= / usr\ --localstatedir= / var\ --mandir= / usr / share / man\ --libexecdir= / System / Library / Apache / Modules\ --iconsdir= / System / Library / Apache / Icons\ --includedir= / System / Library / Frameworks / Apache.framework / Versions / 1.3 / Headers\ --enable-shared=max\ --enable-module=most\ --target=apache 4.
Sie können auch folgende Zeile hinzufügen: setenv OPTIM=-O2 Wenn Sie wollen, dass der Compiler Optimierungen durchführt.
Wechseln Sie in das Verzeichnis mit dem PHP Source und führen configure aus. / configure --prefix= / usr\ --sysconfdir= / etc\ --localstatedir= / var\ --mandir= / usr / share / man\ --with-xml\ --with-apache= / src / apache_1.3.12 Wenn Sie andere Ergänzungen haben (MySQL, GD, etc.), fügen Sie diese bitte hier hinzu.
Geben Sie bei der Option --with-apache den Pfad zu dem Verzeichnis mit Ihrem Apache Source an, z.B. "/ src / apache_1.3.12".
6. make 7. make install Dies fügt Ihrem Apache Source Verzeichnis das Verzeichnis src / modules / php4 hinzu.
PHP 4 Modul.. / configure --exec-prefix= / usr\ --localstatedir= / var\ --mandir= / usr / share / man\ --libexecdir= / System / Library / Apache / Modules\ --iconsdir= / System / Library / Apache / Icons\ --includedir= / System / Library / Frameworks / Apache.framework / Versions / 1.3 / Headers\ --enable-shared=max\ --enable-module=most\ --target=apache\ --activate-module=src / modules / php4 / libphp4.a Sollten Sie eine Meldung erhalten, dass libmodphp4.a nicht mehr gültig ist, wechseln Sie in Ihrem Apache Source Verzeichnis zu src / modules / php4, und führen folgenden Befehl aus: ranlib libmodphp4.a Dann gehen Sie zurück in das Hauptverzeichnis des Apache Source, und führen obigen configure Befehl erneut aus.
9. make 10. make install 11.
Andere Beispiele für Mac OS X Client und Mac OS X Server finden Sie bei Stepwise.
Diese Tipps wurden freundlicherweise von Marc Liyanage zur Verfügung gestellt.
Das PHP Modul für den Apache Webserver ist in Mac OS X inkludiert.
Diese Version unterstützt die MySQL und PostgreSQL Datenbanken.
Anmerkung:
Vorsicht wenn Sie dies tun, Sie könnten Ihren Apache Webserver vermurksen!
Installationsschritte:
Öffnen Sie ein Terminalfenster
Geben Sie "wget http: / /www.diax.ch / users / liyanage / software / macosx / libphp4.so.gz" ein, und warten Sie bis der Download beendet ist
Geben Sie "gunzip libphp4.so.gz" ein
Geben Sie "sudo apxs -i -a -n php4 libphp4.so" ein
* #AddType application / x-httpd-php .php * #AddType application / x-httpd-php-source .phps
Starten Sie mit "sudo apachectl graceful" den Webserver neu.
PHP sollte nun laufen.
Sie können dies testen, indem Sie eine Datei in Ihrem Verzeichnis "Sites" erstellen, z.B. "test.php", folgende Zeile hineinschreiben: "?php phpinfo()?".
Nun öffnen Sie 127.0.0.1 / ~your_username / test.php in Ihrem Webbrowser.
Sie sollten nun eine Tabelle mit Informationen über das PHP Modul sehen.
Zurück
Zum Anfang
Nach vorne
Unix / OpenBSD Installation
Nach oben
Komplette Liste der Konfigurationsoptionen
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Beispiel 3-7.
Beispiel 3-8.
Beispiel 3-9.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
You need to complete the folowing steps to make PHP work with OmniHTTPd.
SAPI is supported by OmniHTTPd, but some tests showed, that it is not so stable to use PHP as an ISAPI module in OmniHTTPd.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Diese Sektion enthält Anmerkungen und Hinweise zur Installation von PHP auf OpenBSD.
Dies ist die empfohlene Methode PHP auf OpenBSD zu installieren, da sie die aktuellen Patches und Security Fixes enthält.
Um diese Methode zu verwenden, benötigen Sie einen recent ports tree.
Dann bestimmen Sie einfach die zu installierenden Optionen, und führen das Kommando make install aus.
Das folgende Beispiel zeigt wie es gemacht wird.
Beispiel 3-3.
OpenBSD Ports Installationsbeispiel
$cd / usr / ports / www / php4 $make show VARNAME=FLAVORS (wählen Sie gewünschten Installationsoptionen aus der liste) $FLAVOR="imap gettext ldap mysql gd "make install $php4-enable
Für Ihre Version von OpenBSD sind vorkompilierte Pakete verfügbar.
Diese integrieren sich automatisch in die mit dem OS installierten Apache Version.
Da es jedoch eine große Anzahl Optionen (genannt flavors) für dieses Port gibt, ziehen Sie es vielleicht vor, den Source unter Verwendung des Ports Tree zu kompilieren.
Weitere Informationen über die verfügbaren Pakete finden Sie in der Manual Page packages( 7)
Zurück
Zum Anfang
Nach vorne
Unix / Solaris Installation
Nach oben
Unix / Mac OS X Installationen
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
If you choose the CGI executable file, enter 'wwwserver / shellcgi', if you chosse the ISAPI module, enter 'wwwserver / isapi' (both without quotes).
Zurück
Zum Anfang
Nach vorne
Nach oben
Servers-Xitami
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
The PHP CGI binaries are compatible with almost all webservers supporting the CGI interface.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
The most common ones are listed in the PHP FAQ, found at http: / /www.php.net / FAQ.php
Read the Bugs-Dos-And-Donts before submitting any bug reports!
Zurück
Zum Anfang
Nach vorne
Nach oben
Konfiguration
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Diese Sektion enthält Anmerkungen und Hinweise zur Installation von PHP auf Solaris Systemen.
Solaris Installationen mangelt es oft an C Compilern und deren zugehörigen Tools.
Sie benötigen folgende Software:
gcc (empfohlen, andere C Compiler können ebenfalls funktionieren)
Sie können den Installationsprozess auf Solaris vereinfachen, indem Sie zur Installation der meisten benötigten Komponenten pkgadd verwenden.
Zurück
Zum Anfang
Nach vorne
Unix / HP-UX Installationen
Nach oben
Unix / OpenBSD Installation
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Dieser Abschnitt wird Sie durch die Konfiguration und Installation von PHP auf UNIX Systemen führen.
Bevor Sie mit dem Prozess beginnen, lesen Sie bitte alle für Ihre Plattform oder Webserver relevanten Sektionen.
Erforderliche Kenntnisse und Software:
Grundlegende UNIX-Kenntnisse (Sie sollten in der Lage sein, mit "make "und einem C-Compiler umzugehen, wenn Sie kompilieren)
Einen ANSI C Compiler (wenn Sie kompilieren)
flex (zum kompilieren)
bison (zum kompilieren)
Einen Web Server
Alle modulspezifischen Komponenten (wie z.B. gd, pdf libs, etc.)
Entweder mit einem Kompilier - und Configure - Prozess, oder über verschiedene Methoden mittels vorgefertigter Pakete.
Diese Dokumentation ist hauptsächlich auf den Prozess des Kompilierens und Konfigurierens von PHP fokussiert.
Der Anfang des PHP Installations - und Konfigurationsprozesses wird von den Eingabeoptionen für das configure Skript gesteuert.
Diese Seite umreißt die Verwendung der meisten allgemeinen Optionen, aber es gibt noch viele andere als Spielraum.
Eine umfassende Übersicht finden Sie in der Kompletten Liste der Konfigurationsoptionen.
Es gibt verschiedene Wege, PHP zu installieren:
Als ein Apache Modul
Als ein fhttpd Modul
Zur Verwendung mit AOLServer, NSAPI, phttpd, Pi3Web, Roxen, thttpd, oder Zeus.
Als ein CGI Programm
PHP kann auf unterschiedliche Arten kompiliert werden, aber eine der populärsten ist die als Apache Modul.
Es folgt ein kurzer Überblick über die Installation.
Beispiel 3-1.
Kurzanleitung zur Installation von PHP 4 (Apache Modul Version)
Editieren Sie nun Ihre httpd.conf oder srm.conf, und fügen Sie hinzu:
Starten Sie den Apache Web Server neu. (Sie müssen den Server beenden und neu starten, ein einfacher Reload mittels HUP oder USR1 Signal reicht nicht aus.)
Wenn PHP konfiguriert ist, können Sie die ausführbare CGI Datei oder PHP-Bibliothek erstellen.
Das Kommando make sollte das für Sie erledigen.
Sollte dies scheitern und Sie nicht erkennen können warum, lesen Sie in der Problem-Sektion weiter.
Zurück
Zum Anfang
Nach vorne
Nach oben
Unix / Linux Installation
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Dieser Teil behandelt Windows 95 / 98 / Me und Windows NT / 2000 / XP (Das Setup auf XP ist dzt. noch nicht getestet).
Windows 3.1 läuft.
Manchmal sprechen wir bei den unterstützten Plattformen von Win32.
Es gibt zwei Wege PHP für Windows zu installieren: entweder manuell, oder mittels dem InstallShield Installer.
Wenn Sie Microsoft Visual Studio besitzen, können Sie auch den Source Code von PHP selbst kompilieren.
Haben Sie PHP erst einmal auf Ihrem Windows System installiert, können Sie als Erweiterung der Funktionalität auch verschiedene Erweiterungen laden.
Der von der Downloadseite auf http: / /www.php.net / Der von der Downloadseite auf http: / /www.php.net / erhältliche Windows PHP Installer installiert die CGI Version von PHP, und konfiguriert auch die Webserver IIS, PWS, und Xitami.
Beachten Sie aber auch, dass der InstallShield Installer zwar eine einfache Art der Installation von PHP ist, gleichzeitig aber auch in verschiedenen Aspekten eingeschränkt ist (z.B. wird ein automatisches Setup von Erweiterungen nicht unterstützt).
Installieren Sie Ihren gewünschten HTTP Server auf Ihrem System und stellen Sie sicher, dass er läuft.
Starten Sie nun das Installationsprogramm, und folgen Sie den Instruktionen des Installation Wizards.
Es werden zwei Installationsarten unterstützt:
Standard bietet zweckmäßige Standardeinstellungen wo dies möglich ist, und Advanced (erweitert), welche die gewünschten Einstellungen während der Installation abfragt.
Der Installation Wizard sammelt genug Informationen, um die php.ini zu erstellen, und den Webserver für den Einsatz von PHP zu konfigurieren.
Für IIS und auch PWS auf Windows NT Workstation wird eine Liste mit den Knoten auf dem Server, sowie eine Liste mit den Script Mappings angezeigt aus welcher Sie die gewünschten Knoten auswählen können, auf denen PHP in die Script Mappings eingetragen werden soll.
Wenn die Installation fertig ist informiert Sie der Installer, ob Sie Ihr System oder den Server neu starten sollen, oder ob Sie einfach mit der Nutzung von PHP beginnen können.
Warnung
Seien Sie sich darüber im Klaren, dass dieses Setup von PHP nicht sicher ist.
Wenn Sie ein sicheres Setup von PHP möchten, Setzen Sie PHP manuell auf, und wählen jede Option sorgfältig aus.
Dieses automatische Setup bietet Ihnen eine sofort lauffähige PHP Installation, ist jedoch nicht für den Einsatz auf Online-Servern gedacht.
Diese Installationsanleitung hilft Ihnen, PHP auf Ihrem Windows Webserver manuell zu installieren und zu konfigurieren.
Laden Sie sich hierfür bitte die gezippte Distribution von der Downloadseite http: / /www.php.net / Laden Sie sich hierfür bitte die gezippte Distribution von der Downloadseite http: / /www.php.net / herunter.
Die Originalversion dieser Anleitung wurde von Bob Silva verfasst, welche Sie auf http: / /www.umesd.k12.or.us / php / win32install.html finden.
Diese Anleitung unterstützt Sie bei der manuellen Installation für:
Personal Web Server 3 und 4 oder neuer
Internet Information Server 3 und 4 oder neuer
OmniHTTPd 2.0b1 und höher
PHP 4 für Windows gibt es in zwei Varianten - ein CGI Modul (php.exe), und verschiedene SAPI Module (z.B. php4isapi.dll).
Letztere ist neu in PHP 4, und bietet eine signifikant höhere Performance, sowie neue Funktionalitäten.
Warnung
Beachten Sie bitte, dass die Qualität der SAPI Module für den Einsatz auf Produktionsservern dzt. als noch NICHT hoch genug eingestuft wird.
Besonders beim ISAPI Modul können speziell auf älteren Plattformen als W2k ernsthafte Stabilitätsprobleme auftreten - Sie könnten z.B. einige Server 500 Errors erleben, und am Ausfall anderer Servermodule wie ASP leiden.
Sie wurden gewarnt!
Der Grund dafür ist, dass die PHP SAPI Module die Thread-safe Version des PHP Codes nutzen.
Diese ist neu in PHP 4, und wurde noch nicht eingehend genug getestet und belastet, um als völlig stabil angesehen werden zu können, und es sind dzt. auch ein paar Fehler bekannt.
Andererseits haben einige Leute über sehr gute Resultate mit den SAPI Modulen berichtet, auch wenn wir über niemanden informiert sind, der sie auf Produktionsservern einsetzt.
Kurz gesagt - Ihr Nutzen kann variieren; Wenn Sie absolute Stabilität benötigen, tauschen Sie die Performance der SAPI Module gegen die Stabilität des CGI Moduls.
Wenn Sie eines der SAPI Module unter Windows 95 einsetzen möchten, holen Sie sich das DCOM Update von den Microsoft DCOM Seiten.
Für das ISAPI Modul wird ein ISAPI 4.0 kompatibler Webserver benötigt (getestet wurden IIS 4.0, PWS 4.0 und IIS 5.0).
Wenn Sie gediegene PHP Unterstützung wünschen, sollten Sie In diesem Fall den Windows NT 4.0 Option Pack mit IIS 4.0 downloaden.
Die folgenden Schritte sollten vor den serverspezifischen Instruktionen an allen Installationen durchgeführt werden.
Entpacken Sie die in der Distribution enthaltenen Dateien, in ein Verzeichnis Ihrer Wahl.
Stellen Sie sicher, dass die von PHP verwendeten DLLs gefunden werden können.
Welche DLLs benötigt werden, hängt von dem verwendeten Webserver, und ob Sie PHP als CGI - oder Server-Modul einsetzen. php4ts.dll wird immer verwendet.
Wenn Sie ein Server-Modul benutzen (z.B.
ISAPI oder Apache), dann brauchen Sie die entsprechende DLL des sapi Verzeichnisses.
Wenn Sie PHP extension DLLs benutzen, benötigen Sie diese ebenfalls.
Um sicherzugehen, dass diese auch gefunden werden, können Sie sie entweder in das Systemverzeichnis (z.B. winnt / system32 oder windows / system) kopieren, oder Sie können sie in das gleiche Verzeichnis stellen, in welchem sich auch die von Ihrem Webserver benutzte EXE - bzw.
Die 'php.exe', die SAPI Module, und einige Erweiterungen benötigen externe DLLs.
Stellen Sie sicher, dass diese DLLs der Distribution in einem Verzeichnis liegen, welches im Windows PATH liegt.
Dieses heißt gewöhnlich:
c:\windows\system auf Windows 9x / Me
'php4ts.dll'.
Wenn sie dort bereits existiert, überschreiben Sie sie.
Die Dateien in dem Verzeichnis 'dlls' Ihrer Distribution.
Sollten diese Dateien bereits auf Ihrem System installiert sein, überschreiben Sie diese nur, wenn etwas nicht korrekt läuft (Vor dem Überschreiben empfehlen wir ein Backup, oder verschieben diese Dateien in ein anderes Verzeichnis - nur für den Fall dass etwas schiefgeht).
Holen Sie sich die letzte Version der Microsoft Data Access Components (MDAC) für Ihre Plattform, speziell wenn Sie Windows 9x / NT4 benutzen.
MDAC finden Sie unter http: / /www.microsoft.com / data /.
Kopieren Sie die gewünschte ini Datei (siehe unten) in Ihr '%WINDOWS% 'Verzeichnis auf Windows 9x / ME, oder in Ihr '%SYSTEMROOT%' Verzeichnis unter Windows NT oder Windows 2000, und benennen Sie sie in php.ini um.
Ihr '%WINDOWS%' oder '%SYSTEMROOT% 'Verzeichnis ist normalerweise:
c:\windows für Windows 9x / ME
c:\winnt oder c:\winnt40 für NT / 2000 Server
In der Zip-Datei befinden sich zwei ini Dateien: php.ini-dist und php.ini-optimized.
Am besten ist es, all die ini Einstellungen selbst manuell vorzunehmen.
Editieren Sie nun Ihre Datei 'php.ini':
Tragen Sie bei 'extension_dir' Ihr PHP Installationsverzeichnis oder den Pfad zu Ihren 'php_*.dll 'Dateien ein, z.B.: c:\php\extensions
Wenn Sie OmniHTTPd benutzen, überspringen Sie diesen Schritt.
Wählen Sie nun die Erweiterungen (Module) aus, die Sie benutzen möchten, wenn PHP startet.
Lesen Sie in Windows Erweiterungen wie Sie eine aktivieren können, und welche bereits inkludiert sind.
Bei einer Neuinstallation ist es ratsam, erst PHP zu installieren und zu testen, bevor Sie Erweiterungen in der php.ini aktivieren.
Auf PWS und IIS können Sie auch die browscap.ini auf 'c:\windows\system\inetsrv\browscap.ini' unter Windows 9x / Me, und 'c:\winnt\system32\inetsrv\browscap.ini 'unter NT / 2000 Server setzen.
Beachten Sie, dass das mibs Verzeichnis in der Windows Distribution Dateien für die SNMP Unterstützung enthält.
Dieses Verzeichnis sollte nach DRIVE:\usr\mibs verschoben werden (DRIVE: ist das Laufwerk, auf dem PHP installiert ist).
Bevor wir beginnen lohnt es sich, folgende Frage zu beantworten: "Warum ist das Kompilieren unter Windows so schwer?" Zwei Gründe drängen sich auf:
Windows genießt (noch) keine große Gemeinschaft von Entwicklern welche auch bereit sind, deren Sourcecode frei zur Verfügung zu stellen.
Als Ergebnis wurden die nötigen Investitionen in die für solche Entwicklungen nötige Infrastruktur nicht getätigt.
Das meiste was verfügbar ist, wurde durch die Portierung der nötigen Werkzeuge von Unix möglich gemacht.
Seien Sie deshalb nicht überrascht, wenn manches aus diesem Erbe von Zeit zu Zeit durchscheint.
Fast alle der folgenden Instruktionen sind von der Art "Einstellen und vergessen".
Deshalb lehnen Sie sich zurück, und folgen den nachstehenden Instruktionen so gewissenhaft Sie können.
Bevor Sie beginnen können, müssen Sie einiges downloaden...
Erst einmal benötigen Sie den Cygwin Toolkit von einem Cygwin Mirror in Ihrer Nähe.
Cygwin bietet die meisten der populären GNU Utilities, welche während der Kompilation benötigt werden.
Laden Sie den Rest der benötigten Tools von der PHP Seite http: / /www.php.net / extra / win32build.zip herunter.
Laden Sie sich auch den Sourcecode für die von PHP verwendete DNS Namensauflösung von http: / /www.php.net / extra / bindlib_w32.zip Laden Sie sich auch den Sourcecode für die von PHP verwendete DNS Namensauflösung von http: / /www.php.net / extra / bindlib_w32.zip herunter.
Dieser ersetzt die in win32build.zip enthaltene Bibliothek resolv.lib.
Sollten Sie noch kein Tool zur dekomprimierung besitzen, so bekommen Sie eine freie Version von InfoZip.
Als letztes benötigen Sie natürlich den Sourcecode von PHP 4 selbst.
Sie bekommen die aktuellste Entwicklerversion unter Verwendung des anonymen CVS.
Wenn Sie einen Snapshot oder einen Source Tarball downloaden, müssen Sie ihn nicht nur erst dekomprimieren, sondern auch in den *.dsp und *.dsw Dateien die einfachen Linefeeds in crlf konvertieren, bevor diese von Microsoft Visual C+ + geladen werden.
Anmerkung:
Stellen Sie die Verzeichnisse Zend und TSRM in das php4 Verzeichnis, damit die Projekte während des Kompilierens gefunden werden.
Folgen Sie den Anweisungen zur Installation des von Ihnen gewählten Dekomprimierungstools.
Führen Sie setup.exe aus, und folgen Sie den Installationsanweisungen.
Wenn Sie einen anderen Pfad als c:\cygnus wählen, setzen Sie bitte die Cygwin Environmentvariable.
Unter Windows 95 / 98 kann dies mittels einer Zeile in der autoexec.bat erfolgen.
Unter Windows NT gehen Sie auf Systemsteuerung = System und wählen den Tab Umgebungsvariablen aus.
Warnung
Erstellen Sie ein temporäres Verzeichnis für Cygwin, sonst werden einige Kommandos (speziell bison) nicht korrekt ausgeführt.
Unter Windows 95 / 98, mkdir C:\TMP.
Für Windows NT, mkdir %SystemDrive%\tmp.
Erstellen Sie ein Verzeichnis, und dekomprimieren Sie darin win32build.zip.
Starten Sie Microsoft Visual C++, und wählen im Menü Extras = Optionen = Verzeichnisse.
Wechseln Sie nacheinander zu "Ausführbare Dateien", "Include Dateien" und "Bibliothek Dateien", und vergewissern Sie sich, dass cygwin\bin, win32build\include, und win32build\lib in der jeweiligen Liste eingetragen sind (Um einen Eintrag hinzuzufügen, wählen Sie eine leere Zeile am Ende der Liste aus, und beginnen einzutippen).
c:\cygnus\bin
c:\php-win32build\lib
Erstellen Sie ein anderes Verzeichnis, und dekomprimieren Sie darin bindlib_w32.zip.
Entscheiden Sie sich, ob Sie die Debug-Symbole verfügbar haben wollen (bindlib - Win32 Debug) oder nicht (bindlib - Win32 Release).
Wenn Sie das GUI benutzen:
Starten Sie VC++, selektieren Sie Datei = Arbeitsbereich öffnen, und wählen Sie bindlib aus.
Dann selektieren Sie Build = Aktive Konfiguration, und wählen die gewünschte Konfiguration aus.
Letztendlich wählen Sie Erstellen = Rebuild All.
Wenn Sie die Kommandozeile benutzen stellen Sie sicher, dass die C+ + Environmentvariablen registriert sind, oder starten Sie vcvars.bat, und führen eines der folgenden Kommandos aus:
Nun sollten Sie entweder in Ihrem Debug oder Release Verzeichnis eine verwendbare resolv.lib haben.
Kopieren Sie diese Datei in Ihr win32build\lib Verzeichnis, und überschreiben damit die dort bereits vorhandene Datei mit dem gleichen Namen.
Der einfachste Weg zu beginnen, ist die standalone / CGI Version zu erstellen.
Starten Sie VC++, selektieren Sie Datei = Arbeitsbereich öffnen, und wählen Sie php4ts aus.
Letztendlich wählen Sie Erstellen = Rebuild All.
Wenn Sie die Kommandozeile benutzen stellen Sie sicher, dass die C+ + Environmentvariablen registriert sind, oder starten Sie vcvars.bat, und führen eines der folgenden Kommandos aus:
Nun sollten Sie entweder in Ihrem Debug_TS oder Release_TS Verzeichnis eine verwendbare php.exe haben.
Wiederholen Sie die obigen Schritte mit php4isapi.dsp (welches sich in sapi\isapi befindet), um das für eine Integration mit Microsoft IIS nötige ISAPI-Modul zu erstellen.
Sind PHP und ein Webserver einmal auf Windows installiert, möchten Sie vielleicht einige Erweiterungen für zusätzliche Funktionalität installieren.
Die folgende Tabelle beschreibt einige der verfügbaren Erweiterungen.
Sie können Erweiterungen auswählen, welche beim Start von PHP geladen werden, indem Sie das Kommentarzeichen (';') in den entsprechenden 'extension=php_*.dll' Zeilen in der php.ini entfernen.
Sie können Module mittels dl() auch dynamisch laden.
Die DLLs für PHP Erweiterungen enthalten in PHP 4 als Präfix 'php_' (und 'php3_ 'in PHP 3), um Verwechslungen zwischen PHP Erweiterungen und deren unterstützenden Bibliotheken zu vermeiden.
Anmerkung:
In PHP 4.0.6 ist die Unterstützung für BCMath, Calendar, COM, FTP, MySQL, ODBC, PCRE, Session, WDDX und XML inkludiert.
Um diese Funktionen zu benutzen, brauchen Sie keine zusätzlichen Erweiterungen zu laden.
Eine Liste mit den bereits inkludierten Modulen befindet sich in der README.txt oder install.txt Ihrer Distribution.
Anmerkung:
Manche Erweiterungen benötigen jedoch DLLs, welche nicht in der PHP Distribution enthalten sind, wie z.B.
Kopieren Sie die DLLs vom Verzeichnis 'dlls' in Ihren Windows PATH, gute Plätze sind:
c:\windows\system für Windows 9x / ME
c:\winnt\system32 für Windows NT / 2000
Tabelle 3-1.
PHP Erweiterungen
Erweiterung
Beschreibung
Anmerkungen
Keine
Kalender Umwandlungsfunktionen
Ist seit PHP 4.0.3 integriert
ClibPDF Funktionen
Keine
Verschlüsselungsfunktionen
Keine
ctype Funktionen
Keine
CURL, Client URL Bibliotheksfunktionen
Benötigt libeay32.dll, ssleay32.dll (bundled)
Cybercash Zahlungssystem Funktionen
Keine
DBM Funktionen
Nicht empfohlen.
Verwenden Sie stattdessen DBA (php_dba.dll)
DBA Datenbank (dbm-style) Abstraktions-Funktionen
Keine
dBase Funktionen
Keine
Berkeley DB2 Bibliothek
Keine
DOM XML Funktionen
Benötigt libxml2.dll (bundled)
.NET Funktionen
Keine
Liest EXIF Headers einer JPEG-Grafik
Keine
FrontBase Funktionen
Keine
Forms Data Format Funktionen
Benötigt fdftk.dll (bundled)
filePro Funktionen
Read-only Zugriff
FTP Funktionen
Ist seit PHP 4.0.3 integriert
GD GD Bibliotheksfunktionen zur Bildmanipulation
Keine
Gettext Funktionen
Benötigt gnu_gettext.dll (bundled)
HyperWave Funktionen
Keine
ICONV Zeichensatzumwandlung
Benötigt iconv-1.3.dll (bundled)
Informix Funktionen
Benötigt Informix Bibliotheken
IIS Managementfunktionen
Keine
IMAP POP3 und NNTP Funktionen
Ingres II Funktionen
Benötigt Ingres II Bibliotheken
InterBase Funktionen
Benötigt gds32.dll (bundled)
Java Erweiterung
Benötigt jvm.dll (bundled)
LDAP Funktionen
Benötigt libsasl.dll (bundled)
Mhash Funktionen
Keine
Ming Funktionen für Flash
Keine
mSQL Funktionen
Benötigt msql.dll (bundled)
mSQL 1 Client
Keine
mSQL 2 Client
Keine
MSSQL Funktionen
Benötigt ntwdblib.dll (bundled)
MySQL Funktionen
in PHP 4 bereits integriert
Netscape Mail Funktionen
Keine
Oracle Funktionen
Keine
Oracle 8 Funktionen
Benötigt Oracle 8 Client Bibliotheken
OpenSSL Funktionen
Benötigt libeay32.dll (bundled)
Oracle Funktionen
Benötigt Oracle 7 Client Bibliotheken
PDF Funktionen
Keine
PostgreSQL Funktionen
Keine
Printer Funktionen
Keine
php_sablot.dll
XSLT Funktionen
Benötigt sablot.dll (bundled)
SNMP get and walk Funktionen
nur NT!
Sybase Funktionen
Benötigt Sybase Client Bibliotheken
YAZ Funktionen
Keine
ZLib Komprimierungsfunktionen
Keine
Zurück
Zum Anfang
Nach vorne
Komplette Liste der Konfigurationsoptionen
Nach oben
Server - Apache
PHP Handbuch
Zurück
Kapitel 3.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Servers-Oreilly Website Pro
Nach oben
PHP Handbuch
Zurück
Nach vorne
Was kann PHP?
Hypertext Preprocessor") ist eine weit verbreitete und für den allgemeinen Gebrauch bestimmte Open Source Skriptsprache, welche speziell für die Webprogrammierung geeignet ist, und in HTML eingebettet werden kann.
Hört sich einfach an, aber was heißt es genau?
Ein Beispiel:
Beispiel 1-1.
Ein einleitendes Beispiel
html head title Beispiel / title / head body ?php echo "Hallo, ich bin ein PHP-Skript !";? / body / html
Beachten Sie den Unterschied zu einem Skript, welches in anderen Sprachen wie Perl oder C geschrieben wurde - - anstatt ein Programm mit vielen Anweisungen zur Ausgabe von HTML zu schreiben, schreibt man einen HTML-Code mit einigen eingebetteten Anweisungen, um etwas auszuführen (z.B. um - wie oben - Text auszugeben).
Der PHP-Code steht zwischen speziellen Anfangs - und Schlusstags, mit denen man in den PHP-Modus und zurück wechseln kann.
Was PHP von clientseitigen Sprachen wie Javaskript unterscheidet, ist dass der Code auf dem Server ausgeführt wird.
Sollten Sie ein Skript wie das obige auf ihrem Server ausführen, würde der Besucher nur das Ergebnis empfangen, ohne die Möglichkeit herauszufinden, wie der zugrundeliegende Code aussieht.
Sie können ihren Webserver auch anweisen, alle ihre HTML-Dateien mit PHP zu parsen, denn dann gibt es wirklich nichts, das dem Benutzer sagt, was sie in petto haben.
Das Beste an der Verwendung von PHP ist, dass es für Neulinge extrem simpel ist, aber auch einen riesigen Funktionsumfang für den professionellen Programmierer bietet.
Scheuen Sie sich nicht, die lange Liste der PHP-Funktionen zu lesen.
Sie können einsteigen, und binnen weniger Stunden bereits mit dem Schreiben von einfachen Skripten beginnen.
Auch wenn die Entwicklung von PHP auf serverseitige Skripte fokussiert ist, können Sie mit PHP weitaus mehr anstellen.
Lesen Sie mehr im Abschnitt Was kann PHP?
Zurück
Zum Anfang
Nach vorne
Einführung
Nach oben
Was kann PHP?
PHP Handbuch
Zurück
Kapitel 1.
Einleitung
Nach vorne
Alles.
Formulardaten sammeln, dynamische Inhalte für Websites generieren oder Cookies senden und empfangen.
Aber PHP kann noch viel mehr.
Es gibt drei Hauptgebiete, in denen PHP Skripte genutzt werden.
Serverseitige Skripte.
Dies ist traditionelle und auch Hauptfeld von PHP.
Sie benötigen dazu drei Dinge.
Den PHP Parser (CGI oder Server-Modul), einen Webserver und einen Webbrowser.
Sie müssen den Webserver, verbunden mit einer PHP Installation laufen lassen.
Sie können Sich Ausgabe der PHP Programme über den Server mit einem Webbrowser ansehen.
Für weitere Informationen lesen Sie bitte im Abschnitt Installation weiter.
Skripte auf der Kommandozeile.
Sie können auch PHP Skripte schreiben, um sie ohne einen Server oder einen Browser laufen zu lassen.
Hierfür benötigen Sie nur den PHP Parser.
Diese Art der Verwendung ist für die regelmäßig auszuführende Skripte mittels cron (unter *nix oder Linux) oder dem Task Scheduler (unter Windows).
Diese Skripte können auch für einfache Aufgaben zur Verarbeitung von Text verwendet werden.
Weitere Informationen dazu finden Sie im Abschnitt Using PHP from the command line.
Schreiben clientseitiger GUI Applikationen.
PHP ist wahrscheinlich nicht die allerbeste Sprache um GUI-Applikationen zu schreiben, aber wenn Sie PHP sehr gut kennen und einige weiterführende Funktionen in Ihren clientseitigen Applikationen nutzen möchten, können Sie PHP-GTK nutzen, um derartige Programme zu schreiben.
Auf diese Art haben Sie auch die Möglichkeit, Plattformübergreifende Applikationen zu schreiben.
PHP-GTK ist eine Erweiterung von PHP, welche in der Hauptdistribution nicht enthalten ist.
Sollten Sie daran interessiert sein, besuchen Sie die PHP-GTK Website.
Linux, vielen Unix-Varianten (inkl.
HP-UX, Solaris und OpenBSD), Microsoft Windows, Mac OS X, RISC OS, und wahrscheinlich anderen.
Dies umfasst Apache, Microsoft Internet Information Server, Personal Web Server, Netscape und iPlanet Server, Oreilly Website Pro Server, Caudium, Xitami, OmniHTTPd, und viele andere.
Für den Großteil der Server bietet PHP ein eigenes Modul, für die anderen, welche den CGI Standard unterstützen, kann PHP als CGI Prozessor arbeiten.
So haben Sie Freiheit, PHP auf dem Betriebssystem und dem Webserver Ihrer Wahl laufen zu lassen.
Weiters können Sie je nach Vorliebe prozedural, objektorientiert, oder gemischt programmieren.
Auch wenn in der derzeitigen Version von PHP nicht jedes Standard OOP Feature realisiert ist, sind viele Bibliotheken und große Applikationen (inklusive der PEAR Bibliothek) exklusiv unter Verwendung von OOP Code geschrieben worden.
Mit PHP sind Sie nicht auf die Ausgabe von HTML beschränkt.
Seine Fähigkeiten umfassen auch das dynamische Generieren von Bildern, PDF Dateien und Flash Animationen (mittels libswf und Ming).
Sie können auch leicht jede Art von Text, wie XHTML oder irgendeine andere XML Datei ausgeben.
PHP kann diese Dateien automatisch generieren und im Dateisystem speichern, anstatt diese nur auszugeben bzw. auszudrucken, und formt auch serverseitigen Zwischenspeicher Ihrer dynamischen Inhalte.
Vielleicht die größte und bemerkenswerteste Stärke von PHP ist seine Unterstützung für eine breite Masse von Datenbanken.
Eine datenbankgestützte Website zu erstellen ist unglaublich einfach.
Die folgenden Datenbanken werden zur Zeit unterstützt:
Oracle (OCI7 und OCI8)
FilePro (nur Lesezugriff)
PHP unterstützt auch die Kommunikation mit anderen Services, welche Protokolle wie LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (auf Windows) und unzählige andere unterstützen.
Sie können auch einfache Netzwerk Sockets öffnen, und unter Verwendung irgendeines Protokolls kommunizieren.
PHP unterstützt auch WDDX (Web Distributed Data Exchange) zum Austausch komplexer Daten zwischen Programmiersprachen.
PHP bietet auch Unterstützung zur Instantiierung von Java Objekten, und deren transparente Verwendung als PHP Objekte.
Sie können auch unsere CORBA Erweiterung verwenden, um auf entfernte Objekte zuzugreifen.
PHP verfügt über äußerst hilfreiche Textverarbeitungsfunktionen, von den regulären Ausdrücken (POSIX erweitert oder Perl) bis zum Parsen von XML Dokumenten.
Für den Zugriff und das Parsen von XML Dokumenten unterstützen wir die Standards SAX und DOM.
Sie können unsere XSLT Erweiterung verwenden, um XML Dokumente zu transformieren.
Wenn Sie PHP im Bereich des E-Commerce nutzen, werden Sie Funktionen für Cybercash Payment, CyberMUT, VeriSign Payflow Pro und CCVS für Ihre Onlineprogramme zur Zahlungsabwicklung zu schätzen lernen.
Wir haben viele andere interessante Erweiterungen, wie mnoGoSearch für Suchmaschinen, die IRC Gateway Funktionen, viele Komprimierungswerkzeuge (gzip, bz2), Kalenderumrechnung, Übersetzung...
Wie Sie sehen können, reicht diese Seite nicht aus, um alle Möglichkeiten und Vorteile von PHP aufzulisten.
Lesen Sie im Abschnitt Installation weiter, und konsultieren Sie auch die Funktionsreferenz für weitere Erläuterungen der einzelnen hier erwähnten Erweiterungen.
Zurück
Zum Anfang
Nach vorne
Einleitung
Nach oben
Kleines Tutorial
PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Oft braucht man Klassen mit in einer anderen Klasse ähnlichen Variablen und Funktionen.
So ist es eine gute Vorgehensweise, eine in allen Ihren Projekten verwendbare Oberklasse zu definieren, und diese dann den Bedürfnissen Ihrer einzelnen Projekte anzupassen.
Um dies zu erleichtern, können Klassen andere Klassen erweitern.
Die erweiterte bzw. abgeleitete Klasse verfügt über alle Variablen und Funktionen der Basisklasse (dies wird 'Vererbung 'genannt, obwohl niemand gestorben ist), und was Sie in der erweiterten Definition hinzufügen.
Sie können keine existierenden Variablen oder Funktionen 'wegdefinieren'.
Mehrfachvererbung wird nicht unterstützt.
Klassen werden mittels dem Schlüsselwort 'extends' erweitert.
Hier wird die Klasse Named_Cart definiert, die über alle Variablen und Funktionen von Cart, plus der Variable $owner und der Funktion set_owner() verfügt.
Sie können einen bestimmten Einkaufswagen (Named_Cart) auf dem üblichen Weg erstellen, und nun auch den Besitzer (owner) bestimmen und erfragen.
Sie können noch immer die normalen Cart Funktionen an Named_Cart anwenden:
$ncart = new Named_Cart; / / Erstellt einen bestimmten Einkaufwagen $ncart - set_owner("kris"); / / den Besitzer festlegen print $ncart - owner; / / den Besitzer ausgeben $ncart - add_item("10", 1); / / (vererbte Funktionalität von Cart)
Dies wird auch eine "Eltern-Kind" Beziehung genannt.
Sie erstellen eine Klasse ("Eltern"), und erstellen mittels extends eine neue Klasse, die auf der "Eltern"-Klasse basiert: die "Kind "-Klasse.
Sie können auch diese neue Unterklasse verwenden und eine neue, auf dieser Klasse basierenden Klasse erstellen.
Anmerkung:
Bevor Sie Klassen verwenden können, müssen Sie diese definieren.
Wenn Sie wollen, dass Named_Cart die Klasse Cart erweitert, müssen Sie Cart erst definieren.
Yellow_named_cart erstellen wollen, welche auf Named_Cart basiert, müssen Sie zuerst Named_Cart definieren.
Kurz gesagt ist die Reihenfolge, in der die Klassen definiert werden, sehr wichtig.
Zurück
Zum Anfang
Nach vorne
Klassen und Objekte
Nach oben
Konstruktoren
PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Achtung
Die folgende Beschreibung ist nur für PHP 4 gültig.
Manchmal ist es hilfreich, auf Funktionen in Basisklassen bzw. auf Funktionen in Klassen zuzugreifen, die noch keine Instanzen haben.
Operator verwendet.
class A {function example() {echo "I am the original function A::example(). br \n";}} class B extends A {function example() {echo "I am the redefined function B::example(). br \n"; A::example();}} / / Es gibt kein Objekt der Klasse A. / / Dies wird folgendes ausgeben / / I am the original function A::example(). br A::example(); / / Erstellt ein Objekt der Klasse B. $b = new B; / / Dies wird folgendes ausgeben / / I am the redefined function B::example(). br / / I am the original function A::example(). br $b - example();
Nachdem noch kein Objekt der Klasse A existiert, können wir nicht $a - example() oder ähnliches schreiben.
Stattdessen rufen wir example() als 'Klassenfunktion 'auf, d.h. als Funktion der Klasse selbst, und nicht irgendein Objekt dieser Klasse.
Es gibt Klassenfunktionen, aber keine Klassenvariablen.
Tatsächlich gibt es zur Zeit des Aufrufs kein Objekt.
Deshalb darf eine Klassenfunktion keine Objektvariablen benutzen (aber sie kann lokale und globale Variablen verwenden), und sie darf $this ebenfalls nicht benutzen.
In dem obigen Beispiel definiert Klasse B die Funktion example() neu.
Die ursprüngliche Definition in Klasse A ist überschattet und nicht länger verfügbar, außer Sie verweisen mittels des ::-Operators speziell auf example() in Klasse A.
Schreiben Sie A::example(), um dies zu tun (Tatsächlich sollten Sie parent::example() schreiben, wie im nächsten Abschnitt beschrieben).
In diesem Kontext besteht ein Objekt, das Objektvariablen haben kann.
Deshalb können Sie auch $this und Objektvariablen verwenden, wenn sie von innerhalb einer Objektfunktion verwendet werden.
Zurück
Zum Anfang
Nach vorne
Konstruktoren
Nach oben
PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Wahrscheinlich wollen Sie auch Code schreiben, der sich auch auf Variablen und Funktionen in Basisklassen bezieht.
Dies gilt speziell dann, wenn Ihre abgeleitete Klasse eine Verfeinerung oder Spezialisierung von Code in Ihrer Basisklasse ist.
Anstatt in Ihrem Code den wörtlichen Namen der Basisklasse zu verwenden, sollten Sie den speziellen Namen parent verwenden, welcher sich auf den in der Deklaration Ihrer Klasse mittels extends gegebenen Namen Ihrer Basisklasse bezieht.
So vermeiden Sie die mehrfache Verwendung des Namens der Basisklasse.
Sollte sich Ihr Vererbungsbaum während der Implementation ändern, brauchen Sie nur mehr die extends Deklaration Ihrer Klasse zu ändern.
class A {function example() {echo "I am A::example() and provide basic functionality. br \n";}} class B extends A {function example() {echo "I am B::example() and provide additional functionality. br \n"; parent::example();}} $b = new B; / / Dies ruft B::example() auf, welches wiederum A::example() aufruft. $b - example();
Zurück
Zum Anfang
Nach vorne
Nach oben
Objekte serialisieren - Objekte in Sessions
PHP Handbuch
Zurück
Nach vorne
Referenzen in PHP
Zurück
Zum Anfang
Aktuell bleiben
Grundlagen der Syntax
PHP Handbuch
Zurück
Kapitel 6.
Grundlagen der Syntax
Nach vorne
PHP unterstützt 'C', 'C++' und Unix-Shell-artige Kommentare.
Beispiele:
?php echo "Dies ist ein Test"; / / Dies ist ein einzeiliger Kommentar im C++-Stil. / * Dies ist ein mehrzeiliger Kommentar und noch eine Kommentar-Zeile * / echo "Dies ist noch ein Test"; echo "... und ein letzter Test"; # Dies ist ein Shell-artiger Kommentar.?
Die einzeiligen Kommentar-Arten kommentieren sämtlichen Text bis zum Zeilenende oder bis zum Ende des aktuellen PHP-Blocks aus, je nachdem, was zuerst eintritt.
Beispiel. / h1 p Obige Überschrift wird lauten: 'Dies ist ein Beispiel.'.
Man sollte darauf achten, nicht mehrere ´C´-artigen Kommentare ineinander zu setzen, was vorkommen kann, wenn man große Blöcke auskommentiert.
?php / * echo "Dies ist ein Test"; / * Dieser Kommentar wird ein Problem verursachen. * / * /?
Die einzeiligen Kommentar-Arten kommentieren den Text tatsächlich nur bis zum Zeilenende oder bis zum Ende des aktuellen PHP-Blocks aus, je nachdem, was zuerst eintritt.
Das heißt, dass HTML Code nach / /? ausgegeben wird:? steigt aus dem PHP-Modus aus und kehrt in den HTML Modus zurück, ohne dass / / dies beeinflussen könnte.
Zurück
Zum Anfang
Nach vorne
Abgrenzung von Anweisungen
Nach oben
Typen
PHP Handbuch
Zurück
Nach vorne
Während des Parsens einer Datei geht PHP den Text solange einfach durch, bis einer der speziellen Tags gefunden wird, der PHP mitteilt, dass ab nun mit der Interpretation des Textes als PHP Code zu beginnen ist.
Der Parser führt nun den Code solange aus, bis er auf einen schließenden PHP Tag stößt, welcher dem Parser mitteilt, den Text ab hier wieder nur einfach durchzugehen.
Das ist der Mechanismus der es erlaubt, PHP Code in HTML einzubinden: alles außerhalb der PHP Tags wird einfach alleine gelassen, während alles innerhalb dieser Tags als Code geparsed wird.
Es gibt vier Arten von Tags, welche die Böcke mit PHP Code kennzeichnen.
Davon sind nur zwei immer verfügbar (?php...? and script language="php "... / script), die anderen können in der Konfigurationsdatei php.ini Davon sind nur zwei immer verfügbar (?php...? and script language="php"... / script), die anderen können in der Konfigurationsdatei php.ini aktiviert bzw. deaktiviert werden.
Die Tags in der Kurzform bzw. im ASP-Stil mögen zwar praktisch erscheinen, sind jedoch nicht so portabel wie die längeren Versionen.
Wenn Sie weiters beabsichtigen, PHP Code in XML oder XHTML einzubinden, werden Sie die XML-konformen ?php...? verwenden müssen.
Die von PHP unterstützten Tags sind:
Beispiel 6-1.
Möglichkeiten, den HTML-Bereich zu verlassen
1. ?php echo( "In XHTML - oder XML-konformen Dokumenten benutzen Sie diese Syntax\n");?
2.? echo ("Die einfachste Möglichkeit: eine SGML-´processing instruction´\n");? ?= expression?
Dies ist eine Abkürzung für "? echo expression?" 3. script language="php "echo ("manche Editoren(wie FrontPage) mögen keine ´processing instructions´"); / script 4.% echo ("Optional können Sie auch Tags im ASP-Stil verwenden");% %= $variable; # Das ist ein Abkürzung fuer"% echo... "%
Die erste Methode (?php...?) wird bevorzugt, da sie auch die Verwendung von PHP in XML-konformen Code, wie XHTML, erlaubt.
Die zweite Methode ist nicht immer verfügbar.
Die Kurzform der Tags ist nur möglich, wenn diese zuvor aktiviert wurde.
Dies kann mittels der Funktion short_tags() (nur PHP 3), dem Setzen der Konfigurationsoption short_open_tag Dies kann mittels der Funktion short_tags() (nur PHP 3), dem Setzen der Konfigurationsoption short_open_tag in der PHP Konfigurationsdatei, oder durch das Kompilieren von PHP mit der Option --enable-short-tags.
Auch wenn dise Methode standardmäßig in der php.ini.dist aktiviert ist, wird die Verwendung dieser Kurzform nicht empfohlen.
Die vierte Methode ist nur verfügbar, wenn die Konfigurationsoption asp_tags aktiviert ist.
Anmerkung:
Die Unterstützung der Tags im ASP-Stil wurde in Version 3.0.4. hinzugefügt.
Anmerkung:
Die Verwendung der ´short tags´ sollten Sie vermeiden, wenn Sie Applikationen oder Bibliotheken entwickeln, die verteilt oder auf PHP-Servern eingesetzt werden soll, die nicht unter Ihrer Kontrolle stehen, da die ´short tags´ auf dem einzusetzenden Server nicht unterstützt werden könnten.
Stellen Sie also sicher, dass für portablen, weiterverteilbaren Code keine ´short tags´ verwendet werden.
Der schließende Tag für den PHP-Block schließt eine sofort folgende Zeilenschaltung mit ein, falls diese vorhanden ist.
Außerdem beinhaltet der schließende Tag ein implizites Semikolon; Sie müssen also die letzte Zeile eines PHP-Blocks nicht mit einem Semikolon beenden.
PHP ermöglicht auch die Verwendung folgender Strukturen:
Beispiel 6-2.
Erweitertes Verlassen
?php if ($expression) {? strong Das ist richtig. / strong ?php} else {? strong Das ist falsch. / strong ?php}?
Zurück
Zum Anfang
Nach vorne
Sprachreferenz
Nach oben
Abgrenzung von Anweisungen
PHP Handbuch
Zurück
Kapitel 6.
Grundlagen der Syntax
Nach vorne
Einzelne Anweisungen werden genauso voneinander abgetrennt wie in C oder Perl - jedes Statement wird mit einem Semikolon beendet.
Auch der schließende Tag (?) bedeutet das Ende eines Statements, deshalb sind die folgenden Beispiele gleichwertig:
?php echo "Dies ist ein Test";? ?php php echo "Dies ist ein Test"?
Zurück
Zum Anfang
Nach vorne
Grundlagen der Syntax
Nach oben
Kommentare
PHP Handbuch
Zurück
Nach vorne
Eine Konstante ist ein Bezeichner (Name) für eine simple Variable.
Wie der Name schon ausdrückt, kann sich der Wert einer Konstanten zur Laufzeit eines Skripts nicht ändern (eine Ausnahme bilden die Magischen Konstanten, die aber tatsächlich keine Konstanten sind.) Eine Konstante unterscheidet zwischen Groß - und KLeinschreinbung (case-sensitive).
Nach gängiger Konvention werden Konstanten immer in Großbuchstaben geschrieben.
Der Name einer Konstanten folgt den gleichen Regeln wie alle anderen Bezeichner in PHP.
Ein gültiger Name beginnt mit einem Buchstaben oder einem Unterstrich, gefolgt von beliebig vielen Buchstaben, Nummern oder Understrichen.
Als regulärer Ausdruck geschrieben: [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff ]*
Anmerkung:
Für unsere Zwecke ist ein Buchstabe a-z, A-Z und die ASCII-Zeichen von 127 bis 255 (0x7f-0xff).
Der Gültigkeitsbereich einer Konstanten ist global - - Sie können unabhängig vom Gültigkeitsbereich überall auf eine Konstante zugreifen.
Eine Konstante können Sie über die Funktion define() Eine Konstante können Sie über die Funktion define() definieren.
Einmal definiert, kann eine Konstane weder verändert noch gelöscht werden.
Konstanten können nur scalare Daten (boolean, integer, float und string) enthalten.
Den Wert einer Konstanten erhalten Sie ganz einfach durch die Angabe ihres Namens.
Einer Konstanten sollten Sie nicht ,wie bei Variablen, ein $voranstellen.
Ebenso können Sie die Funktion constant() benutzen um den Wert einer Konstanten auszulesen, wenn Sie den Namen der Konstanten dynamisch erhalten wollen.
Benutzen Sie get_defined_constants() um eine Liste aller definierten Konstanten zu erhalten.
Anmerkung:
Konstanten und (globale) Variablen befinden sich in unterschiedlichen Namensräumen.
Das hat zum Beispiel zur Folge, dass TRUE und $TRUE grundsätzlich unterschiedlich sind.
Falls Sie eine undefinierte Konstante verwenden, nimmt PHP an, dass Sie den Namen der Konstanten selber meinen.
Wenn das passiert wird eine Notice ausgegeben.
Benutzen Sie die Funktion defined() um herauszufinden, ob eine Konstante definiert ist.
Das hier sind die Unterschiede zwischen Konstanten und Variablen:
Konstanten haben kein Dollarzeichen ($) vorangestellt;
Konstanten können nur über die Funktion define() definiert werden, nicht durch einfache Zuweisung;
Konstanten können überall definiert werden und auf Ihren Wert können Sie ohne Rücksicht auf Namensraumregeln von Variablen zugreifen;
Sobald Konstanten definiert sind, können sie nicht neu definiert oder gelöscht werden; und
Konstanten können nur skalare Werte haben.
Beispiel 9-1.
Definiton von Konstanten
?php define( "CONSTANT", "Hallo Welt ."); echo CONSTANT; / / Ausgabe: "Hallo Welt. "echo Constant; / / Ausgabe: "Constant" und eine Notice.?
Zurück
Zum Anfang
Nach vorne
Variablen ausserhalb von PHP
Nach oben
Vordefinierte Konstanten
PHP Handbuch
Zurück
Kapitel 9.
Konstanten
Nach vorne
PHP stellt jedem Skript eine Reihe von vordefinierten Konstanten zur Verfügung.
Viele dieser Konstanten werden jedoch von verschiedenen Erweiterungen definiert, die nur zur Verfügung stehen, wenn diese Erweiterungen selbst zur Verfügung stehen, entweder über dynamisches Laden zur Laufzeit oder sie sind einkompiliert.
Es gibt vier magische Konstanten, die sich abhängig davon, wo sie eingesetzt werden, einen unterschiedlichen Wert haben.
Zum Beispiel hängt der Wert der Konstanten __LINE__ davon ab, in welcher Zeile ihres Skripts Sie diese Konstante verwenden.
Diese besonderen Konstanten sind unabhängig von Groß - / Kleinschreibung und sind folgende:
Tabelle 9-1.
Einige "magische" PHP "Konstanten "
Beschreibung
Die aktuelle Zeilennummer einer Datei.
Der vollständige Pfad - und Dateiname einer Datei.
Der Name einer Funktion.
Steht seit PHP 4.3.0 zur Verfügung.
Der Name einer Klasse.
Steht seit PHP 4.3.0 zur Verfügung.
Eine Liste vordefinierter Konstanten finden Sie im Abschnitt Vordefinierte Konstanten.
Zurück
Zum Anfang
Nach vorne
Konstanten
Nach oben
Ausdrücke
PHP Handbuch
Zurück
Nach vorne
Ausdrücke (Expressions) sind die wichtigsten Bausteine von PHP.
In PHP ist fast alles, was geschrieben wird, ein Ausdruck.
Die einfachste, aber auch zutreffenste Definition für einen Ausdruck ist "alles, was einen Wert hat".
Die grundlegendste Formen von Ausdrücken sind Konstanten und Variablen.
Anders ausgedrückt: ´5´ ist ein Ausdruck mit dem Wert 5 (in diesem Fall ist ´5´ eine Integer-Konstante).
Nach dieser Zuweisung würde man erwarten, dass der Wert von $a nun ebenfalls 5 ist, wenn man also $b = $a schreibt, sollte dasselbe dabei herauskommen, als hätte man $b = 5 geschrieben.
Anders ausgedrückt: $a wäre ebenfalls ein Ausdruck mit dem Wert 5.
Wenn alles richtig funktioniert, wird genau das passieren.
Etwas kompliziertere Beispiele für Ausdrücke sind Funktionen:
Angenommen, Sie sind mit dem Konzept von Funktionen vertraut (wenn Sie es nicht sind, lesen Sie das Kapitel über Funktionen), dann würden Sie annehmen, dass die Eingabe von $c = foo() grundsätzlich daselbe bedeutet, als würde man schreiben $c = 5 ,und genau das trifft zu.
Funktionen sind Ausdrücke mit dem Wert ihres Rückgabewertes.
Da foo() den Wert 5 zurückgibt, ist der Wert des Ausdruckes ´foo( )´ 5.
Normalerweise geben Funktionen nicht einfach einen statischen Wert zurück, sondern berechnen irgendetwas.
Natürlich müssen Werte in PHP keine Integer-Zahlen sein, und oft sind sie es auch nicht.
PHP unterstützt drei skalare Datentypen: integer values (Integer-Zahlen),floating point values (Fließkommazahlen) und string values (Zeichenketten). (Skalare sind Datentypen, die man nicht in kleinere Stücke ´brechen´ kann, im Gegensatz zu Arrays).
Arrays und Objekte.
Jeder dieser Datentypen kann Variablen zugewiesen und von Funktionen zurückgegeben werden.
Bis hierhin sollten Benutzer von PHP / FI 2 keine Veränderung bemerkt haben.
PHP fasst den Begriff ´Ausdruck´ aber noch viel weiter, wie es auch andere Programmiersprachen tun.
PHP ist in dem Sinne eine ausdrucksoriente Sprache, dass fast alles ein Ausdruck ist.
Zurück zu dem Beispiel, mit dem wir uns schon beschäftigt haben: ´$a = 5´.
Der Wert der Integer-Konstanten ´5´ und der Wert von $a, der auf 5 geändert wird.
In Wirklichkeit ist aber noch ein zusätzlicher Wert enthalten, nämlich der Wert der Zuweisung selbst.
Die Zuweisung selbst enthält den zugewiesenen Wert, in diesem Fall 5.
In der Praxis bedeutet dies, dass ´$a = 5´, egal was es tut, immer einen Ausdruck mit dem Wert 5 darstellt.
Folglich ist ´$b = ($a = 5)´ gleichbedeutend mit ´$a = 5; $b = 5;´ (ein Semikolon markiert das Ende einer Anweisung).
Da Wertzuweisungen von rechts nach links geparst werden, kann man auch ´$b = $a = 5´ schreiben.
Ein anderes gutes Beispiel für die Ausdrucksorientierung von PHP sind Prä - und Post-Inkrement sowie die entsprechenden Dekremente.
Benutzer von PHP / FI 2 und vielen anderen Sprachen sind vermutlich mit den Notationen ´variable++´ und ´variable--´ vertraut.
Dies sind Inkrement - und Dekrement-Operatoren.
IN PHP / FI 2 hat das Statement ´$a++´ keinen Wert (es ist kein Ausdruck) und daher kann man es nicht als Wert zuweisen oder in irgendeiner Weise benutzen.
PHP erweitert die Eigenschaften von Dekrement und Inkrement, indem es die beiden ebenfalls zu Ausdrücken macht.
In PHP gibt es, wie in C, zwei Arten von Inkrementen - Prä-Inkrement und Post-Inkrement.
Grundsätzlich erhöhen sowohl Prä - als auch Post-Inkrement den Wert der Variable, und der Effekt auf die Variable ist derselbe.
Der Unterschied ist der Wert des Inkrement-Ausdruckes.
Das Prä-Inkrement, das ´++$variable´ geschrieben wird, enthält als Wert den Wert der erhöhten Variabe (PHP erhöht den Wert der Variable, bevor es ihren Wert ausliest, daher der Name ´PRÄ-Inkrement´).
Das Post-Inkrement, das ´$variable++´ geschrieben wird, enthält dagegen den ursprünglichen Wert der Variablen vor der Erhöhung (PHP erhöht den Wert der Variablen, nachdem es ihren Wert ausgelesen hat, daher der Name ´POST-Inkrement´).
Ein sehr gebräuchlicher Typ von Ausdrücken sind Vergleichsausdrücke.
Diese Ausdrücke geben entweder 0 (=FALSCH) oder 1 (=WAHR) zurück.
PHP unterstützt (größer), = (größer oder gleich), == (gleich), != (ungleich), (kleiner), und = (kleiner oder gleich).
B. in if -Anweisungen, verwendet.
Im letzten Beispiel für Ausdrücke befassen wir uns mit kombinierten Zuweisungs - und Operator-Ausdrücken.
Wir haben schon gezeigt, wie man den Wert von $a um 1 erhöht, nämlich indem man einfach ´$a++´ oder ´++$a´ schreibt.
Aber was tut man, wenn man den Wert um mehr als eins erhöhen will, z.
Man könnte mehrer Male ´$a++´ schreiben, aber das ist offensichtlich weder effizient noch sehr komfortabel.
Viel üblicher ist es, einfach ´$a = $a + 3´ zu schreiben. ´$a + 3´ gibt den Wert von $a plus 3 zurück, dieser wird wieder $a zugewiesen, was dazu führt, dass $a nun um 3 erhöht wurde.
B. in C - kann man dies aber noch kürzer schreiben, was mit der Zeit klarer wird und auch einfacher zu verstehen ist.
Um 3 zu dem aktuellen Wert hinzuzufügen, schreibt man ´$a += 3´.
Das bedeutet exakt: "Nimm´ den Wert von $a, addiere 3 hinzu und weise $a den entstandenen Wert zu".
Zusätzlich dazu, dass diese Schreibweise kürzer und klarer ist, resultiert sie auch in einer schnelleren Ausführung.
Der Wert von ´$a += 3´ ist, wie der Wert einer regulären Zuweisung, der zugewiesene Wert.
Es ist zu beachten, dass dieser Wert NICHT 3, sondern dem kombinierten Wert von $a plus 3 entspricht (Das ist der Wert, der $a zugewiesen wird).
B. ´$a -= 5´ (vermindert den Wert von $a um 5) oder ´$a *= 7´ (multipliziert den Wert von $a mit 7 und weist das Ergebnis $a zu), usw.
Es gibt einen weiteren Ausdruck, der Ihnen vielleicht seltsam vorkommt, wenn Sie ihn bisher noch in keiner Programmiersprache kennengelernt haben, den dreifach konditionalen Operator:
$eins? $zwei: $drei
Das folgende Beispiel sollte das Verständnis von Prä - und Post-Inkrement und von Ausdrücken im allgemeinen erleichtern:
function verdoppeln( $i) {return $i*2;} $b = $a = 5; / * Weise den Variablen $a und $b beiden den Wert 5 zu * / $c = $a++; / * Post-Inkrement, der urspruengliche Wert von $a (also 5) wird $c zugewiesen. * / $e = $d = ++$b; / * Prae-Inkrement, der erhöhte Wert von $b (= 6) wird $d und $e zugewiesen. * / / * An diesem Punkt sind $d und $e beide gleich 6 * / $f = verdoppeln($d++); / * Weise $f den doppelten Wert von $d vor der Erhöhung um eins zu, 2*6 = 12 * / $g = double(++$e); / * Weise $g den doppelten Wert von $e nach function verdoppeln($i) {return $i*2;} $b = $a = 5; / * Weise den Variablen $a und $b beiden den Wert 5 zu * / $c = $a++; / * Post-Inkrement, der urspruengliche Wert von $a (also 5) wird $c zugewiesen. * / $e = $d = ++$b; / * Prae-Inkrement, der erhöhte Wert von $b (= 6) wird $d und $e zugewiesen. * / / * An diesem Punkt sind $d und $e beide gleich 6 * / $f = verdoppeln($d++); / * Weise $f den doppelten Wert von $d vor der Erhöhung um eins zu, 2*6 = 12 * / $g = double(++$e); / * Weise $g den doppelten Wert von $e nach der Erhoehung zu, 2*7 = 14 to $g * / $h = $g += 10; / * Zuerst wie $g um 10 erhöht und hat schliesslich den Wert 24.
Am Anfang dieses Kapitels hatten wir gesagt, wir würden die verschiedenen Arten von Anweisungen beschreiben und, wie versprochen, Ausdrücke können Anweisungen sein.
Trotzdem ist nicht jeder Ausdruck eine Anweisung.
In diesem Fall hat eine Anweisung die Form ´Ausdr´ ´; ´, d. h. ein Ausdruck gefolgt von einem Semikolon.
In ´$b=$a=5; ´ ist $a=5 ein gültiger Ausdruck, aber für sich allein keine Anweisung. ´$b=$a=5 ;´ ist jedoch eine gültige Anweisung.
Ein letzter Punkt, der noch zu erwähnen ist, ist der ´wahr´-Wert von Ausdrücken.
Der Wahrheitswert eines Ausdrucks in in PHP wird ähnlich bestimmt wie in Perl.
Es ist zu beachten, dass negative Werte nicht NULL Es ist zu beachten, dass negative Werte nicht NULL sind und deshalb als WAHR aufgefasst werden!
Eine leere Zeichenkette und die Zeichenkette "0" sind FALSCH; alle anderen Zeichenketten sind WAHR.
Nicht-skalare Datentypen (Arrays und Objekte) werden als FALSCH betrachtet, wenn sie keine Elemente enthalten, anderfalls geben sie WAHR zurück.
PHP stellt eine vollständige und mächtige Implementat von Ausdrücken bereit und, deren vollständige Dokumentation den Rahmen dieses Manuals sprengen würde.
Die obigen Beispiele sollten Ihnen einen guten Eindruck darüber verschaffen, was Ausdrücke sind und wie man nützliche Ausdrücke konstruieren kann.
Im Rest dieses Manuals werden wir ausdr schreiben, um ausdrücken, dass an dieser Stelle jeder gültige PHP-Ausdruck stehen kann.
Zurück
Zum Anfang
Nach vorne
Vordefinierte Konstanten
Nach oben
Operatoren
PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Achtung
In PHP 3 und PHP 4 verhalten sich die Konstruktoren unterschiedlich.
Die PHP 4 Semantik wird dringend empfohlen.
Konstruktoren sind Funktionen innerhalb einer Klasse, die automatisch aufgerufen wird, sobald Sie mittels new eine neue Instanz erstellen.
In PHP 3 wird eine Funktion zum Konstruktor, wenn sie den gleichen Namen wie die Klasse hat.
Der Unterschied ist subtil, aber entscheidend (siehe unten).
/ / Funktioniert sowohl in PHP 3, als auch in PHP 4. class Auto_Cart extends Cart {function Auto_Cart() {$this - add_item ("10", 1);}}
Die Klasse Auto_Cart entspricht der Klasse Cart und hat einen Konstruktor, der Cart bereits mit einem Artikel der Nummer "10" initialisiert, sobald ein neuer Auto_Cart mittels "new "erstellt wird.
Konstruktoren können Argumente übernehmen, die optional sein können, was sie sehr praktisch macht.
Um eine Klasse auch ohne Parameter verwenden zu können, sollten alle Parameter für Konstruktoren optional sein, indem sie mit Standardwerten ausgestattet werden.
/ / Funktioniert sowohl in PHP 3, als auch in PHP 4. class Constructor_Cart extends Cart {function Constructor_Cart($item = "10", $num = 1) {$this - add_item ($item, $num);}} / / Kaufe das gleiche alte Zeug ein. $default_cart = new Constructor_Cart; / / Kaufe etwas anderes... $different_cart = new Constructor_Cart("20", 17);
Sie können auch den Operator @ verwenden, um Fehlermeldungen innerhalb des Konstruktors zu unterdrücken, z.B. @new.
Achtung
In PHP 3 haben abgeleitete Klassen und Konstruktoren ein paar Einschränkungen.
Sie sollten das folgende Beispiel sorgfältig lesen, um diese Einschränkungen zu verstehen.
class A {function A() {echo "I am the constructor of A. br \n";}} class B extends A {function C() {echo "I am a regular function. br \n";}} / / In PHP 3 wurde kein Konstruktor aufgerufen. $b = new B;
In PHP 3 wird bei dem obigen Beispiel kein Konstruktor aufgerufen.
Die Regel in PHP 3 besagt: 'Ein Konstruktor ist eine Funktion mit dem selben Namen wie die Klasse'.
Der Name der Klasse ist B, und nachdem in Klasse B keine Funktion namens B() existiert, passiert nichts.
Dies ist in PHP 4 mit der Einführung einer anderen Regel behoben:
Wenn eine Klasse keinen Konstruktor hat, wird der Konstruktor der Basisklasse aufgerufen, so dieser existiert.
Das obige Beispiel hätte in PHP 4 also 'I am the constructor of A. br' ausgegeben.
class A {function A() {echo "I am the constructor of A. br \n";} function B() {echo "I am a regular function named B in class A. br \n"; echo "I am not a constructor in A. br \n";}} class B extends A {function C() {echo "I am a regular function. br \n";}} / / Dies ruft B() als Konstruktor auf. $b = new B;
In PHP 3 wird die Funktion B() in der Klasse A plötzlich zum Konstruktor in Klasse B, auch wenn dies nie beabsichtigt war.
Die Regel in PHP 3 lautet: 'Ein Konstruktor ist eine Funktion mit dem gleichen Namen wie die Klasse'.
PHP 3 kümmert sich nicht darum, ob die Funktion in Klasse B definiert, oder ob sie nur vererbt wurde.
Dies ist in PHP 4 mit einer modifizierten Regel behoben: 'Ein Konstruktor ist eine Funktion mit dem selben Namen wie die Klasse, in der sie definiert wurde'.
So hätte die Klasse B in dem obigen Beispiel keinen eigenen Konstruktor, und würde der Konstruktor der Basisklasse aufgerufen, welcher 'I am the constructor of A. br' ausgeben würde.
Achtung
Weder PHP 3, noch PHP 4 rufen vom Konstruktor der abgeleiteten Klasse aus automatisch Konstruktoren der Basisklasse auf.
Wenn angebracht, ist der Aufruf von Konstruktoren aufwärts Ihre Aufgabe.
Anmerkung:
In PHP 3 und PHP 4 gibt es keine Destruktoren.
Stattdessen können Sie register_shutdown_function() verwenden, um die meisten Effekte von Destruktoren zu simulieren.
Destruktoren sind Funktionen die automatisch aufgerufen werden, wenn ein Objekt entweder mittels unset(), oder durch Verlassen des Gültigkeitsbereiches zerstört wird.
Es gibt in PHP keine Destruktoren.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Eine Klasse ist eine Sammlung von Variablen und Funktionen, die mit diesen Variablen arbeiten.
Eine Klasse wird folgendermaßen definiert:
?php class Cart {var $items; / / Artikel in unserem Einkaufswagen / / Füge dem Einkaufswagen $num Artikel der Sorte $artnr zu function add_item ($artnr, $num) {$this - items[$artnr] += $num;} / / Nimm $num Artikel von $artnr aus dem Einkaufswagen function remove_item ($artnr, $num) {if ($this - items[$artnr] $num) {$this - items[$artnr] -= $num; return true;} else {return false;}}}?
Sie besteht aus einem assoziativen Array von Produkten im Einkaufswagen und zwei Funktionen zum Hinzufügen und Entfernen von Artikeln.
Achtung
Die folgenden warnenden Bemerkungen gelten für PHP 4.
Der Name stdClass ist reserviert, da er intern von Zend benutzt wird.
Sie können in PHP keine Klasse mit dem Namen stdClass haben.
Die Funktionsnamen __sleep und __wakeup Die Funktionsnamen __sleep und __wakeup sind in PHP Klassen "magisch".
Sie können in Ihren Klassen keine Funktionen mit diesen Namen haben, außer Sie wollen sie mit dieser "magischen" Funktionalität assoziieren.
Mehr Informationen dazu finden Sie weiter unten.
Sämtliche mit __ beginnende Funktionsnamen sind PHP als "magisch" vorbehalten.
Es wird empfohlen, in PHP keine Funktionsnamen mit __ zu verwenden, außer Sie möchten dokumentierte "magische" Funktionalität.
Anmerkung:
In PHP 4 sind nur konstante Initialisierungen für var In PHP 4 sind nur konstante Initialisierungen für var Variablen erlaubt.
Um Variablen mit nicht konstanten Werten zu initialisieren, benötigen Sie eine Funktion zur Initialisierung, welche beim Erstellen eines Objektes automatisch von der Klasse aufgerufen wird.
Eine solche Funktion wird Konstruktor genannt (siehe unten).
?php / * Keine wird in PHP 4 funktionieren * / class Cart {var $todays_date = date("Y-m-d"); var $name = $firstname; var $owner = 'Fred '. 'Jones'; var $items = array("VCR", "TV");} / * So sollte es gemacht werden * / class Cart {var $todays_date; var $name; var $owner; var $items; function Cart() {$this - todays_date = date("Y-m-d"); $this - name = $GLOBALS['firstname']; / * etc... * /}}?
Klassen sind Typen, das heißt sie sind die Blaupausen für reale Variablen.
Um sie zu nutzen, muss zunächst eine Variable mit dem Operator new angelegt werden.
Dies erstellt die Objekte $cart und $another_cart aus der Klasse Cart.
Dann wird die Funktion add_item() des $cart Objektes aufgerufen, um $cart einen Artikel mit der Artikelnummer 10 hinzuzufügen.
3 Artikel mit der Artikelnummer 0815 werden $another_cart hinzugefügt.
Sowohl $cart als auch $another_cart haben die Funktionen add_item(), remove_item() und die Variable items.
Dies sind verschiedene Funktionen und Variablen.
Sie können sich Objekte ähnlich den Verzeichnissen in einem Dateisystem vorstellen.
Sie können in einem Dateisystem zwei verschiedene Dateien README.TXT haben, solange sie sich in verschiedenen Verzeichnissen befinden.
So wie Sie in Verzeichnissen den vollen Pfadnamen eingeben müssen, um jede Datei von dem obersten Verzeichnis aus zu erreichen, müssen Sie auch den vollen Namen der aufzurufenden Funktion angeben:
Das heißt für PHP, dass das Hauptverzeichnis der globale Namensbereich, und der Separator des Pfadnamens - wäre.
Deshalb benennen die Namen $cart - items und $another_cart - items auch zwei verschiedene Variablen.
Beachten Sie, dass die Variable $cart - items, und nicht $cart - $items genannt wird, da ein Variablenname in PHP nur ein einziges Dollarzeichen hat.
/ / korrekt, einfaches $$cart - items = array( "10 "= 1); / / falsch, denn $cart - $items wird zu $cart -" "$cart - $items = array("10" = 1); / / richtig aber fraglich, ob dies erwünscht war: / / $cart - $myvar wird zu $cart - items $myvar = 'items'; $cart - $myvar = array("10 "= 1);
Als die Klasse Cart geschrieben wurde war nicht bekannt, dass das Objekt später $cart oder $another_cart genannt wird.
Deshalb können Sie innerhalb der Klasse Cart selbst auch nicht $cart - items schreiben.
Um nun die eigenen Funktionen und Variablen innerhalb einer Klasse anzusprechen, können Sie die Pseudo-Variable $this verwenden, welche Sie auch als 'meine eigene' oder 'aktuelles Objekt 'verstehen können.
Deshalb kann '$this - items[$artnr] += $num' auch als 'addiere $num zu $artnr in meinem eigenen Array items', oder 'addiere $num zu $artnr im Array items innerhalb des aktuellen Objektes 'lesen.
Anmerkung:
Es gibt ein paar angenehme Funktionen, um mit Klassen und Objekten umzugehen.
Mehr darüber erfahren Sie im Kapitel Klassen - und Objekt-Funktionen.
Zurück
Zum Anfang
Nach vorne
Variablenfunktionen
Nach oben
PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
serialize() prüft, ob Ihre Klasse eine Funktion mit dem magischen Namen __sleep enthält.
Wenn dem so ist, wird diese Funktion vor einer Serialisierung ausgeführt.
Sie kann das Objekt aufräumen und soll ein Array mit den Namen aller Variablen des zu serialisierenden Objektes zurückgeben.
Die beabsichtigte Verwendung von __sleep ist, eventuelle Datenbankverbindungen des Objektes zu schließen, noch offene Daten zu committen, oder ähnliche Säuberungsaktionen durchzuführen.
Weiters ist diese Funktion hilfreich, wenn Sie sehr große Objekte haben, die nicht komplett gespeichert werden müssen.
Umgekehrt prüft unserialize() die Existenz einer Funktion mit dem magischen Namen __wakeup.
Ist diese vorhanden, kann sie Ressourcen des Objektes rekonstruieren.
Die vorgesehene Verwendung von __wakeup ist die Wiederherstellung von Datenbankverbindungen, welche während der Serialisierung verloren gegangen sein könnten, sowie andere Neuinitialisierungen.
Zurück
Zum Anfang
Nach vorne
Objekte serialisieren - Objekte in Sessions
Nach oben
Referenzen innherhalb des Konstruktors
PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Referenzen innerhalb des Konstruktors können zu verwirrenden Resultaten führen.
Dieser Abschnitt hilft, Probleme zu vermeiden.
class Foo {function Foo($name) {/ / eine Referenz innerhalb des globalen Arrays $globalref erstellen global $globalref; $globalref[] = $this; / / setze den Namen auf den übergebenen Wert $this - setName($name); / / und gib 'ihn aus $this - echoName();} function echoName() {echo "br ",$this - name;} function setName($name) {$this - name = $name;}}
Prüfen wir, ob zwischen $bar1, die mittels dem Operator zum Kopieren = erstellt wurde, und $bar2, die mittels dem Referenzoperator = erstellt wurde, besteht...
$bar1 = new Foo( 'set in constructor'); $bar1 - echoName(); $globalref[0] - echoName(); / * Ausgabe: set in constructor set in constructor set in constructor * / $bar2 = new Foo('set in constructor'); $bar2 - echoName(); $globalref[1] - echoName(); / * Ausgabe: set in constructor set in constructor set in constructor * /
Scheinbar besteht kein Unterschied, aber tatsächlich existiert ein signifikanter: $bar1 und $globalref[ 0] sind NICHT referenziert, d.h. sie sind NICHT die selbe Variable.
Das kommt daher, dass "new" nicht automatisch eine Referenz, sondern eine Kopie zurückgibt.
Anmerkung:
Das zurückgeben von Kopien anstatt von Referenzen stellt keinen Performanceverlust dar (da PHP 4 und höher Reference Counting verwendet).
In diesem Fall wäre es besser, Referenzen zu verwenden, um sie alle gleichzeitig zu ändern).
Was erwarten Sie? / / ...dass sowohl $bar1, als auch $globalref[ 0] ihre Namen ändern... $bar1 - setName('set from outside'); / / wie bereits zuvor erwähnt, ist dies nicht der Fall $bar1 - echoName(); $globalref[0] - echoName(); / * Ausgabe: set from outside set in constructor * / / / lassen Sie uns den Unterschied zwischen $bar2 and $globalref[1] ansehen $bar2 - setName('set from outside'); / / glücklicherweise sind sie nicht nur nicht gleich, sondern auch die selbe / / Variable; demnach sind $bar2 - name und $globalref[1] - name ebenfalls gleich $bar2 - echoName(); $globalref[1] - echoName(); / * Ausgabe: set from outside set from outside * /
Ein anderes, letztes Beispiel zum Verständnis:
class A {function A($i) {$this - value = $i; / / finden Sie heraus, warum wir hier keine Referenz benötigen $this - b = new B($this);} function createRef() {$this - c = new B($this);} function echoValue() {echo "br" ,"class ",get_class($this) ,': ',$this - value;}} class B {function B ($a) {$this - a = $a;} function echoValue() {echo "br" ,"class ",get_class($this) ,': ',$this - a - value;}} / / überlegen Sie, warum hier die Verwendung einer einfachen Kopie in der / / mit * markierten Zeile zu einem unerwünschten Ergebnis führen würde $a = new A(10); $a - createRef(); $a - echoValue(); $a - b - echoValue(); $a - c - echoValue(); $a - value = 11; $a - echoValue(); $a - b - echoValue(); / / * $a - c - echoValue(); / * Ausgabe: class A:
Zurück
Zum Anfang
Nach vorne
Die "magischen" Funktionen __sleep und __wakeup
Nach oben
Referenzen in PHP
PHP Handbuch
Zurück
Kapitel 14.
Klassen und Objekte
Nach vorne
Anmerkung:
In PHP 3 verlieren Objekte während des Prozesses der Serialisierung und Deserialisierung ihre Assoziation zur Klasse.
Die resultierende Variable ist vom Typ Objekt, hat aber keine Klasse und keine Methoden, weshalb sie ziemlich unbrauchbar ist (Sie wurde wie ein Array, jedoch mit einer ziemlich komischen Syntax).
Achtung
Die folgende Information ist nur für PHP 4 gültig.
serialize() gibt eine Zeichenkette zurück, die eine Byte-Strom-Repräsentation irgendeines in PHP speicherbaren Wertes enthält. unserialize() kann diese Zeichenkette verwenden, um die ursprünglichen Variablenwerte wieder herzustellen.
Die Verwendung von serialize zum Speichern eines Objektes wird alle Variablen innerhalb eines Objektes speichern.
Die Funktionen in einem Objekt werden nicht gespeichert, sondern nur der Name der Klasse.
Um ein Objekt wieder deserialisieren zu können, muss die Klasse dieses Objektes definiert werden.
Das heißt, wenn Sie ein Objekt $a der Klasse A in page1.php haben und dieses serialisieren, erhalten Sie eine Zeichenkette, die sich auf die Klasse A bezieht, und alle Werte der in $a enthaltenen Variablen enthält.
Wenn Sie $a der Klasse A in page2.php mittels unserialize wiederherstellen möchten, muss die Definition von Klasse A in page2.php vorhanden sein.
Dies kann zum Beispiel durch das Speichern der Klassendefiniton von Klasse A in einer Include-Datei, und das Einbinden dieser Datei sowohl in page1.php und page2.php realisiert werden.
classa.inc: class A {var $one = 1; function show_one() {echo $this - one;}} page1.php: include("classa.inc"); $a = new A; $s = serialize($a); / / speichere $s irgendwo, wo sie page2.php finden kann. $fp = fopen("store", "w"); fputs($fp, $s); fclose($fp); page2.php: / / Dies ist für das korrekte Arbeiten von unserialize nötig. include("classa.inc"); $s = implode("", @file("store")); $a = unserialize($s); / / Nun verwenden wir die Funktion show_one() des Objektes $a. $a - show_one();
Wenn Sie mit Sessions arbeiten und session_register() verwenden, um Objekte zu registrieren, so werden diese Objekte am Ende der PHP Seite serialisiert, und in jeder folgenden Seite automatisch via unserialize wiederhergestellt.
Das heißt, dass diese Objekte auf jeder Ihrer Seite auftauchen können, sobald sie Teil Ihrer Session sind.
Es wird ausdrücklich empfohlen, dass Sie die Klassendefinitionen der so registrierten Objekte in allen Ihren Seiten einbinden, auch wenn Sie diese Klassen eigentlich nicht auf allen Ihren Seiten benötigen.
Das bedeutet, dass es ziemlich nutzlos wird.
Würde also $a in dem obigen Beispiel mittels session_register( "a") ein Teil einer Session, sollten Sie die Datei classa.inc nicht nur in page1.php und page2.php, sondern in all Ihre Seiten einbinden.
Zurück
Zum Anfang
Nach vorne
Nach oben
Die "magischen" Funktionen __sleep und __wakeup
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Erinnern Sie sich noch an die Grundrechenarten aus der Schule?
Die arithmetischen Operatoren funktionieren genauso:
Tabelle 11-2.
Arithmetische Operatoren
Beispiel
Ergebnis
Summe von $a und $b.
Subtraktion
Differenz von $a und $b.
Multiplikation
Produkt von $a und $b.
Quotient von $a und $b.
Rest von $a geteilt durch $b.
Der Divisions-Operator ("/") gibt immer eine Fließkommazahl zurück, sogar wenn die zwei Operanden Ganzzahlen sind (oder Zeichenketten, die nach Ganzzahlen umgewandelt wurden).
Zurück
Zum Anfang
Nach vorne
Operatoren
Nach oben
Zuweisungsoperatoren
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Der einzige Array Operator in PHP ist der + Operator.
Das rechsstehende Array wird an das linksstehende Array angehängt, wobei doppelte Schlüssel NICHT überschrieben werden.
$a = array( "a "= "Apfel", "b" = "Banane"); $b = array("a "= "pear", "b" = "Erdbeere", "c "= "Kirsche"); $c = $a + $b; var_dump($c);
array( 3) {["a"]= string(5) "Apfel "["b"]= string(6) "Banane" ["c"]= string(7) "Kirsche "}
Zurück
Zum Anfang
Nach vorne
Zeichenketten-Operatoren
Nach oben
Kontroll-Strukturen
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Der einfachste Zuweisungsoperator ist "=".
Wahrscheinlich kommt man als erstes auf die Idee, ihn mit "ist gleich" zu bezeichnen.
Das ist falsch.
In Wirklichkeit bedeutet er, dass dem linken Operanden der Wert des Ausdrucks auf der rechten Seite zugewiesen wird (man müsste ihn also mit "wird gesetzt auf den Wert von "übersetzen).
Der Wert eines Zuweisungs-Ausdruckes ist der zugewiesene Wert.
D.h. der Wert des Ausdruckes "$a = 3" ist 3.
Das erlaubt es, einige raffinierte Dinge anzustellen:
$a = ($b = 4) + 5 / / $a ist nun gleich 9 und $b wurde auf den Wert 4 gesetzt.
Zusätzlich zu dem oben vorgestellten Zuweisungsoperator "=" gibt es "kombinierte Operatoren "für alle binären, arithmetischen und String-Operatoren, die es erlauben, den Wert einer Variablen in einem Ausdruck zu benutzen, und dieser anschließend das Ergebnis des Ausdrucks als neuen Wert zuzuweisen.
Zum Beispiel:
$a = 3; $a += 5; / / setzt $a auf den Wert 8, als ob wir geschrieben haetten: $a = $a + 5; $b = "Hallo "; $b .= "Du !"; / / setzt $b auf den Wert "Hallo Du !", aequivalent zu $b = $b. "Du !";
Man beachte, dass die Zuweisung nur den Wert der Ursprungsvarialbe der neuen Variable zuweist (Zuweisung als Wert, sie "kopiert"), weshalb sich Änderungen an der einen Variablen nicht auf die andere auswirken werden.
Das kann wichtig sein,wenn man einen großen Array o. ä. in einer Schleife kopieren muss.
PHP 4 unterstützt 'assignement by reference' (Zuweisung als Verweis), mit Hilfe der Schreibweise $var = $othervar;, das funktioniert jedoch nicht in PHP 3. 'Assignement by reference 'bedeutet, dass beide Variablen nach der Zuweisung die selben Daten repräsentieren und nichts kopiert wird.
Um mehr über Referenzen zu lernen, lesen Sie bitte den Abschnitt Referenzen erklärt.
Zurück
Zum Anfang
Nach vorne
Arithmetische Operatoren
Nach oben
Bit-Operatoren
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Bit-Operatoren erlauben es, in einem Integer bestimmte Bits "ein - oder auszuschalten" (auf 0 oder 1 zu setzen).
Wenn beide, der links - und rechsseitge Parameter, Zeichenketten sind, arbeiten die Bit-Operatoren mit den einzelnen Zeichen.
?php echo 12 ^ 9; / / Ausgabe '5 'echo "12 "^ "9"; / / Ausgabe:das Backspace-Zeichen (ascii 8) / / ('1' (ascii 49)) ^ ('9 '(ascii 57)) = #8 echo "hallo" ^ "hello"; / / Gibt die ASCII-Werte #0 #4 #0 #0 #0 / / 'a' ^ 'e '= #4 aus?
Tabelle 11-3.
Bit-Operatoren
Beispiel
Ergebnis
Und
Bits, die in $a und $b gesetzt sind werden gesetzt.
Oder
Bits, die in $a oder $b gesetzt sind werden gesetzt.
Entweder oder (Xor)
Bits, die entweder in $a oder $b gesetzt sind, werden gesetzt aber nicht in beiden.
Nicht
Die Bits, die in $a nicht gesetzt sind, werden gesetzt und umgekehrt.
Nach links verschieben
Verschiebung der Bits von $a um $b Stellen nach links (jede Stelle entspricht einer Mulitplikation mit zwei).
Nach rechts verschieben
Verschiebt die Bits von $a um $b Stellen nach rechts (jede Stelle entspricht einer Division durch zwei).
Zurück
Zum Anfang
Nach vorne
Zuweisungsoperatoren
Nach oben
Vergleichs-Operatoren
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Vergleichs-Operatoren erlauben es - wie der Name schon sagt - zwei Werte zu vergleichen.
Tabelle 11-4.
Vergleichsoperatoren
Beispiel
Ergebnis
Gleich
Gibt TRUE zurück, wenn $a gleich $b ist.
Identisch
Gibt TRUE zurück wenn $a gleich $b ist und beide vom gleichen Typ sind( nur PHP 4).
Ungleich
Gibt TRUE zurück, wenn $a nicht gleich $b ist.
Ungleich
Gibt TRUE zurück, wenn $a nicht gleich $b ist.
Nicht identisch
Gibt TRUE zurück, wenn $a nicht gleich $b ist, oder wenn beide nicht vom gleichen Typ sind (nur PHP 4).
Kleiner Als
Gibt TRUE zurück, wenn $a kleiner als $b ist.
Größer Als
Gibt TRUE zurück, wenn $a größer als $b ist.
Kleiner Gleich
Gibt TRUE zurück, wenn $a kleiner oder gleich $b ist.
Größer Gleich
Gibt TRUE zurück, wenn $a größer oder gleich $b ist.
Er arbeitet genauso wie in C und vielen anderen Programmier-Sprachen.
(ausdr1)? (ausdr2): (ausdr3);
Zurück
Zum Anfang
Nach vorne
Bit-Operatoren
Nach oben
Fehler-Kontroll-Operatoren
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Das @-Symbol.
Stellt man das @ in PHP vor einen Ausdruck werden alle Fehlermeldungen, die von diesem Ausdruck erzeugt werden könnten, ignoriert.
Ist das track_errors -Feature aktiviert, werden alle Fehlermeldungen, die von diesem Ausdruck erzeugt werden, in der Variablen $php_errormsg gespeichert.
Da diese Variable mit jedem neuen Auftreten eines Fehlers überschrieben wird, sollte man sie möglichst bald nach Verwendung des Ausdrucks überprüfen, wenn man mit ihr arbeiten will.
Fehler war :' $php_errormsg'"); / / Das funktioniert bei jedem Ausdruck, nicht nur bei Funktionen: $value = @$cache[$key]; / / erzeugt keine Notice, falls der Index $key nicht vorhanden ist.?
Anmerkung:
Der @-Operator funktioniert nur bei Ausdrücken.
Eine einfache Daumenregel: wenn Sie den Wert von etwas bestimmen können, dann können Sie den @-Operator davor schreiben.
Zum Beispiel können Sie ihn vor Variablen, Funktionsaufrufe und vor include() setzen, vor Konstanten und so weiter.
Nicht verwenden können Sie diesen Operator vor Funktions - oder Klassendefinitionen oder vor Kontrollstrukturen wie zum Beispiel if und foreach und so weiter.
Siehe auch error_reporting().
Anmerkung:
Der @ Fehler-Kontroll-Operator verhindert jedoch keine Meldungen, welche aus Fehlern beim Parsen resultieren.
Warnung
Zum gegenwärtigen Zeitpunkt deaktiviert der "@" Fehler-Kontrolloperator die Fehlermeldungen selbst bei kritischen Fehlern, die die Ausführung eines Skripts beenden.
Unter anderem bedeutet das, wenn Sie "@" einer bestimmten Funktion voranstellen, diese aber nicht zur Verfügung steht oder falsch geschrieben wurde, Ihr PHP-Skript einfach beendet wird, ohne Hinweis auf die Ursache.
Zurück
Zum Anfang
Nach vorne
Vergleichs-Operatoren
Nach oben
Operatoren zur Programmausführung
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Die sog.
Die Backticks sind keine einfachen Anführungszeichen!
Die Ausgabe des aufgerufenen Programms wird zurückgegeben (d.h. wird nicht einfach ausgegeben, sondern kann einer Variablen zugewiesen werden).
Anmerkung:
Der Backtick-Operator steht nicht zur Verfügung, wenn der Safe Mode aktiviert ist oder die Funktion shell_exec() deaktiviert wurde.
Siehe auch escapeshellcmd(), exec(), passthru(), popen(), shell_exec() und system().
Zurück
Zum Anfang
Nach vorne
Fehler-Kontroll-Operatoren
Nach oben
Dekrementoperatoren
PHP Handbuch
Zurück
Nach vorne
Die Operator-Rangfolge legt fest, wie "eng" ein Operator zwei Ausdrücke miteinander verbindet.
Zum Beispiel ist das Ergebnis des Ausdruckes 1 + 5 * 3 16 und nicht 18, da der Mulitiplikations-Operator ("*") in der Rangfolge höher steht als der Additions-Operator ("+").
Wenn nötig, können Sie Klammern setzen, um die Rangfolge der Operatoren zu beeinflussen.
Zum Beispiel: (1 + 5) * 3 ergibt 18.
Die folgende Tabelle zeigt die Rangfolge der Operatoren, oben steht der Operator mit dem niedrigsten Rang.
Tabelle 11-1.
Operator-Rangfolge
Operator
links
links
links
links
rechts
links
links
links
links
links
links
links
keine Richtung
== != ===
keine Richtung
links
links
links
rechts
rechts
keine Richtung
Anmerkung:
Obwohl! einen höheren Rang gegenüber = hat, erlaubt es Ihnen PHP immer noch ähnliche Ausdrücke wie den folgenden zu schreiben: if (!$a =foo()) .In diesem Ausdruck wird die Ausgabe von foo() der Variablen $a zugewiesen.
Zurück
Zum Anfang
Nach vorne
Ausdrücke
Nach oben
Arithmetische Operatoren
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
PHP unterstützt Prä - und Post-Inkrement - und Dekrementoperatoren im Stil der Programmiersprache C.
Tabelle 11-5.
Inkrement - und Dekrementoperatoren
Beispiel
Auswirkung
Prä-Inkrement
Erhöht den Wert von $a um eins (inkrementiert $a) und gibt anschließend den neuen Wert von $a zurück.
Post-Inkrement
Gibt zuerst den aktuellen Wert von $a zurück und erhöht dann den Wert von $a um eins.
Prä-Dekrement
Vermindert den Wert von $a um eins (dekrementiert $a) und gibt anschließend den neuen Wert von $a zurück.
Post-Dekrement
Gibt zuerst den aktuellen Wert von $a zurück und erniedrigt dann den Wert von $a um eins.
Ein einfaches Beispiel-Skript:
?php echo "h3 Post-Inkrement / h3"; $a = 5; echo "Sollte 5 sein: ". $a+ +." br / \n"; echo "Sollte 6 sein: ". $a." br / \n"; echo "h3 Pre-Inkrement / h3"; $a = 5; echo "Sollte 6 sein: ". ++$a." br / \n"; echo "Sollte 6 sein: ". $a." br / \n"; echo "h3 Post-Dekrement / h3"; $a = 5; echo "Sollte 5 sein: ". $a- -." br / \n"; echo "Sollte 4 sein: ". $a." br / \n"; echo "h3 Pre-Dekrement / h3"; $a = 5; echo "Sollte 4 sein: ". --$a." br / \n"; echo "Sollte 4 sein: ". $a." br / \n";?
Zurück
Zum Anfang
Nach vorne
Operatoren zur Programmausführung
Nach oben
Logische Operatoren
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Tabelle 11-6.
Logische Operatoren
Beispiel
Ergebnis
Und
TRUE wenn sowohl $a als auch $b TRUE ist.
Oder
TRUE wenn $a oder $b TRUE ist.
Entweder Oder
TRUE wenn entweder $a oder $b TRUE ist, aber nicht beide.
Nicht
TRUE wenn $a nicht TRUE ist.
Und
TRUE wenn sowohl $a als auch $b TRUE ist.
Oder
TRUE wenn $a oder $b TRUE ist.
Der Grund dafür, dass es je zwei unterschiedliche Operatoren für die "Und" - und die "Oder"-Verknüpfung gibt ist der, dass die beiden Operatoren jeweils Rangfolgen haben. (siehe auch Operator-Rangfolge.)
Zurück
Zum Anfang
Nach vorne
Dekrementoperatoren
Nach oben
Zeichenketten-Operatoren
PHP Handbuch
Zurück
Kapitel 11.
Operatoren
Nach vorne
Es gibt in PHP zwei Operatoren für Zeichenketten.
Der erste ist der Vereinigungs-Operator ('.'), dessen Rückgabewert eine zusammengesetzte Zeichenkette aus dem rechten und dem linken Argument ist.
Der zweite ist der Vereinigungs-Zuweisungsoperator ('.='), der das Argument auf der rechten Seite an das Argument der linken Seite anhängt.
Siehe Zuweisungs-Operatoren für weitere Informationen.
$a = "Hallo"; $b = $a. "Welt !"; / / $b enthält jetzt den Text "Hallo Welt! "$a = "Hallo"; $a .= "Welt !"; / / $a enthält jetzt den Text "Hallo Welt! "
Zurück
Zum Anfang
Nach vorne
Logische Operatoren
Nach oben
Array Operatoren
PHP Handbuch
Zurück
Kapitel 15.
Referenzen in PHP
Nach vorne
Referenzen sind keine Zeiger.
Das bedeutet, der folgende Code tut nicht, was zum Beispiel ein C Programmierer erwarten würde:
Folgendes wird passieren: $var in foo wird zunächst an $bar aus der aufrufenden Instanz, dann aber an $GLOBALS[ "baz"], gebunden.
Es gibt keine Möglichkeit, $bar aus der aufrufenden Instanz mittels Referenz-Mechanismen an etwas anderes zu binden, da $bar in der Funktion foo nicht zur Verfügung steht ($bar wird durch $var repräsentiert; $var verfügt nur über Variableninhalt, besitzt aber keinen name-to-value Eintrag in der Symboltabelle der aufrufenden Instanz).
Zurück
Zum Anfang
Nach vorne
Was Referenzen leisten
Nach oben
Referenzen zurückgeben
PHP Handbuch
Zurück
Nach vorne
Referenzen sind in PHP ein Mechanismus um verschiedene Namen für den gleichen Inhalt von Variablen zu ermöglichen.
Sie sind nicht mit Zeigern in C zu vergleichen, sondern Aliasdefinitionen für die Symboltabelle.
PHP unterscheidet zwischen Variablenname und Variableninhalt, wobei der gleiche Variableninhalt unterschiedliche Namen besitzen kann.
Der bestmögliche Vergleich ist der mit Dateinamen und Dateien im Dateisystem von Unix - Variablennamen sind Verzeichniseinträge, während der Variableninhalt die eigentliche Datei darstellt.
Referenzen können nun als Hardlinks im Dateisystem verstanden werden.
Zurück
Zum Anfang
Nach vorne
Referenzen innherhalb des Konstruktors
Nach oben
Was Referenzen leisten
PHP Handbuch
Zurück
Kapitel 15.
Referenzen in PHP
Nach vorne
Das Zurückgeben von Ergebnissen per Referenz aus Funktionen heraus kann manchmal recht nüzlich sein.
Hierbei ist folgende Syntax zu beachten:
Anmerkung:
Im Gegensatz zur Parameterübergabe per Referenz ist bei der Rückgabe mittels Referenz an beiden Stellen die Angabe des notwendig.
Zurück
Zum Anfang
Nach vorne
Was Referenzen nicht sind
Nach oben
Referenzen aufheben
PHP Handbuch
Zurück
Kapitel 15.
Referenzen in PHP
Nach vorne
Viele Sprachelemente von PHP sind intern mit der Benutzung von Referenzen implementiert, daher gilt alles bisher gesagte auch für diese Konstrukte:
Die Verwendung von global $var erzeugt im aktuellen Scope eine Referenz auf die globale Variable $var, sie ist also äquivalent zu folgendem:
Dies hat zur Folge, dass das Anwenden von unset() auf $var keinen Einfluss auf die globale Variable hat.
In einer Objektmethode ist $this immer eine Referenz auf die aufrufende Objektinstanz.
Zurück
Zum Anfang
Nach vorne
Referenzen aufheben
Nach oben
PHP Handbuch
Zurück
Kapitel 15.
Referenzen in PHP
Nach vorne
Wird eine Referenz aufgehoben, so wird nur die Bindung zwischen einem Variablennamen und dem Variableninhalt entfernt.
Der Inhalt der Variablen wird hierbei nicht gelöscht.
Betrachten wir folgendes Beispiel:
Das Aufheben einer Referenz entspricht einem Aufruf von unlink unter Unix.
Zurück
Zum Anfang
Nach vorne
Referenzen zurückgeben
Nach oben
Referenzen entdecken
PHP Handbuch
Zurück
Kapitel 15.
Referenzen in PHP
Nach vorne
PHP Referenzen erlauben es, zwei Variablennamen sich auf den gleichen Variableninhalt beziehen zu lassen.
Das heisst im folgenden Beispiel, dass sich $a und $b auf dieselbe Variable beziehen:
Seit PHP 4.0.4 kann auch in Verbindung mit new verwendet werden.
Anmerkung:
Wenn der Operator nicht verwendet wird, erzeugt PHP eine Kopie des Objekts.
Wenn nun $this innerhalb der Klasse verwendet wird, bezieht es sich auf die aktuelle Instanz der Klasse.
Die Zuordnung ohne erzeugt eine Kopie der Instanz (d.h. des Objekts) und $this wird sich auf die Kopie beziehen.
Dafür stellt PHP den bereit.
Eine weitere Einsatzmöglichkeit von Referenzen ist die Übergabe von Parametern an eine Funktion mit pass-by-reference.
Hierbei beziehen sich der lokale Variablenname als auch der Variablenname der aufrufenden Instanz auf denselben Variableninhalt:
Daneben besteht die Möglichkeit aus Funktionen heraus Werte mit return by-reference zurückzugeben.
Zurück
Zum Anfang
Nach vorne
Referenzen in PHP
Nach oben
Was Referenzen nicht sind
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Ein Array in PHP ist eigentlich eine geordnete Abbildung.
Eine Abbildung ist ein Typ der Werte auf Schlüssel Eine Abbildung ist ein Typ der Werte auf Schlüssel abbildet.
Dieser Typ ist auf mehrere Arten optimiert, so dass Sie ihn auf verschiedene Weise benutzen können: als reales Array, als Liste (Vektor), als Hash-Tabelle (das ist eine praktische Anwendung einer Abbildung), als Verzeichnis, als Sammlung, als Stapel (Stack), als Warteschlange (Queue) und möglicherweise mehr.
Da Sie ein weiteres PHP-Array als Wert benutzen können, ist es ziemlich einfach möglich Baumstrukturen zu simulieren.
Die Erklärung dieser Strukturen sprengt den Rahmen dieses Handbuchs, aber Sie finden zumindest ein Beispiel für jede dieser Strukturen.
Für weitergehende Informationen verweisen wir auf externe Literatur zu diesem breit gefächerten Thema.
Ein array kann mit Hilfe des Sparchkonstrukts array() erzeugt werden.
Es benötigt eine bestimmte Anzahl von Komma-getrennten Schlüssel = Wert Paaren.
Ein Schlüssel ist entweder eine Zahl vom Typ integer oder ein string.
Wenn ein Schlüssel die Standard-Darstellung einer integer Zahl ist, wird es als solche interpretiert werden, (z.B. "8 "wird als 8 interpretiert, während "08" als "08 "interpretiert werden wird).
Ein Wert kann irgendetwas sein.
Falls Sie einen Schlüssel weglassen, wird das Maximum des Integer - Indizes genommen und der neue Schlüssel wird dieses Maximum + 1 sein.
Das gilt auch für negative Indizes, da ein integer negativ sein kann.
Ist zum Beispiel der höchste Index -6 wird der neue Schlüssel den Wert -5 haben.
Falls es bis dahin keine Integer-Indizes gibt, wird der Schlüssel zu 0 (Null).
Falls Sie einen Schlüssel angeben dem schon ein Wert zugeordnet wurde, wird dieser Wert überschrieben.
Wenn Sie true als Schlüssel benutzen, wird dies als Schlüssel vom Typ integer 1 ausgewertet.
Benutzen Sie false als Schlüssel wird dies als Schlüssel vom Typ integer 0 ausgewertet.
Die Benutzung von NULL als Schlüssel führt dazu, dass der Schlüssel als leerer String gewertet wird.
Verwenden Sie einen leeren String als Schlüssel wird ein Schlüssel mit einem leeren String und seinem Wert erzeugt (oder überschrieben).
Sie können keine Arrays oder Objekte als Schlüssel benutzen.
Der Versuch wird mit einer Warnung enden:
array( [Schlüssel =] Wert,...) / / Schlüssel ist entweder ein string oder integer / / Wert kann irgendetwas sein.
Sie können ein bestehendes Array durch explizites Zuweisen von Werten verändern.
Weisen Sie dem Array Werte zu indem Sie den Schlüssel in eckigen Klammern angeben.
Sie können den Schlüssel auch weglassen.
$arr[ Schlüssel] = Wert; $arr[] = Wert; / / Schlüssel ist entweder ein string oder ein nicht-negativer integer / / Wert kann irgendetwas sein.
Es gibt viele nützliche Funktionen um mit Arrays zu arbeiten.
Schauen Sie unter dem Abschnitt Array Funktionen nach.
Anmerkung:
Halten Sie sich vor Augen, dass das Array NICHT neu indiziert wird.
$a = array( 1 = 'eins', 2 = 'zwei', 3 = 'drei '); unset ($a[2]); / * erzeugt ein Array das wie folgt definiert worden wäre: $a = array (1= 'eins', 3= 'drei'); und NICHT $a = array (1 = 'eins', 2 = 'drei'); * /
Die foreach Kontrollstruktur gibt es speziell für Arrays.
Damit ist es leicht ein Array zu durchlaufen.
Sie sollten immer Anführungszeichen für einen assoziativen Index eines Arrays benutzen.
Zum Beispiel sollten Sie $foo[ 'bar'] und nicht $foo[bar] benutzen.
Aber warum ist $foo[ bar] falsch?
Vieleicht kennen Sie folgende Syntax aus alten Skripts:
$foo[ bar] = 'Feind'; echo $foo[bar]; / / usw
Das heißt, dass Sie Dinge ähnlich diesen schreiben können:
$error_descriptions[ E_ERROR] = "Ein schwerwiegender Fehler ist aufgetreten"; $error_descriptions[E_WARNING] = "PHP hat eine Warnung ausgegeben"; $error_descriptions[E_NOTICE] = "Das ist nur eine informelle Notiz";
$error_descriptions[ 1] = "Ein schwerwiegender Fehler ist aufgetreten"; $error_descriptions[2] = "PHP hat eine Warnung ausgegeben"; $error_descriptions[8] = "Das ist nur eine informelle Notiz";
Aber wie ist es dann möglich dass $foo[ bar] funktioniert?
Es funktioniert, weil bar aufgrund seiner Syntax als Konstante ausgewertet wird.
In diesem Fall jedoch existiert keine Konstane mit dem Namen bar.
PHP nimmt an, dass Sie bar wörtlich gemeint haben, wie den String 'bar', aber vergessen haben, die Anführungszeichen zu setzen.
Eines Tages könnte sich das PHP Team entscheiden eine weitere Konstante oder ein Schlüsselwort hinzuzufügen und dann geraten Sie in Schwierigkeiten.
Zum Beispiel können Sie bereits die Wörter empty und default auf diese Art nicht benutzen, weil es speziele Schlüsselwörter sind.
Anmerkung:
Anmerkung:
Innerhalb eines string in doppelten Anführunfszeichen gilt eine andere Syntax.
Der Array-Typ in PHP ist sehr vielseitig.
Hier folgen einige Beispiele um Ihnen die Mächtigkeit von Arrays zu veranschaulichen.
/ / Das hier $a = array( 'Farbe '= 'rot' ,'Geschmack '= 'süß' ,'Form '= 'rund' ,'Name '= 'Apfel' ,4 / / Schlüssel ist 0); / / ist komplett gleichwertig mit $a['Farbe'] = 'rot'; $a['Geschmack'] = 'süß'; $a['Form'] = 'rund'; $a['Name'] = 'Apfel'; $a[] = 4; / / Schlüssel ist 0 $b[] = 'a'; $b[] = 'b'; $b[] = 'c'; / * ergibt das Array: array (0 = 'a ', 1 = 'b', 2 = 'c '), oder einfacher: array('a', 'b', 'c') * /
Beispiel 7-4.
Verwenden von array()
/ / Array als (Eigenschafts -)Abbildung $map = array('version '= 4 ,'OS' = 'Linux ','Sprache' = 'englisch ','short_tags' = true); / / strikt numerische Schlüssel $array = array(7 ,8 ,0 ,156 ,-10); / / Dies entspricht: array (0 = 7, 1 = 8,...) / / wechselnde Schlüssel $wechselnd = array (10 / / Schlüssel:
0 ,5 = 6 ,3 = 7 ,' a '= 4 ,11 / / Schlüssel:
8 (integer!) ,'02 '= 77 / / Schlüssel: '02' ,0 = 12 / / 10 wird mit dem neuen Wert 12 überschrieben); / / leeres Array $leer = array();
Beispiel 7-5.
Sammlung
$farben = array( 'rot' ,'blau' ,'grün' ,'gelb'); foreach ($farben as $farbe) {echo "Gefällt Ihnen $farbe?\n";} / * Ausgabe:
Gefällt Ihnen rot?
Gefällt Ihnen blau?
Gefällt Ihnen grün?
Gefällt Ihnen gelb? * /
Beachten Sie, dass es gegenwärtig nicht möglich ist die Werte eines Arrays direkt in einer solchen Schleife zu ändern.
Eine Lösung ist folgendes:
Beispiel 7-6.
Sammlung
foreach ($farben as $key = $farbe) {/ / funktioniert nicht: / /$farbe = strtoupper($farbe); / /funktioniert: $farben[$key] = strtoupper($farbe);} print_r($farben); / * Ausgabe:
Array ([0] = ROT [1] = BLAU [2] = GRÜN [3] = GELB) * /
Dieses Beispiel erzeugt ein Array, dessen Schlüssel bei eins beginnt.
Beispiel 7-7.
1-basierter Index
$erstes_viertel = array( 1 = 'Januar', 'Februar', 'März'); print_r($erstes_viertel); / * Ausgabe:
Array ([1] = 'Januar '[2] = 'Februar' [3] = 'März ') * /
Beispiel 7-8.
Füllen eines realen Arrays
/ / Füllen eines Arrays mit allen Inhalten eines Verzeichnisses $handle = opendir( '.'); while ($file = readdir($handle)) {$files[] = $file;} closedir($handle);
Arrays sind geordnet.
Diese Ordnung können Sie mit Hilfe verschiedener Sortierfunktionen verändern.
Für mehr Informationen schauen Sie unter dem Abschnitt zu den Array Funktionen nach.
Beispiel 7-9.
Sortien eines Array
sort( $files); print_r($files);
Weil der Wert eines Arrays irgendetwas sein kann, kann dieser Wert wiederum ein Array sein.
Somit können Sie rekursive und multidimensionale Arrays erzeugen.
Beispiel 7-10.
Rekursive and multidimensionale Arrays
$fruits = array ("früchte "= array("a" = "Orange ","b" = "Banane ","c" = "Apfel "), "nummern" = array(1 ,2 ,3 ,4 ,5 ,6), "löcher "= array("erstens" ,5 = "zweitens ","drittens"));
Zurück
Zum Anfang
Nach vorne
Strings / Zeichenketten
Nach oben
Objekte
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Das ist der einfachste Typ.
Ein boolean Ein boolean drückt einen Wahrheitswert aus.
Dieser kann entweder TRUE oder FALSE sein.
Anmerkung:
Der boolsche Typ wurde in PHP 4 eingeführt.
Um einen boolschen Typ wörtlich anzugeben, benutzen Sie entweder das Schlüsselwort TRUE oder FALSE.
Beide unterscheiden sich nicht bezüglich der Groß - und Kleinschreibung.
$foo = True; / / $foo wird der Wert TRUE zugewiesen
Üblicherweise verwenden Sie einen der Operatoren, der Ihnen einen boolean Wert liefert, den Sie dann an eine der Kontroll-Strukturen weiterreichen.
/ / == ist ein Vergleichs-Operator der einen boolschen Wert liefert if ($action == "show_version") {echo "Die Version ist 1.23";} / / Das ist nicht notwendig: if ($show_separators == TRUE) {echo "hr \n";} / / weil Sie einfach folgendes schreiben können: if ($show_separators) {echo" hr \n";}
Um einen Wert ausdrücklich nach boolean zu konvertieren benutzen Sie entweder die Umwandlung mittels (bool) oder (boolean).
Ein Wert wird automatisch konvertiert, falls ein Operator, eine Funktion oder eine Kontrollstruktur ein boolean Argument erfordert.
Siehe auch Typ-Veränderung.
Bei der Umwandlung nach boolean werden folgende Werte als FALSE angesehen:
das boolean FALSE
die Integer 0 (Null)
die Fließkomma-Zahl 0.0 (Null)
die leere Zeichenkette und die Zeichenkette "0"
ein Array ohne Elemente
ein Objekt ohne Elemente
der spezielle Type NULL (einschließlich nicht definierter Variablen)
Warnung
-1 wird als TRUE angesehen, wie jede andere Zahl ungleich Null (egal ob negativ oder positiv)!
Zurück
Zum Anfang
Nach vorne
Typen
Nach oben
Integer Typen
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Fließkomma-Zahlenwerte ("floats", "doubles "oder "reelle Zahlen") können durch eine der folgenden Anweisungen zugewiesen werden:
$a = 1.234; $a = 1.2e3; $a = 7E-10;
Fließkomma Präzision
Es ist ziemlich normal, dass einfache Dezimalzahlen wie 0.1 oder 0.7 nicht in ihre internen binären Entsprechungen konvertiert werden können, ohne einen kleinen Teil ihrer Genauigkeit zu verlieren.
So wird floor( (0.1 + 0.7) * 10) normalerweise 7 statt des erwarteten Wertes 8 zurück geben (als Ergebnis der internen Entsprechung von 7.9999999999....
Das gründet sich auf die Tatsache, dass es unmöglich ist, manche Dezimal-Zahlen durch eine endliche Anzahl an Nachkomma-Stellen darzustellen.
Dem Wert 1 / 3 entspricht z.B. der interne Wert von 0.3333333....
Deshalb sollten Sie nie den Ergebnissen von Fließkomma-Operationen bis auf die letzte Nachkomma-Stelle trauen und nie solche auf Gleichheit prüfen.
Benötigen Sie wirklich eine größere Genauigkeit, sollten sie die mathematischen Funktionen beliebiger Genauigkeit oder die Gmp Funktionen benutzen.
Zurück
Zum Anfang
Nach vorne
Integer Typen
Nach oben
Strings / Zeichenketten
PHP Handbuch
Zurück
Nach vorne
PHP unterstützt acht primitive Typen.
Vier skalare Typen:
Boolean
Integer
Fließkomma-Zahl (float)
String / Zeichenkette
Array
Object
Resource
Anmerkung:
In diesem Manual werden Sie oft mixed Parameter finden.
Der Typ einer Variabalen wird normalerweise nicht vom Programmierer bestimmt.
Zur Laufzeit von PHP wird entschieden, welchen Typs eine Variable ist, abhängig vom Zusammenhang in dem die Variable benutzt wird.
Anmerkung:
Um den Typ und den Wert eines bestimmten Ausdrucks (Expression) zu überprüfen, können Sie var_dump() benutzen.
Wenn Sie zur Fehlersuche einfach nur eine lesbare Darstellung eines Typs benötigen, benutzen Sie gettype().
Stattdessen sollten Sie die is_ type Funktionen verwenden.
Wenn sie die Umwandlung in einen bestimmten Variablen-Typ erzwingen wollen, erreichen Sie dies entweder durch cast oder durch Gebrauch der Funktion settype().
Beachten Sie, dass sich eine Variable in bestimmten Situationen unterschiedlich verhalten kann, abhängig vom Typ dem die Variable zu dem Zeitpunkt entspricht.
Weitere Informationen entnehmen Sie dem Abschnitt zur Typ-Veränderung.
Zurück
Zum Anfang
Nach vorne
Kommentare
Nach oben
Boolscher Typ
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Ein Integer ist eine Nummer aus der Menge Z = {..., -2, -1, 0, 1, 2,...}.
Siehe auch:
Ganzzahlen beliebiger Länge und Fließkomma-Zahlen
Ganzzahlen können in dezimaler (10-basierter), hexadezimaler (16-basierter) oder oktaler (8-basierter) Schreibweise angegeben werden, wahlweise mit einem vorangestellten Zeichen (- oder +).
Wenn Sie die oktale Schreibweise verwenden, müssen Sie die Zahl mit einer vorangestellten Null 0 schreiben; in hexadezimaler Schreibweise müssen Sie vor die Zahl ein 0x schreiben.
Beispiel 7-1.
Integer Literale
$a = 1234; / / Dezimalzahl $a = -123; / / eine negative Zahl $a = 0123; / / Oktalzahl (entspricht 83 dezimal) $a = 0x1A; / / Hexadezimalzahl (entspricht 26 dezimal)
Wenn Sie eine Zahl jenseits der Grenzen des Typs Integer angeben, wird diese stattdessen als Typ float Wenn Sie eine Zahl jenseits der Grenzen des Typs Integer angeben, wird diese stattdessen als Typ float interpretiert.
Wenn Sie eine Operation ausführen, deren Ergebnis eine Zahl jenseits der Grenzen des Typs Integer ist, wird ebenso eine Zahl vom Typ float zurückgegeben.
$large_number = 2147483647; var_dump($large_number); / / Ausgabe: int(2147483647) $large_number = 2147483648; var_dump($large_number); / / Ausgabe: float(2147483648) / / das gilt auch für Integers in hexadezimaler Schreibweise: var_dump (0x80000000); / / Ausgabe: float(2147483648) $million = 1000000; $large_number = 50000 * $million; var_dump($large_number); / / Ausgabe: float(50000000000)
Warnung
Bedauerlicherweise gab es einen Bug in PHP, der die korrekte Funktionsweise verhinderte, wenn negative Zahlen verwendet wurden.
Bei der Ausführung von -50000 * $million war das Ergebnis -429496728.
Sind beide Operanden positiv gibt gibt es keine Probleme.
Dieses Problem ist in PHP 4.1.0 behoben.
In PHP gibt es keinen Operator für Integer Divisonen.
1 / 2 ergibt float 0.5.
var_dump( 25 / 7); / / Ausgabe: float(3.5714285714286)
Um einen Wert ausdrücklich nach integer zu konvertieren benutzen Sie entweder die Umwandlung mittels (int) oder (integer).
Ein Wert wird automatisch konvertiert, falls ein Operator, eine Funktion oder eine Kontrollstruktur ein integer Argument erfordert.
Siehe auch Typ-Veränderung.
FALSE ergibt 0 (Null), und TRUE ergibt 1 (eins).
Bei der Umwandlung von float nach integer wird die Zahl in Richtung Null gerundet.
Wenn der float jenseits der Grenzen von integer liegt (üblicherweise + / - 2.15e+9 = 2^31), ist das Ergebnis nicht definiert, weil float nicht genug Präzision besitzt um ein genaues integer Ergebnis zu liefern.
Keine Warnung, nicht einmal eine Notiz wird in diesem Fall ausgegeben.
Warnung
Wandeln Sie nie einen Teil eines Ausdrucks nach integer um, da dies manchmal zu unerwarteten Ergebnissen führen kann.
7!
Siehe String Umwandlung
Achtung
Das Verhalten bei der Umwandlung nach integer ist für andere Typen nicht definiert.
Zum gegenwärtigen Zeitpunkt ist das Verhalten so, als ob der Wert zuerst nach boolean konvertiert wird.
Es kann sich ohne Ankündigung ändern.
Zurück
Zum Anfang
Nach vorne
Boolscher Typ
Nach oben
Fließkomma-Zahlenwerte
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Der spezielle NULL Wert steht dafür, dass eine Varaiable keinen Wert hat.
NULL ist der einzig mögliche Wert des Typs NULL.
Anmerkung:
Der Null-Typ wurde in PHP 4 eingeführt.
Eine Variable wird als NULL interpretiert, wenn
ihr die Konstannte NULL als Wert zugewiesen wurde.
ihr bis jetzt kein Wert zugewiesen wurde.
sie mit unset() gelöscht wurde.
Groß - / Kleinschreibung spielt keine Rolle.
$var = NULL;
Siehe auch is_null() und unset().
Zurück
Zum Anfang
Nach vorne
Nach oben
Typen-Tricks
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Um ein Objekt zu initialisieren benutzen sie die Angabe new, dadurch wird das Objekt einer Variablen-Instanz zugewiesen.
Für eine ausführliche Darstellung lesen Sie das Kapitel Klassen und Objekte
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Eine Resource ist eine spezielle Variable, die eine Referenz auf eine externe Resource enthält.
Resourcen werden von bestimmten Funktionen erzeugt und benutzt.
Eine Liste dieser Funktionen und der entsprechenden Resource-Typen finden Sie im Anhang.
Anmerkung:
Der Resource-Typ wurde in PHP 4 eingeführt.
Aufgrund des Reference-Counting Systems, das mit PHP 4' s Zend-Egine eingeführt wurde, wird automatisch entdeckt, wenn auf eine Resource nicht mehr zugegriffen wird (wie in Java).
Wenn dies der Fall ist werden alle Resourcen, die für diese Resource in Gebrauch waren, durch den "Müllsammler" (garbage collector) freigegeben.
Aus diesem Grund ist es selten jemals notwendig, Speicher manuell durch Aufruf von free_result-Funktionen freizugeben.
Anmerkung:
Persistente Datenbank-Links stellen einen Sonderfall dar, sie werden durch den gc (garbage collector) nicht zerstört.
Siehe auch Persistente Datenbankverbindungen.
Zurück
Zum Anfang
Nach vorne
Objekte
Nach oben
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
Ein String ist eine Folge von Zeichen.
In PHP entspricht ein Zeichen einem Byte, das heißt, dass exakt 256 unterschiedliche Zeichen möglich sind.
Das impliziert auch, dass PHP keine native Unterstützung für Unicode bietet.
Für einen String stellt die Länge kein Problem dar.
Von PHP-Seite aus gibt es keine praktische Grenze für die Größe eines Strings.
Ein String kann auf drei verschiedene Weisen geschrieben werden.
Einfache Anführungszeichen (single quoted)
Doppelte Anführungszeichen (double quoted)
Heredoc Syntax
Der leichteste Weg einen einfachen String zu schreiben, ist der Einschluss in einfache Anführungszeichen (das Zeichen ').
Um ein einfaches Anführungszeichen wörtlich auszugeben, muss dieses mit einem Backslash (\) escaped werden, wie in vielen anderen Programmiersprachen auch.
Wenn Sie innerhalb eines Strings einen Backslash vor einem einfachen Anführungszeichen oder am Ende eines Strings ausgeben wollen, müssen Sie diesen verdoppeln.
Beachten Sie: wenn Sie versuchen irgendwelche anderen Zeichen zu escapen, wird der Backslash ebenfalls ausgegeben!
Daher besteht für gewöhnlich keine Notwendigkeit den Backslash selbst zu escapen.
Anmerkung:
In PHP 3 wird eine Warnung auf der Stufe E_NOTICE ausgegeben, wenn das passiert.
Anmerkung:
Anders als bei den zwei anderen Schreibweisen werden Variablen innerhalb von single-quoted Strings nicht ausgewertet.
echo 'Das ist ein einfacher String'; echo 'Sie können ebenso einen Zeilenumbruch einfügen, auf diese Art .'; echo 'Arnold sagte einmal: "I\'ll be back"'; / / Ausgabe:... "I'll be back "echo 'Sind Sie sicher, dass Sie C:\\*.* löschen wollen ?'; / / Ausgabe:... dass Sie C:\*.* löschen wollen? echo 'Sind Sie sicher, dass Sie C:\*.* löschen wollen ?'; / / Ausgabe:... dass Sie C:\*.* löschen wollen? echo 'Ich versuche einen Zeilenumbruch an diesem Punkt: \n ein Zeilenumbruch'; / / Ausgabe:... diesem Punkt: \n ein Zeilenumbruch' $var = "nur zum Vergnügen"; echo 'Das mache ich $var'; / / Ausgabe:
Das mache ich $var
Wenn ein String in doppelten Anführungszeichen (") eingeschlossen ist, versteht PHP mehr Escape-Folgen für spezielle Zeichen:
Nicht ausgewertete / übergangene Zeichen:
Zeichenfolge
Bedeutung
Zeilenvorschub (LF oder 0x0A als ASCII-Code)
Wagenrücklauf (CR oder 0x0D als ASCII-Code)
horizontaler Tabulator (HT oder 0x09 als ASCII-Code
Backslash / Rückstrich
Dollar-Symbol
doppelte Anführungszeichen
die Zeichenfolge, die dem regulären Ausdruck entspricht ist ein Zeichen in Oktal-Schreibweise
die Zeichenfolge, die dem regulären Ausdruck entspricht ist ein Zeichen in Hexadezimal-Schreibweise
Noch einmal: wenn Sie versuchen, irgend ein anderes Zeichen zu escapen wird der Backslash ebenfalls ausgegeben!
Der wichtigste Vorteil von double-quoted Strings ist die Tatsache, dass Variablennamen ausgewertet werden.
Für Details siehe String Analyse (parsing)
Eine andere Möglichkeit Strings einzufassen, besteht im Gebrauch der heredoc-Syntax ("").
Hierfür ist nach ein Bezeichner zu setzen.
Der schließende Bezeichner muss in der ersten Spalte der Zeile stehen.
Die verwendeten Bezeichner müssen den gleichen Regeln entsprechen wie alle anderen PHP-Labels auch:
Sie dürfen lediglich alphanumerische Zeichen und den Unterstrich enthalten und müssen mit einem Unterstrich oder einem Buchstaben beginnen.
Es ist sehr wichtig zu beachten, dass die Zeile mit dem schließenden Bezeichner keine anderen Zeichen enthält, ausgenommen möglicherweise ein Semikolon (;).
Das bedeuted im Besonderen, dass der Bezeichner nicht eingerückt werden darf und es dürfen keine Leerzeichen oder Tabulatoren vor oder nach dem Semikolon stehen.
Heredoc-Text funktioniert wie ein String innnerhalb doppelter Anführungszeichen, nur ohne doppelte Anführungszeichen.
Anführungszeichen innerhalb von heredoc-Texten müssen also keiner Sonderbehandlung (escapen) unterzogen werden, aber Sie können dennoch die oben aufgeführten Escape-Anweisungen verwenden.
Variablen werden ausgewertet, aber besondere Aufmerksamkeit muss komplexen Variablen gewidmet werden, genau wie bei Strings.
Beispiel 7-2.
Beispiel zur String-Festlegung per "heredoc "-Methode:
?php $str = EOD Beispiel eines Strings über mehrere Script-Zeilen durch Gebrauch der heredoc-Syntax.
EOD; / * komplexeres Beispiel, mit Variablen * / class foo {var $foo; var $bar; function foo() {$this - foo = 'Foo'; $this - bar = array('Bar1', 'Bar2', 'Bar3');}} $foo = new foo(); $name = 'Mein Name'; echo EOT Mein Name ist "$name ".
Ich schreibe einige $foo - foo.
Nun schreibe ich gerade einige {$foo - bar[1]}.
Dies sollte ein großes 'A' schreiben: \x41 EOT;?
Anmerkung:
Die heredoc Unterstützung wurde in PHP 4 eingeführt.
Wird ein String in doppelten Anführungszeichen oder mit heredoc angegeben, werden enthaltene Variablen ausgewertet (geparst).
Es gibt zwei Syntax-Typen, eine einfache und eine komplexe.
Die einfache Syntax ist die geläufigste und bequemste.
Sie bietet die Möglichkeit eine Variable, einen Array-Wert oder eine Objekt-Eigenschaft auszuwerten (parsen).
Die komplexe Syntax wurde in PHP 4 eingeführt und ist an den geschweiften Klammern {} erkennbar, die den Ausdruck umschließen.
Schließen Sie Ihren Varaiblennamen in geschweifte Klammern ein, wenn Sie ausdrücklich das Ende des Namens angeben wollen.
$beer = 'Heineken'; echo "$beer's Geschmack ist großartig"; / / funktioniert, "'"ist kein gültiges / / Zeichen für einen Variablennamen echo "Er hat einige $beers getrunken"; / / funktioniert nicht, 's' ist ein gültiges / / Zeichen für einen Variablennamen echo "Er hat einige ${beer}s getrunken"; / / funktioniert
Auf ähnliche Weise können Sie erreichen, dass ein Array-Index oder eine Objekt-Eigenschaft ausgewertet wird.
Bei Array-Indizes markiert die schließende eckige Klammer (]) das Ende des Index.
Für Objekt-Eigenschaften gelten die gleichen Regeln wie bei einfachen Variablen, obwohl es bei Objekt-Eigenschaften keinen Trick gibt, wie dies bei Variablen der Fall ist.
$früchte = array( 'Erdbeere '= 'rot', 'Banane '= 'gelb'); / / Beachten Sie: außerhalb von String-Anführungszeichen funktioniert das anders. echo "Eine Banane ist $früchte[Banane] ."; echo "Dieses Quadrat ist $quadrat - breite Meter breit ."; / / Funktioniert nicht.
Für eine Lösung siehe die komplexe Syntax. echo "Dieses Quadrat ist $quadrat - breite00 Zentimeter breit .";
Für irgendetwas Komplexeres sollten Sie die komplexe Syntax nutzen.
Diese wird nicht komplex genannt, weil etwa die Syntax komplex ist, sondern weil Sie auf diesem Weg komplexe Ausdrücke einbeziehen können.
Tatsächlich können Sie jeden beliebigen Wert einbeziehen, der im Namensbereich in Strings gültig ist.
Da Sie '{' nicht escapen können, wird diese Syntax nur erkannt, wenn auf {unmittelbar $folgt. (Benutzen Sie "{\$ "oder "\{$" um ein wörtliches "{$ "zu erhalten.) Einige Beispiele, um dies zu verdeutlichen:
$great = 'fantastisch'; echo "Das ist {$great}"; / / funktioniert nicht, Ausgabe:
Das ist {fantastisch} echo "Das ist {$great}"; / / funktioniert, Ausgabe:
Das ist fantastisch echo "Dieses Quadrat ist {$square - width}00 Zentimeter breit ."; echo "Das funktioniert: {$arr[4][3]}"; / / Das ist aus dem gleichen Grund falsch / / wie $foo[bar] außerhalb eines Strings falsch ist. echo "Das ist falsch: {$arr[foo][3]}"; echo "So sollten Sie es machen: {$arr['foo'][3]}"; echo "Sie können sogar schreiben {$obj - values[3] - name}"; echo "Das ist der Wert der Variable mit Namen $name: {${$name}}";
Auf Zeichen innerhalb von Strings kann durch die Angabe des nullbasierten Offsets in geschweiften Klammern nach dem String, auf das gewünschte Zeichen zugegriffen werden.
Anmerkung:
Für Abwärtskompatibilität können Sie immer noch die Array-Klammern verwenden.
Beispiel 7-3.
Einige String-Beispiele
?php / / Zuweisung eines Strings. $str = "Dies ist eine Zeichenkette"; / / Erweiterung dieses Strings. $str = $str." mit etwas zusätzlichem Text"; / / andere Möglichkeit zum Erweitern incl.
Anweisung für Neue-Zeile. $str .= "und einer neuen Zeile am Ende.\n"; / * Nach diesen drei Operationen enthält $str: "Dies ist eine Zeichenkette mit etwas zusätzlichem Text und einer neuen Zeile am Ende.\n." * / / / Dieser String wird am Ende zu: 'p Nummer:
9 / p '$num = 9; $str = "p Nummer: $num / p"; / / Dieser wird zu' p Nummer: $num / p '$num = 9; $str =' p Nummer: $num / p '; / / Das erste Zeichen eines Strings. $str = 'Das ist ein Test.' $first = $str{0}; / / $first enthält "D "/ / Das letzte Zeichen eines Strings. $str = 'Das ist immer noch ein Test. '$last = $str{strlen($str)-1}; / / $last enthält". "?
Zeichenketten / Strings können mittels des '.'(dot )-Operators miteinander verbunden werden.
Beachten Sie, dass dafür nicht der '+' (Additions )-Operator verwendet werden kann Für mehr Informationen schauen Sie bitte unter den Zeichenketten-Operatoren nach.
Es gibt eine Menge nützlicher Funktionen zur String-Manipulation.
Für allgemeine Funktionen schauen Sie sich den Abschnitt über String Funktionen an, und für fortgeschrittenes Suchen Ersetzen die Funktionen zu Regulären Ausdrücken (in zwei Ausführungen:
Perl Kompatibel und POSIX erweitert).
Weiterhin gibt es auch noch Funktionen für URL-Strings, und Funktionen zum Verschlüsseln / Entschlüsseln von Strings (mcrypt und mhash).
Schließlich, falls Sie immer noch nicht das gefunden haben wonach Sie suchen, schauen Sie unter den Zeichen-Typen Funktionen nach.
Sobald ein String als numerischer Wert ausgewertet wird, wird der resultierende Wert und Typ wie folgt festgelegt.
Der String wird als float Der String wird als float ausgewertet, wenn er eines der Zeichen '.', 'e' oder 'E 'enthält.
Ansonsten wird er als Integer-Wert interpretiert.
Der Wert wird durch den Anfangsteil des Strings bestimmt.
Sofern der String mit gültigen numerischen Daten beginnt, werden diese als Wert benutzt.
Andernfalls wird der Wert 0 (Null) sein.
Gültige numerische Daten sind ein optionales Vorzeichen, gefolgt von einer oder mehreren Zahlen (optional mit einem Dezimalpunkt).
Wahlweise kann auch ein Exponent angegeben werden.
Der Exponent besteht aus einem 'e' oder 'E ', gefolgt von einer oder mehreren Zahlen.
$foo = 1 + "10.5"; / / $foo ist float (11.5) $foo = 1 + "-1.3e3"; / / $foo ist float (-1299) $foo = 1 + "bob-1.3e3"; / / $foo ist integer (1) $foo = 1 + "bob3"; / / $foo ist integer (1) $foo = 1 + "10 Kleine Schweine"; / / $foo ist integer (11) $foo = 4 + "10.2 Ferkel"; / / $foo ist float (14.2) $foo = "10 Schweine" + 1; / / $foo ist integer (11) $foo = "10.0 Schweine "+ 1; / / $foo ist float (11) $foo = "10.0 Schweine" + 1.0; / / $foo ist float (11)
Weitere Informationen über solche Umwandlungen finden Sie in den UNIX Manualseiten unter strtod( 3).
Wenn Sie irgendein Beispiel dieses Abschnitts testen wollen, können Sie dieses per "Copy und Paste" übernehmen.
Fügen Sie die folgende Zeile Ihrem Skript hinzu und Sie sehen selbst was passiert:
echo "\$foo==$foo; Typ ist". gettype ($foo). "br / \n";
Zurück
Zum Anfang
Nach vorne
Fließkomma-Zahlenwerte
Nach oben
PHP Handbuch
Zurück
Kapitel 7.
Typen
Nach vorne
PHP erfordert (bzw. unterstützt) keine explizite Typ-Definitionen bei der Deklaration von Variablen; der Typ einer Variablen wird durch den Zusammenhang bestimmt in dem die Variable benutzt wird.
Das bedeutet, dass bei der Zuweisung einer Zeichenkette / eines Strings zu einer Variablen var diese Variable var zum Typ String wird.
Sollten Sie dananch der Variablen var einen Integer-Wert zuweisen, wird sie zu einem Integer-Typ.
Ein Beispiel für die automatische Typ-Konvertierung von PHP ist der Plus-Operator '+'.
Ist einer der zu addierenden Werte vom Typ float, werden alle Werte als float-Typ gbehandelt.
Auch das Ergebnis der Addition wird vom Typ float sein.
Andernfalls werden die Werte als integer -Typen angesehen und das Ergebnis wird ebenfalls vom Typ Integer sein.
$foo = "0"; / / $foo ist vom Typ String (ASCII 48) $foo += 2; / / $foo ist jetzt vom Typ Integer (2) $foo = $foo + 1.3; / / $foo ist nun vom Typ float (3.3) $foo = 5 + "10 Sehr kleine Ferkel"; / / $foo ist vom Typ Integer (15) $foo = 5 + "10 Kleine Schweine"; / / $foo ist vom Typ Integer (15)
Wenn Ihnen die beiden letzten Beispiele merkwürdig erscheinen, beachten Sie die String-Umwandlung.
Wenn Sie die Auswertung einer Variablen als einen speziellen Typ erzwingen wollen, beachten sie den Abschnitt in Typ-Umwandlung.
Wollen Sie den Typ einer Variable ändern, schauen Sie bei settype() nach.
Um die Beispiele dieses Kapitels auszuprobieren, können Sie die Funktion var_dump() verwenden.
Anmerkung:
Das Verhalten einer automatischen Umwandlung zum Typ Array ist zur Zeit nicht definiert.
$a = "1"; / / $a ist ein String $a[0] = "f"; / / Was ist mit den String offsets?
Was passiert?
Beispiel zu einem Problem:
Aus diesem Grund ist das Ergebnis der automatischen Umwandlung seit PHP 3.0.12 und auch in PHP 4.0b3-RC4 nicht definiert.
Typ-Umwandlung in PHP funktioniert vielfach wie in C:
Der Name des gewünschten Typs wird vor der umzuwandelnden Variablen in Klammern gesetzt.
Folgende Umwandlungen sind möglich:
(bool), (boolean) - nach boolean
(float), (double), (real) - nach float
(array) - nach array
Anmerkung:
Ansttat eine Variable in einen String umzuwandeln, können Sie die Variable auch in doppelte Anführungszeichen einschließen.
Beachten sie, dass Tabulatoren und Leerzeichen innerhalb der Klammern erlaubt sind.
$foo = (int) $bar; $foo = (int) $bar;
Es ist nicht immer offenkundig, was bei der Typ-Umwandlung geschieht.
Umwandlung nach boolean
Wenn Sie eine Umwandlung eines Arrays zu einem String vornehmen oder erzwingen, ist das Ergebnis das Wort Array.
Wenn Sie eine Umwandlung eines Objekts zu einem String vornehmen oder erzwingen, ist das Ergebnis das Wort Objekt.
Bei der Umwandlung einer skalaren oder String-Variablen zu einem Array wird die Variable das erste Element des Arrays:
$var = 'ciao'; $arr = (array) $var; echo $arr[0]; / / gibt 'ciao' aus
Sobald eine skalare oder String-Variable in ein Objekt gewandelt wird, wird die Variable zu einem Attribut des Objekts; der Eigenschafts-Name wird 'scalar ':
$var = 'ciao'; $obj = (object) $var; echo $obj - scalar; / / gibt 'ciao' aus
Zurück
Zum Anfang
Nach vorne
NULL
Nach oben
Variablen
PHP Handbuch
Zurück
Kapitel 8.
Variablen
Nach vorne
Sobald ein Formular an ein PHP-Skript übergeben wird, wird jede Variable dieses Formulars dem Skript automatisch verfügbar gemacht.
Dafür sorgt PHP.
Falls die Konfigurationsoption track_vars auf "on" gesetzt ist, werden diese Variablen in diesen assoziativen Arrays abgelegt $HTTP_POST_VARS, $HTTP_GET_VARS und / oderr $HTTP_POST_FILES, entsprechend der Quelle, aus der die fragliche Variable kommt.
Für weitere Informationen über diese Variablen lesen Sie bitte den Abschnitt über Vordefinierte Variablen.
Beispiel 8-1.
Einfache Formular-Variablen
Wird dieses Formular abgeschickt, steht der Wert des Textfeldes in der Variable $HTTP_POST_VARS[ 'username'] zur Verfügung.
Anmerkung:
Die Konfigurationseinstellung zu magic_quotes_gpc betrifft Get, Post and Cookie Werte.
Ist diese Einstellung aktiv wird der Wert (It's "PHP !") automatisch zu (It\'s \"PHP!\").
Escaping ist notwendig, wenn Sie ihre Daten in eine Datenbank einfügen wollen.
Siehe auch: addslashes(), stripslashes() und magic_quotes_sybase.
Im Zusammenhang mit Formular-Variablen versteht PHP auch Arrays (siehe auch die verwandte Faq).
Beispiel 8-2.
Komplexere Formular-Variablen
form action=" array.php "method="post" Name: input type="text "name="personal[name]" br Email: input type="text "name="personal[email]" br Bier: br select multiple name="bier[] "option value="binding" Binding option value="warsteiner "Warsteiner option value="stauder" Stauder option value="stuttgarter "Stuttgarter Schwabenbräu / select input type="submit" / form
In PHP 3 ist die Verwendung von Arrays in Formularvariablen auf eindimensionale Arrays beschränkt.
In PHP 4 besteht diese Einschränkung nicht mehr.
Zur Übertragung eines Formulars kann auch ein Bild (Image) statt eines Übertragungs-Schalters (Submit-Button) benutzt werden, dessen Tag wie folgt aussieht:
Klickt der Benutzer irgendwo auf das Bild, wird das entsprechende Formular an den Web-Server übertragen.
Hierbei sind zwei zusätzliche Variablen vorhanden, sub_x und sub_y.
Diese enthalten die Koordinaten des Klick-Punktes innerhalb des Bildes.
Die Erfahreneren werden sagen, dass die Variablen, die vom Browser gesendet werden einen Punkt enthalten statt eines Unterstrichs.
Dieser Punkt wird von PHP automatisch in einen Unterstrich verwandelt.
PHP unterstützt HTTP-Cookies, wie sie in Netscape 's Spec definiert sind.
Cookies ermöglichen die Daten-Speicherung innerhalb der jeweiligen Browser-Umgebung zur Weiterleitung oder wiederholten Identifikation von Benutzern.
Sie können Cookies erzeugen, indem sie die Funktion setcookie() benutzen.
Cookies sind Teil des HTTP-Headers, deshalb muss die setcookie-Funktion aufgerufen werden, bevor irgendeine Ausgabe an den Browser gesendet wird.
Dabei handelt es sich um die gleiche Einschränkung, die auch für die header() -Funktion gilt.
Alle Cookies, die der Client an sie sendet werden in PHP-Variablen umgesetzt, genau wie die Daten bei den GET - und POST-Methoden.
Z.B.:
SetCookie ("MeinCookie[]", "Ich teste", time()+3600);
Bedenken sie, dass ein Cookie ein vorhergehendes Cookie gleichen Namens überschreibt, es sei denn, der Pfad oder die Domain ist anders.
Beispiel 8-3.
SetCookie-Beispiel
$Count++; setcookie("Count", $Count, time()+3600); setcookie("Cart[$Count]", $item, time()+3600);
PHP sorgt automatisch für die Verfügbarkeit der Umgebungs - Variablen als normale PHP-Variablen.
echo $HOME; / * Zeigt die HOME-Umgebungs-Variable (sofern gesetzt). * /
Da Informationen per GET, POST und Cookie-Mechanismen übergeben werden, ist es manchmal das Beste, Umgebungs-Variablen explizit auszulesen.
Dadurch wird die richtige Version eingelesen.
Hierfür kann die getenv() -Funktion genutzt werden.
Den Wert einer Umgebungs-Variablen können Sie per putenv() - Funktion setzen.
Normalerweise verändert PHP die Variablen-Bezeichner nicht, wenn sie einem Skript übergeben werden.
Es sollte aber beachtet werden, dass der Punkt (".") kein gültiger Bestandteil eines Variablen-Bezeichners ist.
Deshalb achten sie auf folgendes:
$varname.ext; / * ungültiger Variablen-Bezeichner * /
Deshalb ist es wichtig zu wissen, dass PHP in den ihm übergebenen Variablen alle Punkte (.) automatisch durch einen Unterstrich (_) ersetzt.
Da PHP den Typ der Variablen bestimmt und (im Allgemeinen) selbst eine entsprechende Umformung vornimmt, ist es nicht immer klar, welchen Typ eine Variable gerade hat.
Als da sind: gettype(), is_long(), is_double(), is_string(), is_array() und is_object().
Zurück
Zum Anfang
Nach vorne
Variable Variablen
Nach oben
Konstanten
PHP Handbuch
Zurück
Nach vorne
Variablen werden in PHP dargestellt durch ein Dollar-Zeichen ($) gefolgt vom Namen der Variablen.
Bei Variablen-Namen wird zwischen Groß - und Kleinschreibung unterschieden (case-sensitive).
Variablen-Namen werden in PHP nach den gleichen Regeln wie andere Bezeichner erstellt.
Ein gültiger Variablen-Name beginnt mit einem Buchstaben oder einem Unterstrich ("_"), gefolgt von einer beliebigen Anzahl von Buchstaben, Zahlen oder Unterstrichen.
Als regulärer Ausdruck (regular expression) würde das wie folgt ausgedrückt: '[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]* '.
Anmerkung:
A bis Z oder einem ASCII-Zeichen von 127 bis 255 (0x7f bis 0xff).
$var = "Du"; $vaR = "und"; $Var = "ich"; $vAr = "wir lernen PHP" echo "$var $vaR $Var, $vAr"; / / gibt "Du und ich, wir lernen PHP "aus $4site = 'nicht jetzt'; / / ungültig, da Anfang eine Zahl $_4site = 'nicht jetzt'; / / gültig, da Unterstrich am Anfang $täbyte = 'irgendwas'; / / gültig, da 'ä 'dem ASCII-Wert 228 entspricht
Variablen werden in PHP 3 durch ihren Wert bestimmt.
Das heisst, wenn sie einer Variablen einen Ausdruck zuweisen, wird der gesamte Inhalt des Originalausdrucks in die Zielvariable kopiert.
Die Folge ist, dass eine Variable, die ihren Inhalt von einer anderen Variablen erhalten hat, ihren Inhalt behält, auch wenn sie danach den Inhalt der anderen (Quell - / Ursprungs - )Variablen ändern.
Die Inhalte der Ziel - und Quellvariablen sind also insoweit unabhängig voneinander.
Für weitere Informationen lesen sie bitte Expressions / Ausdrücke.
Zuweisung durch Referenzierung.
Das bedeutet, dass der Wert der neuen Variablen eine Referenz zur Ursprungs-Variablen darstellt (mit anderen Worten:
Zeiger auf den Inhalt der Ursprungsvariablen).
Beide Variablen zeigen also auf die selbe( n) Speicherstelle(n).
Der Wert / Inhalt wird also nicht kopiert.
Die Übertragung geschieht dadurch auch schneller als in PHP 3.
Dies wird sich aber nur bei umfangreichen Schleifen oder bei der Übertragung von grossen Arrays oder Objekten bemerkbar machen.
Der folgende Skript - Ausschnitt wird zweimal 'Mein Name ist Bob' ausgeben:
?php $foo = 'Bob'; / / 'Bob' der Variablen $foo zuweisen. $bar = $foo; / / Zeiger auf $foo in $bar erzeugen. $bar = "My name is $bar"; / / $bar verändern... echo $foo; / / $foo wurde dadurch ebenfalls verändert. echo $bar;?
Zu beachten ist, dass nur Variablenbezeichner referenziert werden können.
?php $foo = 25; $bar = $foo; / / Gültige Zuweisung. $bar = (24 * 7); / / Ungültig, da kein Variablenbezeichner / / zugewiesen wird. function test() {return 25;} $bar = (); / / Ungültig.?
Zurück
Zum Anfang
Nach vorne
Typen-Tricks
Nach oben
Vordefinierte Variablen
PHP Handbuch
Zurück
Kapitel 8.
Variablen
Nach vorne
Viele dieser Variablen können jedoch nicht vollständig erläutert werden, da sie abhängig sind vom Web-Server, der Version und dem Setup des Web - Servers sowie weiteren Faktoren.
Ungeachtet dieser Faktoren folgt nun eine Liste von vordefinierten Variablen innerhalb einer Basis-PHP 3 - Installation als Modul und einer Basis-Installation des Apache -Web-Servers in der Vers.
Anmerkung:
Sie dient lediglich als Anleitung zu den möglicherweise zu erwartenden Arten von vordefinierten Variablen und dem Zugriff darauf.
Es könnten einige sein; es könnten aber auch hier nicht aufgeführte sein.
Beachten Sie, dass nur wenige, wenn überhaupt, dieser Variablen zur Verfügung stehen (oder tatsächlich eine beliebige Bedeutung haben), wenn Sie PHP per Kommandozeile aufrufen.
Der Host-Name des Web-Servers, der das Skript ausführt.
Der Identifikations-String des Web-Servers (aus den Headern), sobald er Anforderungen beantwortet.
Welche Methode zum Zugriff auf die Seite benutzt wurde, z.B. 'GET', 'HEAD', 'POST', 'PUT'.
Das Verzeichnis des gerade ausgeführten Skripts aus Sicht des in der Konfigurations-Datei des Servers definierten Dokument-Wurzel-Verzeichnisses.
Inhalt des Accept-Charset: -Headers der aktuellen Anforderung (sofern es einen gibt).
Die Adresse (URL) - sofern vorhanden - der Seite, von der aus auf die aktuelle Seite gesprungen wurde.
Dabei handelt es sich um eine Zeichenkette, welche der Browser benennt, mit dem die aktuelle Seite aufgerufen wurde, z.B.
Die IP-Adresse, von der aus gerade auf die Web-Seite zugegriffen wird.
Der Inhalt der in der Konfigurations-Datei des Web-Servers (Apache) stehenden Angabe zum SERVER_ADMIN.
Der vom Server für den Web-Server benutzte Kommunikations - Port (normalerweise '80').
Sofern eingeschaltet, enthält diese Zeichenkette die Server - Version und den virtuellen Host-Namen.
In Abhängigkeit vom Datei - / File-System der Pfad des aktuellen Skripts, nachdem der Server das virtuelle Mapping in ein reales Mapping umgesetzt hat (nicht der Dokument-Wurzel-Pfad).
Nützlich für Seiten, die auf sich selbst verweisen müssen.
Diese Variablen werden aus der Umgebung, in der PHP läuft, in den globalen Namensbereich von PHP importiert.
Da es verschiedenste Systemumgebungen mit den unterschiedlichsten Shell`s gibt, ist es nicht möglich, eine abschließende Liste der definierten Umgebungs-Variablen aufzustellen.
Andere Umgebungs-Variablen beinhalten die CGI-Variablen, die ohne Rücksicht darauf, ob PHP als Web-Server-Modul oder im CGI-Modus läuft, gesetzt werden.
Wenn dies der Fall ist, werden diese Variablen immer gesetzt, selbst wenn es leere Arrays sind.
Seit PHP 4.0.3 ist track_vars immer aktiviert, ohne Rücksicht auf die Einstellungen in der Konfigurationsdatei.
Im 4.1.0 Release Announcement können Sie mehr Details nachlesen.
Wenn register_globals aktiviert ist,stehen auch diese Variablen im globalen Namensbereich des Skripts zur Verfügung; z.B. getrennt von den Arrays $HTTP_*_VARS und $_*.
Ein Array von Argumenten, die dem Skript übergeben werden.
Beim Aufruf per GET-Methode enthält dieses Array die Abfragewerte.
Der Dateiname des gerade ausgeführten Skripts, relativ zum Wurzel-Verzeichnis des Dokuments.
Ein assoziatives Array von Variablen, das dem aktuellen Skript über HTTP-Cookies übergeben wurde.
Ein assoziatives Array von Variablen, das dem aktuellen Skript per HTTP-GET-Methode übergeben wurde.Automatisch global in jedem Geltungsbereich.
Ein assoziatives Array aus Varaiblen, welches dem aktuellen Skript per HTTP-POST-Methode übergeben wurde.
Automatisch global in jedem Geltungsbereich.
Siehe Dateiuploads mit POST für Informationen über den Inhalt der $HTTP_POST_FILES.
Siehe Dateiuploads mit POST für Informationen über den Inhalt der $_FILES .Automatisch global in jedem Geltungsbereich.
Ein assoziatives Array aus Variablen, die dem aktuellen Skript über die Umgebung zur Verfügung stehen.
Diese Variablen sind analog zu den oben beschriebenen Apache-Variablen.
Diese Variablen sind analog zu den oben beschriebenen Apache-Variablen.
Eingeführt in PHP 4.1.0.
Ein assoziatives Array aus Session-Variablen, die dem aktuellen Skript übergeben wurden.
Werden dem Array $_SESSION neue Einträge hinzugefügt, werden diese automatisch als Session-Variablen registriert, genau so als ob die Funktion session_register() aufgerufen worden wäre.
Mit anderen Worten - alle Informationen die vom Nutzer kommen und denen aus Sichtweise der Sicherheit nicht zu trauen ist.
Eingeführt in PHP 4.1.0.
Zurück
Zum Anfang
Nach vorne
Variablen
Nach oben
Geltungsbereich von Variablen
PHP Handbuch
Zurück
Kapitel 8.
Variablen
Nach vorne
Der Geltungsbereich einer Variablen ergibt sich aus dem Zusammenhang, in dem sie definiert wurde.
Meistens besteht dieser aus einem einzigen Bereich.
Dieser beinhaltet auch den Bereich für Dateien, die per "include" - oder "require "-Anweisung eingebunden wurden, z.B.:
$a = 1; include "b.inc";
Die Variable $a ist auch in der eingebundenen Datei b.inc verfügbar.
In benutzerdefinierten Funktionen wird ein auf die Funktion beschränkter Geltungsbereich eingeführt.
Jede in einer Funktion benutzte Variable ist zunächst auf den lokalen Bereich der Funktion beschränkt, z.B.:
$a = 1; / / globaler Bereich function test () {echo $a; / / Referenz auf einen lokalen Variablen-Bereich} test ();
Dieses Skript erzeugt keine Bildschirm-Ausgabe, da sich die Echo - Anweisung auf eine lokale Variable namens $a bezieht und dieser kein Wert im lokalen Bezug zugewiesen worden ist.
Dies ist ein kleiner Unterschied zu C, wo globale Variablen auch in Funktionen vorhanden sind, es sei denn, sie werden durch eine funktionsinterne Definition überschrieben.
Das kann zu Problemen führen, denn in PHP müssen global geltende Variablen innerhalb von Funktionen als solche definiert werden.
Ein Beispiel:
$a = 1; $b = 2; function Sum() {global $a, $b; $b = $a + $b;} Sum(); echo $b;
Das obige Skript gibt "3" aus.
Durch das Deklararieren der Variablen $a und $b innerhalb der Funktion als global, weisen alle Referenzen zu beiden Variablen auf die nun globalen Werte.
Es gibt keine Beschränkungen bei der Anzahl an globalen Variablen, die durch eine Funktion verändert werden können.
Das obige Beispiel kann damit auch so geschrieben werden:
$a = 1; $b = 2; function Sum() {$GLOBALS["b"] = $GLOBALS["a"] + $GLOBALS["b"];} Sum(); echo $b;
Das $GLOBALS -Array ist ein assoziatives Array mit dem Bezeichner der globalen Variablen als Schlüssel und dem Inhalt dieser Variablen als Wert des Array-Elements.
Ein weiterer wichtiger Anwendungszweck von Variablen-Bereichen ist die static -Variable.
Eine statische Variable existiert nur in einem lokalen Funktions-Bereich, der Wert geht beim Verlassen dieses Bereichs aber nicht verloren.
Schauen sie das folgende Beispiel an:
function test () {$a = 0; echo $a; $a++;}
Diese Funktion ist sinnlos, da sie bei jedem Aufruf $a auf 0 setzt und "0" ausgibt.
Die Anweisung $a++, welche den Wert erhöht, macht keinen Sinn, da der Wert von $a beim Verlassen der Funktion verloren geht.
Um eine sinnvolle Zählfunktion zu implementieren, die ihren aktuell gesetzten Wert nicht vergisst, müssen sie die Variable $a als "static" deklarieren:
function test() {static $a = 0; echo $a; $a++;}
Jetzt wird bei jedem Aufruf der test( )-Funktion der aktuelle Wert von $a ausgegeben und dann um 1 erhöht.
Static-Variablen ermöglichen auch einen Weg zum Umgang mit rekursiven Funktionen.
Das sind Funktionen, die sich selbst aufrufen.
Hierbei besteht die Gefahr, so genannte Endlos - Schleifen zu programmieren.
Sie müssen also einen Weg vorsehen, diese Rekursion zu beenden.
Die folgende einfache Funktion zählt rekursiv bis 10.
Die statische Variable $count wird benutzt, um die Rekursion zu beenden:
function test() {static $count = 0; $count++; echo $count; if ($count 10) {test ();} $count--;}
Zurück
Zum Anfang
Nach vorne
Vordefinierte Variablen
Nach oben
Variable Variablen
PHP Handbuch
Zurück
Kapitel 8.
Variablen
Nach vorne
Manchmal ist es komfortabel, variable Variablen-Bezeichner zu benutzen.
Das bedeutet, einen Variablen-Namen zu setzen und dynamisch zu gebrauchen.
Eine normale Variable wird wie folgt gebildet:
$a = "Hallo";
Eine variable Variable nimmt den Wert einer Variablen und behandelt ihn als Bezeichner der Variablen.
Im obigen Beispiel kann Hallo als Variablen-Name gebraucht werden, indem man zwei $-Zeichen benutzt, also schreibt:
$$a = "Welt";
Nun existieren in der PHP-Symbol-Struktur zwei definierte und gespeicherte Variablen: $a mit dem Inhalt "Hallo" und $Hallo mit dem Inhalt "Welt ".
Deshalb wird die Anweisung
echo "$a ${$a}";
zur genau gleichen Ausgabe führen wie:
echo "$a $Hallo";
Hallo Welt.
Wenn sie variable Variablen mit Arrays verwenden, müssen sie eine Doppeldeutigkeit beachten.
Wenn sie nämlich $$a[ 1] schreiben, dann muss der Parser wissen, ob Sie $a[1] als Variable oder $$a als Variable und dann [1] als Index dieser Variablen verwenden wollen bzw. gemeint haben.
Die Syntax zur Lösung dieser Doppeldeutigkeit:
Verwenden Sie im ersten Fall ${$a[1]} und im zweiten Fall ${$a}[1].
Zurück
Zum Anfang
Nach vorne
Geltungsbereich von Variablen
Nach oben
Variablen ausserhalb von PHP
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Warnung
Warnung
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Publikationen über PHP
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang B.
Nach vorne
Beispiel B-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
Migration von PHP / FI 2.0 zu PHP 3.0
PHP Handbuch
Zurück
Nach vorne
PHP 3.0 wurde komplett neu geschrieben.
Es hat einen korrekten Parser, der robuster und konsequenter ist, als der in 2.0.
3.0 ist auch wesentlich schneller und benötigt weniger Speicher.
Wie auch immer, manche dieser Verbesserungen wären ohne Änderungen der Kompatibilität nicht möglich gewesen, sowohl in der Syntax, als auch in der Funktionalität.
Außerdem haben die PHP-Entwickler versucht, sowohl die Syntax, als auch die Semantik von PHP in Version 3.0 zu säubern, was einige zusätzliche Inkompatbilitäten nach sich zog.
Auf lange Sicht glauben wir, dass diese Änderungen von Vorteil sind.
Dieses Kapitel wird versuchen, Sie durch die Inkompatbilitäten, die beim Umstieg von PHP / FI 2.0 zu PHP 3.0 vorkommen können, zu geleiten und helfen, diese zu lösen.
Neue Merkmale werden nicht berücksichtigt, außer dies ist unbedingt notwendig.
Ein Konvertierungsprogramm, welches Ihre PHP / FI 2.0 Scripts konvertieren kann, steht zur Verfügung.
Zu finden ist es im convertor Verzeichnis der PHP 3.0 Distribution.
Dieses Programm berücksichtigt nur Syntaxänderungen, also sollten Sie dieses Kapitel aufmerksam lesen.
Zurück
Zum Anfang
Nach vorne
Nach oben
Start - / End-Tags
Zurück
Fehlendes
Zurück
Zum Anfang
Übersetzungen
Nach oben
PHP Handbuch
Zurück
Nach vorne
Pattern Modifiers - - Describes possible modifiers in regex patterns
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang E.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
Liste der Funktion Aliase
PHP Handbuch
Zurück
Nach vorne
Beispiel E-1.
Beispiel E-2.
Tabelle E-1.
Warnung
Beispiel E-3.
Beispiel E-4.
Beispiel E-5.
Beispiel E-6.
Beispiel E-7.
Beispiel E-8.
Beispiel E-9.
Zurück
Zum Anfang
Nach vorne
Debugger-Protokoll
Nach oben
PHP Handbuch
Zurück
Nach vorne
PHP ist die Abkürzung für "PHP:
PHP läßt sich in HTML einbinden.
Seine Syntax erinnert an C, Java und Perl und es ist einfach zu erlernen.
Aber PHP kann noch mehr.
Dieses Handbuch besteht vorranging aus einer Funktionsreferenz, enthält aber zusätzlich auch eine Sprachreferenz, Erklärungen zu den wichtigsten Features und anderen ergänzenden Informationen.
Sie können dieses Handbuch in verschiedenen Formaten unter http: / /www.php.net / docs.php herunterladen.
Die Downloads werden aktualisert sobald sich der Inhalt verändert.
Weitere Informationen wie dieses Handbuch erstellt wird finden Sie im Anhang unter dem Kapitel 'Über dieses Handbuch'.
Zurück
Zum Anfang
Nach vorne
PHP Handbuch
Einführung
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen stehen nur zur Verfügung, wenn PHP als Apache 1.x Modul läuft.
Informationen zur Installation von PHP unter Apache 1.x finden Sie im Kapitel Installation unter dem Abschnitt zu Apache
Das Verhalten des Apache PHP-Moduls wird durch Einstellungen in der php.ini Das Verhalten des Apache PHP-Moduls wird durch Einstellungen in der php.ini beeinflusst.
Konfigurationseinstellungen aus der php.ini können Sie durch php_flag Einstellungen in der Server Konfigurationsdatei oder lokal in .htaccess Dateien überschreiben.
Beispiel 1.
Parsen von PHP für ein Verzeichnis ausschalten mittels .htaccess
Tabelle 1.
Apache Konfigurations Optionen
Bezeichnung
Grundeinstellung
Änderbar
Bedeutung
Parsen von PHP ein / -auschalten
Gibt an, ob PHP Skripte veranlassesn, das Kindprozesse nach dem Request beendet werden, siehe auch apache_child_terminate()
Das letzte Datum der Änderung des PHP Skripts wird als Last-Modified: header für diese Request gesendet.
Dateien mit gesetztem ausführbaren Bit werden unabhängig von ihrer Dateiendung durch PHP geparst.
Hier eine kurze Erklärung der Konfigurationsoptionen:
Diese Option ist in erster Linie nur sinnvoll, wenn PHP als Modul in den Apache einkompiliert wurde.
Sie wird von Seiten benutzt, die den PHP-Parser für bestimmte Verzeichnisse oder virtuelle Server aus - bzw. einschalten wollen.
Wenn Sie engine off in den dafür vorgesehenen Blöcken in der httpd.conf Datei benutzen, kann PHP aktiviert bzw. deaktiviert werden.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Funktionsreferenz
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben es, Arrays auf verschiedene Arten zu manipulieren bzw. mit ihnen zu interagieren.
Arrays sind wichtig, um Gruppen von Variablen zu verwalten, zu bearbeiten, oder zu speichern.
Es werden einfache und mehrdimensionale Arrays unterstützt, welche entweder vom Benutzer oder von einer anderen Funktion erstellt werden können.
Es gibt bestimmte Datenbankfunktionen, welche die Ergebnisse aus Datenbankabfragen in Arrays speichern, und verschiedene andere Funktionen, die Arrays als Rückgabewerte haben.
Im Abschnitt Arrays finden Sie eine detaillierte Erklärung, wie Arrays in PHP implementiert sind und wie sie benutzt werden.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Die aufgelisteten Konstanten stehen immer zur Verfügung, da sie zum Grundbestand von PHP gehören.
CASE_LOWER wird benützt mit array_change_key_case() um die Schlüssel von Arrays in Kleinbuchstaben umzuwandeln.
Das ist auch der Standard für array_change_key_case().
CASE_UPPER wird benützt mit array_change_key_case() um die Schlüssel von Arrays in Kleinbuchstaben umzuwandeln.
Siehe auch is_array(), explode(), implode(), split(), preg_split() und join().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die aspell() Funktionen erlauben es ein Wort auf korrekte Rechtschreibung zu prüfen und Alternativen anzubieten.
Aspell arbeitet nur mit ziemlich alten (bis .27.* oder so) Versionen der Aspell Bibliothek zusammen.
Weder dieses Modul noch jene Versionen der Aspell Bibliothek werden nicht mehr länger unterstützt.
Falls Sie eine Rechtschreibprüfung mit PHP benutzen wollen, verwenden Sie statt dessen die Pspell Funktionen.
Diese nutzen die Pspell Bibliothek und arbeiten mit neueren Versionen von Aspell zusammen.
Sie benötigen die aspell-Bibliothek von: http: / /aspell.sourceforge.net /.
Siehe auch pspell.
Zurück
Zum Anfang
Nach vorne
Nach oben
aspell_check-raw
PHP Handbuch
Zurück
Nach vorne
Unterstützt werden Zahlen beliebiger Länge und Genauigkeit, die als String vorliegen.
Seit PHP 4.0.4 ist libbcmath in PHP enthalten.
Sie brauchen keine externen Bibliotheken für diese Erweiterung.
In PHP 4 sind diese Funktionen nur verfügbar, wenn PHP mit --enable-bcmath konfiguriert wurde.
In PHP 3 sind diese Funktionen nur verfügbar, wenn PHP nicht mit --disable-bcmath konfiguriert wurde.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
BC math Konfigurations-Optionen
Standard
Veränderbar
Beschreibung der Konfigurations-Optionen
Anzahl der Dezimalstellen für alle bcmath Funktionen.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die bzip2-Funktionen werden benutzt, um transparent bzip2 (.bz2 )-komprimierte Dateien lesen und schreiben zu können.
Dieses Module nutzt die Funktionen der bzip2 -Bibliothek von Julian Seward.
Die Bzip2-Unterstützung in PHP ist nicht standardmäßig aktiviert.
Dazu ist die bzip2 / libbzip2 version = 1.0.x. nötig.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Einen Dateizeiger, der die Datei idenitfiziert, mit der gearbeitet werden soll.
Diese Erweiterung definiert keine Konstanten.
Dieses Beispiel öffnet eine tempräre Datei und schreibt einen Teststring in diese, dann gibt es den Inhalt der Datei aus.
Beispiel 1.
Ein kleines bzip2() Beispiel
lt; ?php $filename = "/ tmp / testfile.bz2"; $str = "This is a test string.\n"; / / open file for writing $bz = bzopen($filename, "w"); / / write string to file bzwrite($bz, $str); / / close file bzclose($bz); / / open file for reading $bz = bzopen($filename, "r"); / / read 10 characters print bzread($bz, 10); / / output until end of the file (or the next 1024 char) and close it. print bzread($bz); bzclose($bz);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses Modul bietet eine Reihe von Funktionen, die die Umwandlung von Daten zwischen verschiedenen Kalendern erleichtern.
Die gemeinsame Basis für diese Umwandlung bildet das Julianische Datum J.
D. (nicht zu verwechseln mit dem Julianischen Kalender).
Das J.
1.
Chr.
D.
Weitere Informationen zum Thema liefert die Seite http: / /genealogy.org / ~scottlee / cal-overview.html, aus der Teile der Erklärungen in den folgenden Funktionsbeschreibungen stammen.
Warnung
In PHP3 und älteren Versionen von PHP4 (bis einschließlich PHP4RC1) sind diese Funktionen nur verfügbar, wenn Sie die Kalender-Erweiterungen unter dl / calendar übersetzt haben.
Weitere Informationen finden Sie in der Datei dl / README.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktionsschnittstelle der CCVS API erlaubt es direkt von PHP Scripten aus mit CCVS zu arbeiten.
CCVS ist RedHat' s Lösung zu dem "Mann in der Mitte "bei der Abwicklung von Kreditkarten.
Es stellt die Möglichkeit zur Verfügung sich direkt über einen Unixrechner und ein Modem zu einem Kartenanbieter zu verbinden.
Mit hilfe des CCVS Modules für PHP kann man Kreditkarten direkt durch CCVS über PHP Scripte abwickeln.
Die folgende Referenz wird diesen Vorgang umreissen.
Um CCVS Unterstützung zu aktivieren, sollte man erst das CCVS Installationsverzeichnis überprüfen.
Wenn diese Option ohne den Pfad zu CCVS installation angegeben wird, versucht PHP es in den voreingestellten Pfaden einer CCVS standard installation (/ usr / local / ccvs) zu finden.
Wenn CCVS nicht den Standard Pfad hat, ist es nötig configure mit --with-ccvs=$ccvs_pfad zu starten, wobei $ccvs_pfad der Pfad zu installation ist.
Anzumerken ist, dass CCVS Unterstützung vorausetzt, dass $ccvs_pfad / lib und $ccvs_pfad / include existieren, und dass die Includedatei cv_api.h im include Verzeichnis, und libccvs.a im lib Verzeichnis liegen.
Ausserdem muss ein ccvsd Prozess für die Einstellungen laufen die mit PHP Skripten arbeiten sollen.
Es ist nötig das die PHP Prozesse unter dem selben Benutzer laufen für den auch ccvs installiert wurde (bsp: wenn ccvs unter dem user 'ccvs 'installiert wurde, müssen die PHP Prozesse ebenfalls als 'ccvs' laufen.)
Weiter Informationen zu CCVS kann man unter http: / /www.redhat.com / products / ccvs finden.
An diesem Dokumentationsteil wird noch gearbeitet.
RedHat unterhält eine geringfügig veraltete aber immernoch brauchbare Dokumentation unter: http: / /www.redhat.com / products / ccvs / support / CCVS3.3docs / ProgPHP.html.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen ermöglichen Ihnen den Zugriff auf Informationen über Klassen und Objektinstanzen.
Sie können den Namen der Klasse ermitteln, zu der ein Objekt gehört, sowie ihre Eigenschaften und -methoden.
Mit diesen Funktionen können Sie nicht nur die Klassenmitgliedschaft eines Objektes herausfinden, sondern auch ihre Abstammung (d. h. welche Klasse die des Objektes erweitert).
In diesem Beispiel definieren wir zuerst eine Basisklasse und eine Erweiterung dieser Klasse.
Die Basisklasse beschreibt ein beliebiges Gemüse, ob es eßbar ist oder nicht, sowie seine Farbe.
Die Subklasse Spinat fügt eine Methode hinzu, um sie zu kochen und eine weitere, um herauszufinden, ob sie gekocht ist.
Beispiel 1. classes.inc
?php / / Basisklasse mit Eigenschaften und Methoden class Gemuese {var $essbar; var $farbe; function Gemuese ($essbar, $farbe="grün ") {$this - essbar = $essbar; $this - farbe = $farbe;} function ist_essbar() {return $this - essbar;} function welche_farbe() {return $this - farbe;}} / / Ende der Klasse Gemuese / / erweitert die Basisklasse class Spinat extends Gemuese {var $gekocht = false; function Spinat() {$this - Gemuese (true, "grün");} function koche_es() {$this - gekocht = true;} function ist_gekocht() {return $this - gekocht;}} / / Ende der Klasse Spinat?
Jetzt instantiieren wir zwei Objekte von diesen Klassen und geben Informationen über sie aus, einschließlich ihrer Abstammung.
Wir definieren auch einige Hilfsfunktionen, hauptsächlich um eine hübsche Ausgabe der Variablen zu erhalten.
Beispiel 2. test_script.php
pre ?php include "classes.inc"; / / utility functions function zeige_vars($obj) {$arr = get_object_vars($obj); while (list($prop, $val) = each($arr)) echo "\t$prop = $val\n";} function zeige_methoden($obj) {$arr = get_class_methods(get_class($obj)); foreach ($arr as $method) echo "\tfunction $method()\n";} function klassen_abstammung($obj, $class) {global $$obj; if (is_subclass_of($$obj, $class)) {echo "Objekt $obj gehört zur Klasse ".get_class($$obj); echo" einer Subklasse von $class\n";} else {echo "Object $obj gehört nicht zu einer Subklasse von $class\n";}} / / Instantiiere zwei Objekte $veggie = new Gemuese(true ,"blau"); $leafy = new Spinat(); / / Informationen über die Objekte ausgeben echo "veggie:
KLASSE ".get_class($veggie) ."\n"; echo "leafy:
KLASSE ".get_class($leafy); echo", ELTERN ".get_parent_class($leafy) ."\n"; / / Zeige Eigenschaften von veggie echo "\nveggie:
Eigenschaften\n"; zeige_vars($veggie); / / und Methoden von leafy echo "\nleafy:
Methoden\n"; zeige_methoden($leafy); echo "\nAbstammung:\n"; klassen_abstammung("leafy", "Spinat"); klassen_abstammung("leafy", "Gemuese");? / pre
Darum gibt der letzte Teil des obigen Skripts folgendes aus:
[...] Abstammung:
Objekt leafy gehört nicht zu einer Subklasse von Spinat Objekt leafy gehört zur Klasse spinat einer Subklasse von Gemuese
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Komponenten stellen Schnittstellen bereit, welche die verfügbaren Funktionen, aber nicht deren Implementierung bekanntgeben (z.B. auf welcher Maschine die Komponente gespeichert ist und die Executable, die sie enthält).
Man sich das wie einen super Remote Procedure Call (RPC) Mechanismus mit einigen grundlegenden Objekten vorstellen.
Es trennt die Implementation von der Schnittstelle.
Position der Executable und die Sprache, in welcher die Komponente geschrieben wurde.
Die COM Funktionen sind nur in der Windowsversion von PHP verfügbar.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Com Konfigurationsoptionen
Standardwert
Änderbar
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Weitere Informationen zu COM finden Sie in der COM specification, oder in Don Box' s Yet Another COM Library (YACL).
Zurück
Zum Anfang
Nach vorne
Nach oben
com
PHP Handbuch
Zurück
Nach vorne
Mit der ClibPDF können Sie PDF-Dokumente mit PHP erstellen.
Funktionalität und API der ClibPDF sind der PDFlib ähnlich.
Diese Dokumentation sollten Sie zusammen mit dem ClibPDF-Handbuch lesen, weil letzteres diese Bibliothek viel ausführlicher erklärt.
Die Namen vieler Funktionen in der ClibPDF, im PHP-Modul und in der PDFlib Die Namen vieler Funktionen in der ClibPDF, im PHP-Modul und in der PDFlib sind gleich.
Außer cpdf_open() nehmen alle Funktionen die Bezeichnung des Dokuments als ihren ersten Parameter.
Diese Bezeichnung wird gegenwärtig nicht intern verwendet, weil ClibPDF die gleichzeitige Erzeugung mehrerer PDF-Dokumente nicht unterstützt.
Da das Ergebnis nicht vorhersehbar ist, sollten Sie es am besten nicht einmal testen.
Die Folgen, die das in einer multi-threaded Umgebung hätte, kann ich nicht abschätzen.
Laut ClibPDF-Autor wird sich das in einer der nächsten Versionen ändern (als dieses geschrieben wurde, war Version 1.10 aktuell).
Verwenden Sie das pdflib-Modul, wenn Sie diese Funktionalität benötigen.
Eine nette Eigenschaft der ClibPDF (und der PDFlib) ist die Möglichkeit, das PDF-Dokument vollständig im Speicher zu erzeugen, ohne temporäre Dateien zu verwenden.
Dies ist eine praktische Fähigkeit, die bei Verwendung der PDFlib aber auch mit pdf_translate() simuliert werden kann.
Eine weitere nette Eigenschaft von ClibPDF ist die Tatsache, dass jede Seite jederzeit geändert werden kann, selbst wenn schon eine neue Seite geöffnet wurde.
Die Funktion cpdf_set_current_page() erlaubt es, die aktuelle Seite zu verlassen und mit den Änderungen einer anderen Seite fortzufahren.
Die meisten Funktionen sind ziemlich einfach zu benutzen.
Der schwierigste Teil ist wahrscheinlich die Erzeugung eines sehr einfachen PDF-Dokuments überhaupt.
Das folgende Beispiel sollte für Sie eine gute Starthilfe sein.
Es erzeugt ein Dokument mit einer Seite.
Die Seite enthält den Umriss des Textes "Times-Roman" in 30-Punkt-Schrift.
Der Text ist unterstrichen.
Um die ClibPDF-Funktionen benutzen zu können, müssen Sie das ClibPDF-Paket installieren.
Es ist zum Herunterladen erhältlich von FastIO, aber für deren kommerzielle Verwendung ist es erforderlich, dass Sie eine Lizenz erwerben.
Für PHP wird cpdflib = 2 benötigt.
Damit diese Funktionen zur Verfügung stehen, müssen Sie PHP mit --with-cpdflib[ =DIR] übersetzen.
DIR ist das cpdflib-Installationsverzeichnis, standardmäßig / usr.
Zusätzlich können Sie die jpeg - und tiff-Bibliotheken für die Verwendung durch ClibPDF angeben.
Das erreichen Sie, indem Sie an ihre Konfigurationszeile die Optionen --with-jpeg-dir[ =DIR] --with-tiff-dir[=DIR] anfügen.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Beispiel 1.
Ein einfaches ClibPDF-Beispiel
?php $cpdf = cpdf_open( 0); cpdf_page_init($cpdf, 1, 0, 595, 842, 1.0); cpdf_add_outline($cpdf, 0, 0, 0, 1, "Seite 1"); cpdf_begin_text($cpdf); cpdf_set_font($cpdf, "Times-Roman", 30, "WinAnsiEncoding"); cpdf_set_text_rendering($cpdf, 1); cpdf_text($cpdf, "Times Roman outlined", 50, 750); cpdf_end_text($cpdf); cpdf_moveto($cpdf, 50, 740); cpdf_lineto($cpdf, 330, 740); cpdf_stroke($cpdf); cpdf_finalize($cpdf); Header("Content-type: application / pdf"); cpdf_output_buffer($cpdf); cpdf_close($cpdf);?
Die pdflib-Distribution enthält ein komplexeres Beispiel, das eine Reihe von Seiten mit einer Analoguhr erzeugt.
Hier ist dieses Beispiel, das unter Verwendung der ClibPDF-Erweiterung in PHP konvertiert wurde:
Beispiel 2. pdfclock-Beispiel der pdflib 2.0 Distribution
Siehe auch die Dokumentation der PDFlib -Erweiterung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben die Nutzung der CrackLib Bibliothek, die dazu verwendet werden kann, die 'Stärke' eines Passworts zu überprüfen.
Die 'Stärke' eines Passwortes wird über die Länge, die Benutzung von Groß - und Kleinschreibung und den Vergleich des Passwortes gegen ein bestimmtes Cracklib-Wörterbuch überprüft.
Die Cracklib gibt hilfreiche Fehlermeldungen zurück, die es erlauben, das Passwort zu 'verstärken'.
Weiterführende Informationen zur CrackLib können unter http: / /www.users.dircon.co.uk / ~crypto / gefunden werden.
Um diese Funktionen nutzen zu können, muss PHP mittels --with-crack[ =DIR] mit Crack-Support compiliert werden. option.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Anschließend wird das Wörterbuch wieder geschlossen.
Beispiel 1.
CrackLib Beispiel
?php / / Öffne das CrackLib Wörterbuch $dictionary = crack_opendict( '/ usr / local / lib / pw_dict') or die('Kann das CrackLib Wörterbuch nicht öffnen'); / / Führe eine Überprüfung des Passworts durch $check = crack_check($dictionary, 'gx9A2s0x'); / / Empfange Rückmeldungen $diag = crack_getlastmessage(); echo $diag; / / 'starkes Passwort' / / Schliesse das Wörterbuch crack_closedict($dictionary);?
Anmerkung:
Wenn crack_check() TRUE zurückliefert, wird crack_getlastmessage() 'strong password 'zurückliefern.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Funktionen dieser Extension überprüfen, ob ein Zeichen oder eine Zeichenkette in eine bestimmte Zeichenklasse fällt, unter Berücksichtigung der momentanen locale-Einstellung (Siehe auch setlocale()).
Beim Aufruf mit einem Integer-Argument verhalten sich diese Funktionen exakt wie ihre C-Gegenstücke aus ctype.h.
Beim Aufruf mit einem String-Argument überprüfen Sie jedes einzelne Zeichen und geben nur TRUE zurück, wenn jedes einzelne Zeichen die angeforderten entsprechenden Kriterien erfüllt.
Beim Aufruf mit einer leeren Zeichenkette wird immer TRUE zurückgegeben.
Sobald irgendetwas anderes als String oder Integer als Argument übergeben wird, wird sofort FALSE zurückgegeben.
Keine außer der Funktionen aus der C-Bibliothek, die immer verfügbar sind.
Seit PHP 4.2.0 sind diese Funktionen standardmäßig aktiviert.
In älteren Versionen müssen Sie PHP mit --enable-ctype konfigurieren.
Sie können die cytpe-Unterstützung mit --disable-ctype abschalten.
Anmerkung:
Ab PHP 4.3.0 ist eine integrierte ctype-Unterstützung vorhanden.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen sind nur dann verfügbar, wenn der Interpreter mit der Option --with-cybercash=[ DIR] kompiliert wurde, und sie wurden mit PHP 4 eingeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Extension ist für den Ablauf der Kreditkartentransaktionen des Crédit Mutuel CyberMUT Systems (http: / /www.creditmutuel.fr / centre_commercial / vendez_sur_internet.html) zuständig.
CyberMUT ist ein populärer französischer Service der Bank Crédit Mutuel für das Bezahlen im Web.
Wenn Sie nicht aus Frankreich sind werden Sie mit diesen Funktionen nichts anfangen können.
Sie benötigen das entsprechende SDK für Ihr Betriebssytem, welches Ihnen nach der Bestellung von CyberMUT zugesendet wird (Kontakt:
Über das Web oder in der nächsten Filiale der Crédit Mutuel).
Diese Funktionen wurden in PHP 4.0.6 hinzugefügt.
Diese Funktionen stellen nur eine Verbindung zum CyberMUT SDK her.
Lesen Sie auf jeden Fall den CyberMUT Developers Guide für alle Details der benötigten Parameter.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Es steht nur die Liste der Argumente zur Verfügung.
Anmerkung:
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen ermöglichen es Ihnen, Datums - und Zeitangaben vom Server, auf dem PHP läuft, abzufragen.
Die Ausgabe von Datums - und Zeitangaben kann mit Hilfe dieser Funktionen in unterschiedlichster Weise formatiert werden.
Anmerkung:
Beachten Sie bitte, dass diese Funktionen von den lokalen Systemeinstellungen Ihres Servers abhängen.
Ein besonderes Augenmerk sollten Sie auf Sommer - und Winterzeit und Schaltjahre haben.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen bilden die Basis für den Zugriff auf Datenbanken vom Typ "Berkeley DB".
"dba" implementiert eine generelle Abstraktionsschicht für verschiedene dateibasierte Datenbanken.
Der Funktionsumfang ist daher beschränkt auf eine gemeinsame Teilmenge des Funktionsumfangs aktueller Datenbanken (zum Beispiel Sleepycat Software's DB2, nicht zu verwechseln mit IBM's DB2 Software, die über die ODBC Funktionen unterstützt wird).
Das Verhalten der dba-Funktionen ist teilweise abhängig von der Implementation des zugrundeliegenden Datenbanksystems.
Funktionen wie zum Beispiel dba_optimize() und dba_sync() funktionieren vielleicht bei einer Datenbank, und tun gar nichts bei einer Anderen.
Beim Aufruf von dba_open() oder dba_popen() muss einer der verfügbaren Handler-Namen aus der nachfolgenden Handler-Tabelle angegeben werden.
Die tatsächlich verfügbaren Handler in Ihrer PHP-Installation können Sie mit der Funktion phpinfo() anzeigen lassen. (Um zum Zeitpunkt der PHP-Generierung die Unterstützung für einen der folgenden Handler verfügbar zu machen, fügen Sie bitte den jeweils angegebenen --with-XXXX Compilerschalter in ihren PHP-Konfigurations-Aufruf ein.)
Tabelle 1.
Liste der DBA-Handler
Hinweise
Dbm ist der ursprüngliche und älteste Typ der "Berkeley DB" Datenbanken.
Sie sollten diesen Typ wenn möglich vermeiden.
Die in DB2 und gdbm enthaltenen dbm-Kompatibilitätsfunktionen werden ebenfalls nicht unterstützt, da sie nur auf Quellcode-Basis kompatibel sind, aber Dateien im originalen dbm-Format nicht bearbeiten können. (--with-dbm)
Ndbm ist neuer und flexibler als Dbm.
Es hat jedoch die meisten Einschränkungen von Dbm übernommen und ist daher ebenfalls nicht empfehlenswert. (--with-ndbm)
Gdbm ist der GNU Datenbank Manager. (--with-gdbm)
DB2 ist Sleepycat Software 's DB2.
Es wird beschrieben als "Werkzeugsatz für eingebaute Unterstützung von Hochleistungs-Datenbanken für Standalone - und Client / Server - Applikationen". (--with-db2)
DB3 ist Sleepycat Software' s DB3. (--with-db3)
Cdb ist "ein schnelles, zuverlässiges und kompaktes Paket zum Erstellen und Auslesen konstanter Datenbanken." Es stammt vom Autor von qmail und kann hier heruntergeladen werden.
Da es für konstante Daten ausgelegt ist, werden nur Lese-Operationen unterstützt. (--with-cdb)
Beispiel 1.
DBA Beispiel
?php $id = dba_open ("/ tmp / test.db", "n", "db2"); if (!$id) {echo "dba_open schlug fehl\n"; exit;} dba_replace ("key", "Dies ist ein Beispiel !", $id); if (dba_exists ("key", $id)) {echo dba_fetch ("key", $id); dba_delete ("key", $id);} dba_close ($id);?
DBA arbeitet binärsicher und besitzt keine willkürlichen Limits.
Es erbt allerdings alle Einschränkungen von der zugrundeliegenden Datenbank-Implementation.
Alle dateibasierten Datenbanken müssen einen Weg zur Verfügung stellen, um den Dateimodus einer neu erstellten Datenbank zu bestimmen, soweit dies überhaupt möglich ist.
Der Dateimodus wird gewöhnlich als viertes Argument an die Funktionen dba_open() oder dba_popen() übergeben.
Sie können auf alle Einträge in einer Datenbank sequentiell durch die Verwendung von dba_firstkey() und dba_nextkey() zugreifen.
Während die Datenbank so durchlaufen wird, darf sie nicht verändert werden.
Beispiel 2.
Durchlaufen einer Datenbank
?php # ...Oeffnen der Datenbank... $key = dba_firstkey ($id); while ($key != false) {if (...) {# den Schluessel fuer spaetere Aktionen merken $handle_later[] = $key;} $key = dba_nextkey ($id);} for ($i = 0; $i count($handle_later); $i++) dba_delete ($handle_later[$i], $id);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben ihnen den Zugriff auf Datensätze, die im dBase-Format (also in dBase-Datenbanken) (dbf) vorliegen.
Es gibt keine Unterstützug für Indizes oder Memo-Felder.
Auch Sperrfunktionen für Datensätze / -banken sind nicht vorhanden.
Zwei gleichzeitig ablaufende Webserver-Prozesse, die die selbe dBase-Datei bearbeiten, werden ihre Datenbank zerstören.
Anders als bei SQL-Datenbanken können in dBase -" Datenbanken "die Felddefinitionen nicht nachträglich geändert werden.
Es werden keine Index-Funktionen unterstützt, die Abfragen beschleunigen oder etwa ihre Datenorganisation unterstützen. dBase-Dateien sind einfache sequentielle Dateien mit fester Datensatzlänge.
Wir empfehlen, keine Produktions-DBF-Datenbanken zu benutzen.
Wählen sie zur Nutzung von Produktions-Daten mit PHP nur echte SQL-Server-Datenbanken; MySQL oder Postgres sind dabei eine gute Wahl. dBase-Unterstützung durch PHP dient hauptsächlich dem Im - und Export von Daten zu oder aus ihrer Web-Datenbank, wobei das DBF-Datei-Format vor allem wegen der Windows-Tabellenkalulationen und -Organizer unterstützt wird.
Im - und Export ist der einzige Grund für die dBase-Unterstützung durch PHP.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben Ihnen den Zugriff auf Datensätze die im DBM-Format vorliegen.
Im Gegensatz zu den relationalen Datenbanken (mySQL, etc.) werden die Datensätze in Form von ISAM-Sätzen gespeichert.
DBM Datenbanken werden von verschiedenen Systemfunktionen als interne Arbeitsbibliothek benützt.
Diese Datenbank-Art wird auch von der Berkeley DB und GDBM verwendet.
Beispiel 1.
Beispiel für ein DBM Script
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das dbx Modul ist eine Datenbank-Abstraktionsschicht (db 'X', wobei 'X 'eine unterstützte Datenbank ist).
Die dbx Funktionen ermöglichen Ihnen den Zugriff auf alle unterstützten Datenbanken mit einer einzigen Aufrufkonvention.
Die dbx Funktionen stellen selbst keinen direkten Kontakt zu den Datenbanken her, sondern benutzen dafür jene Module, welche die jeweilige Datenbank unterstützen.
Um eine Datenbank mit dem dbx-Modul verwenden zu können, muss das Modul entweder gelinkt oder in PHP geladen sein, und das Datenbankmodul muss von dem dbx-Modul unterstützt werden.
Derzeit werden folgende Datenbanken unterstützt, und weitere werden folgen:
FrontBase (verfügbar seit PHP 4.1.0).
Sybase-CT (verfügbar seit PHP 4.2.0).
Oracle (oci8) (verfügbar seit PHP 4.3.0).
Eine Dokumentation, wie dbx weitere Datenbankunterstützung hinzugefügt werden kann, finden Sie unter http: / /www.guidance.nl / php / dbx / doc /.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Anmerkung:
Im dbx-Modul werden zwei Resourcetypen verwendet.
Der erste ist ein Link-Objekt für eine Datenbankverbindung, der zweite ist ein Result-Objekt, welches das Ergebnis einer Abfrage enthält.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
PHP unterstützt die direkte Ein - / Ausgabe-Funktionen, beschrieben im Posix Standard (Kapitel 6) für die Ein - und Ausgabe auf einer niederen Ebene als die standardmässig verwendeten C-Funktionen (fopen, fread,...).
Um die DIO Funktionen benutzen zu können, muss PHP mit der Option --enable-dio konfiguriert werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Diese Funktionen sind nur verfügbar, wenn PHP mit der Option --with-dom=[ DIR] Diese Funktionen sind nur verfügbar, wenn PHP mit der Option --with-dom=[DIR] konfiguriert und kompiliert wurde.
Hierfür wird mindestens libxml-2.0.0 benötigt (die Beta-Version reicht nicht).
Diese Funktionen wurden in PHP4 eingeführt.
Dieses Modul definiert die folgenden Konstanten:
Tabelle 1.
XML Konstanten
Konstante
Wert
Beschreibung
XML_ELEMENT_NODE
XML_ATTRIBUTE_NODE
XML_TEXT_NODE
XML_CDATA_SECTION_NODE
XML_ENTITY_REF_NODE
XML_ENTITY_NODE
XML_PI_NODE
XML_COMMENT_NODE
XML_DOCUMENT_NODE
XML_DOCUMENT_TYPE_NODE
XML_DOCUMENT_FRAG_NODE
XML_NOTATION_NODE
XML_GLOBAL_NAMESPACE
XML_LOCAL_NAMESPACE
Dieses Modul definiert eine Reihe von Klassen.
Die DOM XML Funktionen geben einen Parsebaum eines XML Dokumentes zurück, dessen Elemente jeweils einer der nachstehenden Klassen angehören.
DomAttribute - specified - - Überprüft, ob ein Attribut gesetzt ist.
DomAttribute - value - - Gibt den Wert eines Attributes zurück.
DomDocument - add_root [deprecated] - - Fügt ein Wurzelelement hinzu.
DomDocument - create_attribute - - Generiere ein neues Attribut.
DomDocument - create_cdata_section
DomDocumentType - entities
DomNode - append_child
DomNode - unlink_node
DomXsltStylesheet - result_dump_file
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Anmerkung:
Anmerkung:
Anmerkung:
Die aufgelisteten Konstanten stehen immer zur Verfügung, da sie zum Grundbestand von PHP gehören.
Anmerkung:
Tabelle 2.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen stellen Mittel und Wege zur Verfügung, Befehle und externe Programme auf dem System selbst auszuführen und diese Ausführung sicher durchzuführen.
Diese Funktionen stehen in enger Beziehung zum Backtick-Operator.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Über diese Funktionen können Sie auf FrontBase Datenbank-Server zugreifen.
Weiterführende Informationen über FrontBase erhalten Sie unter http: / /www.frontbase.com /.
Die FrontBase-Dokumentation finden Sie unter http: / /www.frontbase.com / cgi-bin / WebObjects / FrontBase.woa / wa / productsPage?currentPage=Documentation.
Die FrontBase-Unterstützung wurde in PHP 4.0.6 eingeführt.
Sie müssen den FrontBase Datenbank-Server oder die fbsql-Client-Bibliotheken installieren, um die Funktionen nutzen zu können.
FrontBase können Sie über http: / /www.frontbase.com / bekommen.
Damit diese Funktionen verfügbar sind, müssen Sie PHP mit fbsql-Unterstützung kompilieren.
Dazu müssen Sie die --with-fbsql Option verwenden.
Wenn Sie diese Option ohne die Angabe des Pfades zu fbsql verwenden, wird PHP nach den fbsql-Client-Bibliotheken in dem Standardverzeichnis der jeweiligen Plattform suchen.
Den Pfad sollten Sie immer angeben, wenn Sie FrontBase nicht im Standardverzeichnis installiert haben.
Die geschiet über die Option --with-fbsql= / pfad / zu / fbsql, die PHP zwingt, die von FrontBase installierten Client-Bibliotheken zu nutzen, was Konflikte vermeiden sollte.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Forms Data Format (FDF) ist ein Format zur Verarbeitung von Formularen innerhalb von PDF Dokumenten.
Weiterführende Informationen zu FDF und dessen Verwendung sind unter http: / /partners.adobe.com / asn / developer / acrosdk / forms.html zu finden.
Der Ansatz den FDF verfolgt, ist vergleichbar mit dem üblicher HTML Formulare.
Die wesentlichen Unterschiede liegen in der Übertragung der Daten nach Absenden des Formulars (dies ist das eigentliche Form Data Format), sowie in dem Format des Dokuments welches das Formular enthält(PDF).
Die Verarbeitung der FDF Daten ist eine der Möglichkeiten, die die FDF Funktionen bereitstellen.
Darüber hinaus kann man beispielsweise innerhalb eines vorhandenen PDF Formulars die Input Felder dynamisch mit Daten füllen, ohne das Formular selbst zu verändern.
Hierzu erzeugt man das FDF Dokument (fdf_create()), setzt die Werte der jeweiligen Input Felder (fdf_set_value()) und verbindet es mit dem jeweiligen PDF Formular (fdf_set_file()).
Nachdem man das FDF Dokument, mit dem passenden MimeType application / vnd.fdf versehen, ausgegeben hat, erkennt das Acrobat Reader PlugIn des Browsers den MimeType und füllt das Zielformular mit den Daten des FDF Dokuments.
Betrachtet man ein FDF Dokument mit einem Text Editor, findet sich dort ein Katalog-Objekt FDF.
Dieses Objekt kann mehrere Einträge der Art Fields, F, Status etc.. enthalten.
Die gebräuchlichsten Einträge sind Fields, welches zu einer Anzahl von Input Feldern verweist, sowie F das den Dateinamen des zugehörigen PDF Dokuments enthält.
Diese Einträge finden sich in der FDF Dokumentation unter / F-Key oder / Status-Key.
Modifikationen dieser Einträge werden mit Hilfe der Funktionen fdf_set_file() und fdf_set_status() vorgenommen.
Felder werden u.a. mit fdf_set_value(), fdf_set_opt() modifiziert.
Benötigt wird das FDF-Toolkit-SDK, welches unter http: / /partners.adobe.com / asn / developer / acrosdk / forms.html Benötigt wird das FDF-Toolkit-SDK, welches unter http: / /partners.adobe.com / asn / developer / acrosdk / forms.html heruntergeladen werden kann.
Ab PHP-Version 4.3 ist mindestens die Version 5.0 des FDF-SDKs erforderlich.
Von Adobe unterstütze Plattformen sind Win32, Linux, Solaris und AIX.
Anmerkung:
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Die meisten FDF-Funktionen benötigen an erster Stelle einen fdf Die meisten FDF-Funktionen benötigen an erster Stelle einen fdf Ressource-Parameter.
Der Parameter fdf ist ein Zeiger auf eine geöffnete FDF-Datei. fdf Ressource-Parameter werden von den Funktionen fdf_create(), fdf_open() und fdf_open_string() zurückgegeben.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Das Beispiel zeigt die Auswertung der Formular Daten.
Beispiel 1.
Auswertung eines FDF_Dokuments
?php / / Speichern der FDF Daten in eine temporäre Datei $fdffp = fopen( "test.fdf", "w"); fwrite($fdffp, $HTTP_FDF_DATA, strlen($HTTP_FDF_DATA)); fclose($fdffp); / / Öffnen der temporären Datei und Auswertung der Daten / / Das PDF Formular enthält verschiedene Eingabefelder mit den zugehörigen Namen / / band, datum, kommentar, verleger, bearbeiter, sowie zwei Checkboxen / / zeige_verleger und zeige_bearbeiter. $fdf = fdf_open("test.fdf"); $band = fdf_get_value($fdf, "band"); echo "Das Feld Band hat den Wert 'B $band / B' BR "; $datum = fdf_get_value($fdf, "datum"); echo "Das Feld Datum hat den Wert 'B $datum / B' BR"; $kommentar = fdf_get_value($fdf, "kommentar"); echo "Das Feld Kommentar hat den Wert 'B $kommentar / B' BR "; if (fdf_get_value($fdf, "zeige_verleger") == "On") {$verleger = fdf_get_value($fdf, "verleger"); echo "Das Feld Verleger hat den Wert 'B $verleger / B' BR";} else {echo "Verleger soll nicht angezeigt werden.
BR ";} if (fdf_get_value($fdf, "zeige_bearbeiter") == "On") {$bearbeiter = fdf_get_value($fdf, "bearbeiter"); echo "Das Feld Bearbeiter hat den Wert 'B $bearbeiter / B' BR";} else {echo "Bearbeiter soll nicht angezeigt werden.
BR ";} fdf_close($fdf);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben Lesezugriff auf die Daten, die in einer filePro Datenbank gespeichert sind.
filePro ist eingetragenes Warenzeichen von fP Technologies, Inc.
Mehr Informationen zu filePro finden Sie unter http: / /www.fptech.com /.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Dateisystem und Streams Konfigurationsoptionen
Standardwert
Änderbar
Hier folgt eine kurze Beschreibung der Konfigurationseinstellungen.
Diese Option aktiviert den URL-aware fopen wrappern, welche den Zugriff auf URL Objekt ähnliche Dateien ermöglicht.
Standardmäßig stehen Wrapper für den Zugriff auf entfernte Dateien über das FTP oder HTTP Protokoll zur Verfügung, manche Erweiterungen wie zlib können über weitere Wrapper verfügen.
Anmerkung:
Die Option wurde unmittelbar nach der Freigabe von PHP 4.0.3 eingeführt.
In den Versionen bis zu inklusive 4.0.3 können Sie diese Eigenschaft nur während des Kompilierens mittels der Konfigurationsoption --disable-url-fopen-wrapper deaktivieren.
Warnung
In den Windowsversionen vor PHP 4.3 unterstützen die folgenden Funktionen den Zugriff auf entfernte Dateien nicht: include(), include_once(), require(), require_once(), sowie die imagecreatefromXXX Funktionen in der Verweis XLI, Grafik-Funktionen Erweiterung.
Definiert den User Agent, den PHP senden soll.
Standardtimeout (in Sekunden) für Socket basierte Streams.
Anmerkung:
Diese Konfigurationsoption wurde in PHP 4.3 eingeführt.
Definiert das anonyme FTP Passwort (Ihre E-Mail Adresse).
Wenn aktiviert, prüft PHP die mittels fgets() und file() gelesenen Daten auf die Verwendung der Konventionen für Zeilenenden von Unix, MS-Dos oder Macintosh.
Weiters verwenden einige Leute Carriage-Returns als Trennzeichen für Elemente, was auf Unix Systemen ein nicht rückwärtskompatibles Verhalten bedeuten würde.
Anmerkung:
Diese Konfigurationsoption wurde in PHP 4.3 eingeführt.
Diese Erweiterung definiert keine Konstanten.
Verwandte Funktionen finden Sie in den Abschnitten Verzeichnis-Funktionen und Funktionen zur Programmausführung.
Eine Liste mit Erklärungen der verschiedenen URL Wrapper, welche Sie auch als entfernte Dateien nutzen können, finden Sie unter Anhang I.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
FTP ist die Abkürzung für File Transfer Protocol (Datei-Übertragungs-Protokoll).
Die folgenden Konstanten sind definiert, sobald das FTP-Modul benutzt wird:
FTP_ASCII und FTP_BINARY.
Beispiel 1. ftp() -Beispiel:
?php / / Herstellen der Basis-Verbindung $conn_id = ftp_connect( "$ftp_server"); / / Einloggen mit Benutzername und Kennwort $login_result = ftp_login($conn_id, "$ftp_user_name", "$ftp_user_pass"); / / Verbindung überprüfen if ((!$conn_id) _BAR_ _BAR_ (!$login_result)) {echo "Ftp-Verbindung nicht hergestellt !"; echo "Verbindung mit $ftp_server als Benutzer $user nicht möglich"; die;} else {echo "Verbunden mit $ftp_server als Benutzer $user";} / / Upload der Datei $upload = ftp_put($conn_id, "$destination_file", "$source_file", FTP_BINARY); / / Upload-Status überprüfen if (!$upload) {echo "Ftp upload war fehlerhaft !";} else {echo "Datei $source_file auf $ftp_server als $destination_file geschrieben";} / / Schließen des FTP-Streams ftp_quit($conn_id);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die gettext Funktionen implementieren eine NLS (Native Language Support) API, welche zur Internationalisierung von PHP Anwendungen genutzt werden kann.
Eine ausführliche Erklärung der folgenden Funktionen ist in der GNU gettext Dokumentation zu finden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Warnung
Anmerkung:
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen ermöglichen die Manipulation der an den Browser gesendeten Informationen auf HTTP-Protokoll-Ebene.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
InterBase ist eine bekannte Datenbank, die von Borland / Inprise stammt.
Weitere Informationen zu InterBase finden sie unter http: / /www.interbase.com /.
Wichtig:
InterBase befindet sich gerade auf dem Weg zum Open Source!
Anmerkung:
Umfassende Unterstützung für InterBase 6 wurde in PHP 4.0 eingeführt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses Modul stellt eine Schnittstelle zu den Funktionen der iconv-Bibliothek bereit.
Die Iconv-Bibliotheksfunktionen konvertieren Dateien in verschiedene Zeichensatzkodierungen.
Die unterstützten Zeichensätze hängen von der jeweiligen iconv( )-Implementation auf Ihrem System ab.
Beachten Sie bitte, dass iconv() auf einigen Systemen nicht wie erwartet funktioniert.
In diesem Fall sollten Sie die libiconv-Bibliothek installieren.
Es muss iconv() in der Standard-C Bibliothek vorhanden sein oder libiconv auf Ihrem System installiert sein.
Die libiconv-Bibliothek ist verfügbar über http: / /www.gnu.org / software / libiconv /.
Um die Funktionen dieses Moduls nutzen zu können müssen Sie den Ihren PHP-Interpreter mit der Konfigurationsoption --with-iconv kompilieren.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Der Informix-Treiber für Informix (IDS) 7.x, SE 7.x, Universal Server (IUS) 9.x und IDS 2000 ist in "ifx.ec "und "php3_ifx.h" im Verzeichnis der Informix Erweiterung implementiert.
Die Unterstützung für IDS 7.x ist mit der vollen Unterstützung für TEXT - und BYTE-Felder ziemlich vollständig.
Die Unterstützung von IUS 9.x ist nur teilweise fertig: die neuen Datentypen gibt es zwar, aber die Unterstützung von SLOB - und CLOB-Datentypen ist noch in Arbeit.
Bemerkungen zur Konfiguration:
Sie brauchen ESQL / C, um den PHP Informix-Treiber zu kompilieren.
ESQL / C Versionen ab 7.2x sollten genügen.
ESQL / C ist jetzt Teil des Informix Client SDK.
Versichern Sie sich, dass die Variable "INFORMIXDIR" gesetzt ist und dass Sie $INFORMIXDIR / bin in Ihren Pfad eingebunden haben, bevor Sie das "configure "Skript aufrufen.
Sie können diese automatische Erkennung überschreiben, wenn Sie in der Systemumgebung "IFX_LIBDIR", "IFX_LIBS" und "IFX_INCDIR "setzen.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Anmerkung:
Die Umgebungsvariablen INFORMIXDIR und INFORMIXSERVER müssen für den PHP-Treiber verfügbar sein und das INFORMIX bin-Verzeichnis muss im Pfad enthalten sein.
Prüfen Sie diese Voraussetzungen mit einem Skript, das einen Aufruf von phpinfo() enthält, bevor Sie testen.
Die Ausgabe von phpinfo() sollte diese Umgebungsvariablen auflisten.
Dies ist sowohl für CGI PHP als auch Apache mod_php TRUE.
Möglicherweise müssen Sie diese Umgebungsvariablen in Ihrem Apache Startskript setzen.
Die Informix shared libraries sollten für den Lader ebenfalls verfügbar sein (überprüfen Sie den LD_LIBRARY_PATH oder ld.so.conf / ldconfig).
Einige Anmerkungen zum Gebrauch von BLOBs (TEXT - und BYTE Felder):
BLOBs werden normalerweise durch BLOB-Identifikatoren adressiert.
Select Abfragen geben eine "blob id" für alle TEXT - und BYTE-Felder zurück.
Sie können die Inhalte mit "string_var = ifx_get_blob($blob_id);" auslesen, falls Sie angeben, dass Sie die BLOBS in den Speicher schreiben möchten (mit "ifx_blobinfile(0) ;").
Wenn Sie die Inhalte von BLOB-Felder lieber in eine Datei ausgeben möchten, benutzen Sie "ifx_blobinfile(1);" und mit "ifx_get_blob($blob_id); "ermitteln Sie den Dateinamen.
Benutzen Sie normale Datei I / O-Routinen, um die Inhalte von BLOBs zu erhalten.
Bei insert / update Abfragen müssen Sie diese "blob id's" mit der Funktion "ifx_create_blob();" selber erzeugen.
Danach schreiben Sie die blob id' s in ein Array und ersetzen die BLOB-Felder durch ein Fragezeichen (?) im Abfragestring.
Für die Inhalte der BLOBs, die mit der Funktion ifx_update_blob() gesetzt werden, sind Sie bei updates / inserts selber verantwortlich.
Das Verhalten einer BLOB-Spalte kann auch zur Laufzeit durch Konfigurationsvariablen verändert werden.
Konfigurationsvariable: ifx.textasvarchar
Konfigurationsvariable: ifx.byteasvarchar
Laufzeitfunktionen:
ifx_textasvarchar( 0): benutzt bei SELECT Abfragen von TEXT-Felder die blob-id
ifx_byteasvarchar( 0): benutzt bei SELECT Abfragen von BYTE-Felder die blob-id
ifx_textasvarchar( 1): gibt TEXT-Felder so zurück, als wären es VARCHAR Felder, so dass Sie keine blob-id für select Abfragen brauchen.
ifx_byteasvarchar( 1): gibt BYTE-Felder so zurück, als wären es VARCHAR Felder, so dass Sie keine blob-id für select Abfragen brauchen.
Konfigurationsvariable: ifx.blobinfile
Laufzeitfunktionen:
ifx_blobinfile_mode( 0): gibt BYTE-Felder in den Speicher zurück, mit der blob-id können Sie auf den Inhalt zugreifen.
ifx_blobinfile_mode( 1): gibt BYTE-Felder in einer Datei zurück, mit der blob-id können Sie den Dateinamen ermitteln.
Wenn Sie ifx_text / byteasvarchar auf 1 setzen, können Sie TEXT - und BYTE-Felder in select Abfragen genauso benutzen, wie normale (allerdings sehr lange) VARCHAR-Felder.
Da alle Zeichenketten in PHP "gezählt" werden, bleibt dies "binary safe ".
Es bleibt Ihnen überlassen, korrekt damit umzugehen.
Die zurückgegebenen Daten können alles mögliche enthalten, so dass Sie für die Inhalte verantwortlich sind.
Wenn Sie ifx_blobinfile auf 1 setzen, benutzen Sie den Dateinamen, der von ifx_get_blob(..) zurückgegeben wird, um auf den Inhalt des BLOB zuzugreifen.
Beachten Sie, dass Sie in diesem Fall FÜR DAS LÖSCHEN DER TEMPORÄREN DATEIEN, DIE VON INFORMIX ERSTELLT WERDEN VERANTWORTLLICH SIND, wenn sie ein Tupel auslesen.
Jedes neue Tupel, das gelesen wird, erzeugt für jedes BYTE-Feld eine neue temporäre Datei.
Der Speicherort für die temporären Dateien kann mit der Umgebungsvariablen "blobdir" beeinflusst werden, die Standardeinstellung ist "." (das aktuelle Verzeichnis).
Etwas Ähnliches wie: putenv( blobdir=tmpblob"); erleichtert das Bereinigen der temporären Dateien, die versehentlich stehen geblieben sind (ihre Namen beginnen alle mit "blb").
Automatisches Abschneiden von Leerzeichen bei "char" (SQLCHAR und SQLNCHAR) Daten:
Dies kann mit einer Konfigurationsvariablen eingestellt werden
Dies erspart den Aufruf der chop() Funktion.
NULL -Werte:
Wenn die Konfigurationsvariable ifx.nullformat (und die Laufzeitfunktion ifx_nullformat()) auf TRUE gesetzt sind, werden NULL -werte in Spalten als Zeichenkette NULL zurückgegeben, wenn die Variable auf FALSE gesetzt ist, werden leere Strings für NULL werte zurückgegeben.
So können sie zwischen NULL werten und leeren Spalten unterscheiden.
Tabelle 1.
Informix Konfigurationsoptionen
Standardwert
Änderbar
Hier folgt eine kurze Beschreibung der Konfigurationseinstellungen.
Bestimmt, ob persistente Verbindungen zugelassen sind.
Gibt die maximale Anzahl persistenter Verbindungen pro Prozess an.
Gibt die maximale Anzahl der Verbindungen zum Informix Server pro Prozess an, einschliesslich der persistenten Verbindungen.
Der Standardhost, zu dem verbunden wird, wenn kein Host in ifx_connect() oder ifx_pconnect() angegeben wurde.
Diese Einstellung kann im safe mode nicht verwendet werden.
Der Standardbenutzer, wenn kein Benutzer in ifx_connect() oder ifx_pconnect() angegeben wurde.
Diese Einstellung kann im safe mode nicht verwendet werden.
Das Standardpasswort, wenn kein Passwort in ifx_connect() oder ifx_pconnect() angegeben wurde.
Diese Einstellung kann im safe mode nicht verwendet werden.
TRUE, falls blob-Spalten in eine Datei ausgegeben werden sollen, FALSE, falls blob-Spalten in den Speicher ausgegeben werden sollen.
Sie können diese Einstellung mit der Funktion ifx_blobinfile_mode() zur Laufzeit ändern.
FALSE, falls Sie blob-id Parameter benutzen wolen.
Sie können diese Einstellung mit der Funktion ifx_textasvarchar() zur Laufzeit ändern.
FALSE, falls Sie blob-id Parameter benutzen wolen.
Sie können diese Einstellung mit der Funktion ifx_textasvarchar() zur Laufzeit ändern.
TRUE, falls Sie abschliesende Leerzeichen von CHAR Spalten beim Auslesen abschneiden wollen.
FALSE, falls für Nullwerte leere Strigs "" zurückgegeben werden sollen.
Sie können diese Einstellung mit der Funktion ifx_nullformat() zur Laufzeit ändern.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Sie können die Grafik-Funktionen von PHP nicht nur benutzen, um die Grösse von JPEG, GIF, PNG und SWF -Bild-Dateien zu ermitteln, sondern auch - sofern Sie die GD -Bibliothek (verfügbar unter http: / /www.boutell.com / gd /) eingebunden haben - Grafiken bzw.
Bilder dynamisch (also zur Laufzeit ihres Skripts) erzeugen bzw. verändern.
Die mittels dieser Funktionen veränderbaren Grafik-Formate sind abhängig von der bei ihnen installierten GD-Version.
Versionen vor gd-1.6 unterstützen das GIF - aber kein PNG-Format.
Die Versionen danach unterstützen zwar das PNG - aber nicht mehr das GIF-Format.
Um JPEG-Grafiken lesen und schreiben zu können, benötigen Sie jpeg-6b (siehe unter ftp: / /ftp.uu.net / graphics / jpeg /).
Anschließend müssen Sie gd neu compilieren mit --with-jpeg-dir= / path / to / jpeg-6b.
Danach muss auch PHP mit der Option --with-jpeg-dir= / path / to / jpeg-6b neu compiliert werden.
Die Unterstützung von Type-1-Fonts können Sie mit der Installation von t1lib (siehe unter ftp: / /sunsite.unc.edu / pub / Linux / libs / graphics /) einbinden.
Beim Compilieren müssen Sie dann noch die Option --with-t1lib[ =dir] angeben.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses Paket baut auf auf der C-Client Bibliothek auf, die Sie unter der URL ftp: / /ftp.cac.washington.edu / imap / erhalten.
Kompilieren Sie diese und kopieren Sie c-client / c-client.a nach / usr / local / lib / libc-client.a sowie c-client / rfc822.h, mail.h und linkage.h nach / usr / local / include oder in ein anderes Verzeichnis in Ihrem Link - bzw.
Include-Pfad.
Anschließend konfigurieren und kompilieren Sie PHP mit der Option --with-imap.
Beachten Sie, dass diese Funktionen nicht auf das IMAP -Protokoll beschränkt sind, auch wenn der Name dies vermuten läßt.
Die zugrundeliegende C-Client Bibliothek unterstützt auch POP3, NNTP und lokale Mailbox-Zugriffe.
Diese Dokumentation kann nicht alle Bereiche beschreiben, die von den enthaltenen Funktionen berührt werden.
Weitergehende Informationen erhalten Sie in der Dokumentation der C-Client Bibliothek (Datei docs / internal.txt im Quellpaket der Bibliothek) sowie in folgenden RFC-Dokumenten:
RFC821:
Simple Mail Transfer Protocol (SMTP)
RFC822:
Standard for ARPA internet text messages
Internet Message Access Protocol (IMAP) Version 4rev1
Post Office Protocol Version 3 (POP3)
Network News Transfer Protocol (NNTP)
Common Internet Message Headers
Multipurpose Internet Mail Extensions (MIME)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Mit diesen Funktionen können Sie auf einen Ingres II Datenbankserver zugreifen.
Damit Ihnen diese Funktionen zur Verfügung stehen, müssen Sie php mit der Ingres-Unterstützung kompilieren, indem Sie die Option --with-ingres angeben.
Ausserdem brauchen Sie die Open API Bibliothek sowie header Dateien, die in Ingres II eingebunden werden.
Falls die II_SYSTEM Umgebungsvariable nicht korrekt gesetzt ist, müssen Sie vielleicht --with-ingres=DIR benutzen, um Ihr Inges Installationsverzeichnis anzugeben.
Wenn Sie diese Erweiterung mit Apache benutzen, und Ihr Apache fährt nicht hoch, sondern bringt die Fehlermeldung: "PHP Fatal error:
Unable to start ingres_ii module in Unknown on line 0 ", dann vergewissern Sie sich, dass die Umgebungsvariable II_SYSTEM korrekt gesetzt ist.
Wenn Sie im Startskript für den Apache "export II_SYSTEM=" / home / ingres / II" angeben, gerade bevor httpd gestartet wird, sollte dieses Problem gelöst sein.
Anmerkung:
Falls Sie schon andere PHP Erweiterungen zum Zugriff auf andere Datenbankserver benutzt haben, sollten Sie beachten, dass Sie mit Ingres keine konkurrierenden Abfragen und / oder Transaktionen über eine Verbindung durchführen können.
Darum finden Sie in dieser Erweiterung keine Ergebnis - oder Transaktions-Handler.
Die Ergebnisse einer Abfrage müssen verarbeitet werden, bevor eine neue Abfrage an den Datenbankserver geschickt wird und eine Transaktion muss commited oder zurückgesetzt (roll-back) werden, bevor eine neue Transaktion geöffnet wird (die Transaktion wird automatisch geöffnet, wenn die erste Abfrage gesendet wird).
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
IRCG ermöglicht die Entwicklung schneller und skalierbarer Webchats die über einen privaten oder öffentlichen IRC-Server kommunizieren.
IRCG kann auf folgenden Betriebssystemen verwendet werden:
Um die IRCG-Funktionen zu verwenden, muss folgende Software installiert sein:
IRCG-Library von Sascha Schumann.
thttpd webserver
Eine ausführliche Installationsanleitung befindet sich hier.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Es gibt zwei Wege, um die Welten von Java und PHP zu verbinden.
Einerseits besteht die Möglichkeit PHP in eine Java Servlet Umgebung zu integrieren, andererseits kann man mit der Java Extension aus PHP heraus auf Java Klassen zugreifen.
Die erste der beiden genannten Möglichkeit ist wesentlich stabiler und performanter als die zweitgenannte Lösung.
Die Java Erweiterung für PHP nutzt das Object Overloading von PHP 4 um auf Java Klassen zuzugreifen.
Die Java Virtual Machine (JVM) wird hierbei über das Java Native Interface (JNI) erzeugt.
Eine detaillierte Installationsbeschreibung entnehmen Sie bitte der Datei php4 / ext / java / README.
Beispiel 1.
Zugriff auf Java Klassen aus PHP heraus
?php / / In PHP Instanz der Java Klasse java.lang.System erzeugen $system = new Java( 'java.lang.System'); / / Zugriff auf die Objekteigenschaften print 'Java version='.$system - getProperty('java.version'). 'br'; print 'Java vendor= '.$system - getProperty('java.vendor').' br '; print 'OS='.$system - getProperty('os.name').' '. $system - getProperty('os.version').' on '. $system - getProperty('os.arch').' br '; / / java.util.Date Beispiel $formatter = new Java('java.text.SimpleDateFormat', "EEEE, MMMM dd, yyyy 'at' h:mm:ss a zzzz"); print $formatter - format(new Java('java.util.Date'));?
Beispiel 2.
Zugriff auf Java AWT aus PHP heraus
?php / / Dieses Beispiel kann nur als CGI ausgeführt werden. $frame = new Java( 'java.awt.Frame', 'PHP'); $button = new Java('java.awt.Button', 'Hallo Java Welt !'); $frame - add('North', $button); $frame - validate(); $frame - pack(); $frame - visible = True; $thread = new Java('java.lang.Thread'); $thread - sleep(10000); $frame - dispose();?
new Java() erzeugt eine Instanz der angegebenen Java Klasse, falls ein geeigneter Konstruktur gefunden wird.
Für den Zugriff auf Klassen mit statischen Methoden benötigt man keinen Parameter.
Mit anderen Worten:
Es wird zuerst versucht werden, zum Beispiel print $date.time als $date.getTime() zu interpretieren, danach erst wird $date.time versucht werden.
Der Zugriff auf statische und Instanzeigenschaften erfolgt mit der selben Syntax.
Das Auslösen einer Java Exception resultiert in einer PHP Warnung und einem NULL Ergebnis.
Folgende Funktionen ermöglichen den Zugriff auf die eigentlichen Exceptions:
Traditionell können Arrays und Hashes in PHP weitestgehend als gleichwertig angesehen werden.
Beim Austausch dieser Datentypen zwischen PHP und Java ist zu beachten, dass Hashes in PHP nur mit Integer - und Stringwerten indiziert werden können und Arrays von primitiven Datentypen in Java nicht dünn besetzt sein dürfen.
Ferner ist zu beachten, dass diese Datenstrukturen by-Value übergeben werden, was ungünstig in Bezug auf Speicher - und Zeitbedarf sein kann.
Das PHP 4 Servlet SAPI Modul baut auf dem von der Java Extension zur Verfügung gestellten Mechanismus auf, allerdings wird der PHP Prozessor hierbei von einer Servlet Engine, wie zum Beispiel Apache Jakarta / Tomcat, ausgeführt.
Dies führt zu einer wesentlich höheren Stabilität und besserer Performance als der umgekehrte Weg, wie in die Java Extension an sich anbietet.
Dies kommt daher, dass die Servlet Engine sich um das Pooling und die Wiederverwendung von Java Virtual Machines (JVMs) kümmert.
Eine detaillierte Anleitung zur Integration von PHP in eine Servlet Engine entnehmen Sie bitte der Datei php4 / sapi / README.
Bemerkungen:
Das Servlet SAPI Modul sollte zwar auf jeder Java Servlet Engine funktionieren, wurde aber bislang nur in Verbindung mit Apache Jakarta / Tomcat getestet.
Meldungen von Problem - aber auch von Erfolgserlebnissen - bei der Verendung mit anderen Servlet Engines werden dankbar aufgenommen.
Während PHP läuft kann es sein, dass die Servlet Engine kann Klassen aus dem CLASSPATH finden kann, die über relative Pfade angesprochen werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
LDAP steht für Lightweight Directory Access Protocol und ist ein Protokoll um auf "Directory Servers" - Verzeichnis - Server - zuzugreifen.
Das Verzeichnis ist dabei eine spezielle Art einer Datenbank, das Informationen in einer Baumstruktur bereithält.
Das Konzept ist dabei ähnlich der Verzeichnisstruktur Ihrer Festplatte, mit der Ausnahme, dass in diesem Zusammenhang das Wurzelverzeichnis "Die Welt" ist und die Unterverzeichnisse der ersten Ebene "Länder "abbilden.
Noch tiefer geschachtelt stehen Verzeichniseinträge für Personen und vielleicht für Ausstattung oder Dokumente.
Um auf eine Datei in einem Unterverzeichnis auf Ihrer Festplatte zu verweisen, könnten Sie eine Schreibweise wie folgt verwenden
/usr / local / meine_daten / doku
Die Schrägstriche markieren jeden Teil in diesem Verweis und die Sequenz wird von links nach rechts gelesen.
Das entsprechende Gegenstück zu einer voll qualifizierten Dateireferenz ist in LDAP der Eindeutige Name ("distinguished name"), der Einfachheit halber als "dn "bezeichnet.
Ein Beispiel für einen solchen dn könnte sein
cn=Hans Mustermann,ou=Buchhaltung,o=Meine Firma,c=DE
Das Komma markiert jeden Teil in diesem Verweis und die Sequenz wird von rechts nach links gelesen.
Diesen dn würden Sie wie folgt lesen:
Land = DE Organisation (organisation) = Meine Firma Organisationseinheit (organisationalUnit) = Buchhaltung Einfacher Name (commonName) = Hans Mustermann
In der gleichen Weise, in der es keine allgemeinverbindlichen Regeln gibt, wie Sie die Verzeichnisstruktur Ihrer Festplatte organsieren, kann der Verwalter eines Verzeichnis-Servers jede beliebige Struktur implementieren, die für den Einsatzzweck sinnvoll ist.
Die Botschaft ist folgende:
Genauso wenig können Sie eine Datenbank nutzen ohne Kenntnis darüber, was in derselben vorhanden ist.
Viele Informationen finden Sie unter
Das Netscape SDK enthält einen hilfreichen Programmer´s Guide im .html Format.
Sie können entweder das ldap-3.3 Packet von der University of Michigan oder das Netscape Directory SDK 3.0 verwenden.
LDAP Unterstützung ist in PHP im Standard nicht aktiviert.
Sie müssen die Konfigurationsoption --with-ldap beim Übersetzen von PHP angeben.
Hinweis für Win32 Benutzer:
Um dieses Modul unter Windows nutzen zu können, müssen Sie libsasl.dll aus dem DLL Ordner des PHP / Win32 Packets in den SYSTEM32 Ordner Ihres Systems kopieren (z.B.:
C:\WINNT\SYSTEM32 oder C:\WINDOWS\SYSTEM32).
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
LDAP Konfigurations-Optionen
Standard
Veränderbar
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Darstellung eines Auszugs mit Name und Email-Adresse.
Beispiel 1.
LDAP Such-Beispiel
?php / / Grundlegende Abfolge bei LDAP ist verbinden, binden, suchen, / / interpretieren des Sucheergebnisses, Verbindung schließen echo "h3 LDAP query Test / h3"; echo "Verbindung.. ."; $ds=ldap_connect("localhost"); / / muss ein gültiger LDAP Server / / sein! echo "Ergebnis der Verbindung: ".$ds. "p"; if ($ds) {echo "Bindung.. ."; $r=ldap_bind($ds); / / das ist ein "anonymer "bind, / / typischerweise nur Lese Zugriff echo "Ergebnis der Bindung ".$r." p "; echo "Suche nach (sn=S*).. ."; / / Suchen des Nachnamen-Eintrags $sr=ldap_search($ds ,"o=Meine Firma, c=DE", "sn=S*"); echo "Ergebnis der Suche ".$sr." p "; echo "Anzahl gefundenen Einträge ".ldap_count_entries($ds,$sr)." p "; echo "Einträge holen... p"; $info = ldap_get_entries($ds, $sr); echo "Daten für ".$info["count"]. "Items gefunden: p"; for ($i=0; $i $info["count"]; $i++) {echo "dn ist: ". $info[$i]["dn"]." br "; echo "erster cn Eintrag:". $info[$i]["cn"][0]. "br"; echo "erster email Eintrag: ". $info[$i]["mail"][0]." p ";} echo "Verbindung schließen"; ldap_close($ds);} else {echo" h4 Verbindung zum LDAP Server nicht möglich / h4 ";}?
Bevor Sie die LDAP Aufrufe benutzen können, müssen Sie folgendes wissen...
Den Namen oder die Adresse des Verzeichnis-Servers den Sie benutzen wollen
Den "Basis dn" des Servers (den Teil des Weltverzeichnisses, das auf diesem Server eingerichtet ist, das könnte "o=Meine Firma,c=DE "sein.
Brauchen Sie ein Passwort um auf den Server zuzugreifen? (Viele Server bieten Lesezugriff für einen "anonymen bind", verlangen aber ein Passwort für alles weitere)
Die typische Abfolge von LDAP Aufrufen in einer Anwendung folgen diesem Muster
Verzeichnis durchsuchen oder aktualisieren und stelle das Ergebnis dar _BAR_ ldap_close() / / "logout "
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die mail() Funktionen erlauben das Versenden von Mail.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Returns an array listing filename information
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die mathematischen Funktionen behandeln nur Werte im Bereich der Datentypen long und double der jeweiligen Architektur.
Wenn Sie größere Zahlen oder Werte mit höherer Genauigkeit benötigen, sollten Sie sich die mathematische Funktionen mit beliebiger Genauigkeit ansehen.
Die folgenden Werte werden von diesem Packet definiert:
Tabelle 1.
Mathematische Konstanten
Konstante
Wert
Beschreibung
Der Wert ¶ (Pi)
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Anmerkung:
If --with-mbstring=kr is used, korean encoding will be supported.
Anmerkung:
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Beispiel 1. php.ini setting example
Beispiel 2. php.ini setting for EUC-JP users
Beispiel 3. php.ini setting for SJIS users
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Beispiel 4.
Anmerkung:
Beispiel 5. php.ini setting example
Beispiel 6.
Anmerkung: "Supported character encoding" does not mean that it works as internal character code.
Tabelle 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
MCAL bedeutet Modular Calendar Access Library.
Libmcal ist eine C Bibliothek für den Zugriff auf Kalender.
Sie ist sehr modular programmiert, mit austauschbaren Treibern.
MCAL ist das Kalendergegenstück zum IMAP Modul für Mailboxen.
Mit Hilfe der mcal-Unterstützung kann ein Kalender-Stream, ähnlich wie ein Mailbox-Stream mit der IMAP-Unterstützung, geöffnet werden.
Kalender können lokale Dateispeicher, entfernte ICAP-Server oder andere Formate,von der mcal-Bibliothek unterstützt werden, sein.
Kalendereinträge können aufgerufen, abgefragt und gespeichert werden.
Desweiteren werden Kalendertermine (Alarm) und wiederkehrende Termine unterstützt.
Mit libmcal kann auf zentrale Kalenderserver zugegriffen und diese benutzt werden, was die Programmierung einer bestimmten Datenbank oder einer Datei unnötig macht.
Um diese Funktionen benutzen zu können, muss PHP mit der Option --with-mcal Um diese Funktionen benutzen zu können, muss PHP mit der Option --with-mcal kompiliert werden.
Dies setzt eine installierte mcal-Bibliothek voraus.
Holen Sie sich die aktuelle Version unter http: / /mcal.chek.com / und kompilieren und installieren Sie sie.
Anmerkung:
PHP hatte eine ICAP Extension, aber sowohl die Originalbibliothek, als auch die PHP Extension werden nicht mehr unterstützt.
Es wird statt dessen emphohlen, MCAL zu verwenden.
Diese Extension benötigt die MCAL Bibliothek.
Downloaden Sie die aktuelle Version unter http: / /mcal.chek.com /, kompilieren und installieren Sie sie.
Nachdem Sie die MCAL Bibliothek installiert haben, müssen Sie PHP mit der Option --with-mcal kompilieren, um die MCAL Funktionen nutzen zu können.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Beispiel 1.
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen arbeiten zusammen mit mhash.
Dies ist eine Schnittstelle zu der Mhash Bibliothek.
Mhash unterstützt eine breite Auswahl an Hash Algorithmen, wie MD5, SHA1, GOST, und viele andere.
Um sie zu verwenden, muss man die Mhash Distribution von der Website downloaden und der beigefügten Instalationsanleitung folgen.
Mhash wird verwendet um z.B.
Checksummen und Mehr zu erstellen.
Beispiel 1.
Berechne den MD5 Extrakt und gib es als Hex aus
?php $input = "what do ya want for nothing ?"; $hash = mhash (MHASH_MD5, $input); print "Der Hash ist ".bin2hex ($hash) ."\n lt;br"; $hash = mhash (MHASH_MD5, $input, "Jefe"); print "Der hmac ist ".bin2hex ($hash) ."\n lt;br ";?
Die Ausgabe ist:
Der Hash ist d03cb659cbf9192dcd066272249f8412 Der hmac ist 750c783e6ab0b503eaa86e310a5db738
Hier ist eine Liste von Hashs, die momentan von Mhash unterstützt werden.
Wenn ein Hash ist hier nicht aufgeführt ist, aber von Mhash, laut Dokumentation, unterstützt wird, ist diese Dokumentation als veraltet anzusehen.
MHASH_HAVAL
MHASH_RIPEMD128
MHASH_SNEFRU
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Beispiel 1. built into php (unix)
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Folgende Klassen werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
SWFDisplayItem - move - - Moves object in relative coordinates.
SWFDisplayItem - scale - - Scales the object in relative coordinates.
SWFMovie - remove - - Removes the object instance from the display list.
SWFMovie - setframes - - Sets the total number of frames in the animation.
SWFTextField - setLeftMargin - - Sets the left margin width of the text field.
SWFTextField - setMargins - - Sets the margins width of the text field.
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen stehen hier, weil sie in keine andere Kategorie passen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben den Zugriff auf die mnoGoSearch (früher als UdmSearch bekannt) Suchmaschine.
Um auf diese Funktionen zugreifen zu können, muss PHP mittels der --with-mnogosearch -Option mit mnoGoSearch-Unterstützung compiliert worden sein.
Wird diese Option ohne Pfadangabe zu mnoGoSearch verwendet, wird mnoGoSearch in / usr / local / mnoGoSearch gesucht.
Wurde mnoGoSearch unter einem anderen Pfad installiert, kann der Pfad mittels --with-mnogosearch=DIR spezifiziert werden.
mnoGoSearch ist eine vollwertige Suchmaschine für den Intra - und Interneteinsatz, vertrieben unter der GPL. mnoGoSearch hat einige einzigartige Funktionen, die es für weite Einsatzbereiche tauglich machen.
Es bietet Volltextindizierung von HTML, PDF und Textdokumenten. mnoGoSearch besteht aus zwei Teilen:
Der erste ist der sogenannte indexer, der den Indizierungsmechanismus bereitstellt.
Er spidered HTTP, FTP und Newsserver oder lokale Dateisysteme, indiziert die gefundenen Dokumente und speichert Meta-Daten über die Dokumente in einer SQL-Datenbank.
Anmerkung:
PHP beinhaltet zwar einen eingebauten MySQL-Support, dieser ist jedoch nicht mit mnoGoSearch kompatibel, deshalb muss PHP gegen die selben generischen MySQL-Bibliotheken wie mnoGoSearch gelinkt werden, also z.B.: --with-mnogosearch --with-mysql= / usr.
Weitere Informationen über mnoGoSearch können unter http: / /www.mnogosearch.ru / abgerufen werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
msession ist eine Schnittstelle zu einem Hochgeschwindigkeitsdaemon, der entweder lokal oder auf einem entfernten Rechner (remote) laufen kann.
Sie wurde erstellt um ein konsitentes Session-Management für die PHP-Webseiten zur Verfügung zu stellen.
Die Session Serversoftware finden Sie unter http: / /www.mohawksoft.com / phoenix /.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben Ihnen, auf einen mSQL-Datenbankserver zuzugreifen.
Mehr Informationen über mSQL findet man bei http: / /www.hughes.com.au /.
Um über diese Funktionen verfügen zu können, müssen Sie PHP mit der mSQL-Unterstützung kompilieren, indem Sie die Option --with-msql[ =dir] angeben.
Das Standardverzeichnis ist / usr / local / Hughes.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen ermöglichen Ihnen den Zugriff auf den MS SQL-Datenbankserver.
Voraussetzungen für Win32-Plattformen.
Für die Erweiterung müssen die MS SQL Client Tools auf dem System installiert sein auf dem PHP installiert ist.
Die Client Tools können entweder von der MS SQL Server-CD oder durch Kopieren von ntwdblib.dll von \winnt\system32 auf dem Server nach \winnt\system32 auf dem PHP-Rechner installiert werden.
Das Kopieren von ntwdblib.dll unterstützt nur den Zugriff.
Für die Konfiguration des Clients ist eine Installation aller Tools nötig.
Voraussetzungen für Unix / Linux-Plattformen.
Um die MSSQL-Erweiterung unter Unix / Linux nutzen zu können, müssen Sie zuerst die FreeTDS-Bibliothek übersetzen und installieren.
Quellcode und Installationsanleitung stehen auf der FreeTDS-Homepage zur Verfügung: http: / /www.freetds.org /
Die MSSQL-Erweiterung wird durch den Eintrag extension=php_mssql.dll in die php.ini aktiviert.
Damit diese Funktionen zur Verfügung stehen, müssen Sie PHP mit --with-mssql[ =DIR] übersetzen, wobei DIR der Präfix der FreeTDS-Installation ist.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
MS SQL Server Konfigurationsoptionen
Bezeichnung
Grundeinstellung
Änderbar
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen erlauben den Zugriff auf einen MySQL Datenbank-Server.
Weitere Information zu MySQL sind unter http: / /www.mysql.com / erhältlich.
Die Dokumentation zu MySQL ist unter http: / /www.mysql.com / documentation / zu finden.
Um diese Funktionen nutzen zu können, müssen Sie PHP mit MySQL-Unterstützung übersetzen.
Durch die Angabe der Konfigurationsoption --with-mysql[ =DIR] beim Aufruf von configure ermöglichen Sie den Zugriff auf MySQL über PHP.
Falls Sie den Pfad zu MySQL nicht angeben, verwendet PHP die internen MySQL-Client Bibliotheken.
Seit PHP 4 ist die Unterstützung für MySQL standardmäßig immer aktiviert; falls Sie die Konfigurationsoption weglassen, werden die internen MySQL-Bibliotheken genutzt.
PHP 3 und PHP 4 als simultane Apache-Module oder auth-mysql) sollten immer den Pfad zu MySQL mit der Option - - with-mysql= / pfad / zu / mysql festlegen.
Diese Angabe zwingt PHP die Client-Bibliotheken zu nutzen, die von MySQL installiert wurden.
Diese Vorgehensweise vermeidet jegliche Konflikte.
Warnung
Abstürze und Startprobleme von PHP können auftreten, wenn Sie diese Extension zusammen mit der recode-Extension laden.
Für weitere Informationen schauen Sie bitte bei der recode Extension nach.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
MySQL Konfigurations-Optionen
Standard
Veränderbar
Beschreibung der Konfigurations-Optionen
gibt an, ob persistente Verbindungen zu MySQL gestattet werden sollen.
Die maximale Anzahl von persistenten MySQL Verbindungen pro Prozess.
Die maximale Anzahl von MySQL Verbindungen, einschließlich persistenter, pro Prozess.
Gibt die Portnummer an, über den die Verbindung zum MySQL-Server aufgebaut werden soll, wenn kein Port als Verbindungsparameter übergeben wurde.
Wird die Portnummer nicht angegeben, wird der Port über die MYSQL_TCP_PORT Umgebungsvariable, dem mysql-tcp Eintrag aus der Datei / etc / services oder der Konstanten MYSQL_PORT festgelegt, in dieser Reihenfolge.
Win32 Systeme verwenden nur die Konstante MYSQL_PORT.
Legt den Socketnamen fest, der bei der Verbindung zu einem lokalen Datenbankserver bennutzt werden soll, wenn kein anderer Name angegeben wurde.
Legt den Datenbankserver fest, zu dem eine Verbindung aufgebaut werden soll, wenn kein Server angegeben wurde.
Diese Option hat im safe mode keine Auswirkungen.
Legt den Benutzernamen fest, der bei einer Verbindung zu einer Datenbank verwendet werden soll, wenn kein Benutzer angegeben wurde.
Diese Option hat im safe mode keine Auswirkungen.
Legt das Passwort fest, das bei einer Verbindung zu einer Datenbank verwendet werden soll, wenn kein Passwort angegeben wurde.
Diese Option hat im safe mode keine Auswirkungen.
Verbindungstimeout in Sekunden.
Auf Linuxsystemen wird dieser Timeout auch für die erste Antwort des Servers benutzt.
Innerhalb des MySQL-Moduls werden zwei Resourcetypen benutzt.
Der erste ist die Verbindungskennung für eine Verbindung zum Datenbankserver, der zweite Typ ist eine Resource die auf das Ergebnis einer Anfrage / Abfrage verweist.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Die folgenden Konstanten sind definiert:
MySQL-Client Konstanten
Beschreibung
Benutze das Kompression Protokoll
Erlaubt Leerzeichen nach Funktionsnamen
Erlaubt Inaktivität von interactive_timeout Sekunden (anstatt wait_timeout) bevor die Verbindung geschlossen wird.
Die Funktion mysql_fetch_array() verwendet eine Konstante für die verschiedenen Arten der Ergebnisarrays.
Die folgenden Konstanten sind definiert:
MySQL fetch Konstanten
Beschreibung
Spalten werden in einem assioziativen Array zurückgegeben.
Spalten werden sowohl als assioziatives als auch als numerisches Array zurückgegeben.
Spalten werden als numerisches Array zurückgegeben.
Der Index beginnt bei 0, dieser entspricht dem ersten Feld des Ergebnisses.
In diesem Dokument wird eine Reihe von Begriffen benutzt, die hier kurz erläutert werden sollen.
Die Rückgabe auf eine Anfrage an den Datenbankserver.
Ist das Ergebnis eine Datenbankanfrage kann man es sich als Tabelle vorstellen, in der die Zeilen die Datensätze sind und die Felder den Spalten ensprechen.
Eine Referenz auf ein Ergebnis.
Über diese Kennung erfolgt grundsätzlich der Zugriff auf das Ergebnis.
Ein interner Zeiger auf einen Datensatz in einem Anfrageergebnis.
Dieser Zeiger bestimmt auf welchen Datensatz zugegriffen wird.
Entspricht einer Spalte im Anfrageergebnis.
Eine Referenz auf eine Verbindung zum Datenbank-Server.
Jeder Zugriff auf den Server nutzt diese Kennung.
Folgendes einfache Beispiel zeigt Ihnen, wie Sie sich mit einer MySQL - Datenbank verbinden, eine Anfrage ausführen, die Ergebnisse ausgeben und die Verbindung wieder trennen.
Beispiel 1.
?php / * Verbindung aufbauen, auswählen einer Datenbank * / $link = mysql_connect( "mysql_host", "mysql_user", "mysql_password") or die("Keine Verbindung möglich !"); print "Verbindung zum Datenbankserver erfolgreich"; mysql_select_db("Meine_Datenbank") or die("Auswahl der Datenbank fehlgeschlagen"); / / ausführen einer SQL Anfrage $query = "SELECT * FROM Meine_Tabelle"; $result = mysql_query($query) or die("Anfrage fehlgeschlagen"); / / Ausgabe der Ergebnisse in HTML print "table \n"; while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {print "\t tr \n"; foreach ($line as $col_value) {print "\t\t td $col_value / td \n";} print "\t / tr \n";} print" / table \n"; / / Freigeben des Resultsets mysql_free_result($result); / / schliessen der Verbinung mysql_close($link);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Tabelle 2. ncurses color constants
Tabelle 3. ncurses key constants
Tabelle 4. mouse constants
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
NIS (früher unter dem Namen Yellow Pages bekannt) erlauben das netzwerkweite Management von wichtigen administrativen Dateien (z.B der Passwort-Datei.
Für weitere Informationen zu NIS empfehlen wir die NIS Manpage und die Einführung zu YP / NIS Des weiteren ist ein empfehlenswertes Buch mit dem Titel Managing NFS and NIS von Hal Stern erhältlich.
Um die NIS-Funktionen mit PHP nutzen zu können, muss PHP vor der Compilierung mit den Optionen --with-yp (PHP 3) oder --enable-yp (PHP 4) konfiguriert werden.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Specify the name of the note.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Beispiel 1.
Beispiel 2.
Beispiel 3. storage_classes.inc
Beispiel 4. test_aggregation.php
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen gestatten den Zugriff auf Oracle7 und Oracle8 Datenbanken.
Es wird hierbei das Oracle8 Call-Interface (OCI8) verwendet, welches installierte Oracle8 Client Bibliotheken (Libraries) benötigt.
Es unterstützt Binding von localen und globalen PHP Variablen an Oracle Platzhalter und hat volle LOB,FILE und ROWID Unterstützung und gestattet dem Benutzer die Verwendung von Variablendefines.
Vor der Benutzung dieser Erweiterung sollten Sie sicherstellen die folgenden Umgebungsvariablen für den Webserveruser VOR dem Start des Webservers gesetzt zu haben.
Nachdem Sie die Umgebungsvariablen festgelegt haben, stellen Sie sicher, das die Dateien im ORACLE_HOME / network / admin für den Webserver lesbar sind.
Wenn der Webserver abstürzt nach dem Start, oder nicht startet:
Überprüfen Sie, ob der Apache gegen -lpthread gelink ist:
Wenn libpthread hier nicht gelistet ist, dann muss der Webserver neu übersetzt werden:
Beispiel 1.
OCI Hinweise
?php / / by sergo@bacup.ru / / Die Option OCI_DEFAULT führt die Anweisung in einer Transaktion aus OCIExecute( $stmt, OCI_DEFAULT); / / for retrieve data use (after fetch): $result = OCIResult($stmt, $n); if (is_object ($result)) $result = $result - load(); / / For INSERT or UPDATE statement use: $sql = "insert into table (field1, field2) values (field1 = 'value', field2 = empty_clob()) returning field2 into :field2"; OCIParse($conn, $sql); $clob = OCINewDescriptor($conn, OCI_D_LOB); OCIBindByName ($stmt, ":field2", $clob, -1, OCI_B_CLOB); OCIExecute($stmt, OCI_DEFAULT); $clob - save ("some text"); OCICommit($conn);?
Man kann auf Stored Procedures auf einfache Weise zugreifen.
Beispiel 2.
Stored Procedures benutzen
OCIFreeDesc
Zurück
Zum Anfang
Nach vorne
Nach oben
ocibindbyname
PHP Handbuch
Zurück
Nach vorne
Zusätzlich zur normalen ODBC-Unterstützung bieten die ODBC-Funktionen in PHP auch Schnittstellen zu einigen Datenbanken, die Ihre API der Semantik der ODBC-API nachempfunden haben.
Statt vielen nahezu identischen Datenbanktreibern wurden diese Treiber zu einer einzigen Gruppe von ODBC-Funktionen zusammengefasst.
Die folgenden Datenbanken werden von den ODBC-Funktionen unterstützt:
Adabas D, IBM DB2, iODBC, Solid und Sybase SQL Anywhere.
Anmerkung:
Es ist kein echtes ODBC in die Kommunikation mit oben genannten Datenbanken involviert.
Es handelt sich um echte native Datenbankschnittstellen, die den Funktionsnamen und den Funktionssyntax der ODBC-Funktionen nutzen.
Die Ausnahme ist iODBC.
Wenn PHP mit iODBC-Unterstützung kompiliert wird, können alle ODBC-kompatiblen Treiber mit PHP genutzt werden. iODBC wird von OpenLink Software betreut.
Mehr Informationen zu iODBC, unter anderem eine HOWTO, finden Sie auf www.iodbc.org.
Um die Datenbanken mit PHP nutzen zu können, sollten die dafür benötigten Bibliotheken installiert sein.
Bitte schauen Sie sich den Abschnitt Installationsoptionen für Datenbanken an, dort finden Sie zusätzliche Informationen wie PHP für diese Datenbanken konfiguriert werden muss.
Das Verhalten der ODBC-Funktionen wird von den Einstellungen in der globalen Konfigurationsdatei php.ini bestimmt.
Tabelle 1.
ODBC-Konfigurationsoptionen
Standard
Einstellbar in
Anmerkung:
Mit * markierte Einträge sind noch nicht implementiert.
Hier eine kurze Erklärung der Konfigurationsoptionen:
Standard-ODBC-Datenquelle, wenn in odbc_connect() oder odbc_pconnect() keine definiert wird.
Nutzername, wenn in odbc_connect() oder odbc_pconnect() keiner angegeben wird.
Passwort, wenn keines in odbc_connect() oder odbc_pconnect() angegeben wird.
Einstellung, ob persistente ODBC-Verbindungen genutzt werden sollen.
Aktiviert eine Überprüfung, ob eine persistente Datenbankverbindung noch aktiv ist, bevor sie weitergenutzt wird.
Die maximale Anzahl von persistenten ODBC-Verbindungen pro Prozess.
Die maximale Anzahl von ODBC-Verbindungen pro Prozess, inklusive persistenten Verbindungen.
Bestimmt die Anzahl Bytes, mit denen ein LONG-Feld an PHP übergeben wird.
Definiert die Behandlung von Binärdaten.
Diese Erweiterung definiert keine Resource-Typen.
Returns a result identifier containing the information.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Dieses Modul nutzt die Funktionen von OpenSSL zur Erzeugung und Überprüfung von Signaturen und zum versiegeln (verschlüsseln) und öffnen (entschlüsseln) von Daten.
Einige dieser Möglichkeiten werden vielleicht in zukünftigen Versionen zur Verfügung stehen.
Bevor Sie die Openssl-Funktionen nutzen können, müssen Sie das OpenSSL Paket installieren.
PHP-4.0.4pl1 setzt OpenSSL = 0.9.6 voraus, PHP-4.0.5 und folgende funktionieren auch mit OpenSSL = 0.9.5.
Um Openssl mit PHP nutzen zu können, müssen Sie PHP mit der Option --with-openssl[ =DIR] übersetzen.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Ziemlich viele der OpenSSL Funktionen benötigen einen Schlüssel - oder einen Zertifikatparameter.
PHP 4.0.5 und frühere Versionen müssen eine Schlüssel - oder Zertifikatsresource nutzen, die von einer der openssl_get_xxx Funktionen zurückgegeben wird.
Spätere Versionen können eine der folgenden Methoden benutzen:
Zertifikate
Eine X.509 Resource die von openssl_x509_read zurückgegeben wird.
Eine Zeichenkette mit dem Format file: / /pfad / zu / cert.pem; die angegebene Datei muss ein PEM verschlüsseltes Zertifikat enthalten.
Eine Zeichenkette die den Inhalt eines Zertifikats enthält, PEM verschlüsselt.
Öffentliche / Private Schlüssel
Eine Schlüsselresource die von openssl_get_publickey() oder openssl_get_privatekey() zurückgegeben wird.
Nur für öffentliche Schlüssel: eine X.509 Resource.
Eine Zeichenkette mit dem Format file: / /pfad / zu / datei.pem - die angegebene Datei muss ein PEM verschlüsseltes Zertifikat / privaten Schlüssel enthalten (kann auch beides enthalten).
Eine Zeichenkette die den Inhalt eines Zertifikats / Schlüssels enthält, PEM verschlüsselt.
Für private Schlüssel können Sie auch die Syntax verwenden array( $key, $passphrase). $key repräsentiert einen Schlüssel, den Sie entweder mit der Notation file: / / oder dem textlichen Inhalt wie oben angeben. $passphrase ist eine Zeichenfolge, die die Passphrase für den privaten Schlüssel enthält.
Wenn Sie eine Funktion aufrufen, die eine Signatur / Zertifikat überprüft, ist der Parameter cainfo Wenn Sie eine Funktion aufrufen, die eine Signatur / Zertifikat überprüft, ist der Parameter cainfo ein Array, das Datei - und Verzeichnisnamen enthält, die auf vertrauenswürdige CA Dateien verweisen.
Falls Sie ein Verzeichnis angeben, muss dies ein korrekt geformtes gehashdes Verzeichnis sein, in der Art, wie es der Befehl openssl verwenden würde.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Die S / MIME Funktionen nutzen Kennzeichen die sich dadurch auszeichnen, dass sie ein Bitfeld benutzen, das einen oder mehrere der folgenden Werte enthalten kann:
Tabelle 1.
PKCS7 KONSTANTEN
Konstante
Beschreibung
Fügt den text / plain Inhaltstyp Header einer verschlüsselten / signierten Nachricht hinzu.
Wenn Sie entschlüsseln oder überprüfen, werden diese Header von der Ausgabe entfernt - wenn die entschlüsselte oder geprüfte Nachricht nicht dem MIME Typ text / plain entspricht, tritt ein Fehler auf.
Normalerweise wird die Nachricht in ein "kanonisches" Format konvertiert, das effektiv CR und LF als Zeilende benutzt: wie von der S / MIME Spezifikation gefordert.
Wird diese Option angegeben, findet keine Konvertierung statt.
Das kann sich als nützlich erweisen, wenn Sie mit binären Daten umgehen, die nicht dem MIME Format entprechen.
Wenn Sie eine Nachricht überprüfen, werden in der Nachricht enthaltene Zertifikate (falls es welche gibt) nach dem unterzeichnenden Zertifikat durchsucht.
Mit dieser Option werden nur Zertifikate benutzt, die mit dem Parameter extracerts in der Funktion openssl_pkcs7_verify() angegeben wurden.
Die mitgelieferten Zertifikate können aber dennoch als nicht vertrauenswürdige CAs benutzt werden.
Keine Überprüfung des signierenden Zertifikats einer signierten Nachricht.
Keine Verknüpfung der Überprüfung des Zertifikats mit den Zertifikaten des Unterzeichners: das bedeutet, die Zertifikate in der signierten Nachricht werden nicht als unvertrauenswürdige CAs benutzt.
Beim Signieren einer Nachricht wird normalerweise das Zertifikat des Unterzeichnenden mit in die Nachricht aufgenommen - mit dieser Option wird das Zertifikat nicht mit aufgenommen.
Diese Option verringert die Größe der signierten Nachricht, aber der Überprüfende muss eine lokale Kopie des Zertifikats vom Unterzeichnenden besitzen (zum Beispiel durch Angabe des Parameters extracerts in der Funktion openssl_pkcs7_verify()).
Diese enthalten die Zeit der Signierung und die unterstützen symmetrischen Algorithmen.
Mit dieser Option werden diese Attribute nicht mit aufgenommen.
Beim Signieren einer Nachricht wird Klartext-Signierung verwendet mit MIME Typ multipart / signed.
Das ist der Standard, wenn Sie keinen optionalen Parameter flags an die Funktion openssl_pkcs7_sign() Das ist der Standard, wenn Sie keinen optionalen Parameter flags an die Funktion openssl_pkcs7_sign() übergeben.
Dieses Verhalten ist robuster gegenüber der Übersetzung durch Mail-Relays, kann aber nicht mit Mailprogrammen gelesen werden, die nicht den S / Mime Standard unterstützen.
Kein Versuch und keine Überprüfung der Signaturen einer Nachricht.
Anmerkung:
Diese Konstanten wurden in 4.0.6 hinzugefügt.
Zurück
Zum Anfang
Nach vorne
ociwritelobtofile
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung fügt die Unterstützung für Oracle Datenbanken hinzu.
Siehe auch die Oracle 8 Funktionen.
Sie müssen PHP mit der Option --with-oracle[ =DIR] übersetzen, wobei die Voreinstellung für DIR Ihre Umgebungsvariable ORACLE_HOME ist.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
ora_bind
PHP Handbuch
Zurück
Nach vorne
Mit den Funktionen zur Ausgabesteuerung können Sie die Ausgabe eines Skripts steuern.
Dies kann in verschiedenen Situationen ganz nützlich sein, besonders, wenn Sie header an den Browser schicken müssen, nachdem Ihr Skript bereits etwas ausgegeben hat.
Die Ausgabesteuerungsfunktionen gelten nicht für header, die mit header() oder setcookie() geschickt wurden, sondern nur für Daten ,die mit echo() gesendet wurden oder für Daten zwischen PHP-Codeblöcken.
Beispiel 1.
Beispiel Ausgabesteuerung
Im obigen Beispiel wird die Ausgabe der echo() solange im Ausgabepuffer zwischengespeichert, bis die Funktion ob_end_flush() aufgeufen wird.
In der Zwischenzeit speichert der Aufruf von setcookie() erfolgreich einen Cookie, ohne einen Fehler zu erzeugen. (Normalerweise können Sie keine header an den Browser mehr schicken, wenn schon Daten ausgegeben wurden.)
Siehe auch header() und setcookie().
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Anmerkung:
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Beispiel 1.
Warnung
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
ora_rollback
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Anmerkung:
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Tabelle 1.
Beispiel 1.
Beispiel 2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zudem sind noch zwei weitere Bibliotheken notwendig, die JPEG Bibliothek und die TIFF Bibliothek, um PHP zu übersetzen.
Beachten sie zudem die excellente Dokumentation die mit pdflib ausgeliefert wird.
Sie gibt einen guten Überblick über die Möglichkeiten von pdflib.
Die meisten Funktionen in pdflib sind in ähnlicher Form auch in PHP vorhanden.
Die Parameter sind in der Regel auch identisch.
Sie sollten zudem die Grundkonzepte von PDF und Postscript verstanden haben, um das PDF Module effizient nutzen zu können.
Alle Längen und Koordinatenangaben sind in Postscript-Punkten gemessen.
Für gewöhnlich entsprechen 72 PostScript-Punkte 1 Inch, was jedoch von der Auflösung des Ausgabegeräts abhängt.
Es hat eine geringfügig andere Programmierschnittstelle.
Schauen Sie in die Funktionsübersicht für weitere Details.
Das PDF Module von PHP verwendet einen neuen Type von Variable Er wird pdfdoc genannt. pdfdoc ist ein Zeiger auf das PDF Dokument und wird bei fast allen Funktion als erster Parameter erwartet.
Most of these changes has been somehow covered by PHP, some has even required changes to the PHP API.
Tabelle 1.
Deprecated functions and its replacements
pdf_get_imageheight()
Seit Version 3.0 von pdflib sollten sie pdflib mit der configure-Option --enable-shared-pdflib konfigurieren.
Mit Version 2.20 von pdflib wurden einige Veränderungen an der API vorgenommen.
Dies hat leider auch zu Änderungen am php4-Modul geführt (nicht php3).
Wenn Sie pdflib 2.20 benutzen, dann sollten Sie die Erzeugung von Dokumenten im Speicher mit Vorsicht benutzen.
Der encoding Parameter der Funktion pdf_set_font() hat sich in eine Zeichenkette geändert.
Dies bedeutet, dass anstatt von beispielsweise 4 jetzt 'winansi' verwendet werden muss.
Wenn Sie die Version 2.30 von pdflib verwenden, dann steht Ihnen die Funktion pdf_set_text_matrix() nicht mehr zur Verfügung.
Grundsätzlich ist es ratsam die release notes der verwendeten Version von pdflib zu lesen.
Versionen von PHP4 die nach dem 9.
März 2000 erscheinen unterstützen nur noch die Versionen 3.0 von pdflib.
PHP3 sollte hingegen nicht mit Versionen 2.01 verwendet werden.
Bei Gebrauch von pdflib 2.01 sollte überprüft werden, ob die Bibliothek richtig installiert wurde.
Es sollte die Datei oder ein Verweis libpdf.so im Installationsverzeichnis von pdflib existieren.
Version 2.01 erzeugt nur die Bibliothek mit dem Namen libpdf2.01.so, die so nicht vom Linker des Systems gefunden werden kann.
In diesem Fall müssen Sie den Verweis von libpdf.so nach libpdf2.01.so selbst anlegen.
Das folgende Beispiel soll die ersten Schritte erleichtern.
Auf der Seite befindet sich der Text "Times Roman outlined" in einem outlined, 30pt Zeichensatz.
Beispiel 1.
Erstellung eines PDF Dokuments mit pdflib
?php $fp = fopen( "test.pdf", "w"); $pdf = pdf_open($fp); pdf_set_info_author($pdf, "Uwe Steinmann"); pdf_set_info_title($pdf, "Test for PHP wrapper of PDFlib 2.0"); pdf_set_info_author($pdf, "Name of Author"); pdf_set_info_creator($pdf, "See Author"); pdf_set_info_subject($pdf, "Testing"); pdf_begin_page($pdf, 595, 842); pdf_add_outline($pdf, "Page 1"); pdf_set_font($pdf, "Times-Roman", 30, 4); pdf_set_text_rendering($pdf, 1); pdf_show_xy($pdf, "Times Roman outlined", 50, 750); pdf_moveto($pdf, 50, 740); pdf_lineto($pdf, 330, 740); pdf_stroke($pdf); pdf_end_page($pdf); pdf_close($pdf); fclose($fp); echo "A HREF=getpdf.php finished / A";?
Das PHP-Skript getpdf.php liefert nur das PDF-Dokument.
Dieses Beispiel in ein PHP-Skript umgesetzt sieht wie folgt aus (das gleiche Beispiel wird auch in der Dokumentation zum cpdf Modul verwendet):
Beispiel 2. pdfclock Beispiel aus der pdflib Distribution
?php $pdffilename = "clock.pdf"; $radius = 200; $margin = 20; $pagecount = 40; $fp = fopen($pdffilename, "w"); $pdf = pdf_open($fp); pdf_set_info_creator($pdf, "pdf_clock.php3"); pdf_set_info_author($pdf, "Uwe Steinmann"); pdf_set_info_title($pdf, "Analog Clock"); while($pagecount- - 0) {pdf_begin_page($pdf, 2 * ($radius + $margin), 2 * ($radius + $margin)); pdf_set_transition($pdf, 4); / * wipe * / pdf_set_duration($pdf, 0.5); pdf_translate($pdf, $radius + $margin, $radius + $margin); pdf_save($pdf); pdf_setrgbcolor($pdf, 0.0, 0.0, 1.0); / * minute strokes * / pdf_setlinewidth($pdf, 2.0); for ($alpha = 0; $alpha 360; $alpha += 6) {pdf_rotate($pdf, 6.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin / 3, 0.0); pdf_stroke($pdf);} pdf_restore($pdf); pdf_save($pdf); / * 5 minute strokes * / pdf_setlinewidth($pdf, 3.0); for ($alpha = 0; $alpha 360; $alpha += 30) {pdf_rotate($pdf, 30.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin, 0.0); pdf_stroke($pdf);} $ltime = getdate(); / * draw hour hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['minutes'] / 60.0)+$ltime['hours']-3.0)*30.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius / 2, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw minute hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] / 60.0)+$ltime['minutes']-15.0)*6.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius * 0.8, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw second hand * / pdf_setrgbcolor($pdf, 1.0, 0.0, 0.0); pdf_setlinewidth($pdf, 2); pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] - 15.0) * 6.0)); pdf_moveto($pdf, -$radius / 5, 0.0); pdf_lineto($pdf, $radius, 0.0); pdf_stroke($pdf); pdf_restore($pdf); / * draw little circle at center * / pdf_circle($pdf, 0, 0, $radius / 30); pdf_fill($pdf); pdf_restore($pdf); pdf_end_page($pdf);} $pdf = pdf_close($pdf); fclose($fp); echo" A HREF=getpdf.php?filename=".$pdffilename. "finished / A";?
Das PHP-Skript getpdf.php liefert wiederum nur das Dokument.
?php $fp = fopen( $filename, "r"); header("Content-type: application / pdf"); fpassthru($fp); fclose($fp);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung macht es möglich, Geschäftsabwicklungen via Kreditkarte und andere Finanztransaktionen über die Verisign Payment Services, auch als Signio bekannt, abzuwickeln (http: / /www.verisign.com / products / payflow / pro / index.html).
Diese Funktionen sind nur verfügbar, wenn PHP mit der Option --with-pfpro[ =DIR] Diese Funktionen sind nur verfügbar, wenn PHP mit der Option --with-pfpro[=DIR] compiliert wurde.
Dazu ist das SDK nötig, dass im Management-Interface heruntergeladen werden kann, sobald man sich registriert hat.
Sollte diese Erweiterung in einem SSL-Webserver oder zusammen mit anderen SSL-Komponenten verwendet werden, muss die Beta-Version des SDK verwendet werden.
Sobald das SDK heruntergeladen wurde, sollte man die Dateien aus dem lib -Verzeichnis der Distribution kopieren.
Die Header-Datei pfpro.h sollte in das Verzeichnis / usr / local / include, die Bibliothek libpfpro.so in das Verzeichnis / usr / local / lib kopiert werden.
Wenn diese Funktionen genutzt werden, ist es mögliche, auf Aufrufe von pfpro_init() und pfpro_cleanup() zu verzichten, da diese automatisch aufgerufen werden, wenn sie benötigt werden.
Diese Funktionen sind jedoch nachwievor für Sonderfälle vorhanden, z.B. wenn viele Transaktionen auf einmal ausgeführt werden sollen, oder genaue Kontrolle über die Biblitohek benötigt wird.
Mehrere Transaktionen zwischen diesen beiden Funktionen können mittels der pfpro_process() -Funktion ausgeführt werden.
Diese Funktionen sind seit PHP 4.0.2 verfügbar.
Anmerkung:
Diese Funktionen stellen nur eine Schnittstelle zu den Verisign Payment Services dar.
Details über die nötigen Paramter sind in dem Dokument Payflow Pro Developers Guide zu finden, welches bei Verisign erhältlich ist.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
PostgreSQL ist ein kostenloses Open Source Datenbanksystem.
Es wurde ursprünglich im UC Berkeley Computer Science Department entwickelt und hat Pionierarbeit bei objektrelationalen Datenbankkonzepten geleistet, die jetzt Einzug in einige kommerzielle Datenbanken halten.
PostgreSQL bietet SQL92 / SQL99 Sprachunterstützung, Transaktionen und ein erweiterbares Typkonzept.
PostgreSQL ist eine Weiterentwicklung des ursprünglichen Berkeley-Codes.
Um PostgreSQL benutzen zu können, brauchen Sie mindestens eine Version 6.5 oder später, um alle Leistungsmerkmale des PostgreSQL-Moduls nutzen zu können, müssen Sie eine Version ab 7.0 haben.
PostgreSQL unterstützt viele Zeichencodierungen, einschließlich multibyte character encoding.
Die aktuelle Version sowie weitere Informationen über PostgreSQL sind auf der Seite http: / /www.postgresql.org / erhältlich.
Um die PostgreSQL-Unterstützung nutzen zu können, müssen Sie PHP mit --with-pgsql[ =DIR] kompilieren.
Falls das shared object module verfügbar ist, kann das PostgreSQL-Modul mit der extension -Direktive der Datei php.ini oder mittels der Funktion dl() geladen werden.
Die unterstützten ini-Direktiven sind in der Datei php.ini-dist beschrieben, die mit der Distribution ausgeliefert wird.
Warnung
Wegen eines Bugs in der Behandlung von NOTICE-Benachrichtigungen sollte das PostgreSQL-Modul der PHP Version 4.0.6 nicht benutzt werden.
Bitte benutzen Sie PHP 4.1.0 oder höher.
Warnung
Die Namen der PostgreSQL-Funktionen werden sich ab der PHP Version 4.2.0 ändern, um sie an die gültigen Coding-Standards anzupassen.
Die meisten neuen Namen enthalten zusätzliche Unterstriche, z.B. pg_lo_open().
Einige Funktionen werden der Einheitlichkeit wegen umbenannt, z.B. pg_exec() zu pg_query().
Die älteren Namen können in der Version 4.2.0 und auch ein paar Releases danach noch verwendet werden, aber sie werden irgendwann gelöscht.
Tabelle 1.
Die geänderten Funktionsnamen
Alter Name
Neuer Name
Die veraltete Syntax von pg_connect() und pg_pconnect() wird ungültig werden, um zukünftig asynchrone Verbindungen zu unterstützen.
Bitte benutzen Sie einen Verbindungsstring mit pg_connect() bzw. pg_pconnect().
Nicht alle Funktionen sind in allen Versionen verfügbar.
Es hängt davon ab, welche libpq Version (das PostgreSQL C Client Interface) auf Ihrem Rechner verfügbar ist und wie libpq kompiliert wurde.
Falls eine Funktion nicht verfügbar ist, liegt es daran, dass libpq die nötigen Routinen nicht unterstützt, die die Funktion braucht.
Es ist außerdem wichtig, dass Ihre libpq neuer ist, als der PostgreSQL-Server, zu dem Sie eine Verbindung aufbauen.
Wenn Sie eine libpq benutzen, die älter ist, als vom PostgreSQL-Server erwartet, werden Sie wahrscheinlich Probleme haben.
Seit Version 6.3 (03 / 02 / 1998) benutzt PostgreSQL per Voreinstellung Unix Domain Sockets.
Ein TCP / IP Port wird NICHT standardmäßig geöffnet.
In der untenstehenden Tabelle werden diese neuen Verbindungsmöglichkeiten gezeigt.
Der Socket ist in / tmp / .s.PGSQL.5432 zu finden.
Der Schalter -i, der dem postmaster mitgegeben werden kann, weist diesen an, sowohl über TCP / IP als auch über UNIX Domain Sockets eine Verbindung aufzubauen.
Tabelle 2.
Der Postmaster und PHP
Is the postmaster running and accepting TCP / IP (with -i) connection at 'localhost 'on port '5432'? in / pfad / zu / datei.php on line 20.
Eine Verbindung zu einem PostgreSQL-Server lässt sich auch mit den folgenden Wertepaaren, die im Verbindungsstring gesetzt werden, herstellen (wobei mindestens der Name der Datenbank angegeben sein muss): $conn = pg_connect("host=myHost port=myPort tty=myTTY options=myOptions dbname=myDB user=myUser password=myPassword ");
Die bisherige Syntax $conn = pg_connect ("host", "port", "options", "tty", "dbname") ist veraltet und sollte nicht weiter verwendet werden.
Umgebungsvariablen beeinflussen das Server / Client-Verhalten von PostgreSQL.
Zum Beispiel sucht das PostgreSQL-Modul nach der Umgebungsvariablen PGHOST, falls der Hostname im Verbindungsstring nicht angegeben wurde.
Die unterstützten Umgebungsvariablen variieren von Version zu Version.
Schauen Sie für weitere Informationen in den PostgreSQL Programmer' s Guide (nach den libpq Umgebungsvariablen).
Versichen Sie sich, dass Sie die Umgebungsvariable für den aktuellen Benutzer gesetzt haben.
Um sich die Umgebungsvariablen, die für den aktuellen Prozess verfügbar sind, anzeigen zu lassen, benutzen Sie $_ENV oder getenv().
Beispiel 1.
Umgebungsvariablen setzen
PGHOST=psgql.exmaple.com PGPORT=7890 PGDATABASE=web-system PGUSER=web-user PGPASSWORD=secret PGDATESTYLE=ISO PGTZ=JST PGCLIENTENCODING=EUC-JP export PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD PGDATESTYLE PGTZ PGCLIENTENCODING
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Ab der PostgreSQL Version 7.1.0 ist die maximale Grösse eines Feldes mit dem Datentyp text 1GB.
Ältere PostgreSQL Versionen begrenzten Felder vom Typ text auf Blockgrösse (normalerweise 8 KB bis maximal 32 KB, falls dies bei der Kompilation angegeben wurde).
Um die Large Object-Schnittstelle (lo) zu benutzen, ist es nötig, die Large-Object-Funktionen in einen Transaktionsblock einzuschließen.
Ein Transaktionsblock beginnt mit einem SQL-Befehl BEGIN und endet, falls die Transaktion gültig war, mit COMMIT oder END.
Wenn die Transaktion fehlschlägt, sollte sie mit ROLLBACK oder ABORT geschlossen werden.
Beispiel 2.
Large Objects benutzen
?php $database = pg_connect ("dbname=jacarta"); pg_query ($database, "begin"); $oid = pg_lo_create ($database); echo ("$oid\n"); $handle = pg_lo_open ($database, $oid, "w"); echo ("$handle\n"); pg_lo_write ($handle, "Daten des Large Objects"); pg_lo_close ($handle); pg_query ($database, "commit");?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses Modul enthält eine Schnittstelle zu den im IEEE 1003.1 (POSIX.1) Standards Dokument definierten Funktionen, die durch andere Mittel nicht erreichbar sind.
POSIX.1 definierte zum Beispiel auch die open(), read(), write() und close() Funktionen, die seit langer Zeit Bestandteil von PHP 3 sind.
Dieses Modul versucht hier Abhilfe zu schaffen, indem es einen einfachen Zugang zu diesen Funktionen bereitstellt.
Warnung
Sensible Daten können mit den POSIX -Funktionen, z.B. posix_getpwnam() und Freunde, abgefragt werden.
Die POSIX -Funktionen führen keinerlei Zugriffsüberprüfungen durch, wenn safe mode aktiviert ist.
Es wird daher stark empfohlen, die POSIX -Erweiterung komplett zu deaktivieren (verwenden Sie dazu bei der Konfiguration --disable-posix), wenn Sie in einer solchen Umgebung arbeiten.
Anmerkung:
Die POSIX-Funktionen stehen standardmäßig zur Verfügung.
Sie können sie mit der Option --disable-posix deaktivieren.
Der Abschnitt über Prozesskontroll-Funktionen könnte für Sie von Interesse sein.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen ermöglichen Ihnen, die Rechtschreibung eines Wortes zu prüfen und bieten Änderungsvorschläge an.
Anmerkung:
Um PHP mit pspell-Unterstützung zu compilieren, brauchen Sie die aspell - und pspell-Bibliotheken, die Sie unter http: / /aspell.sourceforge.net /, bzw. http: / /aspell.net / bekommen.
Falls Sie die benötigten Bibliotheken haben, können Sie PHP mit der Option --with-pspell[ =dir] übersetzen.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die readline() Funktionen realisieren eine Schnittstelle zur GNU Readline Bibliothek.
Diese Funktionen bieten die Möglichkeit Kommandozeilen zu editieren.
Ein Beispiel für die Anwendung ist die Art und Weise, wie die Bash es erlaubt, die Pfeiltasten zu benutzen um Schriftzeichen einzufügen oder durch die Kommando-History zu scrollen.
Auf Grund des interaktiven Charakters dieser Bibliothek ist diese beim Programmieren von Webanwendungen von geringem Nutzen, kann aber nützlich sein, wenn Sie Skripte schreiben, die dafür gedacht sind PHP von der Kommandozeile auszuführen.
Möchten Sie die readline Funktionen nutzen, müssen Sie die libreadline Bibliothek installieren.
Die libreadline Bibliothek finden Sie auf der Homepage des GNU Readline Projekts unter http: / /cnswww.cns.cwru.edu / ~chet / readline / rltop.html.
Dieses Projekt wird von Chet Ramey betreut, der auch der Author der Bash ist.
Sie können diese Funktionen auch mit der libedit Bibliothek benutzen, die einen Ersatz für readline darstellt und nicht der GPL unterliegt.
Die libedit Bibliothek ist BSD lizensiert und steht unter der Adresse http: / /sourceforge.net / projects / libedit / zum Download bereit.
Um diese Funktionen benutzten zu können, müssen Sie die CLI - oder CGI-Version von PHP mit readline Unterstützung übersetzen.
Konfigurieren Sie PHP mit der Option --with-readline[ =DIR].
Beabsichtigen Sie als Ersatz für readline libedit zu benutzen, konfigurieren Sie PHP mit der Option --with-libedit[ =DIR].
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses Modul stellt eine Schnittstelle zu der GNU Recode Bibliothek Version 3.5 dar.
Um die Umkodierungsfunktionen benutzen zu können muss die GNU Recode Bibliothek ab Version 3.5 auf dem System installiert und PHP mit der Option --with-recode kompiliert werden.
Die GNU Recode Bibliothek ermöglicht die Konversion zwischen verschiedenen Zeichensätzen (wie ASCII, ISO Latin-1, IBM-PC und weiteren) und Eingabekonventionen (z.B.
HTML oder LaTeX).
Wenn eine exakte Umkodierung nicht möglich ist, werden die störenden Zeichen entfernt oder durch Annäherungen ersetzt.
Die Bibliothek erkennt und verwendet etwa 150 verschiedene Zeichensätze und kann Umwandlungen zwischen den meisten dieser Zeichensätze vornehmen.
Fast alle der in RFC 1345 beschriebenen Zeichensätze werden unterstützt.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Bei Verwendung der PCRE Funktionen unterstützt PHP auch Reguläre Ausdrücke mit einer zu Perl kompatiblen Syntax.
Diese Funktionen unterstützen non-greedy Matching, Assertions, bedingte Subpatterns und viele andere Merkmale, die von der POSIX-erweiterten Syntax regulärer Ausdrücke nicht unterstützt werden.
Warnung
Diese Funktionen regulärer Ausdrücke sind im Gegensatz zu den PCRE Funktionen nicht binary-safe.
Reguläre Ausdrücke werden für komplexe Manipulationen an Zeichenketten mit PHP verwendet.
Folgende Funktionen unterstützen reguläre Ausdrücke:
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Um die regexp-Unterstützung zu aktivieren, müssen Sie PHP mit der Option --with-regex[ =TYPE] übersetzen.
TYPE kann entweder system, apache oder php sein.
Standardmäßig wird php verwendet.
Anmerkung:
Sie sollten TYPE nur ändern, wenn Sie wissen, was Sie tun.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Beispiel 1.
Beispiele regulärer Ausdrücke
ereg ("abc", $string); / * Gibt true zurück, falls "abc "irgendwo in $string gefunden wird. * / ereg ("^abc", $string); / * Gibt true zurück, falls "abc" am Anfang von $string gefunden wird. * / ereg ("abc$", $string); / * Gibt true zurück, falls "abc "am Ende von $string gefunden wird. * / eregi ("(ozilla .[23]_BAR_MSIE.3)", $HTTP_USER_AGENT); / * Gibt true zurück, falls es sich beim Client Browser um Netscape 2, 3 oder MSIE 3 handelt. * / ereg ("([[:alnum :]]+) ([[:alnum :]]+) ([[:alnum :]]+)", $string,$regs); / * Setzt drei Wörter, die durch Leerzeichen getrennt sind, in $regs[1], $regs[2] und $regs[3] ein. * / $string = ereg_replace ("^"," br / ", $string); / * Setzt ein br / Tag vor $string. * / $string = ereg_replace ("$"," br / ", $string); / * Setzt ein br / Tag hinter $string. * / $string = ereg_replace ("\n", "", $string); / * Entfernt alle Zeilenumbrüche aus $string. * /
Schauen Sie sich bezüglich regulärer Ausdrücke mit einer zu Perl kompatiblen Syntax die PCRE Funktionen an. fnmatch() bietet die Möglichkeit der Suche nach Übereinstimmungen mit Wildcard-Suchmustern im einfacheren Shell-Stil.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses Modul bietet Unterstützung für die Nutzung von Semaphoren und gemeinamen Speichersegmenten mit Hilfe der UNIX System V Mechanismen zur Interprozess-Kommunikation.
Mit Hilfe von Semaphoren kann der exklusive Zugriff auf Resourcen eines Systems sichergestellt oder die Anzahl der Prozesse begrenzt werden, die gleichzeitig eine bestimmte Systemresource nutzen.
Mit Hilfe gemeinsamer Speichersegmente (shared memory) können system-globale Variablen angelegt und bereitgestellt werden.
Diese Speicherbereiche stehen allen Prozessen des Systems, insbesondere aber allen parallel laufenden PHP-Instanzen zum Datenaustausch zur Verfügung.
Beachten Sie bitte, dass gemeinsame Speichersegmente keinen Schutze vor konkurrierenden gleichzeitigen Zugriffen bieten.
Benutzen Sie Semaphore für die Koordination solcher Zugriffe.
Tabelle 1.
Maximalgröße eines gemeinsamen Speicherbereichs, üblich sind 131072 Byte (128KB)
Minimalgröße eines gemeinsamen Speicherbereichs, normalerweise 1 Byte
maximale Anzahl unterschiedlicher Speichersegmente, üblich sind 100
Anzahl der Speichersegmente, die ein einzelner Prozess einbinden darf, üblich sind 6
Beispiel 1.
Koordinierter Zugriff auf gemeinsamen Speicher
?php / / gemeinsames Speichersegment beschaffen if(! ($mkey = shm_attach(0x2328,1024,OctDec("666")))) {echo "shmem_attach fehlgeschlagen br \n"; exit;} / / Semaphor für Zugriffskoordination auf / / Speichersegment beschaffen if(! ($skey = sem_get(0x2328,1,OctDec("666")))) {echo "sem_get fehlgeschlagen br \n"; exit;} / / Zugriff anfordern if(! sem_acquire($skey)) {echo "sem_acquire fehlgeschlagen br \n"; exit;} / / Wert lesen, aktualisieren und schreiben $val = @shm_get_var($mkey,1); if($val===false) $val=1; else $val++; print "new value is $val br \n"; shm_put_var($mkey,1,$val); / / Zugriff freigeben sem_release($skey);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
SESAM / SQL-Server ist ein von Fujitsu Siemens Computers in Deutschland entwickeltes Mainframe-Datenbanksystem für High-End Server mit dem Betriebssystem BS2000 / OSD.
In zahlreichen BS2000-Installationen hat SESAM / SQL-Server unter Beweis gestellt:
die einfach zu handhabende Unterstützung von Java-, Web - und Client-Server-Anwendungen
eine Hochverfügbarkeit von mehr als 99,99%
die Fähigkeit, bis zu mehrere hunderttausend Benutzer zu bedienen
Mit einer PHP3 SESAM-Schnittstelle sind jetzt auch Datenbank-Operationen per PHP-scripts möglich.
Konfigurationshinweise:
Die PHP-SESAM-Schnittstelle muss als Modul in Apache integriert werden.
Stand-alone-Betrieb ist nicht möglich.
Im Apache-PHP-Modul ist die SESAM-Schnittstelle entsprechend den Apache-Vorschriften zu konfigurieren.
Tabelle 1.
SESAM-Konfigurationsvorschriften
Bedeutung
Beispiel:
Zusätzlich zur PHP-SESAM-Schnittstelle muss natürlich die SESAM-Datenbank selbst auf dem BS2000-System installiert und konfiguriert werden:
der SESAM database handler (DBH) muss gestartet sein
die Datenbank und der DBH müssen verbunden sein
Für eine Verbindung zwischen dem PHP script und dem DBH müssen die Parameter von CNF und NAM der SESAM-Konfiguration den Werten des im BS2000 gestarteten DBH ensprechen.
Bei verteilten Datenbanken muss ein SESAM / SQL-DCN-Agent gestartet werden, dessen Konfigurationstabelle Host - und Datenbank-Namen enthält.
Die Kommunication zwischen PHP im BS2000-Subsystem POSIX und dem DBH im BS2000 erfolgt über Zugriffe eines speziellen Treibermoduls (SQLSCI) und der SESAM-Anschlußmodule auf einen gemeinsamen Speicherbereich (common memory).
Der common-memory-pool-Mechanismus und die Tatsache, dass PHP in den Webserver statisch eingebunden ist, machen die Datenbankzugriffe sehr schnell.
Nur ein kleines Lademodul (SESMOD) wird zum PHP gebunden, während die SESAM-Anschlußmodule aus der SESAM-OML (PLAM-Bibliothek) nachgeladen werden. library.
In der PHP-Konfiguration ,muss diese SESAM-OML und der für die SESAM-Konfiguration erforderliche Linkname angegeben werden (SQLSCI ist wie in SESAM V3.0 in der Standard-SESAM-Toolbibliothek verfügbar).
Wegen der SQL-Syntaxvorschriften für Anführungszeichen (doppelte Anführungszeichen statt AnfÜhrungszeichen mit vorangestelltem Gegenschrägstrich wie in manchen anderen Datenbanken) wird empfohlen, die PHP-Konfigurationsvorschriften php3_magic_quotes_gpc und php3_magic_quotes_sybase für alle SESAM betreffenden PHP-scripts auf On zu setzen.
Wegen der spezifischen Eigenschaften der BS2000-Prozeßsteuerung kann der Treiber erst nach dem fork des Apache-Servers für seine Sohn-Prozesse geladen werden.
Der erste SESAM-Zugriff jedes dieser Prozesse wird dadurch etwas verlangsamt, alle weiteren Zugriffe werden jedoch ohne Beeinträchtigung abgearbeitet.
Ein explizit definierter SESAM-Meldungskatalog wird bei jedem Laden des Treibers (d.h. beim ersten SESAM-Zugriff) geladen.
BS2000 erzeugt nach dem erfolgreichen Laden dieses Katalogs eine Meldung, die an die error_logfile von Apache geschickt wird.
Zt. ein Unterdrücken dieser Meldung nicht erlaubt, wird das logfile langsam damit vollgeschrieben.
Bitte beachten: die SESAM-OML (PLAM-Bibliothek) und die SESAM-Konfigurationsdatei müssen für die Benutzerkennung, unter der der Webserver läuft, lesbar sein!
Andernfalls kann der Server den Treiber nicht laden, womit die SESAM-Funktionen nicht zur Verfügung stehen.
Auch der Zugriff die Datenbank selbst muss dem Server möglich sein, da sonst keine Verbindung zum DBH möglich ist.
Cursor Typen:
Die für SQL-Abfragen "select type" zugewiesenen Ergebniscursor können "sequential "oder "scrollable" sein, Standardwert ist wegen des geringeren Speicherbedarfs "sequential "
"Scrollable" Cursors können im Ausgabedatensatz beliebig positioniert werden.
Für jede "scrollable" Abfrage gibt es globale Standardwerte für den Scroll-Typ (initialisiert zu:
SESAM_SEEK_NEXT) und der Scrolling-Abstand, der entweder einmal mit: sesam_seek_row() oder jedesmal beim Lesen einer Zeile mit: sesam_fetch_row() gesetzt werden kann.
Die folgende Tabelle zeigt die Behandlung der globalen Stadtardwerte für Scroll-Typ und Scroll-Abstand beim Lesen einer Zeile mit "scrollable" Cursor:
Tabelle 2.
Da in PHP Indizes üblicherweise mit NULL gestartet werden, musste die SESAM-Schnittstelle entsprechend adaptiert werden: während in der "normalen" SESAM-Schnittstelle ein Array mit Index 1 beginnt, wird in PHP NULL als Startpunkt verwendet - z.B. hat beim Lesen von Spalten mit sesam_fetch_row() die erste Spalte den Index 0 und the folgenden Spalten haben Indizes bis zu (aber nicht einschließlich!) dem Spaltenindex ($array["count"]).
Beim Portieren von SESAM-Anwendungen aus aus anderen höheren Programmiersprachen nach PHP ist diese Schnittstellenänderung zu beachten.
Sicherheitsaspekte:
Beim Zugriff auf SESAM-Datenbanken sollte der normale Benutzer eines Web-Servers nur die allernötigsten Privilegien bekommen.
Im allgemeinen sollte auf Datenbanken nur lesender Zugriff möglich sein.
Weitergehende Rechte sollten - nur falls wirklich erforderlich - abhängig vom jeweiligen Einsatzfall eingerichtet werden.
Auf keinen Fall sollte man beliebigen Benutzern im Internet volle Zugriffsrechte auf eine Datenbank gewähren!
Migration von anderen SQL-Datenbanken:
Unterschiedliche SQL-Ausprägungen sind nie 100-prozentig kompatibel.
Bei der Portierung von SQL-Anwendungen anderer Datenbanken nach SESAM können daher Anpassungen erforderlich sein.
Auf folgende, typische Unterschiede sei besonders hingewiesen:
Herstellerspezifische Datentypen
TEXT in VARCHAR( max. size).
Schlüsselwörter als SQL-Bezeichner
In SESAM müssen Schlüsselwörter in Anführungsstrichen (???) angegeben werden (SQL-Standard) Schlüssel.
Länge der Anzeige in Datentypen
Statt int( 4) für ganze Zahlen bis '9999 'braucht SESAM lediglich int für eine implizite Länge von 31 Bit.
Als Datentypen für Datum und Zeit gibt es in SESAM nur:
DATE, TIME( 3) und TIMESTAMP(3).
SQL-Datentypen mit herstellerspezifischen Attributen der Form: unsigned, zerofill, oder auto_increment attributes
Unsigned und zerofill werden nicht unterstützt.
Um die SESAM-implizite automatische Erhöhung zu nutzen, gibt es anstelle von "... VALUES(0,...)"
Numerische Variablen dürfen nicht mit Zeichenkonstanten initialisiert werden.
Statt dessen ist DEFAULT 0 zu verwenden.
Dem Initialisierungs-string für Variablen des SQL-Datentyps datetime muss das jeweilige Schlüsselwort als Prefix vorangestellt werden wie in CREATE TABLE exmpl (xtime timestamp(3) DEFAULT TIMESTAMP '1970-01-01 00:00:00.000 'NOT NULL);
Manche Datenbanken liefern die geschätzte / erratene Anzahl von Ausgabezeilen als Abfrageresultat an, obwohl der gelieferte Wert grob falsch ist.
SESAM kennt die Anzahl von Ausgabezeilen erst, wenn sie tatsächlich gelesen wurden.
Diese Funktion ermittelt die Anzahl der Treffer.
Ein zweiter Aufruf liefert (hoffentlich) die eigentlichen Ergebnisse.
In SESAM muss im Kommamdo DROP TABLE der Name entweder um die Schlüsselwörter RESTRICT oder CASCADE ergänzt werden.
VIEWs) existieren, während bei CASCADE abhängige Objekte zusammen (???) mit der definierten Tabelle gelöscht werden.
Bemerkungen zu weiteren SQL-Datentypen:
SESAM unterstützt z.Zt. keine Daten von Typ BLOB.
Bei SQL-Abfragen werden von der PHP-Schnittstelle folgende Datentypen automatisch konvertiert:
Tabelle 3.
"integer"
"double"
"string"
"string"
Diese spezielle SESAM-Funktion erlaubt die Definiton von Spalten als Feld-Array.
Eine "multiple field" Spalte wird wie folgt definiert:
Beispiel 1.
Beispiel 2.
INSERT INTO multi_field_test (pkey, multi(2..3)) VALUES ('Second', 'first_val' ,'second_val ')
Bei der Ausgabe von Ergebniszeilen wird auf "multiple columns" wie auf "inlined "zusätzliche Spalten zugegriffen.
Im obigen Beispiel bekommt "pkey" den Indexwert NULL und auf die drei Spalten "multi(1..3) "kann mit den Indizes 1 bis 3 zugegriffen werden.
Beide Manuale sind online abrufbar und stehen in gedruckter Form zur Verfügung.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Unterstützung von Sessions in PHP bietet die Möglichkeit, bestimmte Daten während einer Folge von Aufrufen Ihrer Website festzuhalten.
Damit können Sie persönlichere Applikationen erstellen und Ihre Website ansprechender gestalten.
Falls Sie mit dem Sessionmanagment von PHPLIB vertraut sind, werden Sie Ähnlichkeiten zu PHPs Session-Unterstützung feststellen.
Einem Besucher wird beim Aufruf Ihrer Website eine eindeutige ID, die sogenannte Session-ID, zugeordnet.
Diese wird entweder benutzerseitig in einem Cookie abgelegt oder in der URL übermittelt.
Die Unterstützung von Sessions erlaubt Ihnen, eine beliebige Anzahl von Variablen zu registrieren und diese über Anfragen hinweg zu erhalten.
Wenn ein Besucher Ihre Website aufruft, überprüft PHP automatisch (falls session.auto_start auf 1 gesetzt ist) oder auf Anfrage (explizit durch session_start() oder implizit durch session_register()), ob mit der Anfrage schon eine bestimmte Session-ID gesendet wurde.
Wenn dies der Fall ist, wird die zuvor gespeicherte Umgebung wiederhergestellt.
Alle registrierten Variablen werden serialisiert, nachdem die Anfrage beendet ist.
Registrierte Variablen, die nicht definiert sind, werden als nicht definiert gekennzeichnet.
Auch bei darauffolgenden Zugriffen werden sie nicht vom Session-Modul definiert, außer der Benutzer definiert sie später.
Anmerkung:
Die Behandlung von Sessions wurde in PHP 4.0 eingeführt.
Wenn Sie Sessions verwenden, bedeutet das nicht, dass Sie absolut sicher sein können, dass die Session-Daten nur vom jeweiligen Benutzer gesehen werden können.
Es ist wichtig, dass Sie beim Speichern und Anzeigen sensibler Daten daran denken.
Wenn Sie Daten in einer Session speichern, sollten Sie sich immer fragen, wie groß der Schaden ist, wenn jemand anderes diese Informationen sieht oder inwieweit Ihre Anwendung davon betroffen ist, wenn die Session in Wirklichkeit von jemand anderem benutzt wird.
Kann zum Beispiel jemand, der eine Session übernimmt, als dieser Benutzer eine Nachricht an ein Forum senden und stellt das ein großes Problem dar?
Oder vielleicht kann er sehen, was der ursprüngliche Benutzer zu bestellen beabsichtigte, weil er Zugriff auf den Einkaufswagen dieses Benutzers bekommt.
Für einen Blumenladen wäre das offensichtlich weniger dramatisch als für eine Apotheke.
Deshalb sollte es beim Umgang mit sensiblen Daten immer zusätzliche Methoden geben, mit denen festgestellt werden kann, ob es sich um eine gültige Session handelt.
Sessions sind als Mechanismus für sichere Authentifizierung nicht verlässlich.
Sessions vertrauen auf die Session-ID, was bedeutet, dass eine Session 'gestohlen' werden kann, indem die Session-ID gestohlen wird.
Dies kann durch Verwendung eines Cookies, speziell eines Session-Cookies, erschwert werden, aber das macht es keinesfalls unmöglich und stützt sich immer noch darauf, dass der Benutzer alle Browserfenster schließt, damit das Cookie verfällt.
Außerdem können auch Session-Cookies in einem Netzwerk ausgeschnüffelt werden oder von einem Proxyserver protokolliert werden.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Die Unterstützung von Sessions ist in PHP standardmäßig aktiviert.
Falls Sie Ihr PHP ohne Unterstützung von Sessions bauen wollen, müssen Sie bei der Konfiguration die Option --disable-session angeben.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Session-Konfigurationsoptionen
Bezeichnung
Grundeinstellung
Änderbar
Das Sessionmanagementsystem unterstützt eine Anzahl von Konfigurationsoptionen, die Sie in Ihrer php.ini setzen können.
Wir geben Ihnen dazu einen kleinen Überblick.
session.save_handler definiert den Namen der Prozedur, die benutzt wird, um die Daten zu speichern und zurückzuholen, die mit der Session in Verbindung stehen.
Grundeinstellung files.
Siehe auch session_set_save_handler().
session.save_path session.save_path definiert das Argument, das an die Speicherprozedur übergeben wird.
Wenn Sie die standardmäßige files Prozedur wählen, ist das der Pfad, unter dem die Dateien erzeugt werden.
Grundeinstellung / tmp.
Wenn die Verzeichnistiefe von session.save_path größer als zwei ist, wird die Garbage-Collection nicht durchgeführt.
Siehe auch session_save_path().
Warnung
Wenn Sie ein Verzeichnis gewählt haben, für das jeder Leserechte hat, wie das z.B. bei / tmp (Grundeinstellung) der Fall ist, könnten andere Serverbenutzer mit Hilfe der Dateiliste dieses Verzeichnisses Ihre Sessions entführen.
Anmerkung:
Benutzer von Windows müssen diese Variable ändern, um die Session-Funktionen von PHP nutzen zu können.
Stellen Sie sicher, dass Sie einen gültigen Pfad, z.B. c: / temp, angegeben haben.
session.name session.name spezifiziert den Namen der Session, der als Cookie-Name verwendet wird.
Grundeinstellung PHPSESSID.
Siehe auch session_name().
session.auto_start spezifiziert, ob das Session-Modul zu Beginn einer Anfrage automatisch eine Session startet.
Grundeinstellung 0 (deaktiviert).
session.serialize_handler definiert den Namen der Prozedur, die benutzt wird, um Daten zu serialisieren / deserialisieren.
Gegenwärtig wird ein internes PHP-Format (Name php) und WDDX (name wddx) unterstützt.
WDDX steht nur zur Verfügung, wenn PHP mit WDDX support kompiliert wurde.
Grundeinstellung php.
session.gc_probability spezifiziert die prozentuale Wahrscheinlichkeit, dass die gc (garbage collection) Routine bei jeder Anfrage gestartet wird.
Grundeinstellung 1.
session.gc_maxlifetime spezifiziert die Anzahl der Sekunden, nach denen Daten als 'garbage' ('Müll') betrachtet und entsorgt werden.
Anmerkung:
Falls Sie die standardmäßige dateibasierte Session-Prozedur verwenden, muss Ihr Dateisystem die Zugriffszeiten (atime) verfolgen.
Sie müssen sich daher einen anderen Weg einfallen lassen, um die 'Müllentsorgung' Ihrer Session zu erledigen, wenn Sie an ein FAT-Dateisystem gebunden sind oder an irgendein anderes Dateisystem, das keine atime-Kontrolle bietet.
session.referer_check enthält die Zeichenkette, auf die Sie jeden HTTP-Referer überprüfen wollen.
Wenn der Referer vom Client gesendet und die Zeichenkette nicht gefunden wurde, wird die eingebettete Session-ID als ungültig gekennzeichnet.
Grundeinstellung ist eine leere Zeichenkette.
session.entropy_file gibt den Pfad zu einer externen Quelle (Datei) an, die bei der Erzeugung einer Session-ID als zusätzliche Entropiequelle verwendet wird.
Beispiele sind / dev / random oder / dev / urandom, die auf vielen Unix-Systemen zur Verfügung stehen.
session.entropy_length spezifiziert die Anzahl der Bytes, die von der oben spezifizierten Datei gelesen werden.
Grundeinstellung 0 (deaktiviert).
session.use_cookies spezifiziert, ob das Modul Cookies verwendet, um die Session-ID clientseitig zu speichern.
Grundeinstellung 1 (aktiviert).
session.use_only_cookies spezifiziert, ob das Modul nur Cookies verwendet, um die Session-ID clientseitig zu speichern.
Grundeinstellung 0 Grundeinstellung 0 (deaktiviert, für Rückwärts-Kompatibilität).
Mit Aktivierung dieser Einstellung wird möglichen Angriffen durch Übermittlung von Session-IDs in URLs vorgebeugt.
Diese Einstellung wurde in PHP 4.3.0 hinzugefügt.
session.cookie_lifetime spezifiziert die Cookie-Lebensdauer, die an den Browser geschickt wird, in Sekunden.
Siehe auch session_get_cookie_params() und session_set_cookie_params().
session.cookie_path session.cookie_path spezifiziert den Pfad, in dem das Session-Cookie gesetzt wird.
Siehe auch session_get_cookie_params() und session_set_cookie_params().
session.cookie_domain spezifiziert die Domain, unter der das Session-Cookie gesetzt wird.
In der Grundeinstellung überhaupt keine.
Siehe auch session_get_cookie_params() und session_set_cookie_params().
session.cookie_secure spezifiziert, ob Cookies nur über sichere Verbindungen geschickt werden sollen.
Grundeinstellung off.
Diese Einstellung wurde in PHP 4.0.4 hinzugefügt.
Siehe auch session_get_cookie_params() und session_set_cookie_params().
session.cache_limiter spezifiziert die Methode der Cacheverwaltung, die bei Session-Seiten benutzt wird (none / nocache / private / private_no_expire / public).
Grundeinstellung nocache.
Siehe auch session_cache_limiter().
Bei nocache ist diese Angabe wirkungslos.
Grundeinstellung 180.
Siehe auch session_cache_expire().
session.use_trans_sid bestimmt ob transparente SID-Unterstützung aktiviert ist oder nicht.
Grundeinstellung 0 (deaktiviert).
Anmerkung:
In PHP 4.1.2 oder darunter wird sie durch compilieren mit --enable-trans-sid aktiviert.
Ab PHP 4.2.0 ist das Feature trans-sid immer eincompiliert.
URL-basiertes Session-Management hat im Vergleich zu Cookie-basiertem Session-Management zusätzliche Sicherheitsrisiken.
Benutzer können zum Beispiel eine URL, die eine aktive Session-ID enthält, per Email an Freunde schicken oder in ihren Bookmarks speichern und immer mit der selben Session-ID auf Ihre Seite zugreifen.
url_rewriter.tags bestimmt, wenn Unterstützung für transparente SID aktiviert ist, welche HTML-Tags so umgeschrieben werden, dass sie die Session-ID beinhalten.
Grundeinstellung a=href,area=href,frame=src,input=src,form=fakeentry
Die Konfigurationseinstellungen von track_vars und register_globals beeinflussen, wie die Session-Variablen gespeichert und wiederhergestellt werden.
Anmerkung:
Seit PHP 4.0.3 ist track_vars immer aktiviert.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Konstante, die den Namen und die ID der Session in der Form "name=ID" enthält.
Anmerkung:
Seit PHP 4.1.0 steht $_SESSION genau wie $_POST, $_GET, $_REQUEST und so weiter, als globale Variable zur Verfügung.
Im Gegensatz zu $HTTP_SESSION_VARS ist $_SESSION immer global.
Deshalb brauchen Sie für $_SESSION nicht das Schlüsselwort global zu verwenden.
Bitte beachten Sie, dass in dieser Dokumentation nun überall $_SESSION verwendet wird.
Sie können $_SESSION durch $HTTP_SESSION_VARS ersetzen, wenn Sie Letzteres bevorzugen.
Für die Schlüssel des assoziativen $_SESSION -Arrays gelten die selben Beschränkungen, wie für die Bezeichnungen von regulären Variablen in PHP, d.h. sie dürfen nicht mit einer Zahl, sondern müssen mit einem Buchstaben oder Unterstrich beginnen.
Um weitere Deteils zu erhalten, siehe Abschnitt Variablen.
Falls register_globals deaktiviert ist, können nur Bestandteile des globalen assoziativen Arrays $_SESSION als Session-Variablen registriert werden.
Wiederhergestellte Session-Variablen stehen nur im Array $_SESSION zur Verfügung.
Aus Gründen der Verbesserung der Sicherheit und der Lesbarkeit des Codes wird die Verwendung von $_SESSION (oder $HTTP_SESSION_VARS bei PHP 4.0.6 oder niedriger) empfohlen.
Mit $_SESSION werden die Funktionen session_register(), session_unregister() und session_is_registered() nicht benötigt.
Auf die Session-Variablen kann wie auf jede normale Variable zugegriffen werden.
Beispiel 1.
Registrierung einer Variablen mit $_SESSION.
?php session_start(); / / Verwenden Sie bei PHP 4.0.6 oder niedriger $HTTP_SESSION_VARS if (!isset($_SESSION['zaehler'])) {$_SESSION['zaehler'] = 0;} else {$_SESSION['zaehler']++;}?
Beispiel 2.
Aufheben der Registrierung einer Variablen mit $_SESSION und deaktiviertem register_globals.
?php session_start(); / / Verwenden Sie bei PHP 4.0.6 oder niedriger $HTTP_SESSION_VARS unset($_SESSION['zaehler']);?
Beispiel 3.
Aufheben der Registrierung einer Variablen mit aktiviertem register_globals, nachdem sie unter Verwendung von $_SESSION registriert wurde.
?php session_start(); / / Ab PHP 4.3, können Sie auch einfach das vorige Beispiel benutzen. session_unregister('count');?
Wenn register_globals aktiviert ist, kann jede globalen Variable als Session-Variable registriert werden.
Beim Neustart einer Session werden diese Variablen als entsprechende globale Variablen wiederhergestellt.
Da PHP wissen muss, welche globalen Variablen als Session-Variablen registriert sind, muss der Benutzer Variablen mit der Funktion session_register() registrieren.
Sie können das vermeiden, indem Sie einfach Einträge in $_SESSION setzen.
Achtung
Wenn Sie $_SESSION verwenden und register_globals deaktivieren, sollten Sie session_register(), session_is_registered() und session_unregister() Wenn Sie $_SESSION verwenden und register_globals deaktivieren, sollten Sie session_register(), session_is_registered() und session_unregister() nicht verwenden, wenn Ihre Scripte mit PHP 4.2 und niedriger funktionieren sollen.
Sie können diese Funktionen ab 4.3 verwenden.
Wenn Sie register_globals aktivieren, sollten Sie session_unregister() Wenn Sie register_globals aktivieren, sollten Sie session_unregister() verwenden, weil beim Deserialisieren von Session-Daten die Session-Variablen als globale Variablen registriert werden.
Die Deaktivierung von register_globals ist sowohl aus Sicherheitsgründen als auch wegen der Performance empfehlenswert.
Beispiel 4.
Registrierung einer Variablen bei aktiviertem register_globals
?php if (!session_is_registered('zaehler')) {session_register("zaehler"); $zaehler = 0;} else {$zaehler++;}?
Wenn register_globals aktiviert ist, dann referenzieren die globalen Variablen und die Einträge von $_SESSION für Session-Variablen, die in vorherigen Instanzen der Session registriert wurden, automatisch den selben Wert.
Wenn Sie darüber hinaus eine neue Session-Variable mittels session_register() registrieren, referenzieren der Eintrag im globalen Bereich und der $_SESSION -Eintrag bis zum nächsten session_start() nicht den selben Wert (gilt nur bis einschließlich PHP 4.2).
D.h. eine Änderung an der globalen Variablen wird nicht vom $_SESSION -Eintrag widergespiegelt.
Es ist unwahrscheinlich, dass das in der Praxis eine Rolle spielt und wurde in PHP 4.3 korrigiert.
Es gibt zwei Methoden, eine Session-ID zu übermitteln:
URL Parameter
Das Session-Modul unterstützt beide Methoden.
Cookies sind optimal, aber da sie nicht zuverlässig sind (Clients müssen sie nicht unbedingt akzeptieren), können wir uns nicht auf sie verlassen.
Die zweite Methode hängt die Session-ID direkt an die URLs.
Falls PHP mit --enable-trans-sid kompiliert wurde, kann es dies transparent machen.
Diese Option ist ab PHP 4.2 immer aktiviert.
Wenn Sie diese Option aktivieren, werden relative URIs automatisch geändert, sodass sie die Session-ID enthalten.
Alternativ können Sie die Konstante SID verwenden, die definiert wird, falls vom Client keinen passendes Cookie gesendet wurde.
SID hat entweder die Form session_name=session_id oder ist eine leere Zeichenkette.
Die php.ini -Anweisung arg_separator.output ermöglicht es, die Trennung von Argumenten anzupassen.
Das folgende Beispiel demonstriert, wie eine Variable registriert wird und wie unter Verwendung einer SID korrekt auf eine andere Seite verwiesen wird.
Beispiel 5.
Zählen der Seitenaufrufe eines einzelnen Benutzers
?php if (!session_is_registered('zaehler')) {session_register('zaehler'); $zaehler = 1;} else {$zaehler++;}?
Mal aufgerufen. p Hier gehts A HREF=" nextpage.php? ?php echo SID? "weiter / A
Falls der Benutzer Cookies deaktiviert hat, ist das ?php echo SID? nötig, um die Session-ID zu erhalten (wenn short_open_tag aktiviert ist, kann ?=SID? verwendet werden).
Das ?=SID? ist nicht nötig, wenn PHP mit --enable-trans-sid kompiliert wurde.
Anmerkung:
Bei nichtrelativen URLs wird davon ausgegangen, dass sie auf externe Seiten zeigen und, weil es ein Sicherheitsrisiko wäre, die SID an einen anderen Server zu übermitteln, von daher wird keine SID angehängt.
Wenn Sie die Speicherung in einer Datenbank oder irgendeine andere Art der Speicherung realisieren wollen, können Sie session_set_save_handler() verwenden, um eine Reihe von benutzerdefinierten Speicherfunktionen zu erzeugen.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Shmop ist eine Sammlung einfach anzuwendender PHP-Funktionen, mit denen man mit PHP UNIX shared-memory-Segmente beschreiben, auslesen und löschen kann.
Die Funktionen können mit Windows nicht eingesetzt werden, da Windows keinen gemeinsamen Speicher unterstützt.
Um shmop zu nutzen, müssen Sie PHP mit der Option --enable-shmop kompilieren.
Anmerkung:
Die Funktionen, die in diesem Kapitel erklärt werden, beginnen in PHP 4.0.3 alle mit shm, anstelle von shmop.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Um die shmop-Funktionen benutzen zu können, müssen Sie php mit der Option --enable-shmop kompilieren.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Konstanten.
Beispiel 1.
Shared Memory Operationen - Übersicht
?php / / Erstelle einen 100 Byte grossen gemeinsam genutzten Speicherblock / / mit mit der System_ID if 0xff3 $shm_id = shmop_open( 0xff3, "c", 0644, 100); if(!$shm_id) {echo "Konnte kein gemeinsames Speichersegment erstellen\n";} / / Hole die Grösse des gemeinsamen Speicherblocks $shm_size = shmop_size($shm_id); echo "SHM Block mit: ".$shm_size. "Bytes wurde erstellt.\n"; / / Teststring in den gemeinsamen Speicher schreiben $shm_bytes_written = shmop_write($shm_id, "mein gemeinsamer Speicherblock", 0); if($shm_bytes_written != strlen("mein gemeinsamer Speicherblock")) {echo "Konnte nicht den gesamten String schreiben\n";} / / Den Teststring wieder auslesen $my_string = shmop_read($shm_id, 0, $shm_size); if(!$my_string) {echo "Konnte nicht aus dem gemeinsamen Speicher lesen\n";} echo "Die Daten im gemeinsamen Speicher waren: ".$my_string ."\n"; / / Den Speicherblock löschen und den gemeinsamen Speicher schliessen if(!shmop_delete($shm_id)) {echo "Konnte den gemeinsamen Speicherblock nicht zum Löschen markieren .";} shmop_close($shm_id);?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Um die SNMP Funktionen unter Unix nutzen zu können muss das UCD SNMP Paket installiert sein.
Unter Windows sind diese Funktionen nur unter NT verfügbar, nicht aber unter Win95 / 98.
WICHTIG:
Um das UCD SNMP Paket zu nutzen muss NO_ZEROLENGTH_COMMUNITY als 1 definiert werden bevor man es kompiliert.
Nache dem Konfigureieren UCD SNMP muss in der Datei config.h die Zeile mit NO_ZEROLENGTH_COMMUNITY auskommentiert werden.
Die Zeile sollte danach so aussehen:
Wenn seltsame "segmentation faults" in Verbindung mit SNMP Kommandos auftauchen, wurden die obigen Anweisungen nicht korrekt befolgt.
Als eine Alternative zum Neukompilieren des Packets, kann mann auch PHP mit der option --enable-ucd-snmp-hack kompilieren.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Die Socket-Erweiterung stellt eine hardwarenahe Schnittstelle zu den Datenaustauschfunktionen über eine Socket-Verbindung zur Verfügung, die auf den bekannten BSD Sockets aufbaut, und bietet die Möglichkeit, entweder als Socket-Server oder als Client zu agieren.
Für eine allgemeinere clientseitige Socket Schnittstelle siehe fsockopen() und pfsockopen().
Wenn man diese Funktionen benutzt, darf man nicht vergessen, dass, obwohl viele der Funktionen gleichlautende Namen wie ihre Entsprechungen in C haben, sie dennoch oft unterschiedliche Deklarationen haben.
Bitte lesen Sie die Deklarationen, um Verwirrung zu vermeiden.
Vieles davon kann mit leichten Änderungen für die Socketprogrammierung mit PHP benutzt werden.
Die UNIX Socket FAQ ist dafür ein guter Anfang.
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Die hier beschriebenen Socket Funktionen sind Teil einer PHP Erweiterung, die beim Kompilieren mit der Option --enable-sockets beim Befehl configure eingebunden werden muss.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Die Socket-Erweiterung wurde geschrieben, um eine nützliche Schnittstelle zu den mächtigen BSD-Funktionen zur Verfügung zu stellen.
Es wurde darauf geachtet, dass die Funktionen sowohl unter Win32 als auch unter Unix-Implementierungen arbeiten.
Fast alle Socket-Funktionen können unter besonderen Umständen fehlschlagen und deshalb eine E_WARNING - Meldung ausgeben, die den aufgetretenen Fehler beschreibt.
Dies ist manchmal nicht wünschenswert für den Entwickler.
Zum Beispiel kann die Funktion socket_read() plötzlich eine E_WARNING -Meldung ausgeben, weil die Verbindung unerwartet beendet wurde.
Normalerweise werden solche Meldungen mit dem @ -Operator unterdrückt und der Fehlercode innerhalb der Anwendung mit der Funktion socket_last_error() aufgefangen.
Sie können auch die Funktion socket_strerror() mit diesem Fehlercode aufrufen, um einen String, der den Fehler beschreibt, zu erhalten.
Nähere Informationen finden Sie bei diesen beiden Funktionen.
Anmerkung:
Die E_WARNING -Meldungen, die von der Socket-Extension generiert werden, sind auf Englisch, aber die Meldungen, die Sie extra abfragen können, erscheinen in der entsprechenden Sprache, die Sie eingestellt haben (LC_MESSAGES):
Beispiel 1.
Socket Beispiel:
Einfacher TCP / IP Server
Dieses Beispiel zeigt einen einfachen Echo-Server.
Passen Sie die Variablen address und port an Ihre Systemumgebung an und führen Sie das Skript aus.
Dann können Sie sich mit einem Befehl wie: telnet 192.168.1.53 10000 (bei dem adress und port an Ihre Umgebung angepasst ist) mit dem Server verbinden.
Alles, was Sie eingeben, wird an den Server geschickt und von diesem wieder an Sie zurückgegeben.
Um die Verbindung zu trennen, geben sie 'quit' ein.
Grund: ". socket_strerror ($sock). "\n";} if (($ret = socket_bind ($sock, $address, $port)) 0) {echo "socket_bind() fehlgeschlagen:
Um den Server herunterzufahren, geben Sie 'shutdown' ein.\n"; socket_write($msgsock, $msg, strlen($msg)); do {if (FALSE === ($buf = socket_read ($msgsock, 2048))) {echo "socket_read() fehlgeschlagen:
Sie haben '$buf' eingegeben.\n"; socket_write ($msgsock, $talkback, strlen ($talkback)); echo "$buf\n";} while (true); socket_close ($msgsock);} while (true); socket_close ($sock);?
Beispiel 2.
Socket Beispiel:
Einfacher TCP / IP Client
Dieses Beispiel zeigt einen einfachen HTTP-Client, der einen einzelnen Request absetzen kann.
Er verbindet sich mit einer Seite, setzt einen HEAD-Request ab, gibt die Antwort zurück und wird beendet.
Grund: ". socket_strerror ($socket). "\n";} else {echo "OK.\n";} echo "Versuche, eine Verbindung zu '$address 'auf Port '$service_port' aufzubauen.. ."; $result = socket_connect ($socket, $address, $service_port); if ($result 0) {echo "socket_connect() fehlgeschlagen.\nGrund: ($result)". socket_strerror($result). "\n";} else {echo "OK.\n";} $in = "HEAD / HTTP / 1.0\r\n\r\n"; $out = ''; echo "Einen HTTP HEAD Request senden.. ."; socket_write ($socket, $in, strlen ($in)); echo "OK.\n"; echo "Die Antwort lesen:\n\n"; while ($out = socket_read ($socket, 2048)) {echo $out;} echo "Den Socket schliessen.. ."; socket_close ($socket); echo "OK.\n\n";?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
There are many wrappers built into PHP by default (See Anhang I), and additional, custom wrappers may be added either within a PHP script using stream_register_wrapper(), or directly from an extension using the API Reference in Kapitel 43.
Custom filters can be defined in a PHP script using stream_register_filter() or in an extension using the API Reference in Kapitel 43.
See Anhang I for a list of PHP builtin wrappers.
Again, see Anhang I for a description of targets for builtin streams.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Beispiel 1.
Beispiel 2.
Beispiel 3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Mit diesen Funktionen werden Strings (Zeichenketten) auf verschiedene Arten verändert.
Spezielle Anwendungen können in den Abschnitten zu regulären Ausdrücken (regular expression) und der URL-Handhabung gefunden werden.
Informationen zur Funktionsweise von Strings (insbesondere beim Gebrauch von einfachen bzw. doppelten Anführungszeichen und Escape-Sequenzen) erhalten Sie unter dem Strings -Eintrag im Kapitel Typen des Manuals.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Diese Erweiterung definiert keine Konstanten.
Schauen Sie sich die POSIX-Funktionen und die Perl-kompatiblen Funktionen für reguläre Ausdrücke an, wenn Sie noch mächtigere Funktionen zur String-Verarbeitung nutzen möchten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
PHP ermöglicht es Shockwave Flash Dateien mit Paul Haeberli 's libswf Modul zu erzeugen.
Sie können das libswf-Modul unter ftp: / /ftp.sgi.com / sgi / graphics / grafica / flash Sie können das libswf-Modul unter ftp: / /ftp.sgi.com / sgi / graphics / grafica / flash herunterladen.
Wenn Sie das Modul geladen haben, brauchen Sie nur noch PHP mit dem Modul zu konfigurieren (--with-swf[=DIR]), wobei DIR für das Verzeichnis steht, welches die Verzeichnisse include und lib beinhaltet.
Das include-Verzeichnis muss die swf.h-Datei und das lib-Verzeichnis die libswf.a-Datei enthalten.
Wenn Sie die Distribution entpacken, werden beide Dateien in ein Verzeichnis entpackt.
Daher müssen Sie die Dateien manuell in die richtigen Verzeichnisse kopieren.
Haben Sie PHP erfolgreich mit Shockwave Flash Unterstützung installiert, können Sie Shockwave Flash-Dateien via PHP erstellen.
Sie werden überrascht sein von den Möglichkeiten, die sich Ihnen bieten.
Schauen Sie sich den folgenden Quellcode-Auschnitt an:
Beispiel 1.
SWF Beispiel
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Anmerkung:
Tabelle 2.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Anmerkung:
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Für diese Funktionen ist keine Installation erforderlich, diese gehören zum Grundbestand von PHP.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Funktionen arbeiten mit WDDX zusammen.
Es ist zu beachten, dass alle Funktionen, die Variablen serialisieren, immer das erste Element eines Arrays benutzen, um festzustellen, ob das Array in ein Array oder eine 'Structure' serialisiert wird.
Wenn das erste Element einen String als Schlüssel hat, wird das Array in eine 'Structure' serialisiert, andernfalls in ein Array.
Beispiel 1.
Einen einzelnen String serialisieren
dieses Beispiel erzeugt:
Beispiel 2.
Die Verwendung von inkrementierenden Paketen
?php $pi = 3.1415926; $packet_id = wddx_packet_start("PHP"); wddx_add_vars($packet_id, "pi"); / * So tun, als ob $cities aus einer Datenbank kommt * / $cities = array("Austin", "Novato", "Seattle"); wddx_add_vars($packet_id, "cities"); $packet = wddx_packet_end($packet_id); print $packet;?
Diese Beispiel wird erzeugen:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Folgende Konstanten werden von dieser Erweiterung definiert und stehen nur zur Verfügung, wenn die Erweiterung entweder statisch in PHP kompiliert oder dynamisch zur Laufzeit geladen wurde.
Tabelle 1.
Beispiel 1.
Beispiel 2.
Beispiel 3.
Beispiel 4. xmltest.xml
Beispiel 5. xmltest2.xml
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Diese Erweiterung ist EXPERIMENTELL.
Das Verhalten dieser Erweiterung, einschließlich der Funktionsnamen, und alles Andere was hier dokumentiert ist, kann sich in zukünftigen PHP-Versionen ohne Ankündigung ändern.
Seien Sie gewarnt und verwenden Sie diese Erweiterung auf eigenes Risiko.
Diese Erweiterung benötigt zur Erstellung keine externen Bibliotheken.
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese PHP Erweiterung stellt eine parserunabhängige API für XSLT-Transformationen zur Verfügung.
Momentan unterstützt diese Erweiterung allein die Sablotron Bibliothek von der Ginger Alliance.
Die Unterstützung von anderen Bibliotheken wie der Xalan Bibliothek oder der libxslt ist in Planung.
XSLT (Extensible Stylesheet Language (XSL) Transformations) ist eine Sprache zur Transformation von XML Dokumenten in andere XML Dokumente.
XLST ist als Standard vom World Wide Web (W3C) Konsortium definiert worden.
Informationen zu XSLT und diesbezüglichen Technologien können unter http: / /www.w3.org / TR / xslt gefunden werden.
Anmerkung:
Diese Erweiterung ist anders als die Sablotron Erweiterung wie bei PHP 4.1 und früher, momentan wird nur die neue XSLT Erweiterung in PHP 4.1 unterstützt.
Falls Sie Hilfe zur alten Erweiterung brauchen, fragen sie bitte in der PHP Mailliste nach.
Die Erweiterung benutzt Sablotron and expat, beides kann unter http: / /www.gingerall.com / gefunden werden.
Binär Dateien werden genauso wie der Quellcode zur Verfügung gestellt.
Unter UNIX muss man configure mit den Optionen --enable-xslt --with-xslt-sablot ausführen.
Die Sablotron Bibliothek sollte irgendwo installiert sein wo sie der Compiler finden kann.
Diese Erweiterung definiert keine Konfigurationseinstellungen in der php.ini.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Warnung
Das Verhalten dieser Funktionen wird von Einstellungen in der php.ini bestimmt.
Tabelle 1.
Diese Erweiterung definiert keine Resource-Typen.
Diese Erweiterung definiert keine Konstanten.
Beispiel 1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Dieses Modul benutzt die Funktionen der ZZIPlib Bibliothek von Guido Draheim um ZIP komprimierte Archive und die darin enthaltenen Dateien zu lesen.
Zu beachten ist, dass ZZIPlib nur eine Untermenge der Funktionen zur Verfügung stellt, die in einer vollständigen Implementation des ZIP Algorithmus vorhanden sind.
Zur Erstellung eines ZIP Archivs muss man sich eines der üblichen ZIP Programme bedienen.
Die ZIP Unterstützung ist standardmäßig nicht aktiviert.
Um die ZIP Funktionen nutzen zu können, muss PHP mit der option --with-zip kompiliert werden.
Das ZIP Modul benötigt ZZIPlib version = 0.10.6.
Anmerkung:
Zip Unterstützung für PHP vor Version 4.1.0 ist als experimentell anzusehen.
Dieser Abschnitt beschreibt die ZIP Unterstützung, wie sie für PHP ab Version 4.1.0 existiert.
Dieses Beispiel öffnet ein ein ZIP Archiv, liest jede Datei innerhalb des Archivs und gibt den Inhalt zurück.
Das test2.zip Archiv, das in diesem Beispiel benutzt wird, wird mit der Original Distribution der ZZIPlib Bibliothek mitgeliefert.
Beispiel 1.
Beispiel zur Verwendung der Zip Funktion
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Diese Extension nutzt die Funktionen der zlib von Jean-loup Gailly und Mark Adler um transparent gzip (.gz) - komprimierte Dateien lesen und schreiben zu können.
Es muss die zlib = 1.0.9 verwendet werden, um die Funktionen nutzen zu können.
Diese Extension beinhaltet Versionen der meisten Dateisystem -Funktionen, die mit gzip-komprimierten (und nicht komprimierten) Datein, jedoch nicht mit Sockets funktionieren.
Anmerkung:
Mit Version 4.0.4 wurde ein fopen-wrapper für .gz-Dateien eingeführt, so das eine spezielle 'zlib :'-URL verwendet werden kann, um komprimierte Datei transparent über die f*( )-Dateifunktionen genutzt werden können.
In Version 4.3.0 wurde diese spezielle Prefix in zlib: / / geändert, um Konflikte mit Dateinamen zu vermeiden die ':' enthalten.
Dieses Feature erfordert eine C-Laufzeitbibliothek, die die fopencookie() -Funktion bereitstellt.
Nach aktuellem Stand ist die GNU libc die einzige Bibliothek, die dieses Feature bereitstellt.
Öffnet eine temporäre Datei und schreibt einen Test-String in die Datei, dann wird der Inhalt dieser Datei zweimal ausgegeben.
Beispiel 1.
Zlib Beispiel
?php $filename = tempnam ('/ tmp', 'zlibtest') .'.gz'; print "html \n head / head \n body \n pre \n"; $s = "Only a test, test, test, test, test, test, test, test!\n"; / / Öffne eine Datei zum Schreibzugriff mit der maximalen Kompressionsstufe $zp = gzopen($filename, "w9"); / / Schreibe den String in die Datei gzwrite($zp, $s); / / Schließe die Datei gzclose($zp); / / Öffne die Datei zum Lesezugriff $zp = gzopen($filename, "r"); / / Lese 3 Zeichen print gzread($zp, 3); / / Gebe den Inhalt aus, bis die Datei vollständig ausgegeben ist. gzpassthru($zp); print "\n"; / / Öffne die Datei und gebe den Inhalt zum zweiten Mal aus if (readgzfile($filename) != strlen($s)) {echo "Fehler in den Zlib-Funktionen !";} unlink($filename); print" / pre \n / h1 / body \n / html \n";?
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Nachfolgend finden Sie eine Liste der reservierten Wörter, Konstanten und vordefinierter Variablen.
Sie werden hier weder Funktionen noch Sprachkonstrukte finden.
Sie sollten nicht versuchen, diese Namen als Variablen, Funktionen, Konstanten oder Methodennamen zu verwenden.
Dies wird nur zu Problemen führen.
E_PARSE
E_ERROR
parent
$argc
PHP_OS
$PHP_SELF
PHP_VERSION
FALSE
$HTTP_COOKIE_VARS
$HTTP_GET_VARS
$HTTP_POST_VARS
stdClass
$HTTP_POST_FILES
$this
$HTTP_ENV_VARS
TRUE
$HTTP_SERVER_VARS
virtual()
__sleep
__wakeup
NULL
Zurück
Zum Anfang
Nach vorne
Liste der Funktion Aliase
Nach oben
Liste von Ressourcentypen
PHP Handbuch
Zurück
Nach vorne
Im Folgenden findest du eine Liste der Funktionen, welche PHP Ressourcen erstellen, benutzen oder löschen.
Man weiß, ob eine Variable eine Ressource ist, wenn man is_resource() verwendet, den Typen der Ressource erhält man mit get_resource_type().
Tabelle H-1.
Ressourcentypen
Name des Ressourcentyps
Erstellt von
Verwendet von
Zerstört von
Niemandem
Niemandem
Referenz auf ein COM Objekt
PDF Dokument unter Verwendung der CPDF Bibliothek
Verbindung zu einer DBM Datenbank herstellen
Verbindung zu einer DBA Datenbank herstellen
Niemandem
Persistente Verbindung zu einer DBA Datenbank herstellen
Verbindung zu einer dbase Datenbank herstellen
FTP Verbindung
GD Grafik
Niemandem
Schriftart für GD
PostScript-Schriftart für GD
Niemandem
GMP Nummer
Verbindung zu einem Hyperwave-Server herstellen
Niemandem
Persistente Verbindung zu einem Hyperwave-Server herstellen
Hyperwave Objekt
Verbindung zu einem icap-Server herstellen
Verbindung zu einem IMAP - oder POP3-Server herstellen
Verbindung zu einer ingresII Datenbank herstellen.
Niemandem
Persistente Verbindung zu einer ingresII Datenbank herstellen.
Interbase Ergebnis
Interbase Abfrage
Verbindung zu einer Interbase Datenbank herstellen.
Niemandem
Persistente Verbindung zu einer Interbase Datenbank herstellen.
Interbase Transaktion
LDAP Suchergebnis
LDAP Verbindung
Verbindung zu einem Kalenderserver herstellen.
mSQL Ergebnis
Verbindung zu einer mSQL Datenbank herstellen.
Niemandem
Persistente Verbindung zu einer mSQL Datenbank herstellen.
Microsft SQL Server Ergebnis
Verbindung zu einer Microsoft SQL Server Datenbank herstellen.
Niemandem
Persistente Verbindung zu einer Microsoft SQL Server Datenbank herstellen.
MySQL Ergebnis
mysql_affected_rows(), mysql_change_user(), mysql_create_db(), mysql_data_seek(), mysql_db_name(), mysql_db_query(), mysql_drop_db(), mysql_errno(), mysql_error(), mysql_insert_id(), mysql_list_dbs(), mysql_list_fields(), mysql_list_tables(), mysql_query(), mysql_result(), mysql_select_db(), mysql_tablename()
Verbindung zu einer MySQL Datenbank herstellen.
mysql_affected_rows(), mysql_change_user(), mysql_create_db(), mysql_data_seek(), mysql_db_name(), mysql_db_query(), mysql_drop_db(), mysql_errno(), mysql_error(), mysql_insert_id(), mysql_list_dbs(), mysql_list_fields(), mysql_list_tables(), mysql_query(), mysql_result(), mysql_select_db(), mysql_tablename()
Niemandem
Persistente Verbindung zu einer MySQL Datenbank herstellen.
Verbindung zu einer Oracle Datenbank herstellen.
ODBC Ergebnis
Verbindung zu einer ODBC Datenbank herstellen.
Niemandem
Persistente Verbindung zu einer ODBC Datenbank herstellen.
oracle cursor
Verbindung zu einer Oracle Datenbank herstellen.
Niemandem
Persistente Verbindung zu einer Oracle Datenbank herstellen.
Bilder in PDF-Dateien
PDF-Document
pg_cmdtuples(), pg_dbname(), pg_end_copy(), pg_errormessage(), pg_host(), pg_locreate(), pg_loexport(), pg_loimport(), pg_loopen(), pg_lounlink(), pg_options(), pg_port(), pg_put_line(), pg_set_client_encoding(), pg_client_encoding(), pg_trace(), pg_untrace(), pg_tty()
Verbindung zu einer PostgreSQL Datenbank herstellen.
pg_cmdtuples(), pg_dbname(), pg_end_copy(), pg_errormessage(), pg_host(), pg_locreate(), pg_loexport(), pg_loimport(), pg_loopen(), pg_lounlink(), pg_options(), pg_port(), pg_put_line(), pg_set_client_encoding(), pg_client_encoding(), pg_trace(), pg_untrace(), pg_tty()
Niemandem
Persistente Verbindung zu einer PostgreSQL Datenbank herstellen.
pg_exec()
pg_freeresult()
PostgreSQL Ergebnis
Verbindung zu einer PostgreSQL Datenbank herstellen.
Persistente Verbindung zu einer PostgreSQL Datenbank herstellen.
PostgreSQL Ergebnis
Niemandem
pspell Wörterbuch
Niemandem
pspell Konfiguration
xslt_closelog(), xslt_openlog(), xslt_run(), xslt_set_sax_handler()
XSLT Parser
shm_open()
shm_read(), shm_write(), shm_size(), shm_delete()
shm_close()
Verbindung zu einer Sybase Datenbank über die DB Library herstellen.
Niemandem
Persistente Verbindung zu einer Sybase Datenbank über die DB Library herstellen.
Sybase Ergebnis mit Hilfe der DB Library.
Verbindung zu einer Sybase Datenbank über die CT Library herstellen.
Niemandem
Persistente Verbindung zu einer Sybase Datenbank über die CT Library herstellen.
Sybase Ergebnis mit Hilfe der DB Library.
gz-komprimierte Datei
Zurück
Zum Anfang
Nach vorne
Reservierte Schlüsselwörter in PHP
Nach oben
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
Wenn PHP als Apache-Modul eingesetzt wird, übernimmt es die Benutzerrechte des Apache (üblicherweise user "nobody").
Das hat verschiedene Auswirkungen auf Sicherheit und Authentifizierung, z.B.:
Wenn Sie PHP zum Zugriff auf eine Datenbank benutzen, es sei denn diese Datenbank hat eine integrierte Zugriffskontrolle, müssen Sie dem Benutzer "nobody" Zugriffsrechte auf die Datenbank erteilen.
Das heißt, dass ein böswilliges Skript auch Benutzerkennung und Passwort auf die Datenbank zugreifen, und sie verändern könnte.
Es ist durchaus möglich, dass ein Web-Spider über die Webseite eines Datenbankadministrators stolpert, und alle Ihre Datenbanken löscht.
Sie können sich dagegen mit Apache Authentifizierung schützen, oder ein eigenes Zugangsmodell unter Verwendung von LDAP, .htaccess Dateien, etc. entwerfen, und diesen Code als Teil Ihrer PHP Skripte einbinden.
Es wurde festgestellt, dass wenn einmal die Sicherheitsmaßnahmen so weit eingerichtet sind dass dem PHP User (in diesem Fall ein Apache User) nur mehr ein geringes Risiko bleibt, PHP daran gehindert wird, virenverseuchte Dateien in das Benutzerverzeichnis zu schreiben.
Oder vielleicht wurde es auch daran gehindert, auf Datenbanken zuzugreifen oder diese gar zu verändern.
In gleicher Weise wird auch davor abgehalten, "gute" oder "bösartige "Dateien zu schreiben, oder "gute" bzw. "bösartige "Datenbanktransaktionen durchzuführen.
Ein häufig gemachter Fehler in Punkto Sicherheit ist Apache Root-Rechte zu erteilen, oder die Möglichkeiten von Apache in einer anderen Weise auszuweiten.
Die Ausweitung der Benutzerrechte für Apache auf root ist sehr gefährlich, und kann dem gesamten System schaden, denn mit sudo, chroot, oder anderwärtig als root zu arbeiten sollte niemand anders als den Sicherheitsprofis überlassen werden.
Es gibt auch ein paar einfachere Lösungen.
Mit open_basedir() Mit open_basedir() können Sie kontrollieren, welche Verzeichnisse PHP benutzen darf oder nicht.
Sie können auch einen Bereich nur für Apache einrichten, um alle webbasierten Aktivitäten auf nicht-Benutzer - bzw. nicht-System-Dateien einzuschränken.
Zurück
Zum Anfang
Nach vorne
CGI-Version
Nach oben
Dateisystem - Sicherheit
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
PHP als CGI zu nutzen, ist eine Möglichkeit für Installationen, bei denen aus irgendwelchen Gründen kein Modul in die Serversoftware eingebunden werden soll (wie beim Apache) oder für Systeme, bei denen verschiedene CGI-Wrapper genutzt werden sollen, um sichere chroot - und setuid-Umgebungen für Skripte zu schaffen.
Bei dieser Konfiguration wird das ausführbare PHP-Binary üblicherweise im cgi-bin Verzeichnis des Webservers installiert.
CERT advisory CA-96.11 spricht sich gegen die Platzierung von Interpretern im cgi-bin Verzeichnis aus.
Obwohl das PHP-Binary als eigenständiger Interpreter verwendet werden kann, wurde PHP so entwickelt, um den durch diese Konfiguration möglich werdenden Angriffe vorzubeugen:
Zugriff auf Systemdateien: http: / /my.host / cgi-bin / php? / etc / passwd
Die auf ein Fragezeichen (?) folgende Abfrageinformation in einer URL wird durch das CGI-Interface als Kommandozeilenargument an den Interpreter weitergereicht.
In der Kommandozeile wird üblicherweise die im ersten Argument angegebene Datei von Interpretern geöffnet und ausgeführt.
Beim Aufruf als CGI-Binary verweigert PHP die Interpretation der Kommandozeilenargumente.
Zugriff auf beliebige Web-Dokumente auf dem Server: http: / /my.host / cgi-bin / php / secret / doc.html
Der Teil der URL-Pfadinformation nach dem Namen der PHP Binärdatei, / secret / doc.html wird im allgemeinen benutzt, um den Namen der Datei zu übergeben, die durch das CGI -Programm geöffnet und interpretiert werden soll.
Normalerweise werden einige Einträge in der Konfigurationsdatei des Webservers benutzt (Apache:
Action), um Aufrufe von Dokumenten wie http: / /my.host / secret / script.php3 an den PHP-Interpreter umzuleiten.
Bei dieser Konfiguration überprüft der Webserver zuerst die Zugriffsrechte im Verzeichnis / secret und erstellt anschließend den umgeleiteten Aufruf http: / /my.host / cgi-bin / php / secret / script.php.
So ist jeder Benutzer, der auf / cgi-bin / php zugreifen darf in der Lage, sich zu jedem geschützten Dokument auf dem Webserver Zugriff zu verschaffen.
Bei PHP können beim Kompilieren die Konfigurationsoption --enable-force-cgi-redirect und zur Laufzeit die Konfigurationsdirektiven doc_root und user_dir Bei PHP können beim Kompilieren die Konfigurationsoption --enable-force-cgi-redirect und zur Laufzeit die Konfigurationsdirektiven doc_root und user_dir benutzt werden, um diesen Angriff zu verhindern, falls der Verzeichnisbaum des Servers Verzeichnisse mit Zugriffsbeschränkungen beinhaltet.
Ausführliche Informationen über die verschiedenen Kombinationen siehe weiter unten.
Wenn der Server keine Inhalte hat, die durch Passwort oder IP-basierte Zugriffskontrolle geschützt sind, werden diese Konfigurationsoptionen nicht benötigt.
Wenn der Webserver keine Redirects erlaubt oder keine Möglichkeit hat, dem PHP-Binary mitzuteilen dass es sich um eine sicher umgeleitete Anfrage handelt, kann die Option --enable-force-cgi-redirect im configure-Script angegeben werden.
Nichtsdestotrotz müssen Sie sicherstellen, dass Ihre PHP-Skripte nicht auf die eine oder andere Art des Aufrufs angewiesen sind, weder direkt durch http: / /my.host / cgi-bin / php / dir / script.php noch durch einen Redirect http: / /my.host / dir / script.php.
Beim Apache kann der Redirect durch den Gebrauch von AddHandler und Action konfiguriert werden (siehe unten).
Diese beim Kompilieren verwendete Option verhindert grundsätzlich den Aufruf von PHP mit einer URL wie http: / /my.host / cgi-bin / php / secretdir / script.php.
Stattdessen parst PHP in diesem Modus nur dann, wenn der Aufruf durch einen korrekten Redirect des Webservers erfolgte.
Normalerweise wird der Redirect in der Apache-Konfiguration mit den folgenden Einträgen festgelegt:
Sollte Ihr Webserver keine Möglichkeit unterstützen, zu übermitteln, ob es sich um einen direkte Aufruf oder einen Redirect handelt, können Sie diese Option nicht verwenden und müssen einen der anderen hier beschriebenen Wege gehen, die CGI-Version zu nutzen.
Aktiven Inhalt, wie beispielsweise Skripts und ausführbare Dateien, in den Dokumentverzeichnissen des Webservers abzulegen, wird manchmal als unsichere Methode angesehen.
Wenn, beispielsweise aufgrund von Konfigurationsfehlern, die Skripte nicht ausgeführt, sondern als reguläre HTML-Dokumente angezeigt werden kann dies ein Durchsickern von geistigem Eigentum und sicherheitsrelevanter Informationen (Passwörter!) zur Folge haben.
Diese werden dann stets interpretiert und nicht angezeigt.
Auch wenn die Methode zum sichergestellten Verhindern einer Umleitung von Anfragen (wie im vorangegangenen Kapitel beschrieben) nicht verfügbar ist, ist es notwendig, ein doc_root für Skripte zusätzlich zum Web-Dokumentenverzeichnis einzurichten.
Sie können das PHP-Skriptverzeichnis durch die Direktive doc_root in der Konfigurationsdatei festlegen, oder Sie setzen die Umgebungsvariable PHP_DOCUMENT_ROOT.
Wenn sie gesetzt ist, wird die CGI-Version von PHP den Namen der zu öffnenden Datei stets aus doc_root und der Pfadinformation der Anfrage zusammensetzen, sodass man sicher sein kann, dass außerhalb dieses Verzeichnisses keine Skripte ausgeführt werden (außer user_dir, siehe unten).
Eine weitere hier nützliche Option ist user_dir.
Wenn das user_dir nicht gesetzt ist, hat nur doc_root Wenn das user_dir nicht gesetzt ist, hat nur doc_root Einfluss auf die zu öffnende Datei.
Der Aufruf einer URL wie http: / /my.host / ~user / doc.php hat nicht zum Ergebnis, dass eine Datei im Home-Verzeichnis des Benutzers geöffnet wird, sondern eine Datei namens ~user / doc.php unterhalb des doc_root (Ja, ein Verzeichnisname, der mit einer Tilde anfängt [~]).
Ist das user_dir beispielsweise auf public_php gesetzt, wird eine Anfrage wie http: / /my.host / ~user / doc.php eine Datei namens doc.php im Verzeichnis public_php im Heimatverzeichnis des Benutzers öffnen.
Wenn das Heimatverzeichnis des Benutzers / home / user ist, so ist die ausgeführte Datei / home / user / public_php / doc.php.
So können Zugriffe auf die Dokumenten - und Benutzerverzeichnisse separat gesteuert werden.
Eine sehr sichere Sache ist es, das PHP-Parser-Binary irgendwo außerhalb des Webverzeichnisbaums zu platzieren, beispielsweise in / usr / local / bin.
Der einzige Nachteil dieses Verfahrens ist, dass eine Zeile ähnlich der folgenden:
Damit PHP bei dieser Konfiguration die PATH_INFO - und PATH_TRANSLATED -Informationen korrekt auswertet, sollte der PHP-Parser mit der Option --enable-discard-path kompiliert werden.
Zurück
Zum Anfang
Nach vorne
Sicherheit
Nach oben
Apache-Modul
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
PHP wird, wie jedes andere große System auch, ständig geprüft und weiterentwickelt.
Sicherheit, Konfiguration) verbessern bzw. vorhandene Mängel beheben.
Wie auch bei anderen Scriptsprachen und Programmen auf Systemebene ist der beste Ansatz ein oftmaliges Update, und sich laufend über die letzten Versionen und deren Änderungen zu informieren.
Zurück
Zum Anfang
Nach vorne
Verstecken von PHP
Nach oben
Sprachreferenz
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
Heutzutage sind Datenbanken die Hauptkomponenten jeder Webbasierten Applikation, aufgrund welcher Websites verschiedene dynamische Inhalte anbieten können.
Nachdem heikle oder geheime Informationen in solch einer Datenbank gespeichert werden können, sollten Sie deren Schutz ernsthaft bedenken.
Um Informationen zu bekommen oder zu speichern, müssen Sie eine legitime Abfrage senden, das Ergebnis holen, und die Verbindung schließen.
Heutzutage ist die allgemein verwendete Abfragesprache für solche Interaktionen die Structured Query Language (SQL).
Sehen Sie, wie sich ein Angreifer an einer SQL Abfrage zu schaffen machen kann.
Sie werden merken, dass PHP Ihre Datenbank alleine nicht schützen kann.
Die folgenden Abschnitte sind eine Einführung in die Grundlagen, wie man innerhalb von PHP Skripten auf Datenbanken zugreift und diese manipuliert.
Denken Sie an diese einfache Regel: tief gestaffelte Verteidigung.
Je mehr Platz Sie den Maßnahmen zum Schutz Ihrer Datenbank geben, desto geringer ist die Wahrscheinlichkeit, dass ein Angreifer Erfolg hat, und gespeicherte Geheiminformationen aufdeckt oder missbraucht.
Gutes Design des Datenbankschemas, und die Applikation wird mit Ihren größten Befürchtungen fertig.
Der Erste Schritt liegt immer im Erstellen der Datenbank, außer Sie wollen eine bereits existierende Dritter verwenden.
Ist eine Datenbank erstellt, ist sie einem Eigentümer zugewiesen, welcher das Kommando zum Erstellen ausgeführt hat.
Gewöhnlich kann nur der Eigentümer (oder ein Superuser) alles mit den Objekten in dieser Datenbank machen, und um anderen Benutzern die Verwendung zu erlauben, müssen Rechte vergeben werden.
Tabellen löschen) oder den gesamten Inhalt löschen.
Sie können verschiedene Datenbanknutzer mit sehr limitierten Rechten auf Datenbankobjekte für jeden Aspekt Ihrer Applikation anlegen.
Nur die wirklich benötigten Rechte sollten gewährt werden, und vermeiden Sie, dass der gleiche Benutzer in verschiedenen Anwendungsfällen mit der Datenbank interagieren kann.
Das heißt, dass Eindringlinge, welche unter Verwendung einer dieser Referenzen Zugriff auf Ihre Datenbank erlangt haben, nur so viele Änderungen durchführen können, wie es Ihre Applikation kann.
Ihr Skript), sondern tun Sie das im Datenbankschema unter Verwendung von Sichten, Triggern, oder Regeln.
Wenn sich das System entwickelt, werden neu zu öffnende Ports zu der Datenbank vorgesehen, und Sie müssen die Logik in jedem Datenbank-Client neu implementieren.
Überdies können Trigger verwendet werden, um transparent und automatisch mit Feldern umzugehen, welche beim debuggen Ihrer Applikation oder beim Zurückverfolgen von Transaktionen oft einen Einblick gewähren.
Vielleicht wollen Sie die Verbindungen über SSL herstellen, um die Client / Server Kommunikation für eine erhöhte Sicherheit zu verschlüsseln, oder aber auch ssh verwenden, um die Netzwerkverbindung zwischen den Clients und dem Datenbankserver zu verschlüsseln.
Ist eines davon realisiert, wird ein Monitoring Ihres Verkehrs und das Erlangen von Informationen zu harter Arbeit.
SSL / SSH schützt zwar die gerade auf dem Weg befindlichen Daten vom Client zum Server, jedoch nicht die dauernd in einer Datenbank gespeicherten Daten.
SSL ist ein "auf-der-Leitung" Protokoll.
Hat ein Angreifer direkten Zugriff auf Ihre Datenbank (den Webserver umgehend), können die gespeicherten heiklen Daten aufgedeckt oder zweckentfremdet werden, außer wenn die Information von der Datenbank selbst geschützt ist.
Die Daten zu verschlüsseln ist ein guter Weg, diese Gefahr zu mildern, doch bieten nur wenige Datenbanken diese Art der Verschlüsselung von Daten.
Der einfachste Weg, dieses Problem zu umgehen ist, erst einmal Ihr eigenes Verschlüsselungspaket zu erstellen, und dieses dann in Ihren PHP Skripten zu nutzen.
Mcrypt and Mhash, welche eine große Auswahl an Verschlüsselungsalgorhythmen abdecken.
Das Skript verschlüsselt die Daten vor dem Speichern, und entschlüsselt diese wieder beim Erhalt.
Siehe die Verweise für weitere Beispiele, wie Verschlüsselung arbeitet.
Im Fall von wirklich versteckten Daten, wenn deren unverfälschte Repräsentation nicht nötig ist (z.B. keine Anzeige), ist hashing ebenfalls überlegenswert.
Das bekannte Beispiel für das Hashing ist das Speichern des MD5 hash eines Passwortes in einer Datenbank, anstatt des Passwortes selbst.
Siehe auch crypt() und md5().
Beispiel 5-5.
Verwenden eines hashed Passwortfeldes
/ / Speichern des Passwort hash $query = sprintf( "INSERT INTO users(name,pwd) VALUES('%s' ,'%s') ;", addslashes($username), md5($password)); $result = pg_exec($connection, $query); / / Afragen, ob der User das richtige Passwort übermittelt hat $query = sprintf("SELECT 1 FROM users WHERE name='%s 'AND pwd='%s' ;", addslashes($username), md5($password)); $result = pg_exec($connection, $query); if (pg_numrows($result) 0) {echo "Welcome, $username !";} else {echo "Authentication failed for $username .";}
Viele Entwickler sind sich nicht bewusst, wie man sich an SQL Abfragen zu schaffen machen kann und nehmen an, dass eine SQL Abfrage ein vertrauenswürdiges Kommando ist.
Das heißt, dass SQL Abfragen Zugriffskontrollen hinters Licht führen, und dadurch Standard Authentifizierungs - und Authorisationschecks umgehen können, und manchmal können SQL Abfragen sogar Zugriff zu Kommandos auf Betriebssystemebene erlauben.
Direkt SQL Command Injection ist eine Technik, wo ein Angreifer SQL Kommandos erstellt oder existierende verändert, um versteckte Daten sichtbar zu machen, wertvolle Daten zu überschreiben, oder sogar gefährliche Kommandos auf Systemebene des Datenbank-Hosts auszuführen.
Dies wird durch die Applikation erreicht, welche den Input des Benutzers mit statischen Parametern kombiniert, um eine SQL Abfrage zu erstellen.
Die folgenden Beispiele basieren - leider - auf wahren Begebenheiten.
Dank dem Mangel an Input Validierungen, und dem Verbinden zum Datenbankserver als ein Superuser oder jemand der Benutzer anlegen kann, kann ein Angreifer einen Superuser in Ihrer Datenbank anlegen.
Beispiel 5-6.
Die Ergebnisliste in mehrere Seiten aufsplitten... und Superuser anlegen (PostgreSQL and MySQL)
$offset = argv[ 0]; / / Vorsicht, keine Validierung des Input! $query = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset ;"; / / mit PostgreSQL $result = pg_exec($conn, $query); / / mit MySQL $result = mysql_query($query);
/ / Im Fall von PostgreSQL 0; insert into pg_shadow(usename,usesysid,usesuper,usecatupd,passwd) select 'crack', usesysid, 't' ,'t' ,'crack 'from pg_shadow where usename='postgres'; - - / / Im Fall von MySQL 0; UPDATE user SET Password=PASSWORD('crack') WHERE user='root'; FLUSH PRIVILEGES;
Anmerkung:
Es ist eine übliche Technik, den SQL Parser mittels dem Kommentarzeichen in SQL - - zu zwingen, den Rest der vom Entwickler geschriebenen Abfrage zu ignorieren.
Ein gangbarer Weg um Passwörter zu finden ist, Ihre Seiten mit den Suchergebnissen hinters Licht zu führen.
Der Angreifer braucht nur zu probieren, ob irgendeine übertragene Variable, die in dem SQL Statement verwendet wird, nicht richtig gehandhabt wird.
Diese Filter können gewöhnlich in einer vorausgehenden Form gesetzt werden, indem WHERE, ORDER BY, LIMIT und OFFSET Klauseln in SELECT Statements umgebaut werden.
Wenn Ihre Datenbank das UNION Konstrukt unterstützt, kann der Angreifer versuchen, eine komplette Abfrage an das Original anzuhängen, um Paßwörter aus einer willkürlichen Tabelle aufzulisten.
Die Verwendung von verschlüsselten Passwortfeldern wird ausdrücklich empfohlen.
Beispiel 5-7.
Artikel auflisten... und ein paar Passwörter (irgendein Datenbankserver)
SQL UPDATEs sind ebenfalls ein Anlass, Ihre Datenbank anzugreifen.
Diese Abfragen sind auch durch das Ändern und Anhängen einer komplett neuen Abfrage gefährdet.
Aber der Angreifer könnte auch mit der SET Aber der Angreifer könnte auch mit der SET Klausel herumspielen.
In diesem Fall muss eine Schemainformation vorhanden sein, um die Abfrage erfolgreich manipulieren zu können.
Diese kann durch Untersuchen der Variablennamen im Formular, oder simpel mittels brute force gesammelt werden.
Es gibt nicht so viele Namenskonventionen für Felder, welche Passwörter oder Benutzernamen speichern.
Beispiel 5-8.
Vom Zurücksetzen eines Passwortes... zum Erlangen von mehr Rechten (irgendein Datenbankserver)
Ein furchterregendes Beispiel, wie der Zugriff auf Kommandos auf Betriebssystemebene bei manchen Datenbankservern erfolgen kann.
Beispiel 5-9.
Angriff auf das Betriebssystem des Datenbank Hosts (MSSQL Server)
Anmerkung:
Manche der obigen Beispiele sind an einen spezifischen Datenbankserver gebunden.
Das heißt jedoch nicht, dass nicht ein ähnlicher Angriff auf andere Produkte möglich wäre.
Ihr Datenbankserver könnte auf andere Weise genauso verwundbar sein.
Sie könnten sich nun darauf berufen, dass der Angreifer in den meisten Beispielen ein Stück Information über das Datenbankschema haben muss.
Sie haben recht, aber Sie wissen nie, wann und wie es genommen werden kann, und wenn es passiert, kann Ihre Datenbank entblößt werden.
Wenn Sie ein Open Source, oder öffentlich verfügbares Paket zur Handhabung von Datenbanken verwenden, welches vielleicht zu einem Content Management System oder Forum gehört, können Eindringlinge leicht eine Kopie eines Stücks Ihres Codes erstellen.
Es kann auch ein Sicherheitsrisiko sein, wenn es sich um ein schlecht designtes Paket handelt.
Diese Angriffe basieren hauptsächlich auf dem Ausnutzen des Codes, welcher ohne Bedenken auf die Sicherheit geschrieben wurde.
Vertrauen Sie nie auf irgendeine Art von Input, speziell wenn er von der Clientseite kommt, selbst wenn er von einer Auswahlbox, einem versteckten Eingabefeld, oder einem Cookie kommt.
Das erste Beispiel zeigt, dass solch eine untadelige Abfrage ein Disaster anrichten kann.
Stellen Sie nie als Superuser oder Owner einer Datenbank eine Verbindung zur Datenbank her.
Verwenden Sie immer speziell angelegte Benutzer mit sehr limitierten Rechten.
Prüfen Sie, ob der gegebene Input dem erwarteten Datentyp entspricht.
PHP bietet eine große Auswahl an Funktionen zum Validieren des Input, von den einfachsten unter Variablenfunktionen und Character Type Functions (z.B. is_numeric() bzw. ctype_digit()), bis hin zu den Perl kompatiblen Regulären Ausdrücken.
Wenn die Applikation numerischen Input erwartet, erwägen Sie die Prüfung der Daten mit is_numeric(), oder die Änderung des Typs mit settype(), oder verwenden Sie die numerische Repräsentation mittels sprintf().
Beispiel 5-10.
Ein sicherer Weg, eine Abfrage zu erstellen
settype( $offset, 'integer'); $query = "SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET $offset ;"; / / Beachten Sie %d im Formatstring, %s zu verwenden wäre sinnlos $query = sprintf("SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET %d ;", $offset);
Escapen Sie jeden nicht numerischen Input, welcher zur Datenbank weitergereicht werden soll mit addslashes() oder addcslashes().
Siehe auch das erste Beispiel.
Wie dieses Beispiel zeigt, sind in den statischen Teil der Abfrage eingebrachten Escapes nicht genug, und können leicht gehacked werden.
Geben Sie keinerlei datenbankspezifische Informationen aus, speziell über das Schema, egal wie (auf ehrliche oder unehrliche Weise).
Siehe auch Fehlerbehandlung und Error Handling and Logging Functions.
Sie können stored procedures und vorher definierte Cursor verwenden, um den Datenzugriff zu abstrahieren, sodass Benutzer nicht direkt auf Tabellen oder Views zugreifen, aber diese Lösung hat andere Auswirkungen.
Abgesehen davon profitieren Sie von einer Protokollierung der Abfragen entweder in Ihrem Skript, oder durch die Datenbank selbst, wenn es hilft.
Klar, die Protokollierung kann nicht irgendeinen schädlichen Versuch verhindern, aber es kann helfen herauszufinden, welche Applikation umgangen wurde.
Das Log ist durch die in ihm enthaltene Information nützlich, und je mehr Details es enthält, desto besser ist es im Allgemeinen.
Zurück
Zum Anfang
Nach vorne
Dateisystem - Sicherheit
Nach oben
Fehlerbehandlung
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
PHP Security hat zwei Seiten der Fehlerbehandlung.
Eine ist für die Erhöhung der Sicherheit vorteilhaft, die andere ist schädlich.
Eine Standard-Angriffstaktik beinhaltet die Erstellung eines Profils des anzugreifenden Systems, indem die aufgrund der Einspeisung von unzulässigen Daten zurückgegebenen Fehlermeldungen anhand deren Art und des Kontextes ausgewertet werden.
Wenn z.B. ein Angreifer Informationen über eine auf einem eingesendeten Formular basierte Seite zusammengetragen hat, kann er versuchen, Variablen zu überschreiben bzw. zu modifizieren:
Beispiel 5-11.
Variablen mit einer eigenen HTML Seite angreifen
Die normalerweise zurückgegebenen PHP Fehler können für den Entwickler hilfreich sein, wenn dieser ein Skript debuggen möchte, Hinweise auf eine nicht korrekt arbeitende Funktion oder Datei, oder die PHP Datei und die Zeilennummer des aufgetretenen Fehlers anzeigen lassen möchte.
Das sind alles Informationen, die ausgenutzt werden können.
Es ist für einen PHP Entwickler nicht unüblich, show_source(), highlight_string(), oder highlight_file() zur Fehlersuche zu verwenden, jedoch kann dies in einem lebenden System auch versteckte Variablen, ungeprüfte Syntax und andere gefährliche Informationen aufdecken.
Speziell gefährlich ist es, Code von bekannten Quellen mit integrierten Debugging Handlern auszuführen, oder weit verbreitete Debuggingtechniken zu verwenden.
Wenn ein Angreifer die von Ihnen benutzte generelle Technik herausfindet, kann er versuchen, mit Brute-Force Ihre Seite zu knacken, indem er verschiedene allgemein gebräuchliche Debug Strings sendet:
Beispiel 5-12.
Ausnutzen von gebräuchlichen Debugging Variablen
Ungeachtet der Fehlerbehandlungsmethode führt die Möglichkeit ein System nach Fehlermeldungen sondieren dazu, dass einem Angreifer mehr Informationen geboten werden.
Zum Beispiel weist schon alleine der Stil einer Fehlermeldung darauf hin, dass auf einem System PHP läuft.
Wenn der Angreifer auf eine .html Seite kommt und untersuchen möchte welches System im Hintergrund läuft (um nach bekannten Systemschwächen zu suchen), könnte dieser mittels der Einspeisung von falschen Daten herausfinden, dass ein System mit PHP aufgebaut ist.
Ein Fehler einer Funktion gibt Aufschluss darüber, ob ein System eine bestimmte Datenbankapplikation benutzt, oder gibt Hinweise darauf, wie eine Webseite programmiert bzw. entworfen wurde.
Schwächen einer Webseite.
Mit der Einspeisung von falschen Daten kann ein Angreifer z.B. die Reihenfolge der Authentifizierung in einem Skript bestimmen (anhand der Zeilennummern in den Fehlermeldungen), wie auch durch "Herumstochern "Missbrauchsmöglichkeiten an verschiedenen Stellen im Script herausfinden.
Eine Fehlermeldung des Dateisystems oder eines generellen PHP-Errors welche Rechte der Server hat, wie auch die Struktur und Organisation der Dateien auf dem Webserver.
Vom Entwickler geschriebene Fehlermeldungen können das Problem verschlimmern, bis hin zum Preisgeben von zuvor "versteckten" Informationen.
Es gibt drei bedeutende Lösungen zu diesem Thema.
Die erste ist, alle Funktionen zu überprüfen und zu versuchen, die Menge an Fehlermeldungen zu ersetzen.
Die zweite ist, die Ausgabe von Fehlermeldungen am laufenden Code generell zu deaktivieren.
Die dritte ist, sich unter Verwendung der PHP Funktionen zur Fehlerbehandlung seinen eigenen Error-handler zu schreiben.
Abhängig von Ihrer Sicherheitspolitik könnte jede der drei Lösungen für Sie geeignet sein.
Ein Weg, diesen Punkt vorzeitig zu behandeln ist, das PHP eigene error_reporting() zu benutzen, um Ihren Code sicherer zu gestalten und möglicherweise gefährliche Nutzungen von Variablen zu entdecken.
Wenn Sie Ihren Code noch vor dem Einsatz mit E_ALL testen, können Bereiche entdecken, in denen Ihre Variablen eventuell für Verseuchung oder andere Modifikationen offen sind.
Sind Sie bereit zum Einsatz, können Sie Ihren Code mit E_NONE vor Sondierungen schützen.
Beispiel 5-13.
Gefährliche Variablen mit E_ALL finden
?php if ($username) {/ / Vor Verwendung nicht initialisiert oder geprüft $good_login = 1;} if ($good_login == 1) {/ / Wenn der obige Test fehlschlägt, ist vor der / / Verwendung nicht initialisiert oder geprüft fpassthru (" / highly / sensitive / data / index.html");}?
Zurück
Zum Anfang
Nach vorne
Datenbank - Sicherheit
Nach oben
Verwendung von Register Globals
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
PHP ist von den in den meisten Serversystemen implementierten Sicherheitseinstellungen hinsichtlich der Berechtigungen auf Datei - und Verzeichnisebene abhängig.
Dies verleiht Ihnen Kontrolle darüber, welche Dateien in dem Dateisystem gelesen werden dürfen.
Vorsicht ist bei weltweit lesbaren Dateien geboten um sicherzustellen, dass diese sicher von allen Usern mit Zugriff auf dieses Dateisystem (nur) gelesen werden können.
Da PHP entwickelt wurde um Zugriffe auf das Dateisystem auf Benutzebene zu erlauben, ist es natürlich auch möglich ein PHP Skript zu schreiben das Ihnen erlaubt Systemdateien wie / etc / passwd zu lesen, Ethernetverbindungen zu modifizieren, enorme Druckaufträge zu senden, etc.
Dies hat offensichtliche Implikationen, indem Sie sicherstellen müssen, dass alle von Ihnen zu lesenden bzw. zu schreibenden Dateien auch die richtigen sind.
Stellen Sie sich folgendes Skript vor, in dem ein User zum Ausdruck bringt, dass gerne eine Datei in seinem Heimatverzeichnis löschen möchte.
Dies geht von einer Situation aus, in der ein PHP Web-Interface regelmäßig zum Dateimanagement verwendet wird, und der Apache User ist auch berechtigt, in seinem Heimatverzeichnis Dateien zu löschen.
Beispiel 5-1.
Schlechte Variablenprüfung führt zu....
?php / / Löschen einer Datei aus dem Heimatverzeichnis des Users $username = $_POST[ 'user_submitted_name']; $homedir = "/ home / $username"; $file_to_delete = "$userfile"; unlink ("$homedir / $userfile"); echo "$file_to_delete wurde gelöscht !";?
Beispiel 5-2....
Ein Angriff auf das Dateisystem
?php / / löscht eine Datei irgendwo auf der Festplatte, wo der / / Benutzer die nötigen Rechte besitzt.
Wenn PHP root hat: $username = ".. / etc /"; $homedir = "/ home /.. / etc /"; $file_to_delete = "passwd"; unlink (" / home /.. / etc / passwd"); echo "/ home /.. / etc / passwd wurde gelöscht !";?
Erteilen Sie dem PHP Web-user (Binärdatei) nur eingeschränkte Rechte.
Prüfen Sie alle übertragenen Variablen.
Beispiel 5-3.
Etwas sicherere Prüfung des Dateinamens
?php / / löscht eine Datei von der Festplatte, auf die / / der PHP user Zugriff hat. $username = $_SERVER[ 'REMOTE_USER']; / / verwendet eine / / Authentifizierungsmethode $homedir = "/ home / $username"; $file_to_delete = basename("$userfile"); / / den Pfad entfernen unlink ($homedir / $file_to_delete); $fp = fopen(" / home / logging / filedelete.log" ,"+a"); / /logge die Löschung $logstring = "$username $homedir $file_to_delete"; fputs ($fp, $logstring); fclose($fp); echo "$file_to_delete wurde gelöscht !";?
Beispiel 5-4.
Sicherere Dateinamensprüfung
?php $username = $HTTP_SERVER_VARS[ 'REMOTE_USER']; / / verwendet eine / / Authentifizierungsmethode $homedir = "/ home / $username"; if (!ereg('^[^. / ][^ / ]*$', $userfile)) die('bad filename'); / / "DIE", gehen Sie nicht weiter if (!ereg('^[^. / ][^ / ]*$', $username)) die('bad username'); / / "DIE", gehen Sie nicht weiter / /etc...?
Abhängig vom Betriebssystem gibt es eine große Anzahl Dateien mit der Sie sich befassen sollten, inklusive Einträge für Geräte (/ dev / oder com1), Konfigurationsdateien (/ etc / Dateien und die .ini Dateien), gut bekannte Verzeichnisse (/ home /, My Documents), etc.
Aus diesem Grund ist es gewöhnlich einfacher eine Vorgangsweise einzuführen, bei der außer den von Ihnen explizit erlaubten Dingen alles verboten ist.
Zurück
Zum Anfang
Nach vorne
Apache-Modul
Nach oben
Datenbank - Sicherheit
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
Generell ist Sicherheit durch Unklarheit eine der schwächsten Formen von Sicherheit.
Aber in manchen Fällen ist ein klein Wenig mehr an extra Sicherheit wünschenswert.
Ein paar einfache Techniken helfen PHP zu Verstecken, um einen nach Schwächen in Ihrem System suchenden Angreifer möglicherweise langsamer zu machen.
Wenn Sie in Ihrer php.ini expose_php = off setzen, reduzieren Sie damit die ihm zur Verfügung stehenden Informationen.
Apache entweder mittels einer .htaccess Direktive oder in der Apache Konfigurationsdatei selbst so konfigurieren, dass dieser verschiedene Dateitypen durch PHP parst.
So können Sie irreführende Dateierweiterungen verwenden:
Beispiel 5-18.
PHP als andere Sprache ausgeben
# Lasse PHP Code wie andere Arten von Code aussehen AddType application / x-httpd-php .asp .py .pl
Beispiel 5-19.
Verwenden von unbekannten Typen für PHP Dateierweiterungen
# Lasse PHP Code wie unbekannte Typen aussehen AddType application / x-httpd-php .bop .foo .133t
Beispiel 5-20.
Verwenden von html Typen für PHP Dateierweiterungen
# Lasse PHP code wie html aussehen AddType application / x-httpd-php .htm .html
Zurück
Zum Anfang
Nach vorne
Vom Nutzer übermittelte Daten
Nach oben
Aktuell bleiben
PHP Handbuch
Zurück
Nach vorne
PHP ist eine mächtige Sprache, und der Interpreter, der in einen Webserver als Modul oder als separate CGI -Version eingebunden werden kann, kann auf Dateien zugreifen, Befehle ausführen und Netzwerkverbindungen zu einem Server herstellen.
Diese Eigenschaften können einen Webserver unsicher machen, wenn man es bei den Voreinstellungen belässt.
Mit der richtigen Wahl der Einstellungen beim Kompilieren und zur Laufzeit bietet PHP genau die Kombination aus Freiheit und Sicherheit, die gerade benötigt wird.
Da es sehr viele verschiedene Möglichkeiten gibt, PHP zu nutzen, gibt es viele Konfigurationseinstellungen, die das Verhalten von PHP beeinflussen.
Allerdings bedeutet das auch, dass es Kombinationen gibt, die eine Installation mit nur ungenügender Sicherheit zur Folge haben.
Die Flexibilität der Konfiguration konkurriert mit der Flexibilität in der Programmierung.
Mit PHP können komplette Server Applikationen mit allen Möglichkeiten eines Shell Benutzers erstellt werden, oder auch nur einfache Server Side Includes mit einem minimalen Risiko in einer streng kontrollierten Umgebung.
Wie die Umgebung erstellt wird, und wie sicher diese ist, ist zu einem großen Teil die Sache des PHP Entwicklers.
Dieses Kapitel beginnt mit einigen generellen Ratschlägen zur Sicherheit, erklärt die verschiedenen Kombinationen der Konfigurationseinstellungen und unter welchen Gegebenheiten sie sicher genutzt werden können, und beschreibt verschiedene Überlegungen zur Programmierung für verschiedene Sicherheitsstufen.
Ein komplett sicheres System ist praktisch ein Ding der Unmöglichkeit, weshalb ein unter Sicherheitsprofis oft genutzter Ansatz ist, einen Mittelweg zwischen Risiko und Verwendbarkeit zu finden.
Wenn jede von einem Benutzer übermittelte Variable zwei Formen von biometrischer Prüfung (wie z.B. ein Scan der Netzhaut und ein Fingerabdruck) verlangen würde, wäre eine extrem hohe Ebene der Verantwortlichkeit erreicht.
Ein sehr komplexes Formular auszufüllen würde auch eine halbe Stunde in Anspruch nehmen, die Benutzer dazu ermuntern könnte, Wege zur Umgehung der Sicherheitsmaßnahmen zu suchen.
Die beste Sicherheit ist oft unaufdringlich genug um den Anforderungen zu entsprechen, ohne den Benutzer an seiner Arbeit zu hindern oder den Code-Autor mit übertriebener Komplexität zu überlasten.
Tatsächlich sind einige Sicherheitsangriffe nur die Folge von allzu strengen Sicherheitsmaßnahmen, was mit der Zeit nur zu deren Unterminierung führt.
Eine Phrase die es wert ist, sich an sie zu erinnern:
Ein System ist nur so gut wie das schwächste Glied in der Kette.
Wenn alle Transaktionen mittels Zeit, Ort, Transaktionstyp, etc. streng mitprotokolliert werden, der Benutzer aber nur mittels einem einzigen Cookie verifiziert wird, lässt die Zuverlässigkeit für die Bindung des Benutzers an das Transaktions-Log bedrohlich nach.
Denken Sie während der Tests daran, dass Sie selbst für die einfachsten Seiten nicht alle Möglichkeiten testen können.
Der von Ihnen vielleicht erwartete Input wird zu dem eines verstimmten Mitarbeiters oder eines Crackers der Monate Zeit hat, oder einer Katze, die über die Tastatur läuft in keinerlei Zusammenhang stehen.
Deshalb betrachten Sie Ihren Code am Besten aus der logischen Perspektive um zu erkennen, wo unerwartete Daten eingebracht werden können und fragen sich dann, wie diese modifiziert, reduziert, oder weiter ausgeführt werden.
Das Internet ist voll von Leuten die versuchen, sich durch Entschlüsseln / zerstören Ihres Codes, den Zusammenbruch Ihres Systems, Einsetzen von unangebrachten Inhalten, und anderen, Ihren Tag interessant gestaltenden Maßnahmen, einen Namen zu machen.
Es ist egal, ob Sie eine kleine oder große Site haben, Sie sind einfach ein Ziel wenn Sie online sind oder wenn Sie einen Server haben, zu dem man eine Verbindung aufbauen kann.
Viele Cracker-Programme erkennen nicht die Größe, sondern durchsieben einfach gewaltige IP Blöcke im Netz, um Opfer zu finden.
Versuchen Sie, keines zu werden.
Zurück
Zum Anfang
Nach vorne
Konfiguration
Nach oben
CGI-Version
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
Ein Feature von PHP zur Erhöhung der Sicherheit ist die Konfiguration von PHP mit register_globals = off.
Mit Deaktivierung der Möglichkeit, irgendeine vom Benutzer übertragenen Variable in den PHP Code zu injizieren, können Sie die Anzahl "vergifteter" Variablen reduzieren, welche ein potentieller Angreifer zufügen könnte.
Dieser benötigt mehr Zeit, um sich Übermittlungen auszudenken, und Ihre internen Variablen sind effektiv von den übergebenen Benutzervariablen isoliert.
Während dies den benötigten Aufwand mit PHP zu arbeiten leicht erhöht ist dargelegt, dass die Vorteile gegenüber dem Aufwand klar überwiegen.
Beispiel 5-14.
Mit register_globals=on arbeiten
?php if ($username) {/ / kann vom User mit get / post / cookies übermittelt werden $good_login = 1;} if ($good_login == 1) {/ / kann vom User mit get / post / cookies übermittelt werden fpassthru (" / highly / sensitive / data / index.html");}?
Beispiel 5-15.
Mit register_globals = off arbeiten
?php if( $_COOKIE['username']) {/ / kann nur von einem Cookie kommen $good_login = 1; fpassthru (" / highly / sensitive / data / index.html");}?
Beispiel 5-16.
Entdecken einfacher Manipulationen von Variablen
?php if ($_COOKIE['username'] !$_POST['username'] !$_GET['username']) {/ / Durchführen anderer Checks, ob der Benutzername gültig ist... $good_login = 1; fpassthru (" / highly / sensitive / data / index.html");} else {mail("admin@example.com", "Possible breakin attempt", $_SERVER['REMOTE_ADDR']); echo "Security violation, admin has been alerted ."; exit;}?
Zurück
Zum Anfang
Nach vorne
Fehlerbehandlung
Nach oben
Vom Nutzer übermittelte Daten
PHP Handbuch
Zurück
Kapitel 5.
Sicherheit
Nach vorne
In vielen PHP Programmen liegt die größte Schwäche nicht an der Sprache selbst, sondern bloß an Code, der nicht mit dem nötigen Augenmerk auf die Sicherheit geschrieben wurde.
Deshalb sollten Sie sich immer Zeit nehmen, die Implikationen eines gegebenen Codestücks zu bedenken, um einen möglichen Schaden durch eine eventuell unerwartete übergebene Variable festzustellen.
Beispiel 5-17.
Gefährliche Verwendung von Variablen
?php / / lösche eine Datei aus dem Benutzer-Verzeichnis... / / oder vielleicht dem eines anderen Benutzers? unlink ($evil_var); / / Schreibe die Log-Information von deren Zugriff... / / oder vielleicht einen / etc / passwd Eintrag? fputs ($fp, $evil_var); / / Führe etwas triviales aus... oder rm -rf *? system ($evil_var); exec ($evil_var);?
Wird sich dieses Skript nur auf die vorgesehenen Dateien auswirken?
Kann auf ungewöhnliche oder unerwünschte Daten reagiert werden?
Kann dieses Skript auf nicht vorgesehene Art genutzt werden?
Kann dies in Verbindung mit anderen Skripten in einer negativen Art benutzt werden?
Werden alle Transaktionen ausreichend geloggt?
Sie könnten auch Überlegungen anstellen, ob Sie nicht register_globals, magic_quotes, oder andere bequeme Einstellungen abschalten, welche Sie in Punkto Gültigkeit, Herkunft, oder Inhalt einer gegebenen Variable durcheinanderbringen könnten.
Mit PHP im error_reporting( E_ALL) Modus zu arbeiten kann auch helfen, Sie vor Variablen zu warnen, welche benutzt werden, bevor sie geprüft oder initialisiert wurden (so können Sie verhindern, dass mit ungewöhnlichen Daten gearbeitet wird).
Zurück
Zum Anfang
Nach vorne
Verwendung von Register Globals
Nach oben
Verstecken von PHP
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Beispiel 43-1. simple stream example that displays the PHP home page
Tabelle 43-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
PHP Handbuch
Zurück
Nach vorne
Stream open options - - Affects the operation of stream factory functions
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Tabelle 43-1.
Tabelle 43-2.
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 43-1.
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle 43-1. php_stream_make_seekable() return values
Anmerkung:
Anmerkung:
Anmerkung:
Anmerkung:
Anmerkung:
In many cases, this function can only succeed when origstream is a newly opened stream with no data buffered in the stream layer.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Beispiel 43-2.
Beispiel 43-3.
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
struct php_stream_dirent - - Holds information about a single file during dir scanning
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
struct php_stream_statbuf - - Holds information about a file or URL
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 43.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Tabelle J-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
Über das Handbuch
PHP Handbuch
Zurück
Kapitel 2.
Kleines Tutorial
Nach vorne
Erstellen Sie eine Datei mit dem Namen hallo.php unterhalb des Root-Verzeichnisses Ihres Web-Servers mit dem folgenden Inhalt:
Beispiel 2-1.
Unser erstes PHP-Skript: hallo.php
html head title PHP-Test / title / head body ?php echo "Hallo Welt p";? / body / html
Dieses Skript wird folgende Ausgabe erzeugen:
Beachten Sie, dass dies nicht mit einem CGI-Skript vergleichbar ist.
Stellen Sie sich die Datei wie eine normale HTML-Datei vor, die eine spezielle Menge von Tags zur Verfügung stellt, mit denen Sie viele interessante Dinge machen können.
Das Beispiel ist extrem einfach und natürlich brauchen Sie PHP nicht, um eine Seite wie diese zu erstellen.
Denn es macht nicht mehr, als Hallo Welt mit der echo() -Anweisung von PHP auszugeben.
Wenn Sie dieses Beispiel ausprobiert haben und Sie aber keine Ausgabe erhalten haben oder zum Download aufgefordert worden sind oder die komplette Datei als Text erhalten haben, dann ist es sehr wahrscheinlich, dass auf Ihrem Server PHP nicht aktiviert ist.
Fragen Sie in diesem Fall Ihren Administrator und weisen Sie ihn auf das Installations-Kapitel hin.
Wenn Sie PHP-Skripte lokal entwickeln möchten, dann schauen Sie auf die Download-Seite.
Sie können lokal auf jedem Betriebssystem entwickeln, aber sie müssen natürlich auch einen passenden Web-Server installieren.
Der wichtigste Punkt im Beispiel ist, Ihnen das spezielle PHP Tag-Format zu zeigen.
Im Beispiel wurde ?php verwendet, um den Beginn eines PHP-Tags zu kennzeichnen.
Anschließend folgte die PHP-Anweisung.
Mit dem schließenden Tag,?, wurde der PHP-Modus wieder verlassen.
Sie können an jeder Stelle und so oft Sie wollen, in den PHP-Modus wechseln und ihn wieder verlassen.
Anmerkung zu Text-Editoren:
Es gibt eine ganze Reihe von Text-Editoren und Integrated Development Environments (IDEs), mit denen Sie Ihre PHP-Dateien erstellen, bearbeiten und managen können.
Eine Liste solcher Programme finden Sie hier:
Wenn Sie einen Editor vorschlagen möchten, besuchen Sie bitte die genannte Seite und bitten Sie den Betreiber der Seite, dass er den Editor der Liste hinzufügt.
Anmerkung zu Textverarbeitungen:
Textverarbeitungen wie StarOffice Writer, Microsoft Word und Abiword sind keine gute Wahl, um PHP-Dateien zu bearbeiten.
Wenn Sie eines dieser Programme für dieses Test-Skript nutzen möchten, dann müssen Sie sicherstellen, dass die Datei als "Nur Text "-Datei gespeichert wird, da PHP sonst das Skript nicht lesen und nicht ausführen kann.
Wenn Sie Ihre PHP-Skripte mit Notepad schreiben, müssen Sie sicherstellen, dass Ihre Dateien mit der Endung .php gespeichert werden. (Notepad fügt die Endung .txt automatisch an den Dateinamen an, wenn Sie das nicht mit einem der folgenden Schritte verhindern.)
Wenn Sie die Datei speichern und einen Namen für die Datei eingeben sollen, dann setzen Sie den Dateinamen in Anführungszeichen (z.B. "hallo.php ").
Alternativ können Sie auch im "Datei speichern"-Fenster in der Drop-Down-Liste "Dateityp" die Einstellung auf "Alle Dateien "ändern.
Sie können dann den Dateinamen ohne Anführungszeichen eingeben.
Zurück
Zum Anfang
Nach vorne
Kleines Tutorial
Nach oben
Nützliches
PHP Handbuch
Zurück
Kapitel 2.
Kleines Tutorial
Nach vorne
Eine der mächtigsten Funktionen von PHP ist die Art, wie HTML-Formulare verarbeitet werden.
Sie sollten wissen, dass jedes Element eines Formulars automatisch in Ihren PHP-Skripts verfügbar ist.
Bitte lesen Sie die Seite Variablen außerhalb von PHP für weitere Informationen und Beispiele über das Benutzen von Formularen mit PHP.
Hier ist ein Beispiel-HTML-Formular:
Beispiel 2-6.
Ein einfaches HTML-Formular
form action=" action.php "method="POST" Ihr Name: input type="text "name="name" / Ihr Alter: input type="text "name="alter" / input type="submit "/ form
An diesem Formular ist nichts Besonderes.
Es ist ein normales HTML-Formular ohne irgendwelche speziellen Tags.
Wenn der Benutzer das Formular ausfüllt und den Submit-Button anklickt, wird die Seite action.php Wenn der Benutzer das Formular ausfüllt und den Submit-Button anklickt, wird die Seite action.php aufgerufen.
Diese Datei könnte so aussehen:
Beispiel 2-7.
Daten des Formulars ausgeben
Hallo ?php echo $_POST[ "name"];?.
Jahre alt.
Die Ausgabe des Skripts könnte dann so aussehen:
Hallo Joe.
Sie sind 22 Jahre alt.
Es sollte einfach zu verstehen sein, was hier passiert.
Die Variablen $_POST[ "name"] und $_POST["alter"] werden für Sie automatisch von PHP gesetzt.
Weiter oben haben wir das autoglobale Array $_SERVER eingeführt, jetzt benutzen wir hier das - ebenfalls autoglobale - Array $_POST, dass alle POST-Daten enthält.
Beachten Sie, dass die im Formular verwendete Methode POST ist.
Hätten wir GET verwendet, dann wären die Daten unseres Formulars stattdessen im autoglobalen Array $_GET verfügbar.
Sie können auch das autoglobale Array $_REQUEST benutzen, wenn die Quelle der Daten keine Rolle spielt.
Dieses Array enthält die GET-, POST-, COOKIE - und FILE-Daten.
Vgl. auch die import_request_variables() -Funktion.
Zurück
Zum Anfang
Nach vorne
Nützliches
Nach oben
Alten Code mit neuen PHP-Versionen benutzen
PHP Handbuch
Zurück
Nach vorne
Auf diesen Seiten möchten wir Ihnen die Grundlagen von PHP in einem kleinen Tutorial vorstellen.
Dieser Text behandelt nur das Erstellen von dynamischen Web-Seiten, obwohl PHP natürlich nicht nur dafür geeignet ist.
Weitere Informationen finden Sie im Abschnitt Was kann PHP?.
Mit PHP erweiterte Web-Seiten werden wie normale HTML-Seiten behandelt.
Sie können sie genauso wie normale HTML-Seiten erstellen und bearbeiten.
In diesem Tutorial gehen wir davon aus, dass auf Ihrem Server die PHP-Unterstützung aktiviert ist und dass die Dateiendung .php PHP zugeordnet ist.
Auf den meisten Servern ist dies die Standardeinstellung für PHP-Dateien, aber fragen Sie bitte Ihren Server-Administrator, um sicherzugehen.
Wenn Ihr Server PHP unterstützt, müssen Sie nichts machen.
Erstellen Sie einfach Ihre .php -Dateien und legen Sie diese in Ihr Web-Verzeichnis - der Server wird sie dann für Sie parsen.
Sie müssen nichts kompilieren und auch keine Zusatz-Tools installieren.
Stellen Sie sich diese PHP-erweiterten Dateien wie normale HTML-Seiten mit einer ganzen Familie von "magischen" Tags, die Sie verschiedenste Dinge tun lassen, vor.
Zurück
Zum Anfang
Nach vorne
Was kann PHP?
Nach oben
Ihre erste PHP-erweiterte Seite
PHP Handbuch
Zurück
Kapitel 2.
Kleines Tutorial
Nach vorne
Die PHP-Entwickler haben versucht, den größten Teil der Sprache abwärtskompatibel zu halten.
In der Praxis sind aber meist einige Änderungen nötig.
Zwei der wichtigsten aktuellen Änderungen, die alten Code betreffen, sind:
Die Missbilligung der alten $HTTP_*_VARS -Arrays (die global gemacht werden mussten, wenn man sie innerhalb einer Funktion nutzen wollte).
In PHP 4.1.0 wurden die folgenden autoglobalen Arrays eingeführt: $_GET, $_POST, $_COOKIE, $_SERVER, $_ENV, $_REQUEST und $_SESSION.
Die älteren $HTTP_*_VARS -Arrays, wie $HTTP_POST_VARS, existierten bereits seit PHP 3 und sind auch immer noch verfügbar.
Externe Variablen werden standardmäßig nicht mehr im globalen Namensraum registriert.
Mit anderen Worten, seit PHP 4.2.0 ist off die Standard-Einstellung für die PHP-Direktive register_globals.
Die empfohlene Methode, auf diese Werte zuzugreifen, ist, die oben genannten autoglobalen Arrays zu verwenden.
Ältere Skripte, Bücher und Tutorials gehen eventuell davon aus, dass diese Einstellung auf on Ältere Skripte, Bücher und Tutorials gehen eventuell davon aus, dass diese Einstellung auf on steht.
Wäre die Einstellung on, wäre die Variable $id aus der URL http: / /www.example.com / foo.php?id=42 verfügbar.
Unabhängig davon, ob on oder off, ist immer $_GET[ 'id'] verfügbar.
Zurück
Zum Anfang
Nach vorne
Formulare verarbeiten
Nach oben
Und weiter?
PHP Handbuch
Zurück
Kapitel 2.
Kleines Tutorial
Nach vorne
Kommen wir nun zu einem etwas nützlicheren Beispiel.
Wir wollen prüfen, welchen Browser die Person, die die Seite besucht, benutzt.
Um das zu tun, prüfen wir den "user agent "-String, den der Browser als Teil seiner HTTP-Anforderung sendet.
Diese Information ist in einer Variablen abgelegt.
In PHP beginnen Variablen immer mit einem Dollar-Zeichen.
Die Variable, die uns jetzt interessiert, ist $_SERVER[ "HTTP_USER_AGENT"].
Diese Variable wird auch als auto - oder superglobal bezeichnet.
Mehr Informationen darüber Sie auf der Manual-Seite über Autoglobals.
Diese speziellen Variablen wurden in PHP 4.1.0 eingeführt.
Vorher wurden stattdessen die älteren $HTTP_*_VARS -Arrays benutzt, also z.B. $HTTP_SERVER_VARS.
Auch wenn diese Variablen nicht mehr genutzt werden sollen - sie existieren weiterhin. (Beachten Sie auch die Seite Alten Code mit neuen PHP-Versionen benutzen.)
Um die Variable auszugeben, schreiben wir einfach:
Beispiel 2-2.
Variable ausgeben (Array-Element)
Die Ausgabe dieses Beispiel könnte so aussehen:
Es gibt viele Typen Es gibt viele Typen von Variablen.
Im obigen Beispiel haben wir ein Array -Element ausgegeben.
Arrays können sehr nützlich sein.
$_SERVER ist nur eine von vielen Variablen, die Ihnen automatisch von PHP zur Verfügung gestellt werden.
Eine vollständige Liste können Sie auch bekommen, wenn Sie eine Datei wie die folgende erstellen:
Beispiel 2-3.
Alle vordefinierten Variablen mit phpinfo() ausgeben
Wenn Sie diese Datei in Ihrem Browser öffnen, sehen Sie eine Seite mit vielen Informationen über PHP zusammen mit einer Liste aller für Sie verfügbaren Variablen.
Sie können mehrere PHP-Anweisungen innerhalb eines PHP-Tags platzieren und so kleine Code-Blöcke schreiben, die mehr als nur eine Ausgabe mit echo() enthalten.
Wenn wir zum Beispiel prüfen möchten, ob es sich beim Browser des Besuchers um den Internet Explorer handelt, können wir folgenden Code benutzen:
Beispiel 2-4.
Beispiel, das Kontrollstrukturen und Funktionen benutzt
?php if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {echo "Sie benutzen Internet Explorer br / ";}?
Die Ausgabe dieses Skripte könnte so aussehen:
Sie benutzen Internet Explorer br /
Hier haben wir Ihnen eine ganze Reihe von neuen Konzepten vorgestellt.
Wir haben hier zuerst eine if -Anweisung.
Wenn Sie mit der Grundlagen-Syntax von der Programmiersprache C vertraut sind, sollte Ihnen dies logisch erscheinen.
Sie können natürlich auch in die Sprachreferenz des Manuals schauen.
Eine Liste von PHP-Büchern finden Sie unter http: / /www.php.net / books.php.
Das zweite hier vorgestellte Konzept ist der Aufruf der Funktion strstr(). strstr ist eine in PHP eingebaute Funktion, die nach einem String in einem anderen String sucht.
In diesem Fall suchen wir nach "MSIE" in $_SERVER["HTTP_USER_AGENT"].
Wenn der String gefunden wird, gibt die Funktion TRUE zurück, wird er nicht gefunden, dann wird FALSE zurückgegeben.
Wenn TRUE zurückgeben wird, wird die if -Anweisung zu TRUE Wenn TRUE zurückgeben wird, wird die if -Anweisung zu TRUE ausgewertet und der Code innerhalb der geschweiften Klammern wird ausgeführt.
Wenn aber FALSE zurückgegeben wird, wird der Code innerhalb der Klammern nicht ausgeführt.
Probieren Sie weitere ähnliche Beispiele mit if, else und anderen Funktionen wie strtoupper() oder strlen().
Jede dieser Manual-Seiten enthält weitere Beispiele.
Wir können jetzt einen Schritt weitergehen und sehen, wie Sie innerhalb eines PHP-Blocks den PHP-Modus verlassen und wieder in ihn hinein gelangen können:
Beispiel 2-5.
HTML - und PHP-Modus vermischt
?php if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {? h3 strstr muss true zurückgegeben haben / h3 center b Sie benutzen Internet Explorer / b / center ?php} else {? h3 strstr muss false zurückgegeben haben / h3 center b Sie benutzen nicht Internet Explorer / b / center ?php}?
Die Ausgabe dieses Skripts könnte so aussehen:
h3 strstr muss true zurückgegeben haben / h3 center b Sie benutzen Internet Explorer / b / center
Anstatt die PHP echo -Anweisung für die Ausgabe zu benutzen, haben wir den PHP-Modus verlassen und normales HTML verwendet.
Der wichtige Punkt hierbei ist, dass der logische Ablauf des Skripts dadurch nicht gestört wird.
Nur einer der beiden HTML-Blöcke wird ausgegeben - abhängig davon, ob strstr() TRUE oder FALSE zurückgibt bzw. ob der String MSIE gefunden wird oder nicht.
Zurück
Zum Anfang
Nach vorne
Ihre erste PHP-erweiterte Seite
Nach oben
Formulare verarbeiten
PHP Handbuch
Zurück
Kapitel 2.
Kleines Tutorial
Nach vorne
Mit dem Wissen, das Sie jetzt haben, sollte es Ihnen möglich sein, das meiste aus diesem Manual und die vielen Beispiel-Skripte in den Beispiel-Archiven zu verstehen.
Sie können weitere auf den php.net-Seiten verfügbare Beispiele auf der folgenden Seite finden: http: / /www.php.net / links.php.
Zurück
Zum Anfang
Nach vorne
Alten Code mit neuen PHP-Versionen benutzen
Nach oben
PHP Handbuch
Zurück
Anhang I.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Anhang I.
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Liste von Ressourcentypen
Nach oben
PHP Handbuch
Zurück
Anhang I.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
A set of macros was introduced into Zend' s API that simplify access to zval containers (see Tabelle 42-1).
Tabelle 42-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 32.
Nach vorne
To work around this, you have to use a set of API functions to force a type conversion on every argument that' s being passed (see Tabelle 32-1).
Tabelle 32-1.
Anmerkung:
Abbildung 32-2 shows the output.
Abbildung 32-2.
Beispiel 32-2.
For a description of both structures, see Tabelle 32-2, Tabelle 32-3 and Tabelle 32-4.
Tabelle 32-2.
See Tabelle 32-3 for a description.
For a list of available types, see Tabelle 32-4.
Tabelle 32-3.
Tabelle 32-4.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 32.
Nach vorne
Examples are given in in Beispiel 32-3.
Beispiel 32-3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 32.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Abbildung 32-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 32.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 32.
Nach vorne
A very clever implementation of this can be found in the code handling PHP' s fsockopen() located in ext / standard / fsock.c, as shown in Beispiel 32-1.
Beispiel 32-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 32.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
The default config.m4 shown in Beispiel 27-1 is a bit more complex:
Beispiel 27-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 38-1 shows a small demonstration of calling a user function.
Beispiel 38-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
PHP defines a set of macros that can be used in this process, the most useful of which are described in Tabelle 41-1.
Tabelle 41-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 28-1 shows the source.
Beispiel 28-1.
Anmerkung:
The module shown earlier in Beispiel 28-1 can be enabled with --enable-first_module or --enable-first_module=yes.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Duplicating Variable Contents:
API Macros
Zurück
Nach vorne
PHP Handbuch
Zurück
Nach vorne
Access to initialization entries can also be handled with the macros shown in Tabelle 39-1.
Tabelle 39-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 26.
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 26.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 26.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 26.
Nach vorne
Warnung
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 26.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
This might sound a bit confusing at first, but it' s not that complicated (see Abbildung 24-1).
Abbildung 24-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 25.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 25.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
As shown in Abbildung 24-1 As shown in Abbildung 24-1 above, PHP can be extended primarily at three points: external modules, built-in modules, and the Zend engine.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 36.
Nach vorne
For examples of these functions, see Beispiel 36-2.
Beispiel 36-2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 36.
Nach vorne
Beispiel 36-1 shows a source example and its output.
Beispiel 36-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 36.
Nach vorne
Tabelle 36-1.
Abbildung 36-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
These macros automatically set the correspondent type and value, as described in Tabelle 35-1 and Tabelle 35-2.
Anmerkung:
The macros in Tabelle 35-1 automatically return from your function, those in Tabelle 35-2 only set the return value; they don 't return from your function.
Tabelle 35-1.
Tabelle 35-2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 31.
Nach vorne
The parameter list of this declaration is very important; you should keep these parameters in mind (see Tabelle 31-1 for descriptions).
Tabelle 31-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 31.
Nach vorne
Internally, zend_function_entry is defined as shown in Beispiel 31-1.
Beispiel 31-1.
Anmerkung:
Tabelle 31-2 shows a list of all the macros that you can use to define functions.
Tabelle 31-2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 31.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 31.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 31.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 31.
Nach vorne
You can see the internal definition of this module in Beispiel 31-2.
Beispiel 31-2.
For reference purposes, you can find a list of the macros involved in declared startup and shutdown functions in Tabelle 31-3.
Tabelle 31-3.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 31.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
For a simple test procedure, you can copy it to your htdocs directory and try it with the source in Beispiel 29-1.
Warnung
Beispiel 29-1.
Calling this PHP file in your Web browser should give you the output shown in Abbildung 29-1.
Abbildung 29-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
Tabelle 33-1, Tabelle 33-2 and Tabelle 33-3 describe these functions.
Tabelle 33-1.
Tabelle 33-2.
Tabelle 33-3.
This is done using zend_hash_update( )() for associative arrays (see Beispiel 33-3) and zend_hash_index_update() for indexed arrays (see Beispiel 33-4):
Beispiel 33-3.
Beispiel 33-4.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
To create your own constants, you can use the macros in Tabelle 33-6.
Tabelle 33-6.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
This is somewhat bad practice, but Table Tabelle 33-5 describes macros that do exactly this task.
Tabelle 33-5.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Beispiel 33-1.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
The corresponding type value for longs is IS_LONG (see Beispiel 33-2).
Beispiel 33-2.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
Tabelle 33-4.
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
Anmerkung:
Anmerkung:
Anmerkung:
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Kapitel 33.
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
PHP Handbuch
Zurück
Nach vorne
Zurück
Zum Anfang
Nach vorne
Nach oben
